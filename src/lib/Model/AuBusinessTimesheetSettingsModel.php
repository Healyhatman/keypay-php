<?php
/**
 * AuBusinessTimesheetSettingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuBusinessTimesheetSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuBusinessTimesheetSettingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuBusinessTimesheetSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_to_select_higher_classification' => 'bool',
        'require_start_and_stop_times' => 'bool',
        'require_work_type' => 'bool',
        'can_set_require_work_type_setting' => 'bool',
        'require_location' => 'bool',
        'include_all_timesheet_notes_in_pay_run' => 'bool',
        'timesheet_rejection_notifications' => 'bool',
        'managers_can_create_timesheets_for_employees_that_are_not_enabled' => 'bool',
        'timesheets_enabled' => 'bool',
        'approve_if_matches_roster_shift' => 'bool',
        'allow_paid_breaks' => 'bool',
        'has_maximum_paid_break_duration' => 'bool',
        'maximum_paid_break_duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_to_select_higher_classification' => null,
        'require_start_and_stop_times' => null,
        'require_work_type' => null,
        'can_set_require_work_type_setting' => null,
        'require_location' => null,
        'include_all_timesheet_notes_in_pay_run' => null,
        'timesheet_rejection_notifications' => null,
        'managers_can_create_timesheets_for_employees_that_are_not_enabled' => null,
        'timesheets_enabled' => null,
        'approve_if_matches_roster_shift' => null,
        'allow_paid_breaks' => null,
        'has_maximum_paid_break_duration' => null,
        'maximum_paid_break_duration' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_to_select_higher_classification' => false,
		'require_start_and_stop_times' => false,
		'require_work_type' => false,
		'can_set_require_work_type_setting' => false,
		'require_location' => false,
		'include_all_timesheet_notes_in_pay_run' => false,
		'timesheet_rejection_notifications' => false,
		'managers_can_create_timesheets_for_employees_that_are_not_enabled' => false,
		'timesheets_enabled' => false,
		'approve_if_matches_roster_shift' => false,
		'allow_paid_breaks' => false,
		'has_maximum_paid_break_duration' => false,
		'maximum_paid_break_duration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_to_select_higher_classification' => 'allowToSelectHigherClassification',
        'require_start_and_stop_times' => 'requireStartAndStopTimes',
        'require_work_type' => 'requireWorkType',
        'can_set_require_work_type_setting' => 'canSetRequireWorkTypeSetting',
        'require_location' => 'requireLocation',
        'include_all_timesheet_notes_in_pay_run' => 'includeAllTimesheetNotesInPayRun',
        'timesheet_rejection_notifications' => 'timesheetRejectionNotifications',
        'managers_can_create_timesheets_for_employees_that_are_not_enabled' => 'managersCanCreateTimesheetsForEmployeesThatAreNotEnabled',
        'timesheets_enabled' => 'timesheetsEnabled',
        'approve_if_matches_roster_shift' => 'approveIfMatchesRosterShift',
        'allow_paid_breaks' => 'allowPaidBreaks',
        'has_maximum_paid_break_duration' => 'hasMaximumPaidBreakDuration',
        'maximum_paid_break_duration' => 'maximumPaidBreakDuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_to_select_higher_classification' => 'setAllowToSelectHigherClassification',
        'require_start_and_stop_times' => 'setRequireStartAndStopTimes',
        'require_work_type' => 'setRequireWorkType',
        'can_set_require_work_type_setting' => 'setCanSetRequireWorkTypeSetting',
        'require_location' => 'setRequireLocation',
        'include_all_timesheet_notes_in_pay_run' => 'setIncludeAllTimesheetNotesInPayRun',
        'timesheet_rejection_notifications' => 'setTimesheetRejectionNotifications',
        'managers_can_create_timesheets_for_employees_that_are_not_enabled' => 'setManagersCanCreateTimesheetsForEmployeesThatAreNotEnabled',
        'timesheets_enabled' => 'setTimesheetsEnabled',
        'approve_if_matches_roster_shift' => 'setApproveIfMatchesRosterShift',
        'allow_paid_breaks' => 'setAllowPaidBreaks',
        'has_maximum_paid_break_duration' => 'setHasMaximumPaidBreakDuration',
        'maximum_paid_break_duration' => 'setMaximumPaidBreakDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_to_select_higher_classification' => 'getAllowToSelectHigherClassification',
        'require_start_and_stop_times' => 'getRequireStartAndStopTimes',
        'require_work_type' => 'getRequireWorkType',
        'can_set_require_work_type_setting' => 'getCanSetRequireWorkTypeSetting',
        'require_location' => 'getRequireLocation',
        'include_all_timesheet_notes_in_pay_run' => 'getIncludeAllTimesheetNotesInPayRun',
        'timesheet_rejection_notifications' => 'getTimesheetRejectionNotifications',
        'managers_can_create_timesheets_for_employees_that_are_not_enabled' => 'getManagersCanCreateTimesheetsForEmployeesThatAreNotEnabled',
        'timesheets_enabled' => 'getTimesheetsEnabled',
        'approve_if_matches_roster_shift' => 'getApproveIfMatchesRosterShift',
        'allow_paid_breaks' => 'getAllowPaidBreaks',
        'has_maximum_paid_break_duration' => 'getHasMaximumPaidBreakDuration',
        'maximum_paid_break_duration' => 'getMaximumPaidBreakDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_to_select_higher_classification', $data ?? [], null);
        $this->setIfExists('require_start_and_stop_times', $data ?? [], null);
        $this->setIfExists('require_work_type', $data ?? [], null);
        $this->setIfExists('can_set_require_work_type_setting', $data ?? [], null);
        $this->setIfExists('require_location', $data ?? [], null);
        $this->setIfExists('include_all_timesheet_notes_in_pay_run', $data ?? [], null);
        $this->setIfExists('timesheet_rejection_notifications', $data ?? [], null);
        $this->setIfExists('managers_can_create_timesheets_for_employees_that_are_not_enabled', $data ?? [], null);
        $this->setIfExists('timesheets_enabled', $data ?? [], null);
        $this->setIfExists('approve_if_matches_roster_shift', $data ?? [], null);
        $this->setIfExists('allow_paid_breaks', $data ?? [], null);
        $this->setIfExists('has_maximum_paid_break_duration', $data ?? [], null);
        $this->setIfExists('maximum_paid_break_duration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_to_select_higher_classification
     *
     * @return bool|null
     */
    public function getAllowToSelectHigherClassification()
    {
        return $this->container['allow_to_select_higher_classification'];
    }

    /**
     * Sets allow_to_select_higher_classification
     *
     * @param bool|null $allow_to_select_higher_classification 
     *
     * @return self
     */
    public function setAllowToSelectHigherClassification($allow_to_select_higher_classification)
    {
        if (is_null($allow_to_select_higher_classification)) {
            throw new \InvalidArgumentException('non-nullable allow_to_select_higher_classification cannot be null');
        }
        $this->container['allow_to_select_higher_classification'] = $allow_to_select_higher_classification;

        return $this;
    }

    /**
     * Gets require_start_and_stop_times
     *
     * @return bool|null
     */
    public function getRequireStartAndStopTimes()
    {
        return $this->container['require_start_and_stop_times'];
    }

    /**
     * Sets require_start_and_stop_times
     *
     * @param bool|null $require_start_and_stop_times 
     *
     * @return self
     */
    public function setRequireStartAndStopTimes($require_start_and_stop_times)
    {
        if (is_null($require_start_and_stop_times)) {
            throw new \InvalidArgumentException('non-nullable require_start_and_stop_times cannot be null');
        }
        $this->container['require_start_and_stop_times'] = $require_start_and_stop_times;

        return $this;
    }

    /**
     * Gets require_work_type
     *
     * @return bool|null
     */
    public function getRequireWorkType()
    {
        return $this->container['require_work_type'];
    }

    /**
     * Sets require_work_type
     *
     * @param bool|null $require_work_type 
     *
     * @return self
     */
    public function setRequireWorkType($require_work_type)
    {
        if (is_null($require_work_type)) {
            throw new \InvalidArgumentException('non-nullable require_work_type cannot be null');
        }
        $this->container['require_work_type'] = $require_work_type;

        return $this;
    }

    /**
     * Gets can_set_require_work_type_setting
     *
     * @return bool|null
     */
    public function getCanSetRequireWorkTypeSetting()
    {
        return $this->container['can_set_require_work_type_setting'];
    }

    /**
     * Sets can_set_require_work_type_setting
     *
     * @param bool|null $can_set_require_work_type_setting 
     *
     * @return self
     */
    public function setCanSetRequireWorkTypeSetting($can_set_require_work_type_setting)
    {
        if (is_null($can_set_require_work_type_setting)) {
            throw new \InvalidArgumentException('non-nullable can_set_require_work_type_setting cannot be null');
        }
        $this->container['can_set_require_work_type_setting'] = $can_set_require_work_type_setting;

        return $this;
    }

    /**
     * Gets require_location
     *
     * @return bool|null
     */
    public function getRequireLocation()
    {
        return $this->container['require_location'];
    }

    /**
     * Sets require_location
     *
     * @param bool|null $require_location 
     *
     * @return self
     */
    public function setRequireLocation($require_location)
    {
        if (is_null($require_location)) {
            throw new \InvalidArgumentException('non-nullable require_location cannot be null');
        }
        $this->container['require_location'] = $require_location;

        return $this;
    }

    /**
     * Gets include_all_timesheet_notes_in_pay_run
     *
     * @return bool|null
     */
    public function getIncludeAllTimesheetNotesInPayRun()
    {
        return $this->container['include_all_timesheet_notes_in_pay_run'];
    }

    /**
     * Sets include_all_timesheet_notes_in_pay_run
     *
     * @param bool|null $include_all_timesheet_notes_in_pay_run 
     *
     * @return self
     */
    public function setIncludeAllTimesheetNotesInPayRun($include_all_timesheet_notes_in_pay_run)
    {
        if (is_null($include_all_timesheet_notes_in_pay_run)) {
            throw new \InvalidArgumentException('non-nullable include_all_timesheet_notes_in_pay_run cannot be null');
        }
        $this->container['include_all_timesheet_notes_in_pay_run'] = $include_all_timesheet_notes_in_pay_run;

        return $this;
    }

    /**
     * Gets timesheet_rejection_notifications
     *
     * @return bool|null
     */
    public function getTimesheetRejectionNotifications()
    {
        return $this->container['timesheet_rejection_notifications'];
    }

    /**
     * Sets timesheet_rejection_notifications
     *
     * @param bool|null $timesheet_rejection_notifications 
     *
     * @return self
     */
    public function setTimesheetRejectionNotifications($timesheet_rejection_notifications)
    {
        if (is_null($timesheet_rejection_notifications)) {
            throw new \InvalidArgumentException('non-nullable timesheet_rejection_notifications cannot be null');
        }
        $this->container['timesheet_rejection_notifications'] = $timesheet_rejection_notifications;

        return $this;
    }

    /**
     * Gets managers_can_create_timesheets_for_employees_that_are_not_enabled
     *
     * @return bool|null
     */
    public function getManagersCanCreateTimesheetsForEmployeesThatAreNotEnabled()
    {
        return $this->container['managers_can_create_timesheets_for_employees_that_are_not_enabled'];
    }

    /**
     * Sets managers_can_create_timesheets_for_employees_that_are_not_enabled
     *
     * @param bool|null $managers_can_create_timesheets_for_employees_that_are_not_enabled 
     *
     * @return self
     */
    public function setManagersCanCreateTimesheetsForEmployeesThatAreNotEnabled($managers_can_create_timesheets_for_employees_that_are_not_enabled)
    {
        if (is_null($managers_can_create_timesheets_for_employees_that_are_not_enabled)) {
            throw new \InvalidArgumentException('non-nullable managers_can_create_timesheets_for_employees_that_are_not_enabled cannot be null');
        }
        $this->container['managers_can_create_timesheets_for_employees_that_are_not_enabled'] = $managers_can_create_timesheets_for_employees_that_are_not_enabled;

        return $this;
    }

    /**
     * Gets timesheets_enabled
     *
     * @return bool|null
     */
    public function getTimesheetsEnabled()
    {
        return $this->container['timesheets_enabled'];
    }

    /**
     * Sets timesheets_enabled
     *
     * @param bool|null $timesheets_enabled 
     *
     * @return self
     */
    public function setTimesheetsEnabled($timesheets_enabled)
    {
        if (is_null($timesheets_enabled)) {
            throw new \InvalidArgumentException('non-nullable timesheets_enabled cannot be null');
        }
        $this->container['timesheets_enabled'] = $timesheets_enabled;

        return $this;
    }

    /**
     * Gets approve_if_matches_roster_shift
     *
     * @return bool|null
     */
    public function getApproveIfMatchesRosterShift()
    {
        return $this->container['approve_if_matches_roster_shift'];
    }

    /**
     * Sets approve_if_matches_roster_shift
     *
     * @param bool|null $approve_if_matches_roster_shift 
     *
     * @return self
     */
    public function setApproveIfMatchesRosterShift($approve_if_matches_roster_shift)
    {
        if (is_null($approve_if_matches_roster_shift)) {
            throw new \InvalidArgumentException('non-nullable approve_if_matches_roster_shift cannot be null');
        }
        $this->container['approve_if_matches_roster_shift'] = $approve_if_matches_roster_shift;

        return $this;
    }

    /**
     * Gets allow_paid_breaks
     *
     * @return bool|null
     */
    public function getAllowPaidBreaks()
    {
        return $this->container['allow_paid_breaks'];
    }

    /**
     * Sets allow_paid_breaks
     *
     * @param bool|null $allow_paid_breaks 
     *
     * @return self
     */
    public function setAllowPaidBreaks($allow_paid_breaks)
    {
        if (is_null($allow_paid_breaks)) {
            throw new \InvalidArgumentException('non-nullable allow_paid_breaks cannot be null');
        }
        $this->container['allow_paid_breaks'] = $allow_paid_breaks;

        return $this;
    }

    /**
     * Gets has_maximum_paid_break_duration
     *
     * @return bool|null
     */
    public function getHasMaximumPaidBreakDuration()
    {
        return $this->container['has_maximum_paid_break_duration'];
    }

    /**
     * Sets has_maximum_paid_break_duration
     *
     * @param bool|null $has_maximum_paid_break_duration 
     *
     * @return self
     */
    public function setHasMaximumPaidBreakDuration($has_maximum_paid_break_duration)
    {
        if (is_null($has_maximum_paid_break_duration)) {
            throw new \InvalidArgumentException('non-nullable has_maximum_paid_break_duration cannot be null');
        }
        $this->container['has_maximum_paid_break_duration'] = $has_maximum_paid_break_duration;

        return $this;
    }

    /**
     * Gets maximum_paid_break_duration
     *
     * @return int|null
     */
    public function getMaximumPaidBreakDuration()
    {
        return $this->container['maximum_paid_break_duration'];
    }

    /**
     * Sets maximum_paid_break_duration
     *
     * @param int|null $maximum_paid_break_duration 
     *
     * @return self
     */
    public function setMaximumPaidBreakDuration($maximum_paid_break_duration)
    {
        if (is_null($maximum_paid_break_duration)) {
            throw new \InvalidArgumentException('non-nullable maximum_paid_break_duration cannot be null');
        }
        $this->container['maximum_paid_break_duration'] = $maximum_paid_break_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


