<?php
/**
 * EssCurrentShiftModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EssCurrentShiftModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EssCurrentShiftModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EssCurrentShiftModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shift_id' => 'int',
        'clock_on_time_utc' => '\DateTime',
        'break_start_time_utc' => '\DateTime',
        'status' => 'string',
        'long_shift' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shift_id' => 'int32',
        'clock_on_time_utc' => 'date-time',
        'break_start_time_utc' => 'date-time',
        'status' => null,
        'long_shift' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shift_id' => 'shiftId',
        'clock_on_time_utc' => 'clockOnTimeUtc',
        'break_start_time_utc' => 'breakStartTimeUtc',
        'status' => 'status',
        'long_shift' => 'longShift'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shift_id' => 'setShiftId',
        'clock_on_time_utc' => 'setClockOnTimeUtc',
        'break_start_time_utc' => 'setBreakStartTimeUtc',
        'status' => 'setStatus',
        'long_shift' => 'setLongShift'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shift_id' => 'getShiftId',
        'clock_on_time_utc' => 'getClockOnTimeUtc',
        'break_start_time_utc' => 'getBreakStartTimeUtc',
        'status' => 'getStatus',
        'long_shift' => 'getLongShift'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_NOT_CLOCKED_ON = 'NotClockedOn';
    const STATUS_CLOCKED_ON = 'ClockedOn';
    const STATUS_ON_BREAK = 'OnBreak';
    const STATUS_CLOCKED_OFF = 'ClockedOff';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_CLOCKED_ON,
            self::STATUS_CLOCKED_ON,
            self::STATUS_ON_BREAK,
            self::STATUS_CLOCKED_OFF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shift_id'] = isset($data['shift_id']) ? $data['shift_id'] : null;
        $this->container['clock_on_time_utc'] = isset($data['clock_on_time_utc']) ? $data['clock_on_time_utc'] : null;
        $this->container['break_start_time_utc'] = isset($data['break_start_time_utc']) ? $data['break_start_time_utc'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['long_shift'] = isset($data['long_shift']) ? $data['long_shift'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shift_id
     *
     * @return int
     */
    public function getShiftId()
    {
        return $this->container['shift_id'];
    }

    /**
     * Sets shift_id
     *
     * @param int $shift_id 
     *
     * @return $this
     */
    public function setShiftId($shift_id)
    {
        $this->container['shift_id'] = $shift_id;

        return $this;
    }

    /**
     * Gets clock_on_time_utc
     *
     * @return \DateTime
     */
    public function getClockOnTimeUtc()
    {
        return $this->container['clock_on_time_utc'];
    }

    /**
     * Sets clock_on_time_utc
     *
     * @param \DateTime $clock_on_time_utc 
     *
     * @return $this
     */
    public function setClockOnTimeUtc($clock_on_time_utc)
    {
        $this->container['clock_on_time_utc'] = $clock_on_time_utc;

        return $this;
    }

    /**
     * Gets break_start_time_utc
     *
     * @return \DateTime
     */
    public function getBreakStartTimeUtc()
    {
        return $this->container['break_start_time_utc'];
    }

    /**
     * Sets break_start_time_utc
     *
     * @param \DateTime $break_start_time_utc 
     *
     * @return $this
     */
    public function setBreakStartTimeUtc($break_start_time_utc)
    {
        $this->container['break_start_time_utc'] = $break_start_time_utc;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets long_shift
     *
     * @return bool
     */
    public function getLongShift()
    {
        return $this->container['long_shift'];
    }

    /**
     * Sets long_shift
     *
     * @param bool $long_shift 
     *
     * @return $this
     */
    public function setLongShift($long_shift)
    {
        $this->container['long_shift'] = $long_shift;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


