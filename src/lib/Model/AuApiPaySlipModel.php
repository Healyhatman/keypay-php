<?php
/**
 * AuApiPaySlipModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuApiPaySlipModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuApiPaySlipModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuApiPaySlipModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payg_adjustments' => '\OpenAPI\Client\Model\ApiPaySlipPaygAdjustmentModel[]',
        'super_adjustments' => '\OpenAPI\Client\Model\ApiPaySlipSuperAdjustmentModel[]',
        'super_payments' => '\OpenAPI\Client\Model\ApiPaySlipSuperPaymentModel[]',
        'bank_payments' => '\OpenAPI\Client\Model\AuApiPaySlipBankPaymentModel[]',
        'earnings_lines' => '\OpenAPI\Client\Model\AuApiPaySlipEarningsLineModel[]',
        'payg_withholding_amount' => 'float',
        'sfss_amount' => 'float',
        'help_amount' => 'float',
        'super_contribution' => 'float',
        'employee_postal_suburb_name' => 'string',
        'employee_postal_suburb_postcode' => 'string',
        'employee_postal_suburb_state' => 'string',
        'super_ytd' => 'float',
        'sfss_ytd' => 'float',
        'help_ytd' => 'float',
        'payg_ytd' => 'float',
        'abn' => 'string',
        'total_accrued_leave' => '\OpenAPI\Client\Model\ApiPaySlipLeaveModel[]',
        'accrued_leave' => '\OpenAPI\Client\Model\ApiPaySlipLeaveModel[]',
        'leave_taken' => '\OpenAPI\Client\Model\ApiPaySlipLeaveModel[]',
        'deductions' => '\OpenAPI\Client\Model\ApiPaySlipDeductionModel[]',
        'gross_ytd_details' => '\OpenAPI\Client\Model\ApiYearToDateEarningsBreakdownModel[]',
        'employee_expenses' => '\OpenAPI\Client\Model\ApiEmployeeExpenseGridModel[]',
        'total_hours' => 'float',
        'gross_earnings' => 'float',
        'net_earnings' => 'float',
        'taxable_earnings' => 'float',
        'post_tax_deduction_amount' => 'float',
        'pre_tax_deduction_amount' => 'float',
        'id' => 'int',
        'business_name' => 'string',
        'business_address' => 'string',
        'contact_name' => 'string',
        'pay_period_starting' => 'string',
        'pay_period_ending' => 'string',
        'message' => 'string',
        'employee_id' => 'int',
        'employee_external_id' => 'string',
        'employee_name' => 'string',
        'employee_first_name' => 'string',
        'employee_surname' => 'string',
        'employee_postal_street_address' => 'string',
        'employee_postal_address_line2' => 'string',
        'employee_postal_address_country' => 'string',
        'notation' => 'string',
        'is_published' => 'bool',
        'gross_ytd' => 'float',
        'net_ytd' => 'float',
        'withholding_ytd' => 'float',
        'base_pay_rate' => 'string',
        'base_rate' => 'string',
        'hourly_rate' => 'float',
        'pre_tax_deductions_ytd' => 'float',
        'post_tax_deductions_ytd' => 'float',
        'employee_base_rate' => 'float',
        'employee_base_rate_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payg_adjustments' => null,
        'super_adjustments' => null,
        'super_payments' => null,
        'bank_payments' => null,
        'earnings_lines' => null,
        'payg_withholding_amount' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employee_postal_suburb_name' => null,
        'employee_postal_suburb_postcode' => null,
        'employee_postal_suburb_state' => null,
        'super_ytd' => 'double',
        'sfss_ytd' => 'double',
        'help_ytd' => 'double',
        'payg_ytd' => 'double',
        'abn' => null,
        'total_accrued_leave' => null,
        'accrued_leave' => null,
        'leave_taken' => null,
        'deductions' => null,
        'gross_ytd_details' => null,
        'employee_expenses' => null,
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deduction_amount' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'id' => 'int32',
        'business_name' => null,
        'business_address' => null,
        'contact_name' => null,
        'pay_period_starting' => null,
        'pay_period_ending' => null,
        'message' => null,
        'employee_id' => 'int32',
        'employee_external_id' => null,
        'employee_name' => null,
        'employee_first_name' => null,
        'employee_surname' => null,
        'employee_postal_street_address' => null,
        'employee_postal_address_line2' => null,
        'employee_postal_address_country' => null,
        'notation' => null,
        'is_published' => null,
        'gross_ytd' => 'double',
        'net_ytd' => 'double',
        'withholding_ytd' => 'double',
        'base_pay_rate' => null,
        'base_rate' => null,
        'hourly_rate' => 'double',
        'pre_tax_deductions_ytd' => 'double',
        'post_tax_deductions_ytd' => 'double',
        'employee_base_rate' => 'double',
        'employee_base_rate_unit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payg_adjustments' => false,
		'super_adjustments' => false,
		'super_payments' => false,
		'bank_payments' => false,
		'earnings_lines' => false,
		'payg_withholding_amount' => false,
		'sfss_amount' => false,
		'help_amount' => false,
		'super_contribution' => false,
		'employee_postal_suburb_name' => false,
		'employee_postal_suburb_postcode' => false,
		'employee_postal_suburb_state' => false,
		'super_ytd' => false,
		'sfss_ytd' => false,
		'help_ytd' => false,
		'payg_ytd' => false,
		'abn' => false,
		'total_accrued_leave' => false,
		'accrued_leave' => false,
		'leave_taken' => false,
		'deductions' => false,
		'gross_ytd_details' => false,
		'employee_expenses' => false,
		'total_hours' => false,
		'gross_earnings' => false,
		'net_earnings' => false,
		'taxable_earnings' => false,
		'post_tax_deduction_amount' => false,
		'pre_tax_deduction_amount' => false,
		'id' => false,
		'business_name' => false,
		'business_address' => false,
		'contact_name' => false,
		'pay_period_starting' => false,
		'pay_period_ending' => false,
		'message' => false,
		'employee_id' => false,
		'employee_external_id' => false,
		'employee_name' => false,
		'employee_first_name' => false,
		'employee_surname' => false,
		'employee_postal_street_address' => false,
		'employee_postal_address_line2' => false,
		'employee_postal_address_country' => false,
		'notation' => false,
		'is_published' => false,
		'gross_ytd' => false,
		'net_ytd' => false,
		'withholding_ytd' => false,
		'base_pay_rate' => false,
		'base_rate' => false,
		'hourly_rate' => false,
		'pre_tax_deductions_ytd' => false,
		'post_tax_deductions_ytd' => false,
		'employee_base_rate' => false,
		'employee_base_rate_unit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg_adjustments' => 'paygAdjustments',
        'super_adjustments' => 'superAdjustments',
        'super_payments' => 'superPayments',
        'bank_payments' => 'bankPayments',
        'earnings_lines' => 'earningsLines',
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'employee_postal_suburb_name' => 'employeePostalSuburbName',
        'employee_postal_suburb_postcode' => 'employeePostalSuburbPostcode',
        'employee_postal_suburb_state' => 'employeePostalSuburbState',
        'super_ytd' => 'superYTD',
        'sfss_ytd' => 'sfssYTD',
        'help_ytd' => 'helpYTD',
        'payg_ytd' => 'paygYTD',
        'abn' => 'abn',
        'total_accrued_leave' => 'totalAccruedLeave',
        'accrued_leave' => 'accruedLeave',
        'leave_taken' => 'leaveTaken',
        'deductions' => 'deductions',
        'gross_ytd_details' => 'grossYTDDetails',
        'employee_expenses' => 'employeeExpenses',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'net_earnings' => 'netEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'post_tax_deduction_amount' => 'postTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'preTaxDeductionAmount',
        'id' => 'id',
        'business_name' => 'businessName',
        'business_address' => 'businessAddress',
        'contact_name' => 'contactName',
        'pay_period_starting' => 'payPeriodStarting',
        'pay_period_ending' => 'payPeriodEnding',
        'message' => 'message',
        'employee_id' => 'employeeId',
        'employee_external_id' => 'employeeExternalId',
        'employee_name' => 'employeeName',
        'employee_first_name' => 'employeeFirstName',
        'employee_surname' => 'employeeSurname',
        'employee_postal_street_address' => 'employeePostalStreetAddress',
        'employee_postal_address_line2' => 'employeePostalAddressLine2',
        'employee_postal_address_country' => 'employeePostalAddressCountry',
        'notation' => 'notation',
        'is_published' => 'isPublished',
        'gross_ytd' => 'grossYTD',
        'net_ytd' => 'netYTD',
        'withholding_ytd' => 'withholdingYTD',
        'base_pay_rate' => 'basePayRate',
        'base_rate' => 'baseRate',
        'hourly_rate' => 'hourlyRate',
        'pre_tax_deductions_ytd' => 'preTaxDeductionsYTD',
        'post_tax_deductions_ytd' => 'postTaxDeductionsYTD',
        'employee_base_rate' => 'employeeBaseRate',
        'employee_base_rate_unit' => 'employeeBaseRateUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg_adjustments' => 'setPaygAdjustments',
        'super_adjustments' => 'setSuperAdjustments',
        'super_payments' => 'setSuperPayments',
        'bank_payments' => 'setBankPayments',
        'earnings_lines' => 'setEarningsLines',
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'employee_postal_suburb_name' => 'setEmployeePostalSuburbName',
        'employee_postal_suburb_postcode' => 'setEmployeePostalSuburbPostcode',
        'employee_postal_suburb_state' => 'setEmployeePostalSuburbState',
        'super_ytd' => 'setSuperYtd',
        'sfss_ytd' => 'setSfssYtd',
        'help_ytd' => 'setHelpYtd',
        'payg_ytd' => 'setPaygYtd',
        'abn' => 'setAbn',
        'total_accrued_leave' => 'setTotalAccruedLeave',
        'accrued_leave' => 'setAccruedLeave',
        'leave_taken' => 'setLeaveTaken',
        'deductions' => 'setDeductions',
        'gross_ytd_details' => 'setGrossYtdDetails',
        'employee_expenses' => 'setEmployeeExpenses',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'net_earnings' => 'setNetEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'post_tax_deduction_amount' => 'setPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'setPreTaxDeductionAmount',
        'id' => 'setId',
        'business_name' => 'setBusinessName',
        'business_address' => 'setBusinessAddress',
        'contact_name' => 'setContactName',
        'pay_period_starting' => 'setPayPeriodStarting',
        'pay_period_ending' => 'setPayPeriodEnding',
        'message' => 'setMessage',
        'employee_id' => 'setEmployeeId',
        'employee_external_id' => 'setEmployeeExternalId',
        'employee_name' => 'setEmployeeName',
        'employee_first_name' => 'setEmployeeFirstName',
        'employee_surname' => 'setEmployeeSurname',
        'employee_postal_street_address' => 'setEmployeePostalStreetAddress',
        'employee_postal_address_line2' => 'setEmployeePostalAddressLine2',
        'employee_postal_address_country' => 'setEmployeePostalAddressCountry',
        'notation' => 'setNotation',
        'is_published' => 'setIsPublished',
        'gross_ytd' => 'setGrossYtd',
        'net_ytd' => 'setNetYtd',
        'withholding_ytd' => 'setWithholdingYtd',
        'base_pay_rate' => 'setBasePayRate',
        'base_rate' => 'setBaseRate',
        'hourly_rate' => 'setHourlyRate',
        'pre_tax_deductions_ytd' => 'setPreTaxDeductionsYtd',
        'post_tax_deductions_ytd' => 'setPostTaxDeductionsYtd',
        'employee_base_rate' => 'setEmployeeBaseRate',
        'employee_base_rate_unit' => 'setEmployeeBaseRateUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg_adjustments' => 'getPaygAdjustments',
        'super_adjustments' => 'getSuperAdjustments',
        'super_payments' => 'getSuperPayments',
        'bank_payments' => 'getBankPayments',
        'earnings_lines' => 'getEarningsLines',
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'employee_postal_suburb_name' => 'getEmployeePostalSuburbName',
        'employee_postal_suburb_postcode' => 'getEmployeePostalSuburbPostcode',
        'employee_postal_suburb_state' => 'getEmployeePostalSuburbState',
        'super_ytd' => 'getSuperYtd',
        'sfss_ytd' => 'getSfssYtd',
        'help_ytd' => 'getHelpYtd',
        'payg_ytd' => 'getPaygYtd',
        'abn' => 'getAbn',
        'total_accrued_leave' => 'getTotalAccruedLeave',
        'accrued_leave' => 'getAccruedLeave',
        'leave_taken' => 'getLeaveTaken',
        'deductions' => 'getDeductions',
        'gross_ytd_details' => 'getGrossYtdDetails',
        'employee_expenses' => 'getEmployeeExpenses',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'net_earnings' => 'getNetEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'post_tax_deduction_amount' => 'getPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'getPreTaxDeductionAmount',
        'id' => 'getId',
        'business_name' => 'getBusinessName',
        'business_address' => 'getBusinessAddress',
        'contact_name' => 'getContactName',
        'pay_period_starting' => 'getPayPeriodStarting',
        'pay_period_ending' => 'getPayPeriodEnding',
        'message' => 'getMessage',
        'employee_id' => 'getEmployeeId',
        'employee_external_id' => 'getEmployeeExternalId',
        'employee_name' => 'getEmployeeName',
        'employee_first_name' => 'getEmployeeFirstName',
        'employee_surname' => 'getEmployeeSurname',
        'employee_postal_street_address' => 'getEmployeePostalStreetAddress',
        'employee_postal_address_line2' => 'getEmployeePostalAddressLine2',
        'employee_postal_address_country' => 'getEmployeePostalAddressCountry',
        'notation' => 'getNotation',
        'is_published' => 'getIsPublished',
        'gross_ytd' => 'getGrossYtd',
        'net_ytd' => 'getNetYtd',
        'withholding_ytd' => 'getWithholdingYtd',
        'base_pay_rate' => 'getBasePayRate',
        'base_rate' => 'getBaseRate',
        'hourly_rate' => 'getHourlyRate',
        'pre_tax_deductions_ytd' => 'getPreTaxDeductionsYtd',
        'post_tax_deductions_ytd' => 'getPostTaxDeductionsYtd',
        'employee_base_rate' => 'getEmployeeBaseRate',
        'employee_base_rate_unit' => 'getEmployeeBaseRateUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMPLOYEE_BASE_RATE_UNIT_HOURLY = 'Hourly';
    public const EMPLOYEE_BASE_RATE_UNIT_ANNUALLY = 'Annually';
    public const EMPLOYEE_BASE_RATE_UNIT_FIXED = 'Fixed';
    public const EMPLOYEE_BASE_RATE_UNIT_DAILY = 'Daily';
    public const EMPLOYEE_BASE_RATE_UNIT_MONTHLY = 'Monthly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmployeeBaseRateUnitAllowableValues()
    {
        return [
            self::EMPLOYEE_BASE_RATE_UNIT_HOURLY,
            self::EMPLOYEE_BASE_RATE_UNIT_ANNUALLY,
            self::EMPLOYEE_BASE_RATE_UNIT_FIXED,
            self::EMPLOYEE_BASE_RATE_UNIT_DAILY,
            self::EMPLOYEE_BASE_RATE_UNIT_MONTHLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payg_adjustments', $data ?? [], null);
        $this->setIfExists('super_adjustments', $data ?? [], null);
        $this->setIfExists('super_payments', $data ?? [], null);
        $this->setIfExists('bank_payments', $data ?? [], null);
        $this->setIfExists('earnings_lines', $data ?? [], null);
        $this->setIfExists('payg_withholding_amount', $data ?? [], null);
        $this->setIfExists('sfss_amount', $data ?? [], null);
        $this->setIfExists('help_amount', $data ?? [], null);
        $this->setIfExists('super_contribution', $data ?? [], null);
        $this->setIfExists('employee_postal_suburb_name', $data ?? [], null);
        $this->setIfExists('employee_postal_suburb_postcode', $data ?? [], null);
        $this->setIfExists('employee_postal_suburb_state', $data ?? [], null);
        $this->setIfExists('super_ytd', $data ?? [], null);
        $this->setIfExists('sfss_ytd', $data ?? [], null);
        $this->setIfExists('help_ytd', $data ?? [], null);
        $this->setIfExists('payg_ytd', $data ?? [], null);
        $this->setIfExists('abn', $data ?? [], null);
        $this->setIfExists('total_accrued_leave', $data ?? [], null);
        $this->setIfExists('accrued_leave', $data ?? [], null);
        $this->setIfExists('leave_taken', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('gross_ytd_details', $data ?? [], null);
        $this->setIfExists('employee_expenses', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('taxable_earnings', $data ?? [], null);
        $this->setIfExists('post_tax_deduction_amount', $data ?? [], null);
        $this->setIfExists('pre_tax_deduction_amount', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('business_address', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('pay_period_starting', $data ?? [], null);
        $this->setIfExists('pay_period_ending', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('employee_first_name', $data ?? [], null);
        $this->setIfExists('employee_surname', $data ?? [], null);
        $this->setIfExists('employee_postal_street_address', $data ?? [], null);
        $this->setIfExists('employee_postal_address_line2', $data ?? [], null);
        $this->setIfExists('employee_postal_address_country', $data ?? [], null);
        $this->setIfExists('notation', $data ?? [], null);
        $this->setIfExists('is_published', $data ?? [], null);
        $this->setIfExists('gross_ytd', $data ?? [], null);
        $this->setIfExists('net_ytd', $data ?? [], null);
        $this->setIfExists('withholding_ytd', $data ?? [], null);
        $this->setIfExists('base_pay_rate', $data ?? [], null);
        $this->setIfExists('base_rate', $data ?? [], null);
        $this->setIfExists('hourly_rate', $data ?? [], null);
        $this->setIfExists('pre_tax_deductions_ytd', $data ?? [], null);
        $this->setIfExists('post_tax_deductions_ytd', $data ?? [], null);
        $this->setIfExists('employee_base_rate', $data ?? [], null);
        $this->setIfExists('employee_base_rate_unit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmployeeBaseRateUnitAllowableValues();
        if (!is_null($this->container['employee_base_rate_unit']) && !in_array($this->container['employee_base_rate_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'employee_base_rate_unit', must be one of '%s'",
                $this->container['employee_base_rate_unit'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg_adjustments
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipPaygAdjustmentModel[]|null
     */
    public function getPaygAdjustments()
    {
        return $this->container['payg_adjustments'];
    }

    /**
     * Sets payg_adjustments
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipPaygAdjustmentModel[]|null $payg_adjustments 
     *
     * @return self
     */
    public function setPaygAdjustments($payg_adjustments)
    {
        if (is_null($payg_adjustments)) {
            throw new \InvalidArgumentException('non-nullable payg_adjustments cannot be null');
        }
        $this->container['payg_adjustments'] = $payg_adjustments;

        return $this;
    }

    /**
     * Gets super_adjustments
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipSuperAdjustmentModel[]|null
     */
    public function getSuperAdjustments()
    {
        return $this->container['super_adjustments'];
    }

    /**
     * Sets super_adjustments
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipSuperAdjustmentModel[]|null $super_adjustments 
     *
     * @return self
     */
    public function setSuperAdjustments($super_adjustments)
    {
        if (is_null($super_adjustments)) {
            throw new \InvalidArgumentException('non-nullable super_adjustments cannot be null');
        }
        $this->container['super_adjustments'] = $super_adjustments;

        return $this;
    }

    /**
     * Gets super_payments
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipSuperPaymentModel[]|null
     */
    public function getSuperPayments()
    {
        return $this->container['super_payments'];
    }

    /**
     * Sets super_payments
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipSuperPaymentModel[]|null $super_payments 
     *
     * @return self
     */
    public function setSuperPayments($super_payments)
    {
        if (is_null($super_payments)) {
            throw new \InvalidArgumentException('non-nullable super_payments cannot be null');
        }
        $this->container['super_payments'] = $super_payments;

        return $this;
    }

    /**
     * Gets bank_payments
     *
     * @return \OpenAPI\Client\Model\AuApiPaySlipBankPaymentModel[]|null
     */
    public function getBankPayments()
    {
        return $this->container['bank_payments'];
    }

    /**
     * Sets bank_payments
     *
     * @param \OpenAPI\Client\Model\AuApiPaySlipBankPaymentModel[]|null $bank_payments 
     *
     * @return self
     */
    public function setBankPayments($bank_payments)
    {
        if (is_null($bank_payments)) {
            throw new \InvalidArgumentException('non-nullable bank_payments cannot be null');
        }
        $this->container['bank_payments'] = $bank_payments;

        return $this;
    }

    /**
     * Gets earnings_lines
     *
     * @return \OpenAPI\Client\Model\AuApiPaySlipEarningsLineModel[]|null
     */
    public function getEarningsLines()
    {
        return $this->container['earnings_lines'];
    }

    /**
     * Sets earnings_lines
     *
     * @param \OpenAPI\Client\Model\AuApiPaySlipEarningsLineModel[]|null $earnings_lines 
     *
     * @return self
     */
    public function setEarningsLines($earnings_lines)
    {
        if (is_null($earnings_lines)) {
            throw new \InvalidArgumentException('non-nullable earnings_lines cannot be null');
        }
        $this->container['earnings_lines'] = $earnings_lines;

        return $this;
    }

    /**
     * Gets payg_withholding_amount
     *
     * @return float|null
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param float|null $payg_withholding_amount 
     *
     * @return self
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        if (is_null($payg_withholding_amount)) {
            throw new \InvalidArgumentException('non-nullable payg_withholding_amount cannot be null');
        }
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets sfss_amount
     *
     * @return float|null
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param float|null $sfss_amount 
     *
     * @return self
     */
    public function setSfssAmount($sfss_amount)
    {
        if (is_null($sfss_amount)) {
            throw new \InvalidArgumentException('non-nullable sfss_amount cannot be null');
        }
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return float|null
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param float|null $help_amount 
     *
     * @return self
     */
    public function setHelpAmount($help_amount)
    {
        if (is_null($help_amount)) {
            throw new \InvalidArgumentException('non-nullable help_amount cannot be null');
        }
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return float|null
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float|null $super_contribution 
     *
     * @return self
     */
    public function setSuperContribution($super_contribution)
    {
        if (is_null($super_contribution)) {
            throw new \InvalidArgumentException('non-nullable super_contribution cannot be null');
        }
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employee_postal_suburb_name
     *
     * @return string|null
     */
    public function getEmployeePostalSuburbName()
    {
        return $this->container['employee_postal_suburb_name'];
    }

    /**
     * Sets employee_postal_suburb_name
     *
     * @param string|null $employee_postal_suburb_name 
     *
     * @return self
     */
    public function setEmployeePostalSuburbName($employee_postal_suburb_name)
    {
        if (is_null($employee_postal_suburb_name)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_suburb_name cannot be null');
        }
        $this->container['employee_postal_suburb_name'] = $employee_postal_suburb_name;

        return $this;
    }

    /**
     * Gets employee_postal_suburb_postcode
     *
     * @return string|null
     */
    public function getEmployeePostalSuburbPostcode()
    {
        return $this->container['employee_postal_suburb_postcode'];
    }

    /**
     * Sets employee_postal_suburb_postcode
     *
     * @param string|null $employee_postal_suburb_postcode 
     *
     * @return self
     */
    public function setEmployeePostalSuburbPostcode($employee_postal_suburb_postcode)
    {
        if (is_null($employee_postal_suburb_postcode)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_suburb_postcode cannot be null');
        }
        $this->container['employee_postal_suburb_postcode'] = $employee_postal_suburb_postcode;

        return $this;
    }

    /**
     * Gets employee_postal_suburb_state
     *
     * @return string|null
     */
    public function getEmployeePostalSuburbState()
    {
        return $this->container['employee_postal_suburb_state'];
    }

    /**
     * Sets employee_postal_suburb_state
     *
     * @param string|null $employee_postal_suburb_state 
     *
     * @return self
     */
    public function setEmployeePostalSuburbState($employee_postal_suburb_state)
    {
        if (is_null($employee_postal_suburb_state)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_suburb_state cannot be null');
        }
        $this->container['employee_postal_suburb_state'] = $employee_postal_suburb_state;

        return $this;
    }

    /**
     * Gets super_ytd
     *
     * @return float|null
     */
    public function getSuperYtd()
    {
        return $this->container['super_ytd'];
    }

    /**
     * Sets super_ytd
     *
     * @param float|null $super_ytd 
     *
     * @return self
     */
    public function setSuperYtd($super_ytd)
    {
        if (is_null($super_ytd)) {
            throw new \InvalidArgumentException('non-nullable super_ytd cannot be null');
        }
        $this->container['super_ytd'] = $super_ytd;

        return $this;
    }

    /**
     * Gets sfss_ytd
     *
     * @return float|null
     */
    public function getSfssYtd()
    {
        return $this->container['sfss_ytd'];
    }

    /**
     * Sets sfss_ytd
     *
     * @param float|null $sfss_ytd 
     *
     * @return self
     */
    public function setSfssYtd($sfss_ytd)
    {
        if (is_null($sfss_ytd)) {
            throw new \InvalidArgumentException('non-nullable sfss_ytd cannot be null');
        }
        $this->container['sfss_ytd'] = $sfss_ytd;

        return $this;
    }

    /**
     * Gets help_ytd
     *
     * @return float|null
     */
    public function getHelpYtd()
    {
        return $this->container['help_ytd'];
    }

    /**
     * Sets help_ytd
     *
     * @param float|null $help_ytd 
     *
     * @return self
     */
    public function setHelpYtd($help_ytd)
    {
        if (is_null($help_ytd)) {
            throw new \InvalidArgumentException('non-nullable help_ytd cannot be null');
        }
        $this->container['help_ytd'] = $help_ytd;

        return $this;
    }

    /**
     * Gets payg_ytd
     *
     * @return float|null
     */
    public function getPaygYtd()
    {
        return $this->container['payg_ytd'];
    }

    /**
     * Sets payg_ytd
     *
     * @param float|null $payg_ytd 
     *
     * @return self
     */
    public function setPaygYtd($payg_ytd)
    {
        if (is_null($payg_ytd)) {
            throw new \InvalidArgumentException('non-nullable payg_ytd cannot be null');
        }
        $this->container['payg_ytd'] = $payg_ytd;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn 
     *
     * @return self
     */
    public function setAbn($abn)
    {
        if (is_null($abn)) {
            throw new \InvalidArgumentException('non-nullable abn cannot be null');
        }
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets total_accrued_leave
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null
     */
    public function getTotalAccruedLeave()
    {
        return $this->container['total_accrued_leave'];
    }

    /**
     * Sets total_accrued_leave
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null $total_accrued_leave 
     *
     * @return self
     */
    public function setTotalAccruedLeave($total_accrued_leave)
    {
        if (is_null($total_accrued_leave)) {
            throw new \InvalidArgumentException('non-nullable total_accrued_leave cannot be null');
        }
        $this->container['total_accrued_leave'] = $total_accrued_leave;

        return $this;
    }

    /**
     * Gets accrued_leave
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null
     */
    public function getAccruedLeave()
    {
        return $this->container['accrued_leave'];
    }

    /**
     * Sets accrued_leave
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null $accrued_leave 
     *
     * @return self
     */
    public function setAccruedLeave($accrued_leave)
    {
        if (is_null($accrued_leave)) {
            throw new \InvalidArgumentException('non-nullable accrued_leave cannot be null');
        }
        $this->container['accrued_leave'] = $accrued_leave;

        return $this;
    }

    /**
     * Gets leave_taken
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null
     */
    public function getLeaveTaken()
    {
        return $this->container['leave_taken'];
    }

    /**
     * Sets leave_taken
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipLeaveModel[]|null $leave_taken 
     *
     * @return self
     */
    public function setLeaveTaken($leave_taken)
    {
        if (is_null($leave_taken)) {
            throw new \InvalidArgumentException('non-nullable leave_taken cannot be null');
        }
        $this->container['leave_taken'] = $leave_taken;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return \OpenAPI\Client\Model\ApiPaySlipDeductionModel[]|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param \OpenAPI\Client\Model\ApiPaySlipDeductionModel[]|null $deductions 
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets gross_ytd_details
     *
     * @return \OpenAPI\Client\Model\ApiYearToDateEarningsBreakdownModel[]|null
     */
    public function getGrossYtdDetails()
    {
        return $this->container['gross_ytd_details'];
    }

    /**
     * Sets gross_ytd_details
     *
     * @param \OpenAPI\Client\Model\ApiYearToDateEarningsBreakdownModel[]|null $gross_ytd_details 
     *
     * @return self
     */
    public function setGrossYtdDetails($gross_ytd_details)
    {
        if (is_null($gross_ytd_details)) {
            throw new \InvalidArgumentException('non-nullable gross_ytd_details cannot be null');
        }
        $this->container['gross_ytd_details'] = $gross_ytd_details;

        return $this;
    }

    /**
     * Gets employee_expenses
     *
     * @return \OpenAPI\Client\Model\ApiEmployeeExpenseGridModel[]|null
     */
    public function getEmployeeExpenses()
    {
        return $this->container['employee_expenses'];
    }

    /**
     * Sets employee_expenses
     *
     * @param \OpenAPI\Client\Model\ApiEmployeeExpenseGridModel[]|null $employee_expenses 
     *
     * @return self
     */
    public function setEmployeeExpenses($employee_expenses)
    {
        if (is_null($employee_expenses)) {
            throw new \InvalidArgumentException('non-nullable employee_expenses cannot be null');
        }
        $this->container['employee_expenses'] = $employee_expenses;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float|null
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float|null $taxable_earnings 
     *
     * @return self
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        if (is_null($taxable_earnings)) {
            throw new \InvalidArgumentException('non-nullable taxable_earnings cannot be null');
        }
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets post_tax_deduction_amount
     *
     * @return float|null
     */
    public function getPostTaxDeductionAmount()
    {
        return $this->container['post_tax_deduction_amount'];
    }

    /**
     * Sets post_tax_deduction_amount
     *
     * @param float|null $post_tax_deduction_amount 
     *
     * @return self
     */
    public function setPostTaxDeductionAmount($post_tax_deduction_amount)
    {
        if (is_null($post_tax_deduction_amount)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deduction_amount cannot be null');
        }
        $this->container['post_tax_deduction_amount'] = $post_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets pre_tax_deduction_amount
     *
     * @return float|null
     */
    public function getPreTaxDeductionAmount()
    {
        return $this->container['pre_tax_deduction_amount'];
    }

    /**
     * Sets pre_tax_deduction_amount
     *
     * @param float|null $pre_tax_deduction_amount 
     *
     * @return self
     */
    public function setPreTaxDeductionAmount($pre_tax_deduction_amount)
    {
        if (is_null($pre_tax_deduction_amount)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deduction_amount cannot be null');
        }
        $this->container['pre_tax_deduction_amount'] = $pre_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name 
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_address
     *
     * @return string|null
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     *
     * @param string|null $business_address 
     *
     * @return self
     */
    public function setBusinessAddress($business_address)
    {
        if (is_null($business_address)) {
            throw new \InvalidArgumentException('non-nullable business_address cannot be null');
        }
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name 
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets pay_period_starting
     *
     * @return string|null
     */
    public function getPayPeriodStarting()
    {
        return $this->container['pay_period_starting'];
    }

    /**
     * Sets pay_period_starting
     *
     * @param string|null $pay_period_starting 
     *
     * @return self
     */
    public function setPayPeriodStarting($pay_period_starting)
    {
        if (is_null($pay_period_starting)) {
            throw new \InvalidArgumentException('non-nullable pay_period_starting cannot be null');
        }
        $this->container['pay_period_starting'] = $pay_period_starting;

        return $this;
    }

    /**
     * Gets pay_period_ending
     *
     * @return string|null
     */
    public function getPayPeriodEnding()
    {
        return $this->container['pay_period_ending'];
    }

    /**
     * Sets pay_period_ending
     *
     * @param string|null $pay_period_ending 
     *
     * @return self
     */
    public function setPayPeriodEnding($pay_period_ending)
    {
        if (is_null($pay_period_ending)) {
            throw new \InvalidArgumentException('non-nullable pay_period_ending cannot be null');
        }
        $this->container['pay_period_ending'] = $pay_period_ending;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message 
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets employee_first_name
     *
     * @return string|null
     */
    public function getEmployeeFirstName()
    {
        return $this->container['employee_first_name'];
    }

    /**
     * Sets employee_first_name
     *
     * @param string|null $employee_first_name 
     *
     * @return self
     */
    public function setEmployeeFirstName($employee_first_name)
    {
        if (is_null($employee_first_name)) {
            throw new \InvalidArgumentException('non-nullable employee_first_name cannot be null');
        }
        $this->container['employee_first_name'] = $employee_first_name;

        return $this;
    }

    /**
     * Gets employee_surname
     *
     * @return string|null
     */
    public function getEmployeeSurname()
    {
        return $this->container['employee_surname'];
    }

    /**
     * Sets employee_surname
     *
     * @param string|null $employee_surname 
     *
     * @return self
     */
    public function setEmployeeSurname($employee_surname)
    {
        if (is_null($employee_surname)) {
            throw new \InvalidArgumentException('non-nullable employee_surname cannot be null');
        }
        $this->container['employee_surname'] = $employee_surname;

        return $this;
    }

    /**
     * Gets employee_postal_street_address
     *
     * @return string|null
     */
    public function getEmployeePostalStreetAddress()
    {
        return $this->container['employee_postal_street_address'];
    }

    /**
     * Sets employee_postal_street_address
     *
     * @param string|null $employee_postal_street_address 
     *
     * @return self
     */
    public function setEmployeePostalStreetAddress($employee_postal_street_address)
    {
        if (is_null($employee_postal_street_address)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_street_address cannot be null');
        }
        $this->container['employee_postal_street_address'] = $employee_postal_street_address;

        return $this;
    }

    /**
     * Gets employee_postal_address_line2
     *
     * @return string|null
     */
    public function getEmployeePostalAddressLine2()
    {
        return $this->container['employee_postal_address_line2'];
    }

    /**
     * Sets employee_postal_address_line2
     *
     * @param string|null $employee_postal_address_line2 
     *
     * @return self
     */
    public function setEmployeePostalAddressLine2($employee_postal_address_line2)
    {
        if (is_null($employee_postal_address_line2)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_address_line2 cannot be null');
        }
        $this->container['employee_postal_address_line2'] = $employee_postal_address_line2;

        return $this;
    }

    /**
     * Gets employee_postal_address_country
     *
     * @return string|null
     */
    public function getEmployeePostalAddressCountry()
    {
        return $this->container['employee_postal_address_country'];
    }

    /**
     * Sets employee_postal_address_country
     *
     * @param string|null $employee_postal_address_country 
     *
     * @return self
     */
    public function setEmployeePostalAddressCountry($employee_postal_address_country)
    {
        if (is_null($employee_postal_address_country)) {
            throw new \InvalidArgumentException('non-nullable employee_postal_address_country cannot be null');
        }
        $this->container['employee_postal_address_country'] = $employee_postal_address_country;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string|null
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string|null $notation 
     *
     * @return self
     */
    public function setNotation($notation)
    {
        if (is_null($notation)) {
            throw new \InvalidArgumentException('non-nullable notation cannot be null');
        }
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool|null $is_published 
     *
     * @return self
     */
    public function setIsPublished($is_published)
    {
        if (is_null($is_published)) {
            throw new \InvalidArgumentException('non-nullable is_published cannot be null');
        }
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets gross_ytd
     *
     * @return float|null
     */
    public function getGrossYtd()
    {
        return $this->container['gross_ytd'];
    }

    /**
     * Sets gross_ytd
     *
     * @param float|null $gross_ytd 
     *
     * @return self
     */
    public function setGrossYtd($gross_ytd)
    {
        if (is_null($gross_ytd)) {
            throw new \InvalidArgumentException('non-nullable gross_ytd cannot be null');
        }
        $this->container['gross_ytd'] = $gross_ytd;

        return $this;
    }

    /**
     * Gets net_ytd
     *
     * @return float|null
     */
    public function getNetYtd()
    {
        return $this->container['net_ytd'];
    }

    /**
     * Sets net_ytd
     *
     * @param float|null $net_ytd 
     *
     * @return self
     */
    public function setNetYtd($net_ytd)
    {
        if (is_null($net_ytd)) {
            throw new \InvalidArgumentException('non-nullable net_ytd cannot be null');
        }
        $this->container['net_ytd'] = $net_ytd;

        return $this;
    }

    /**
     * Gets withholding_ytd
     *
     * @return float|null
     */
    public function getWithholdingYtd()
    {
        return $this->container['withholding_ytd'];
    }

    /**
     * Sets withholding_ytd
     *
     * @param float|null $withholding_ytd 
     *
     * @return self
     */
    public function setWithholdingYtd($withholding_ytd)
    {
        if (is_null($withholding_ytd)) {
            throw new \InvalidArgumentException('non-nullable withholding_ytd cannot be null');
        }
        $this->container['withholding_ytd'] = $withholding_ytd;

        return $this;
    }

    /**
     * Gets base_pay_rate
     *
     * @return string|null
     */
    public function getBasePayRate()
    {
        return $this->container['base_pay_rate'];
    }

    /**
     * Sets base_pay_rate
     *
     * @param string|null $base_pay_rate 
     *
     * @return self
     */
    public function setBasePayRate($base_pay_rate)
    {
        if (is_null($base_pay_rate)) {
            throw new \InvalidArgumentException('non-nullable base_pay_rate cannot be null');
        }
        $this->container['base_pay_rate'] = $base_pay_rate;

        return $this;
    }

    /**
     * Gets base_rate
     *
     * @return string|null
     */
    public function getBaseRate()
    {
        return $this->container['base_rate'];
    }

    /**
     * Sets base_rate
     *
     * @param string|null $base_rate 
     *
     * @return self
     */
    public function setBaseRate($base_rate)
    {
        if (is_null($base_rate)) {
            throw new \InvalidArgumentException('non-nullable base_rate cannot be null');
        }
        $this->container['base_rate'] = $base_rate;

        return $this;
    }

    /**
     * Gets hourly_rate
     *
     * @return float|null
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     *
     * @param float|null $hourly_rate 
     *
     * @return self
     */
    public function setHourlyRate($hourly_rate)
    {
        if (is_null($hourly_rate)) {
            throw new \InvalidArgumentException('non-nullable hourly_rate cannot be null');
        }
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets pre_tax_deductions_ytd
     *
     * @return float|null
     */
    public function getPreTaxDeductionsYtd()
    {
        return $this->container['pre_tax_deductions_ytd'];
    }

    /**
     * Sets pre_tax_deductions_ytd
     *
     * @param float|null $pre_tax_deductions_ytd 
     *
     * @return self
     */
    public function setPreTaxDeductionsYtd($pre_tax_deductions_ytd)
    {
        if (is_null($pre_tax_deductions_ytd)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deductions_ytd cannot be null');
        }
        $this->container['pre_tax_deductions_ytd'] = $pre_tax_deductions_ytd;

        return $this;
    }

    /**
     * Gets post_tax_deductions_ytd
     *
     * @return float|null
     */
    public function getPostTaxDeductionsYtd()
    {
        return $this->container['post_tax_deductions_ytd'];
    }

    /**
     * Sets post_tax_deductions_ytd
     *
     * @param float|null $post_tax_deductions_ytd 
     *
     * @return self
     */
    public function setPostTaxDeductionsYtd($post_tax_deductions_ytd)
    {
        if (is_null($post_tax_deductions_ytd)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions_ytd cannot be null');
        }
        $this->container['post_tax_deductions_ytd'] = $post_tax_deductions_ytd;

        return $this;
    }

    /**
     * Gets employee_base_rate
     *
     * @return float|null
     */
    public function getEmployeeBaseRate()
    {
        return $this->container['employee_base_rate'];
    }

    /**
     * Sets employee_base_rate
     *
     * @param float|null $employee_base_rate 
     *
     * @return self
     */
    public function setEmployeeBaseRate($employee_base_rate)
    {
        if (is_null($employee_base_rate)) {
            throw new \InvalidArgumentException('non-nullable employee_base_rate cannot be null');
        }
        $this->container['employee_base_rate'] = $employee_base_rate;

        return $this;
    }

    /**
     * Gets employee_base_rate_unit
     *
     * @return string|null
     */
    public function getEmployeeBaseRateUnit()
    {
        return $this->container['employee_base_rate_unit'];
    }

    /**
     * Sets employee_base_rate_unit
     *
     * @param string|null $employee_base_rate_unit 
     *
     * @return self
     */
    public function setEmployeeBaseRateUnit($employee_base_rate_unit)
    {
        if (is_null($employee_base_rate_unit)) {
            throw new \InvalidArgumentException('non-nullable employee_base_rate_unit cannot be null');
        }
        $allowedValues = $this->getEmployeeBaseRateUnitAllowableValues();
        if (!in_array($employee_base_rate_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'employee_base_rate_unit', must be one of '%s'",
                    $employee_base_rate_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employee_base_rate_unit'] = $employee_base_rate_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


