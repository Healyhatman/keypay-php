<?php
/**
 * AuEmployeePortalSettingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEmployeePortalSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEmployeePortalSettingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEmployeePortalSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_employee_super_fund_self_service' => 'bool',
        'can_specify_higher_classification' => 'bool',
        'allow_employee_leave_self_service' => 'bool',
        'allow_employee_self_editing' => 'bool',
        'timesheet_setting' => 'string',
        'allow_employee_to_set_unavailability' => 'bool',
        'allow_employee_bank_account_self_service' => 'bool',
        'allow_employee_satisfaction_survey' => 'bool',
        'allow_employees_to_view_all_approved_leave' => 'bool',
        'unavailability_cut_off' => 'int',
        'allow_employees_to_upload_profile_picture' => 'bool',
        'allow_employee_expenses_self_service' => 'bool',
        'allow_employee_override_tax_codes' => 'bool',
        'show_pay_days_in_employee_calendar' => 'bool',
        'enable_work_zone_clock_on' => 'bool',
        'require_photo' => 'bool',
        'allow_employee_shift_selection' => 'bool',
        'clock_on_window_minutes' => 'int',
        'clock_off_window_minutes' => 'int',
        'clock_on_reminder_notification_minutes' => 'int',
        'clock_off_reminder_notification_minutes' => 'int',
        'send_employee_details_update_notifications' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_employee_super_fund_self_service' => null,
        'can_specify_higher_classification' => null,
        'allow_employee_leave_self_service' => null,
        'allow_employee_self_editing' => null,
        'timesheet_setting' => null,
        'allow_employee_to_set_unavailability' => null,
        'allow_employee_bank_account_self_service' => null,
        'allow_employee_satisfaction_survey' => null,
        'allow_employees_to_view_all_approved_leave' => null,
        'unavailability_cut_off' => 'int32',
        'allow_employees_to_upload_profile_picture' => null,
        'allow_employee_expenses_self_service' => null,
        'allow_employee_override_tax_codes' => null,
        'show_pay_days_in_employee_calendar' => null,
        'enable_work_zone_clock_on' => null,
        'require_photo' => null,
        'allow_employee_shift_selection' => null,
        'clock_on_window_minutes' => 'int32',
        'clock_off_window_minutes' => 'int32',
        'clock_on_reminder_notification_minutes' => 'int32',
        'clock_off_reminder_notification_minutes' => 'int32',
        'send_employee_details_update_notifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_employee_super_fund_self_service' => false,
		'can_specify_higher_classification' => false,
		'allow_employee_leave_self_service' => false,
		'allow_employee_self_editing' => false,
		'timesheet_setting' => false,
		'allow_employee_to_set_unavailability' => false,
		'allow_employee_bank_account_self_service' => false,
		'allow_employee_satisfaction_survey' => false,
		'allow_employees_to_view_all_approved_leave' => false,
		'unavailability_cut_off' => false,
		'allow_employees_to_upload_profile_picture' => false,
		'allow_employee_expenses_self_service' => false,
		'allow_employee_override_tax_codes' => false,
		'show_pay_days_in_employee_calendar' => false,
		'enable_work_zone_clock_on' => false,
		'require_photo' => false,
		'allow_employee_shift_selection' => false,
		'clock_on_window_minutes' => false,
		'clock_off_window_minutes' => false,
		'clock_on_reminder_notification_minutes' => false,
		'clock_off_reminder_notification_minutes' => false,
		'send_employee_details_update_notifications' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_employee_super_fund_self_service' => 'allowEmployeeSuperFundSelfService',
        'can_specify_higher_classification' => 'canSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'allowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'allowEmployeeSelfEditing',
        'timesheet_setting' => 'timesheetSetting',
        'allow_employee_to_set_unavailability' => 'allowEmployeeToSetUnavailability',
        'allow_employee_bank_account_self_service' => 'allowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'allowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'allowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'unavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'allowEmployeesToUploadProfilePicture',
        'allow_employee_expenses_self_service' => 'allowEmployeeExpensesSelfService',
        'allow_employee_override_tax_codes' => 'allowEmployeeOverrideTaxCodes',
        'show_pay_days_in_employee_calendar' => 'showPayDaysInEmployeeCalendar',
        'enable_work_zone_clock_on' => 'enableWorkZoneClockOn',
        'require_photo' => 'requirePhoto',
        'allow_employee_shift_selection' => 'allowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'clockOnWindowMinutes',
        'clock_off_window_minutes' => 'clockOffWindowMinutes',
        'clock_on_reminder_notification_minutes' => 'clockOnReminderNotificationMinutes',
        'clock_off_reminder_notification_minutes' => 'clockOffReminderNotificationMinutes',
        'send_employee_details_update_notifications' => 'sendEmployeeDetailsUpdateNotifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_employee_super_fund_self_service' => 'setAllowEmployeeSuperFundSelfService',
        'can_specify_higher_classification' => 'setCanSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'setAllowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'setAllowEmployeeSelfEditing',
        'timesheet_setting' => 'setTimesheetSetting',
        'allow_employee_to_set_unavailability' => 'setAllowEmployeeToSetUnavailability',
        'allow_employee_bank_account_self_service' => 'setAllowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'setAllowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'setAllowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'setUnavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'setAllowEmployeesToUploadProfilePicture',
        'allow_employee_expenses_self_service' => 'setAllowEmployeeExpensesSelfService',
        'allow_employee_override_tax_codes' => 'setAllowEmployeeOverrideTaxCodes',
        'show_pay_days_in_employee_calendar' => 'setShowPayDaysInEmployeeCalendar',
        'enable_work_zone_clock_on' => 'setEnableWorkZoneClockOn',
        'require_photo' => 'setRequirePhoto',
        'allow_employee_shift_selection' => 'setAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'setClockOnWindowMinutes',
        'clock_off_window_minutes' => 'setClockOffWindowMinutes',
        'clock_on_reminder_notification_minutes' => 'setClockOnReminderNotificationMinutes',
        'clock_off_reminder_notification_minutes' => 'setClockOffReminderNotificationMinutes',
        'send_employee_details_update_notifications' => 'setSendEmployeeDetailsUpdateNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_employee_super_fund_self_service' => 'getAllowEmployeeSuperFundSelfService',
        'can_specify_higher_classification' => 'getCanSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'getAllowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'getAllowEmployeeSelfEditing',
        'timesheet_setting' => 'getTimesheetSetting',
        'allow_employee_to_set_unavailability' => 'getAllowEmployeeToSetUnavailability',
        'allow_employee_bank_account_self_service' => 'getAllowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'getAllowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'getAllowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'getUnavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'getAllowEmployeesToUploadProfilePicture',
        'allow_employee_expenses_self_service' => 'getAllowEmployeeExpensesSelfService',
        'allow_employee_override_tax_codes' => 'getAllowEmployeeOverrideTaxCodes',
        'show_pay_days_in_employee_calendar' => 'getShowPayDaysInEmployeeCalendar',
        'enable_work_zone_clock_on' => 'getEnableWorkZoneClockOn',
        'require_photo' => 'getRequirePhoto',
        'allow_employee_shift_selection' => 'getAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'getClockOnWindowMinutes',
        'clock_off_window_minutes' => 'getClockOffWindowMinutes',
        'clock_on_reminder_notification_minutes' => 'getClockOnReminderNotificationMinutes',
        'clock_off_reminder_notification_minutes' => 'getClockOffReminderNotificationMinutes',
        'send_employee_details_update_notifications' => 'getSendEmployeeDetailsUpdateNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMESHEET_SETTING_DISABLED = 'Disabled';
    public const TIMESHEET_SETTING_READ_ONLY = 'ReadOnly';
    public const TIMESHEET_SETTING_READ_WRITE = 'ReadWrite';
    public const TIMESHEET_SETTING_EDIT_KIOSK = 'EditKiosk';
    public const TIMESHEET_SETTING_EDIT_WORK_ZONE_CLOCK_ON_OFF = 'EditWorkZoneClockOnOff';
    public const TIMESHEET_SETTING_EDIT_KIOSK_OR_WORK_ZONE_CLOCK_ON_OFF = 'EditKioskOrWorkZoneClockOnOff';
    public const TIMESHEET_SETTING_ENABLED = 'Enabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetSettingAllowableValues()
    {
        return [
            self::TIMESHEET_SETTING_DISABLED,
            self::TIMESHEET_SETTING_READ_ONLY,
            self::TIMESHEET_SETTING_READ_WRITE,
            self::TIMESHEET_SETTING_EDIT_KIOSK,
            self::TIMESHEET_SETTING_EDIT_WORK_ZONE_CLOCK_ON_OFF,
            self::TIMESHEET_SETTING_EDIT_KIOSK_OR_WORK_ZONE_CLOCK_ON_OFF,
            self::TIMESHEET_SETTING_ENABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_employee_super_fund_self_service', $data ?? [], null);
        $this->setIfExists('can_specify_higher_classification', $data ?? [], null);
        $this->setIfExists('allow_employee_leave_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_self_editing', $data ?? [], null);
        $this->setIfExists('timesheet_setting', $data ?? [], null);
        $this->setIfExists('allow_employee_to_set_unavailability', $data ?? [], null);
        $this->setIfExists('allow_employee_bank_account_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_satisfaction_survey', $data ?? [], null);
        $this->setIfExists('allow_employees_to_view_all_approved_leave', $data ?? [], null);
        $this->setIfExists('unavailability_cut_off', $data ?? [], null);
        $this->setIfExists('allow_employees_to_upload_profile_picture', $data ?? [], null);
        $this->setIfExists('allow_employee_expenses_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_override_tax_codes', $data ?? [], null);
        $this->setIfExists('show_pay_days_in_employee_calendar', $data ?? [], null);
        $this->setIfExists('enable_work_zone_clock_on', $data ?? [], null);
        $this->setIfExists('require_photo', $data ?? [], null);
        $this->setIfExists('allow_employee_shift_selection', $data ?? [], null);
        $this->setIfExists('clock_on_window_minutes', $data ?? [], null);
        $this->setIfExists('clock_off_window_minutes', $data ?? [], null);
        $this->setIfExists('clock_on_reminder_notification_minutes', $data ?? [], null);
        $this->setIfExists('clock_off_reminder_notification_minutes', $data ?? [], null);
        $this->setIfExists('send_employee_details_update_notifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!is_null($this->container['timesheet_setting']) && !in_array($this->container['timesheet_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                $this->container['timesheet_setting'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_employee_super_fund_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeSuperFundSelfService()
    {
        return $this->container['allow_employee_super_fund_self_service'];
    }

    /**
     * Sets allow_employee_super_fund_self_service
     *
     * @param bool|null $allow_employee_super_fund_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeSuperFundSelfService($allow_employee_super_fund_self_service)
    {
        if (is_null($allow_employee_super_fund_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_super_fund_self_service cannot be null');
        }
        $this->container['allow_employee_super_fund_self_service'] = $allow_employee_super_fund_self_service;

        return $this;
    }

    /**
     * Gets can_specify_higher_classification
     *
     * @return bool|null
     */
    public function getCanSpecifyHigherClassification()
    {
        return $this->container['can_specify_higher_classification'];
    }

    /**
     * Sets can_specify_higher_classification
     *
     * @param bool|null $can_specify_higher_classification 
     *
     * @return self
     */
    public function setCanSpecifyHigherClassification($can_specify_higher_classification)
    {
        if (is_null($can_specify_higher_classification)) {
            throw new \InvalidArgumentException('non-nullable can_specify_higher_classification cannot be null');
        }
        $this->container['can_specify_higher_classification'] = $can_specify_higher_classification;

        return $this;
    }

    /**
     * Gets allow_employee_leave_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeLeaveSelfService()
    {
        return $this->container['allow_employee_leave_self_service'];
    }

    /**
     * Sets allow_employee_leave_self_service
     *
     * @param bool|null $allow_employee_leave_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeLeaveSelfService($allow_employee_leave_self_service)
    {
        if (is_null($allow_employee_leave_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_leave_self_service cannot be null');
        }
        $this->container['allow_employee_leave_self_service'] = $allow_employee_leave_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_self_editing
     *
     * @return bool|null
     */
    public function getAllowEmployeeSelfEditing()
    {
        return $this->container['allow_employee_self_editing'];
    }

    /**
     * Sets allow_employee_self_editing
     *
     * @param bool|null $allow_employee_self_editing 
     *
     * @return self
     */
    public function setAllowEmployeeSelfEditing($allow_employee_self_editing)
    {
        if (is_null($allow_employee_self_editing)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_self_editing cannot be null');
        }
        $this->container['allow_employee_self_editing'] = $allow_employee_self_editing;

        return $this;
    }

    /**
     * Gets timesheet_setting
     *
     * @return string|null
     */
    public function getTimesheetSetting()
    {
        return $this->container['timesheet_setting'];
    }

    /**
     * Sets timesheet_setting
     *
     * @param string|null $timesheet_setting 
     *
     * @return self
     */
    public function setTimesheetSetting($timesheet_setting)
    {
        if (is_null($timesheet_setting)) {
            throw new \InvalidArgumentException('non-nullable timesheet_setting cannot be null');
        }
        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!in_array($timesheet_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                    $timesheet_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_setting'] = $timesheet_setting;

        return $this;
    }

    /**
     * Gets allow_employee_to_set_unavailability
     *
     * @return bool|null
     */
    public function getAllowEmployeeToSetUnavailability()
    {
        return $this->container['allow_employee_to_set_unavailability'];
    }

    /**
     * Sets allow_employee_to_set_unavailability
     *
     * @param bool|null $allow_employee_to_set_unavailability 
     *
     * @return self
     */
    public function setAllowEmployeeToSetUnavailability($allow_employee_to_set_unavailability)
    {
        if (is_null($allow_employee_to_set_unavailability)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_to_set_unavailability cannot be null');
        }
        $this->container['allow_employee_to_set_unavailability'] = $allow_employee_to_set_unavailability;

        return $this;
    }

    /**
     * Gets allow_employee_bank_account_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeBankAccountSelfService()
    {
        return $this->container['allow_employee_bank_account_self_service'];
    }

    /**
     * Sets allow_employee_bank_account_self_service
     *
     * @param bool|null $allow_employee_bank_account_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeBankAccountSelfService($allow_employee_bank_account_self_service)
    {
        if (is_null($allow_employee_bank_account_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_bank_account_self_service cannot be null');
        }
        $this->container['allow_employee_bank_account_self_service'] = $allow_employee_bank_account_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_satisfaction_survey
     *
     * @return bool|null
     */
    public function getAllowEmployeeSatisfactionSurvey()
    {
        return $this->container['allow_employee_satisfaction_survey'];
    }

    /**
     * Sets allow_employee_satisfaction_survey
     *
     * @param bool|null $allow_employee_satisfaction_survey 
     *
     * @return self
     */
    public function setAllowEmployeeSatisfactionSurvey($allow_employee_satisfaction_survey)
    {
        if (is_null($allow_employee_satisfaction_survey)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_satisfaction_survey cannot be null');
        }
        $this->container['allow_employee_satisfaction_survey'] = $allow_employee_satisfaction_survey;

        return $this;
    }

    /**
     * Gets allow_employees_to_view_all_approved_leave
     *
     * @return bool|null
     */
    public function getAllowEmployeesToViewAllApprovedLeave()
    {
        return $this->container['allow_employees_to_view_all_approved_leave'];
    }

    /**
     * Sets allow_employees_to_view_all_approved_leave
     *
     * @param bool|null $allow_employees_to_view_all_approved_leave 
     *
     * @return self
     */
    public function setAllowEmployeesToViewAllApprovedLeave($allow_employees_to_view_all_approved_leave)
    {
        if (is_null($allow_employees_to_view_all_approved_leave)) {
            throw new \InvalidArgumentException('non-nullable allow_employees_to_view_all_approved_leave cannot be null');
        }
        $this->container['allow_employees_to_view_all_approved_leave'] = $allow_employees_to_view_all_approved_leave;

        return $this;
    }

    /**
     * Gets unavailability_cut_off
     *
     * @return int|null
     */
    public function getUnavailabilityCutOff()
    {
        return $this->container['unavailability_cut_off'];
    }

    /**
     * Sets unavailability_cut_off
     *
     * @param int|null $unavailability_cut_off 
     *
     * @return self
     */
    public function setUnavailabilityCutOff($unavailability_cut_off)
    {
        if (is_null($unavailability_cut_off)) {
            throw new \InvalidArgumentException('non-nullable unavailability_cut_off cannot be null');
        }
        $this->container['unavailability_cut_off'] = $unavailability_cut_off;

        return $this;
    }

    /**
     * Gets allow_employees_to_upload_profile_picture
     *
     * @return bool|null
     */
    public function getAllowEmployeesToUploadProfilePicture()
    {
        return $this->container['allow_employees_to_upload_profile_picture'];
    }

    /**
     * Sets allow_employees_to_upload_profile_picture
     *
     * @param bool|null $allow_employees_to_upload_profile_picture 
     *
     * @return self
     */
    public function setAllowEmployeesToUploadProfilePicture($allow_employees_to_upload_profile_picture)
    {
        if (is_null($allow_employees_to_upload_profile_picture)) {
            throw new \InvalidArgumentException('non-nullable allow_employees_to_upload_profile_picture cannot be null');
        }
        $this->container['allow_employees_to_upload_profile_picture'] = $allow_employees_to_upload_profile_picture;

        return $this;
    }

    /**
     * Gets allow_employee_expenses_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeExpensesSelfService()
    {
        return $this->container['allow_employee_expenses_self_service'];
    }

    /**
     * Sets allow_employee_expenses_self_service
     *
     * @param bool|null $allow_employee_expenses_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeExpensesSelfService($allow_employee_expenses_self_service)
    {
        if (is_null($allow_employee_expenses_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_expenses_self_service cannot be null');
        }
        $this->container['allow_employee_expenses_self_service'] = $allow_employee_expenses_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_override_tax_codes
     *
     * @return bool|null
     */
    public function getAllowEmployeeOverrideTaxCodes()
    {
        return $this->container['allow_employee_override_tax_codes'];
    }

    /**
     * Sets allow_employee_override_tax_codes
     *
     * @param bool|null $allow_employee_override_tax_codes 
     *
     * @return self
     */
    public function setAllowEmployeeOverrideTaxCodes($allow_employee_override_tax_codes)
    {
        if (is_null($allow_employee_override_tax_codes)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_override_tax_codes cannot be null');
        }
        $this->container['allow_employee_override_tax_codes'] = $allow_employee_override_tax_codes;

        return $this;
    }

    /**
     * Gets show_pay_days_in_employee_calendar
     *
     * @return bool|null
     */
    public function getShowPayDaysInEmployeeCalendar()
    {
        return $this->container['show_pay_days_in_employee_calendar'];
    }

    /**
     * Sets show_pay_days_in_employee_calendar
     *
     * @param bool|null $show_pay_days_in_employee_calendar 
     *
     * @return self
     */
    public function setShowPayDaysInEmployeeCalendar($show_pay_days_in_employee_calendar)
    {
        if (is_null($show_pay_days_in_employee_calendar)) {
            throw new \InvalidArgumentException('non-nullable show_pay_days_in_employee_calendar cannot be null');
        }
        $this->container['show_pay_days_in_employee_calendar'] = $show_pay_days_in_employee_calendar;

        return $this;
    }

    /**
     * Gets enable_work_zone_clock_on
     *
     * @return bool|null
     */
    public function getEnableWorkZoneClockOn()
    {
        return $this->container['enable_work_zone_clock_on'];
    }

    /**
     * Sets enable_work_zone_clock_on
     *
     * @param bool|null $enable_work_zone_clock_on 
     *
     * @return self
     */
    public function setEnableWorkZoneClockOn($enable_work_zone_clock_on)
    {
        if (is_null($enable_work_zone_clock_on)) {
            throw new \InvalidArgumentException('non-nullable enable_work_zone_clock_on cannot be null');
        }
        $this->container['enable_work_zone_clock_on'] = $enable_work_zone_clock_on;

        return $this;
    }

    /**
     * Gets require_photo
     *
     * @return bool|null
     */
    public function getRequirePhoto()
    {
        return $this->container['require_photo'];
    }

    /**
     * Sets require_photo
     *
     * @param bool|null $require_photo 
     *
     * @return self
     */
    public function setRequirePhoto($require_photo)
    {
        if (is_null($require_photo)) {
            throw new \InvalidArgumentException('non-nullable require_photo cannot be null');
        }
        $this->container['require_photo'] = $require_photo;

        return $this;
    }

    /**
     * Gets allow_employee_shift_selection
     *
     * @return bool|null
     */
    public function getAllowEmployeeShiftSelection()
    {
        return $this->container['allow_employee_shift_selection'];
    }

    /**
     * Sets allow_employee_shift_selection
     *
     * @param bool|null $allow_employee_shift_selection 
     *
     * @return self
     */
    public function setAllowEmployeeShiftSelection($allow_employee_shift_selection)
    {
        if (is_null($allow_employee_shift_selection)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_shift_selection cannot be null');
        }
        $this->container['allow_employee_shift_selection'] = $allow_employee_shift_selection;

        return $this;
    }

    /**
     * Gets clock_on_window_minutes
     *
     * @return int|null
     */
    public function getClockOnWindowMinutes()
    {
        return $this->container['clock_on_window_minutes'];
    }

    /**
     * Sets clock_on_window_minutes
     *
     * @param int|null $clock_on_window_minutes 
     *
     * @return self
     */
    public function setClockOnWindowMinutes($clock_on_window_minutes)
    {
        if (is_null($clock_on_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_on_window_minutes cannot be null');
        }
        $this->container['clock_on_window_minutes'] = $clock_on_window_minutes;

        return $this;
    }

    /**
     * Gets clock_off_window_minutes
     *
     * @return int|null
     */
    public function getClockOffWindowMinutes()
    {
        return $this->container['clock_off_window_minutes'];
    }

    /**
     * Sets clock_off_window_minutes
     *
     * @param int|null $clock_off_window_minutes 
     *
     * @return self
     */
    public function setClockOffWindowMinutes($clock_off_window_minutes)
    {
        if (is_null($clock_off_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_off_window_minutes cannot be null');
        }
        $this->container['clock_off_window_minutes'] = $clock_off_window_minutes;

        return $this;
    }

    /**
     * Gets clock_on_reminder_notification_minutes
     *
     * @return int|null
     */
    public function getClockOnReminderNotificationMinutes()
    {
        return $this->container['clock_on_reminder_notification_minutes'];
    }

    /**
     * Sets clock_on_reminder_notification_minutes
     *
     * @param int|null $clock_on_reminder_notification_minutes 
     *
     * @return self
     */
    public function setClockOnReminderNotificationMinutes($clock_on_reminder_notification_minutes)
    {
        if (is_null($clock_on_reminder_notification_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_on_reminder_notification_minutes cannot be null');
        }
        $this->container['clock_on_reminder_notification_minutes'] = $clock_on_reminder_notification_minutes;

        return $this;
    }

    /**
     * Gets clock_off_reminder_notification_minutes
     *
     * @return int|null
     */
    public function getClockOffReminderNotificationMinutes()
    {
        return $this->container['clock_off_reminder_notification_minutes'];
    }

    /**
     * Sets clock_off_reminder_notification_minutes
     *
     * @param int|null $clock_off_reminder_notification_minutes 
     *
     * @return self
     */
    public function setClockOffReminderNotificationMinutes($clock_off_reminder_notification_minutes)
    {
        if (is_null($clock_off_reminder_notification_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_off_reminder_notification_minutes cannot be null');
        }
        $this->container['clock_off_reminder_notification_minutes'] = $clock_off_reminder_notification_minutes;

        return $this;
    }

    /**
     * Gets send_employee_details_update_notifications
     *
     * @return bool|null
     */
    public function getSendEmployeeDetailsUpdateNotifications()
    {
        return $this->container['send_employee_details_update_notifications'];
    }

    /**
     * Sets send_employee_details_update_notifications
     *
     * @param bool|null $send_employee_details_update_notifications 
     *
     * @return self
     */
    public function setSendEmployeeDetailsUpdateNotifications($send_employee_details_update_notifications)
    {
        if (is_null($send_employee_details_update_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_employee_details_update_notifications cannot be null');
        }
        $this->container['send_employee_details_update_notifications'] = $send_employee_details_update_notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


