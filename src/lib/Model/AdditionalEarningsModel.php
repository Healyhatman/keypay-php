<?php
/**
 * AdditionalEarningsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdditionalEarningsModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditionalEarningsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalEarningsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'pay_category_id' => 'int',
        'employee_id' => 'int',
        'amount' => 'double',
        'start_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'maximum_amount_paid' => 'double',
        'is_active' => 'bool',
        'notes' => 'string',
        'expiration_type' => 'string',
        'total_amount_paid' => 'double',
        'units' => 'double',
        'location_id' => 'int',
        'location_name' => 'string',
        'super_rate' => 'double',
        'override_super_rate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'pay_category_id' => 'int32',
        'employee_id' => 'int32',
        'amount' => 'double',
        'start_date' => 'date-time',
        'expiry_date' => 'date-time',
        'maximum_amount_paid' => 'double',
        'is_active' => null,
        'notes' => null,
        'expiration_type' => null,
        'total_amount_paid' => 'double',
        'units' => 'double',
        'location_id' => 'int32',
        'location_name' => null,
        'super_rate' => 'double',
        'override_super_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'pay_category_id' => 'payCategoryId',
        'employee_id' => 'employeeId',
        'amount' => 'amount',
        'start_date' => 'startDate',
        'expiry_date' => 'expiryDate',
        'maximum_amount_paid' => 'maximumAmountPaid',
        'is_active' => 'isActive',
        'notes' => 'notes',
        'expiration_type' => 'expirationType',
        'total_amount_paid' => 'totalAmountPaid',
        'units' => 'units',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'super_rate' => 'superRate',
        'override_super_rate' => 'overrideSuperRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'pay_category_id' => 'setPayCategoryId',
        'employee_id' => 'setEmployeeId',
        'amount' => 'setAmount',
        'start_date' => 'setStartDate',
        'expiry_date' => 'setExpiryDate',
        'maximum_amount_paid' => 'setMaximumAmountPaid',
        'is_active' => 'setIsActive',
        'notes' => 'setNotes',
        'expiration_type' => 'setExpirationType',
        'total_amount_paid' => 'setTotalAmountPaid',
        'units' => 'setUnits',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'super_rate' => 'setSuperRate',
        'override_super_rate' => 'setOverrideSuperRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'pay_category_id' => 'getPayCategoryId',
        'employee_id' => 'getEmployeeId',
        'amount' => 'getAmount',
        'start_date' => 'getStartDate',
        'expiry_date' => 'getExpiryDate',
        'maximum_amount_paid' => 'getMaximumAmountPaid',
        'is_active' => 'getIsActive',
        'notes' => 'getNotes',
        'expiration_type' => 'getExpirationType',
        'total_amount_paid' => 'getTotalAmountPaid',
        'units' => 'getUnits',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'super_rate' => 'getSuperRate',
        'override_super_rate' => 'getOverrideSuperRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXPIRATION_TYPE_NONE = 'None';
    const EXPIRATION_TYPE_DATE_EXPIRY = 'DateExpiry';
    const EXPIRATION_TYPE_AMOUNT_EXPIRY = 'AmountExpiry';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpirationTypeAllowableValues()
    {
        return [
            self::EXPIRATION_TYPE_NONE,
            self::EXPIRATION_TYPE_DATE_EXPIRY,
            self::EXPIRATION_TYPE_AMOUNT_EXPIRY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pay_category_id'] = isset($data['pay_category_id']) ? $data['pay_category_id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['maximum_amount_paid'] = isset($data['maximum_amount_paid']) ? $data['maximum_amount_paid'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['expiration_type'] = isset($data['expiration_type']) ? $data['expiration_type'] : null;
        $this->container['total_amount_paid'] = isset($data['total_amount_paid']) ? $data['total_amount_paid'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['super_rate'] = isset($data['super_rate']) ? $data['super_rate'] : null;
        $this->container['override_super_rate'] = isset($data['override_super_rate']) ? $data['override_super_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExpirationTypeAllowableValues();
        if (!is_null($this->container['expiration_type']) && !in_array($this->container['expiration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'expiration_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int $pay_category_id 
     *
     * @return $this
     */
    public function setPayCategoryId($pay_category_id)
    {
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount 
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date 
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date 
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets maximum_amount_paid
     *
     * @return double
     */
    public function getMaximumAmountPaid()
    {
        return $this->container['maximum_amount_paid'];
    }

    /**
     * Sets maximum_amount_paid
     *
     * @param double $maximum_amount_paid 
     *
     * @return $this
     */
    public function setMaximumAmountPaid($maximum_amount_paid)
    {
        $this->container['maximum_amount_paid'] = $maximum_amount_paid;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active 
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes 
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets expiration_type
     *
     * @return string
     */
    public function getExpirationType()
    {
        return $this->container['expiration_type'];
    }

    /**
     * Sets expiration_type
     *
     * @param string $expiration_type 
     *
     * @return $this
     */
    public function setExpirationType($expiration_type)
    {
        $allowedValues = $this->getExpirationTypeAllowableValues();
        if (!is_null($expiration_type) && !in_array($expiration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'expiration_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expiration_type'] = $expiration_type;

        return $this;
    }

    /**
     * Gets total_amount_paid
     *
     * @return double
     */
    public function getTotalAmountPaid()
    {
        return $this->container['total_amount_paid'];
    }

    /**
     * Sets total_amount_paid
     *
     * @param double $total_amount_paid 
     *
     * @return $this
     */
    public function setTotalAmountPaid($total_amount_paid)
    {
        $this->container['total_amount_paid'] = $total_amount_paid;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units 
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id 
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name 
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return double
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param double $super_rate 
     *
     * @return $this
     */
    public function setSuperRate($super_rate)
    {
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Gets override_super_rate
     *
     * @return bool
     */
    public function getOverrideSuperRate()
    {
        return $this->container['override_super_rate'];
    }

    /**
     * Sets override_super_rate
     *
     * @param bool $override_super_rate 
     *
     * @return $this
     */
    public function setOverrideSuperRate($override_super_rate)
    {
        $this->container['override_super_rate'] = $override_super_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


