<?php
/**
 * PayRunCreateMultipleRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayRunCreateMultipleRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayRunCreateMultipleRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayRunCreateMultipleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_schedule_id' => 'int',
        'timesheet_import_option' => 'string',
        'external_id' => 'string',
        'callback_url' => 'string',
        'create_with_empty_pays' => 'bool',
        'adhoc' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_schedule_id' => 'int32',
        'timesheet_import_option' => null,
        'external_id' => null,
        'callback_url' => null,
        'create_with_empty_pays' => null,
        'adhoc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_schedule_id' => false,
		'timesheet_import_option' => false,
		'external_id' => false,
		'callback_url' => false,
		'create_with_empty_pays' => false,
		'adhoc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_schedule_id' => 'payScheduleId',
        'timesheet_import_option' => 'timesheetImportOption',
        'external_id' => 'externalId',
        'callback_url' => 'callbackUrl',
        'create_with_empty_pays' => 'createWithEmptyPays',
        'adhoc' => 'adhoc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_schedule_id' => 'setPayScheduleId',
        'timesheet_import_option' => 'setTimesheetImportOption',
        'external_id' => 'setExternalId',
        'callback_url' => 'setCallbackUrl',
        'create_with_empty_pays' => 'setCreateWithEmptyPays',
        'adhoc' => 'setAdhoc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_schedule_id' => 'getPayScheduleId',
        'timesheet_import_option' => 'getTimesheetImportOption',
        'external_id' => 'getExternalId',
        'callback_url' => 'getCallbackUrl',
        'create_with_empty_pays' => 'getCreateWithEmptyPays',
        'adhoc' => 'getAdhoc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMESHEET_IMPORT_OPTION_NONE = 'None';
    public const TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD = 'ThisPayPeriod';
    public const TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING = 'AllOutstanding';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetImportOptionAllowableValues()
    {
        return [
            self::TIMESHEET_IMPORT_OPTION_NONE,
            self::TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD,
            self::TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('timesheet_import_option', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('create_with_empty_pays', $data ?? [], null);
        $this->setIfExists('adhoc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!is_null($this->container['timesheet_import_option']) && !in_array($this->container['timesheet_import_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timesheet_import_option', must be one of '%s'",
                $this->container['timesheet_import_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id 
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets timesheet_import_option
     *
     * @return string|null
     */
    public function getTimesheetImportOption()
    {
        return $this->container['timesheet_import_option'];
    }

    /**
     * Sets timesheet_import_option
     *
     * @param string|null $timesheet_import_option 
     *
     * @return self
     */
    public function setTimesheetImportOption($timesheet_import_option)
    {
        if (is_null($timesheet_import_option)) {
            throw new \InvalidArgumentException('non-nullable timesheet_import_option cannot be null');
        }
        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!in_array($timesheet_import_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timesheet_import_option', must be one of '%s'",
                    $timesheet_import_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_import_option'] = $timesheet_import_option;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url 
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            throw new \InvalidArgumentException('non-nullable callback_url cannot be null');
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets create_with_empty_pays
     *
     * @return bool|null
     */
    public function getCreateWithEmptyPays()
    {
        return $this->container['create_with_empty_pays'];
    }

    /**
     * Sets create_with_empty_pays
     *
     * @param bool|null $create_with_empty_pays 
     *
     * @return self
     */
    public function setCreateWithEmptyPays($create_with_empty_pays)
    {
        if (is_null($create_with_empty_pays)) {
            throw new \InvalidArgumentException('non-nullable create_with_empty_pays cannot be null');
        }
        $this->container['create_with_empty_pays'] = $create_with_empty_pays;

        return $this;
    }

    /**
     * Gets adhoc
     *
     * @return bool|null
     */
    public function getAdhoc()
    {
        return $this->container['adhoc'];
    }

    /**
     * Sets adhoc
     *
     * @param bool|null $adhoc 
     *
     * @return self
     */
    public function setAdhoc($adhoc)
    {
        if (is_null($adhoc)) {
            throw new \InvalidArgumentException('non-nullable adhoc cannot be null');
        }
        $this->container['adhoc'] = $adhoc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


