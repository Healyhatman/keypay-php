<?php
/**
 * AuLeaveCategoryModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuLeaveCategoryModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuLeaveCategoryModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuLeaveCategoryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contingent_period' => 'float',
        'entitlement_period' => 'float',
        'leave_loading' => 'float',
        'unit_type' => 'string',
        'leave_category_type' => 'string',
        'leave_accrual_rule' => '\OpenAPI\Client\Model\AuLeaveAccrualRuleModel',
        'transfer_on_termination_to_pay_category_id' => 'int',
        'id' => 'int',
        'name' => 'string',
        'units' => 'float',
        'automatically_accrues' => 'bool',
        'is_private' => 'bool',
        'exclude_from_termination_payout' => 'bool',
        'external_id' => 'string',
        'source' => 'string',
        'is_balance_untracked' => 'bool',
        'deduct_from_primary_pay_category' => 'bool',
        'deduct_from_pay_category_id' => 'int',
        'transfer_to_pay_category_id' => 'int',
        'hide_accruals_on_payslip' => 'bool',
        'use_deduct_from_pay_category_rate' => 'bool',
        'is_name_private' => 'bool',
        'leave_unit_type' => 'string',
        'payout_as_etp' => 'bool',
        'accrues_first_pay_run_per_period_only' => 'bool',
        'prevent_negative_balance_unpaid_leave_category_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contingent_period' => 'double',
        'entitlement_period' => 'double',
        'leave_loading' => 'double',
        'unit_type' => null,
        'leave_category_type' => null,
        'leave_accrual_rule' => null,
        'transfer_on_termination_to_pay_category_id' => 'int32',
        'id' => 'int32',
        'name' => null,
        'units' => 'double',
        'automatically_accrues' => null,
        'is_private' => null,
        'exclude_from_termination_payout' => null,
        'external_id' => null,
        'source' => null,
        'is_balance_untracked' => null,
        'deduct_from_primary_pay_category' => null,
        'deduct_from_pay_category_id' => 'int32',
        'transfer_to_pay_category_id' => 'int32',
        'hide_accruals_on_payslip' => null,
        'use_deduct_from_pay_category_rate' => null,
        'is_name_private' => null,
        'leave_unit_type' => null,
        'payout_as_etp' => null,
        'accrues_first_pay_run_per_period_only' => null,
        'prevent_negative_balance_unpaid_leave_category_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contingent_period' => false,
		'entitlement_period' => false,
		'leave_loading' => false,
		'unit_type' => false,
		'leave_category_type' => false,
		'leave_accrual_rule' => false,
		'transfer_on_termination_to_pay_category_id' => false,
		'id' => false,
		'name' => false,
		'units' => false,
		'automatically_accrues' => false,
		'is_private' => false,
		'exclude_from_termination_payout' => false,
		'external_id' => false,
		'source' => false,
		'is_balance_untracked' => false,
		'deduct_from_primary_pay_category' => false,
		'deduct_from_pay_category_id' => false,
		'transfer_to_pay_category_id' => false,
		'hide_accruals_on_payslip' => false,
		'use_deduct_from_pay_category_rate' => false,
		'is_name_private' => false,
		'leave_unit_type' => false,
		'payout_as_etp' => false,
		'accrues_first_pay_run_per_period_only' => false,
		'prevent_negative_balance_unpaid_leave_category_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contingent_period' => 'contingentPeriod',
        'entitlement_period' => 'entitlementPeriod',
        'leave_loading' => 'leaveLoading',
        'unit_type' => 'unitType',
        'leave_category_type' => 'leaveCategoryType',
        'leave_accrual_rule' => 'leaveAccrualRule',
        'transfer_on_termination_to_pay_category_id' => 'transferOnTerminationToPayCategoryId',
        'id' => 'id',
        'name' => 'name',
        'units' => 'units',
        'automatically_accrues' => 'automaticallyAccrues',
        'is_private' => 'isPrivate',
        'exclude_from_termination_payout' => 'excludeFromTerminationPayout',
        'external_id' => 'externalId',
        'source' => 'source',
        'is_balance_untracked' => 'isBalanceUntracked',
        'deduct_from_primary_pay_category' => 'deductFromPrimaryPayCategory',
        'deduct_from_pay_category_id' => 'deductFromPayCategoryId',
        'transfer_to_pay_category_id' => 'transferToPayCategoryId',
        'hide_accruals_on_payslip' => 'hideAccrualsOnPayslip',
        'use_deduct_from_pay_category_rate' => 'useDeductFromPayCategoryRate',
        'is_name_private' => 'isNamePrivate',
        'leave_unit_type' => 'leaveUnitType',
        'payout_as_etp' => 'payoutAsETP',
        'accrues_first_pay_run_per_period_only' => 'accruesFirstPayRunPerPeriodOnly',
        'prevent_negative_balance_unpaid_leave_category_id' => 'preventNegativeBalanceUnpaidLeaveCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contingent_period' => 'setContingentPeriod',
        'entitlement_period' => 'setEntitlementPeriod',
        'leave_loading' => 'setLeaveLoading',
        'unit_type' => 'setUnitType',
        'leave_category_type' => 'setLeaveCategoryType',
        'leave_accrual_rule' => 'setLeaveAccrualRule',
        'transfer_on_termination_to_pay_category_id' => 'setTransferOnTerminationToPayCategoryId',
        'id' => 'setId',
        'name' => 'setName',
        'units' => 'setUnits',
        'automatically_accrues' => 'setAutomaticallyAccrues',
        'is_private' => 'setIsPrivate',
        'exclude_from_termination_payout' => 'setExcludeFromTerminationPayout',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'is_balance_untracked' => 'setIsBalanceUntracked',
        'deduct_from_primary_pay_category' => 'setDeductFromPrimaryPayCategory',
        'deduct_from_pay_category_id' => 'setDeductFromPayCategoryId',
        'transfer_to_pay_category_id' => 'setTransferToPayCategoryId',
        'hide_accruals_on_payslip' => 'setHideAccrualsOnPayslip',
        'use_deduct_from_pay_category_rate' => 'setUseDeductFromPayCategoryRate',
        'is_name_private' => 'setIsNamePrivate',
        'leave_unit_type' => 'setLeaveUnitType',
        'payout_as_etp' => 'setPayoutAsEtp',
        'accrues_first_pay_run_per_period_only' => 'setAccruesFirstPayRunPerPeriodOnly',
        'prevent_negative_balance_unpaid_leave_category_id' => 'setPreventNegativeBalanceUnpaidLeaveCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contingent_period' => 'getContingentPeriod',
        'entitlement_period' => 'getEntitlementPeriod',
        'leave_loading' => 'getLeaveLoading',
        'unit_type' => 'getUnitType',
        'leave_category_type' => 'getLeaveCategoryType',
        'leave_accrual_rule' => 'getLeaveAccrualRule',
        'transfer_on_termination_to_pay_category_id' => 'getTransferOnTerminationToPayCategoryId',
        'id' => 'getId',
        'name' => 'getName',
        'units' => 'getUnits',
        'automatically_accrues' => 'getAutomaticallyAccrues',
        'is_private' => 'getIsPrivate',
        'exclude_from_termination_payout' => 'getExcludeFromTerminationPayout',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'is_balance_untracked' => 'getIsBalanceUntracked',
        'deduct_from_primary_pay_category' => 'getDeductFromPrimaryPayCategory',
        'deduct_from_pay_category_id' => 'getDeductFromPayCategoryId',
        'transfer_to_pay_category_id' => 'getTransferToPayCategoryId',
        'hide_accruals_on_payslip' => 'getHideAccrualsOnPayslip',
        'use_deduct_from_pay_category_rate' => 'getUseDeductFromPayCategoryRate',
        'is_name_private' => 'getIsNamePrivate',
        'leave_unit_type' => 'getLeaveUnitType',
        'payout_as_etp' => 'getPayoutAsEtp',
        'accrues_first_pay_run_per_period_only' => 'getAccruesFirstPayRunPerPeriodOnly',
        'prevent_negative_balance_unpaid_leave_category_id' => 'getPreventNegativeBalanceUnpaidLeaveCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_TYPE_DAYS = 'Days';
    public const UNIT_TYPE_WEEKS = 'Weeks';
    public const UNIT_TYPE_HOURS_PER_HOUR_WORKED = 'HoursPerHourWorked';
    public const UNIT_TYPE_HOURS_PER_PAY_RUN = 'HoursPerPayRun';
    public const UNIT_TYPE_STANDARD_DAYS = 'StandardDays';
    public const UNIT_TYPE_STANDARD_WEEKS = 'StandardWeeks';
    public const UNIT_TYPE_DAY_PER_CALENDAR_DAY = 'DayPerCalendarDay';
    public const LEAVE_CATEGORY_TYPE_STANDARD = 'Standard';
    public const LEAVE_CATEGORY_TYPE_LONG_SERVICE_LEAVE = 'LongServiceLeave';
    public const LEAVE_CATEGORY_TYPE_PERSONAL_CARERS_LEAVE = 'PersonalCarersLeave';
    public const LEAVE_UNIT_TYPE_HOURS = 'Hours';
    public const LEAVE_UNIT_TYPE_DAYS = 'Days';
    public const LEAVE_UNIT_TYPE_WEEKS = 'Weeks';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitTypeAllowableValues()
    {
        return [
            self::UNIT_TYPE_DAYS,
            self::UNIT_TYPE_WEEKS,
            self::UNIT_TYPE_HOURS_PER_HOUR_WORKED,
            self::UNIT_TYPE_HOURS_PER_PAY_RUN,
            self::UNIT_TYPE_STANDARD_DAYS,
            self::UNIT_TYPE_STANDARD_WEEKS,
            self::UNIT_TYPE_DAY_PER_CALENDAR_DAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveCategoryTypeAllowableValues()
    {
        return [
            self::LEAVE_CATEGORY_TYPE_STANDARD,
            self::LEAVE_CATEGORY_TYPE_LONG_SERVICE_LEAVE,
            self::LEAVE_CATEGORY_TYPE_PERSONAL_CARERS_LEAVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveUnitTypeAllowableValues()
    {
        return [
            self::LEAVE_UNIT_TYPE_HOURS,
            self::LEAVE_UNIT_TYPE_DAYS,
            self::LEAVE_UNIT_TYPE_WEEKS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contingent_period', $data ?? [], null);
        $this->setIfExists('entitlement_period', $data ?? [], null);
        $this->setIfExists('leave_loading', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('leave_category_type', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule', $data ?? [], null);
        $this->setIfExists('transfer_on_termination_to_pay_category_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('automatically_accrues', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('exclude_from_termination_payout', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('is_balance_untracked', $data ?? [], null);
        $this->setIfExists('deduct_from_primary_pay_category', $data ?? [], null);
        $this->setIfExists('deduct_from_pay_category_id', $data ?? [], null);
        $this->setIfExists('transfer_to_pay_category_id', $data ?? [], null);
        $this->setIfExists('hide_accruals_on_payslip', $data ?? [], null);
        $this->setIfExists('use_deduct_from_pay_category_rate', $data ?? [], null);
        $this->setIfExists('is_name_private', $data ?? [], null);
        $this->setIfExists('leave_unit_type', $data ?? [], null);
        $this->setIfExists('payout_as_etp', $data ?? [], null);
        $this->setIfExists('accrues_first_pay_run_per_period_only', $data ?? [], null);
        $this->setIfExists('prevent_negative_balance_unpaid_leave_category_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!is_null($this->container['unit_type']) && !in_array($this->container['unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_type', must be one of '%s'",
                $this->container['unit_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveCategoryTypeAllowableValues();
        if (!is_null($this->container['leave_category_type']) && !in_array($this->container['leave_category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_category_type', must be one of '%s'",
                $this->container['leave_category_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveUnitTypeAllowableValues();
        if (!is_null($this->container['leave_unit_type']) && !in_array($this->container['leave_unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_unit_type', must be one of '%s'",
                $this->container['leave_unit_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contingent_period
     *
     * @return float|null
     */
    public function getContingentPeriod()
    {
        return $this->container['contingent_period'];
    }

    /**
     * Sets contingent_period
     *
     * @param float|null $contingent_period 
     *
     * @return self
     */
    public function setContingentPeriod($contingent_period)
    {
        if (is_null($contingent_period)) {
            throw new \InvalidArgumentException('non-nullable contingent_period cannot be null');
        }
        $this->container['contingent_period'] = $contingent_period;

        return $this;
    }

    /**
     * Gets entitlement_period
     *
     * @return float|null
     */
    public function getEntitlementPeriod()
    {
        return $this->container['entitlement_period'];
    }

    /**
     * Sets entitlement_period
     *
     * @param float|null $entitlement_period 
     *
     * @return self
     */
    public function setEntitlementPeriod($entitlement_period)
    {
        if (is_null($entitlement_period)) {
            throw new \InvalidArgumentException('non-nullable entitlement_period cannot be null');
        }
        $this->container['entitlement_period'] = $entitlement_period;

        return $this;
    }

    /**
     * Gets leave_loading
     *
     * @return float|null
     */
    public function getLeaveLoading()
    {
        return $this->container['leave_loading'];
    }

    /**
     * Sets leave_loading
     *
     * @param float|null $leave_loading 
     *
     * @return self
     */
    public function setLeaveLoading($leave_loading)
    {
        if (is_null($leave_loading)) {
            throw new \InvalidArgumentException('non-nullable leave_loading cannot be null');
        }
        $this->container['leave_loading'] = $leave_loading;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!in_array($unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_type', must be one of '%s'",
                    $unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets leave_category_type
     *
     * @return string|null
     */
    public function getLeaveCategoryType()
    {
        return $this->container['leave_category_type'];
    }

    /**
     * Sets leave_category_type
     *
     * @param string|null $leave_category_type 
     *
     * @return self
     */
    public function setLeaveCategoryType($leave_category_type)
    {
        if (is_null($leave_category_type)) {
            throw new \InvalidArgumentException('non-nullable leave_category_type cannot be null');
        }
        $allowedValues = $this->getLeaveCategoryTypeAllowableValues();
        if (!in_array($leave_category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_category_type', must be one of '%s'",
                    $leave_category_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_category_type'] = $leave_category_type;

        return $this;
    }

    /**
     * Gets leave_accrual_rule
     *
     * @return \OpenAPI\Client\Model\AuLeaveAccrualRuleModel|null
     */
    public function getLeaveAccrualRule()
    {
        return $this->container['leave_accrual_rule'];
    }

    /**
     * Sets leave_accrual_rule
     *
     * @param \OpenAPI\Client\Model\AuLeaveAccrualRuleModel|null $leave_accrual_rule leave_accrual_rule
     *
     * @return self
     */
    public function setLeaveAccrualRule($leave_accrual_rule)
    {
        if (is_null($leave_accrual_rule)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule cannot be null');
        }
        $this->container['leave_accrual_rule'] = $leave_accrual_rule;

        return $this;
    }

    /**
     * Gets transfer_on_termination_to_pay_category_id
     *
     * @return int|null
     */
    public function getTransferOnTerminationToPayCategoryId()
    {
        return $this->container['transfer_on_termination_to_pay_category_id'];
    }

    /**
     * Sets transfer_on_termination_to_pay_category_id
     *
     * @param int|null $transfer_on_termination_to_pay_category_id 
     *
     * @return self
     */
    public function setTransferOnTerminationToPayCategoryId($transfer_on_termination_to_pay_category_id)
    {
        if (is_null($transfer_on_termination_to_pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable transfer_on_termination_to_pay_category_id cannot be null');
        }
        $this->container['transfer_on_termination_to_pay_category_id'] = $transfer_on_termination_to_pay_category_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets automatically_accrues
     *
     * @return bool|null
     */
    public function getAutomaticallyAccrues()
    {
        return $this->container['automatically_accrues'];
    }

    /**
     * Sets automatically_accrues
     *
     * @param bool|null $automatically_accrues 
     *
     * @return self
     */
    public function setAutomaticallyAccrues($automatically_accrues)
    {
        if (is_null($automatically_accrues)) {
            throw new \InvalidArgumentException('non-nullable automatically_accrues cannot be null');
        }
        $this->container['automatically_accrues'] = $automatically_accrues;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private 
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets exclude_from_termination_payout
     *
     * @return bool|null
     */
    public function getExcludeFromTerminationPayout()
    {
        return $this->container['exclude_from_termination_payout'];
    }

    /**
     * Sets exclude_from_termination_payout
     *
     * @param bool|null $exclude_from_termination_payout 
     *
     * @return self
     */
    public function setExcludeFromTerminationPayout($exclude_from_termination_payout)
    {
        if (is_null($exclude_from_termination_payout)) {
            throw new \InvalidArgumentException('non-nullable exclude_from_termination_payout cannot be null');
        }
        $this->container['exclude_from_termination_payout'] = $exclude_from_termination_payout;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets is_balance_untracked
     *
     * @return bool|null
     */
    public function getIsBalanceUntracked()
    {
        return $this->container['is_balance_untracked'];
    }

    /**
     * Sets is_balance_untracked
     *
     * @param bool|null $is_balance_untracked 
     *
     * @return self
     */
    public function setIsBalanceUntracked($is_balance_untracked)
    {
        if (is_null($is_balance_untracked)) {
            throw new \InvalidArgumentException('non-nullable is_balance_untracked cannot be null');
        }
        $this->container['is_balance_untracked'] = $is_balance_untracked;

        return $this;
    }

    /**
     * Gets deduct_from_primary_pay_category
     *
     * @return bool|null
     */
    public function getDeductFromPrimaryPayCategory()
    {
        return $this->container['deduct_from_primary_pay_category'];
    }

    /**
     * Sets deduct_from_primary_pay_category
     *
     * @param bool|null $deduct_from_primary_pay_category 
     *
     * @return self
     */
    public function setDeductFromPrimaryPayCategory($deduct_from_primary_pay_category)
    {
        if (is_null($deduct_from_primary_pay_category)) {
            throw new \InvalidArgumentException('non-nullable deduct_from_primary_pay_category cannot be null');
        }
        $this->container['deduct_from_primary_pay_category'] = $deduct_from_primary_pay_category;

        return $this;
    }

    /**
     * Gets deduct_from_pay_category_id
     *
     * @return int|null
     */
    public function getDeductFromPayCategoryId()
    {
        return $this->container['deduct_from_pay_category_id'];
    }

    /**
     * Sets deduct_from_pay_category_id
     *
     * @param int|null $deduct_from_pay_category_id 
     *
     * @return self
     */
    public function setDeductFromPayCategoryId($deduct_from_pay_category_id)
    {
        if (is_null($deduct_from_pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable deduct_from_pay_category_id cannot be null');
        }
        $this->container['deduct_from_pay_category_id'] = $deduct_from_pay_category_id;

        return $this;
    }

    /**
     * Gets transfer_to_pay_category_id
     *
     * @return int|null
     */
    public function getTransferToPayCategoryId()
    {
        return $this->container['transfer_to_pay_category_id'];
    }

    /**
     * Sets transfer_to_pay_category_id
     *
     * @param int|null $transfer_to_pay_category_id 
     *
     * @return self
     */
    public function setTransferToPayCategoryId($transfer_to_pay_category_id)
    {
        if (is_null($transfer_to_pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable transfer_to_pay_category_id cannot be null');
        }
        $this->container['transfer_to_pay_category_id'] = $transfer_to_pay_category_id;

        return $this;
    }

    /**
     * Gets hide_accruals_on_payslip
     *
     * @return bool|null
     */
    public function getHideAccrualsOnPayslip()
    {
        return $this->container['hide_accruals_on_payslip'];
    }

    /**
     * Sets hide_accruals_on_payslip
     *
     * @param bool|null $hide_accruals_on_payslip 
     *
     * @return self
     */
    public function setHideAccrualsOnPayslip($hide_accruals_on_payslip)
    {
        if (is_null($hide_accruals_on_payslip)) {
            throw new \InvalidArgumentException('non-nullable hide_accruals_on_payslip cannot be null');
        }
        $this->container['hide_accruals_on_payslip'] = $hide_accruals_on_payslip;

        return $this;
    }

    /**
     * Gets use_deduct_from_pay_category_rate
     *
     * @return bool|null
     */
    public function getUseDeductFromPayCategoryRate()
    {
        return $this->container['use_deduct_from_pay_category_rate'];
    }

    /**
     * Sets use_deduct_from_pay_category_rate
     *
     * @param bool|null $use_deduct_from_pay_category_rate 
     *
     * @return self
     */
    public function setUseDeductFromPayCategoryRate($use_deduct_from_pay_category_rate)
    {
        if (is_null($use_deduct_from_pay_category_rate)) {
            throw new \InvalidArgumentException('non-nullable use_deduct_from_pay_category_rate cannot be null');
        }
        $this->container['use_deduct_from_pay_category_rate'] = $use_deduct_from_pay_category_rate;

        return $this;
    }

    /**
     * Gets is_name_private
     *
     * @return bool|null
     */
    public function getIsNamePrivate()
    {
        return $this->container['is_name_private'];
    }

    /**
     * Sets is_name_private
     *
     * @param bool|null $is_name_private 
     *
     * @return self
     */
    public function setIsNamePrivate($is_name_private)
    {
        if (is_null($is_name_private)) {
            throw new \InvalidArgumentException('non-nullable is_name_private cannot be null');
        }
        $this->container['is_name_private'] = $is_name_private;

        return $this;
    }

    /**
     * Gets leave_unit_type
     *
     * @return string|null
     */
    public function getLeaveUnitType()
    {
        return $this->container['leave_unit_type'];
    }

    /**
     * Sets leave_unit_type
     *
     * @param string|null $leave_unit_type 
     *
     * @return self
     */
    public function setLeaveUnitType($leave_unit_type)
    {
        if (is_null($leave_unit_type)) {
            throw new \InvalidArgumentException('non-nullable leave_unit_type cannot be null');
        }
        $allowedValues = $this->getLeaveUnitTypeAllowableValues();
        if (!in_array($leave_unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_unit_type', must be one of '%s'",
                    $leave_unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_unit_type'] = $leave_unit_type;

        return $this;
    }

    /**
     * Gets payout_as_etp
     *
     * @return bool|null
     */
    public function getPayoutAsEtp()
    {
        return $this->container['payout_as_etp'];
    }

    /**
     * Sets payout_as_etp
     *
     * @param bool|null $payout_as_etp 
     *
     * @return self
     */
    public function setPayoutAsEtp($payout_as_etp)
    {
        if (is_null($payout_as_etp)) {
            throw new \InvalidArgumentException('non-nullable payout_as_etp cannot be null');
        }
        $this->container['payout_as_etp'] = $payout_as_etp;

        return $this;
    }

    /**
     * Gets accrues_first_pay_run_per_period_only
     *
     * @return bool|null
     */
    public function getAccruesFirstPayRunPerPeriodOnly()
    {
        return $this->container['accrues_first_pay_run_per_period_only'];
    }

    /**
     * Sets accrues_first_pay_run_per_period_only
     *
     * @param bool|null $accrues_first_pay_run_per_period_only 
     *
     * @return self
     */
    public function setAccruesFirstPayRunPerPeriodOnly($accrues_first_pay_run_per_period_only)
    {
        if (is_null($accrues_first_pay_run_per_period_only)) {
            throw new \InvalidArgumentException('non-nullable accrues_first_pay_run_per_period_only cannot be null');
        }
        $this->container['accrues_first_pay_run_per_period_only'] = $accrues_first_pay_run_per_period_only;

        return $this;
    }

    /**
     * Gets prevent_negative_balance_unpaid_leave_category_id
     *
     * @return int|null
     */
    public function getPreventNegativeBalanceUnpaidLeaveCategoryId()
    {
        return $this->container['prevent_negative_balance_unpaid_leave_category_id'];
    }

    /**
     * Sets prevent_negative_balance_unpaid_leave_category_id
     *
     * @param int|null $prevent_negative_balance_unpaid_leave_category_id 
     *
     * @return self
     */
    public function setPreventNegativeBalanceUnpaidLeaveCategoryId($prevent_negative_balance_unpaid_leave_category_id)
    {
        if (is_null($prevent_negative_balance_unpaid_leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable prevent_negative_balance_unpaid_leave_category_id cannot be null');
        }
        $this->container['prevent_negative_balance_unpaid_leave_category_id'] = $prevent_negative_balance_unpaid_leave_category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


