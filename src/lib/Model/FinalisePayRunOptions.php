<?php
/**
 * FinalisePayRunOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FinalisePayRunOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinalisePayRunOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinalisePayRunOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_run_id' => 'int',
        'date_paid' => '\DateTime',
        'export_journals' => 'bool',
        'publish_pay_slips' => 'string',
        'publish_pay_slips_date_time' => '\DateTime',
        'suppress_notifications' => 'bool',
        'lodge_pay_run' => 'bool',
        'lodge_pay_run_in_test_mode' => 'bool',
        'submit_to_pension_sync' => 'bool',
        'lodge_final_pay_run' => 'bool',
        'relodge_hmrc_late_submission_reason' => 'string',
        'relodge_selected_employees_only' => 'bool',
        'finalise_as_admin' => 'bool',
        'publish_pay_slips_preference' => 'string',
        'export_journals_preference' => 'string',
        'export_journals_date_time' => '\DateTime',
        'lodge_pay_run_preference' => 'string',
        'lodge_pay_run_date_time' => '\DateTime',
        'run_report_packs_preference' => 'string',
        'run_report_packs_date_time' => '\DateTime',
        'report_packs_to_run' => 'int[]',
        'submit_to_pension_sync_preference' => 'string',
        'submit_to_pension_sync_date_time' => '\DateTime',
        'save_changes_to_default_settings' => 'bool',
        'from_pay_run_automation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_run_id' => 'int32',
        'date_paid' => 'date-time',
        'export_journals' => null,
        'publish_pay_slips' => null,
        'publish_pay_slips_date_time' => 'date-time',
        'suppress_notifications' => null,
        'lodge_pay_run' => null,
        'lodge_pay_run_in_test_mode' => null,
        'submit_to_pension_sync' => null,
        'lodge_final_pay_run' => null,
        'relodge_hmrc_late_submission_reason' => null,
        'relodge_selected_employees_only' => null,
        'finalise_as_admin' => null,
        'publish_pay_slips_preference' => null,
        'export_journals_preference' => null,
        'export_journals_date_time' => 'date-time',
        'lodge_pay_run_preference' => null,
        'lodge_pay_run_date_time' => 'date-time',
        'run_report_packs_preference' => null,
        'run_report_packs_date_time' => 'date-time',
        'report_packs_to_run' => 'int32',
        'submit_to_pension_sync_preference' => null,
        'submit_to_pension_sync_date_time' => 'date-time',
        'save_changes_to_default_settings' => null,
        'from_pay_run_automation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_run_id' => false,
		'date_paid' => false,
		'export_journals' => false,
		'publish_pay_slips' => false,
		'publish_pay_slips_date_time' => false,
		'suppress_notifications' => false,
		'lodge_pay_run' => false,
		'lodge_pay_run_in_test_mode' => false,
		'submit_to_pension_sync' => false,
		'lodge_final_pay_run' => false,
		'relodge_hmrc_late_submission_reason' => false,
		'relodge_selected_employees_only' => false,
		'finalise_as_admin' => false,
		'publish_pay_slips_preference' => false,
		'export_journals_preference' => false,
		'export_journals_date_time' => false,
		'lodge_pay_run_preference' => false,
		'lodge_pay_run_date_time' => false,
		'run_report_packs_preference' => false,
		'run_report_packs_date_time' => false,
		'report_packs_to_run' => false,
		'submit_to_pension_sync_preference' => false,
		'submit_to_pension_sync_date_time' => false,
		'save_changes_to_default_settings' => false,
		'from_pay_run_automation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_run_id' => 'payRunId',
        'date_paid' => 'datePaid',
        'export_journals' => 'exportJournals',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_pay_slips_date_time' => 'publishPaySlipsDateTime',
        'suppress_notifications' => 'suppressNotifications',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_in_test_mode' => 'lodgePayRunInTestMode',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'lodge_final_pay_run' => 'lodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'relodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'relodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'finaliseAsAdmin',
        'publish_pay_slips_preference' => 'publishPaySlipsPreference',
        'export_journals_preference' => 'exportJournalsPreference',
        'export_journals_date_time' => 'exportJournalsDateTime',
        'lodge_pay_run_preference' => 'lodgePayRunPreference',
        'lodge_pay_run_date_time' => 'lodgePayRunDateTime',
        'run_report_packs_preference' => 'runReportPacksPreference',
        'run_report_packs_date_time' => 'runReportPacksDateTime',
        'report_packs_to_run' => 'reportPacksToRun',
        'submit_to_pension_sync_preference' => 'submitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'submitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'saveChangesToDefaultSettings',
        'from_pay_run_automation' => 'fromPayRunAutomation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_run_id' => 'setPayRunId',
        'date_paid' => 'setDatePaid',
        'export_journals' => 'setExportJournals',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_pay_slips_date_time' => 'setPublishPaySlipsDateTime',
        'suppress_notifications' => 'setSuppressNotifications',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_in_test_mode' => 'setLodgePayRunInTestMode',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'lodge_final_pay_run' => 'setLodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'setRelodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'setRelodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'setFinaliseAsAdmin',
        'publish_pay_slips_preference' => 'setPublishPaySlipsPreference',
        'export_journals_preference' => 'setExportJournalsPreference',
        'export_journals_date_time' => 'setExportJournalsDateTime',
        'lodge_pay_run_preference' => 'setLodgePayRunPreference',
        'lodge_pay_run_date_time' => 'setLodgePayRunDateTime',
        'run_report_packs_preference' => 'setRunReportPacksPreference',
        'run_report_packs_date_time' => 'setRunReportPacksDateTime',
        'report_packs_to_run' => 'setReportPacksToRun',
        'submit_to_pension_sync_preference' => 'setSubmitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'setSubmitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'setSaveChangesToDefaultSettings',
        'from_pay_run_automation' => 'setFromPayRunAutomation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_run_id' => 'getPayRunId',
        'date_paid' => 'getDatePaid',
        'export_journals' => 'getExportJournals',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_pay_slips_date_time' => 'getPublishPaySlipsDateTime',
        'suppress_notifications' => 'getSuppressNotifications',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_in_test_mode' => 'getLodgePayRunInTestMode',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'lodge_final_pay_run' => 'getLodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'getRelodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'getRelodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'getFinaliseAsAdmin',
        'publish_pay_slips_preference' => 'getPublishPaySlipsPreference',
        'export_journals_preference' => 'getExportJournalsPreference',
        'export_journals_date_time' => 'getExportJournalsDateTime',
        'lodge_pay_run_preference' => 'getLodgePayRunPreference',
        'lodge_pay_run_date_time' => 'getLodgePayRunDateTime',
        'run_report_packs_preference' => 'getRunReportPacksPreference',
        'run_report_packs_date_time' => 'getRunReportPacksDateTime',
        'report_packs_to_run' => 'getReportPacksToRun',
        'submit_to_pension_sync_preference' => 'getSubmitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'getSubmitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'getSaveChangesToDefaultSettings',
        'from_pay_run_automation' => 'getFromPayRunAutomation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_A = 'A';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_B = 'B';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_C = 'C';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_D = 'D';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_E = 'E';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_F = 'F';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_G = 'G';
    public const RELODGE_HMRC_LATE_SUBMISSION_REASON_H = 'H';
    public const PUBLISH_PAY_SLIPS_PREFERENCE_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_PREFERENCE_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_PREFERENCE_SCHEDULED = 'Scheduled';
    public const EXPORT_JOURNALS_PREFERENCE_MANUAL = 'Manual';
    public const EXPORT_JOURNALS_PREFERENCE_IMMEDIATE = 'Immediate';
    public const EXPORT_JOURNALS_PREFERENCE_SCHEDULED = 'Scheduled';
    public const LODGE_PAY_RUN_PREFERENCE_MANUAL = 'Manual';
    public const LODGE_PAY_RUN_PREFERENCE_IMMEDIATE = 'Immediate';
    public const LODGE_PAY_RUN_PREFERENCE_SCHEDULED = 'Scheduled';
    public const RUN_REPORT_PACKS_PREFERENCE_MANUAL = 'Manual';
    public const RUN_REPORT_PACKS_PREFERENCE_IMMEDIATE = 'Immediate';
    public const RUN_REPORT_PACKS_PREFERENCE_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_PREFERENCE_MANUAL = 'Manual';
    public const SUBMIT_TO_PENSION_SYNC_PREFERENCE_IMMEDIATE = 'Immediate';
    public const SUBMIT_TO_PENSION_SYNC_PREFERENCE_SCHEDULED = 'Scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelodgeHmrcLateSubmissionReasonAllowableValues()
    {
        return [
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_A,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_B,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_C,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_D,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_E,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_F,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_G,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_H,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsPreferenceAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_PREFERENCE_MANUAL,
            self::PUBLISH_PAY_SLIPS_PREFERENCE_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsPreferenceAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_PREFERENCE_MANUAL,
            self::EXPORT_JOURNALS_PREFERENCE_IMMEDIATE,
            self::EXPORT_JOURNALS_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunPreferenceAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_PREFERENCE_MANUAL,
            self::LODGE_PAY_RUN_PREFERENCE_IMMEDIATE,
            self::LODGE_PAY_RUN_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksPreferenceAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_PREFERENCE_MANUAL,
            self::RUN_REPORT_PACKS_PREFERENCE_IMMEDIATE,
            self::RUN_REPORT_PACKS_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncPreferenceAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pay_run_id', $data ?? [], null);
        $this->setIfExists('date_paid', $data ?? [], null);
        $this->setIfExists('export_journals', $data ?? [], null);
        $this->setIfExists('publish_pay_slips', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_date_time', $data ?? [], null);
        $this->setIfExists('suppress_notifications', $data ?? [], null);
        $this->setIfExists('lodge_pay_run', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_in_test_mode', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync', $data ?? [], null);
        $this->setIfExists('lodge_final_pay_run', $data ?? [], null);
        $this->setIfExists('relodge_hmrc_late_submission_reason', $data ?? [], null);
        $this->setIfExists('relodge_selected_employees_only', $data ?? [], null);
        $this->setIfExists('finalise_as_admin', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_preference', $data ?? [], null);
        $this->setIfExists('export_journals_preference', $data ?? [], null);
        $this->setIfExists('export_journals_date_time', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_preference', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_date_time', $data ?? [], null);
        $this->setIfExists('run_report_packs_preference', $data ?? [], null);
        $this->setIfExists('run_report_packs_date_time', $data ?? [], null);
        $this->setIfExists('report_packs_to_run', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_preference', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_date_time', $data ?? [], null);
        $this->setIfExists('save_changes_to_default_settings', $data ?? [], null);
        $this->setIfExists('from_pay_run_automation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($this->container['publish_pay_slips']) && !in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                $this->container['publish_pay_slips'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRelodgeHmrcLateSubmissionReasonAllowableValues();
        if (!is_null($this->container['relodge_hmrc_late_submission_reason']) && !in_array($this->container['relodge_hmrc_late_submission_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'relodge_hmrc_late_submission_reason', must be one of '%s'",
                $this->container['relodge_hmrc_late_submission_reason'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsPreferenceAllowableValues();
        if (!is_null($this->container['publish_pay_slips_preference']) && !in_array($this->container['publish_pay_slips_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips_preference', must be one of '%s'",
                $this->container['publish_pay_slips_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsPreferenceAllowableValues();
        if (!is_null($this->container['export_journals_preference']) && !in_array($this->container['export_journals_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_journals_preference', must be one of '%s'",
                $this->container['export_journals_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunPreferenceAllowableValues();
        if (!is_null($this->container['lodge_pay_run_preference']) && !in_array($this->container['lodge_pay_run_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lodge_pay_run_preference', must be one of '%s'",
                $this->container['lodge_pay_run_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksPreferenceAllowableValues();
        if (!is_null($this->container['run_report_packs_preference']) && !in_array($this->container['run_report_packs_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'run_report_packs_preference', must be one of '%s'",
                $this->container['run_report_packs_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncPreferenceAllowableValues();
        if (!is_null($this->container['submit_to_pension_sync_preference']) && !in_array($this->container['submit_to_pension_sync_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'submit_to_pension_sync_preference', must be one of '%s'",
                $this->container['submit_to_pension_sync_preference'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_run_id
     *
     * @return int|null
     */
    public function getPayRunId()
    {
        return $this->container['pay_run_id'];
    }

    /**
     * Sets pay_run_id
     *
     * @param int|null $pay_run_id 
     *
     * @return self
     */
    public function setPayRunId($pay_run_id)
    {
        if (is_null($pay_run_id)) {
            throw new \InvalidArgumentException('non-nullable pay_run_id cannot be null');
        }
        $this->container['pay_run_id'] = $pay_run_id;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime|null
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime|null $date_paid 
     *
     * @return self
     */
    public function setDatePaid($date_paid)
    {
        if (is_null($date_paid)) {
            throw new \InvalidArgumentException('non-nullable date_paid cannot be null');
        }
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets export_journals
     *
     * @return bool|null
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param bool|null $export_journals 
     *
     * @return self
     */
    public function setExportJournals($export_journals)
    {
        if (is_null($export_journals)) {
            throw new \InvalidArgumentException('non-nullable export_journals cannot be null');
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string|null
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string|null $publish_pay_slips 
     *
     * @return self
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        if (is_null($publish_pay_slips)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                    $publish_pay_slips,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_pay_slips_date_time
     *
     * @return \DateTime|null
     */
    public function getPublishPaySlipsDateTime()
    {
        return $this->container['publish_pay_slips_date_time'];
    }

    /**
     * Sets publish_pay_slips_date_time
     *
     * @param \DateTime|null $publish_pay_slips_date_time 
     *
     * @return self
     */
    public function setPublishPaySlipsDateTime($publish_pay_slips_date_time)
    {
        if (is_null($publish_pay_slips_date_time)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_date_time cannot be null');
        }
        $this->container['publish_pay_slips_date_time'] = $publish_pay_slips_date_time;

        return $this;
    }

    /**
     * Gets suppress_notifications
     *
     * @return bool|null
     */
    public function getSuppressNotifications()
    {
        return $this->container['suppress_notifications'];
    }

    /**
     * Sets suppress_notifications
     *
     * @param bool|null $suppress_notifications 
     *
     * @return self
     */
    public function setSuppressNotifications($suppress_notifications)
    {
        if (is_null($suppress_notifications)) {
            throw new \InvalidArgumentException('non-nullable suppress_notifications cannot be null');
        }
        $this->container['suppress_notifications'] = $suppress_notifications;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return bool|null
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param bool|null $lodge_pay_run 
     *
     * @return self
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        if (is_null($lodge_pay_run)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run cannot be null');
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_in_test_mode
     *
     * @return bool|null
     */
    public function getLodgePayRunInTestMode()
    {
        return $this->container['lodge_pay_run_in_test_mode'];
    }

    /**
     * Sets lodge_pay_run_in_test_mode
     *
     * @param bool|null $lodge_pay_run_in_test_mode 
     *
     * @return self
     */
    public function setLodgePayRunInTestMode($lodge_pay_run_in_test_mode)
    {
        if (is_null($lodge_pay_run_in_test_mode)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_in_test_mode cannot be null');
        }
        $this->container['lodge_pay_run_in_test_mode'] = $lodge_pay_run_in_test_mode;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return bool|null
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param bool|null $submit_to_pension_sync 
     *
     * @return self
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        if (is_null($submit_to_pension_sync)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync cannot be null');
        }
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets lodge_final_pay_run
     *
     * @return bool|null
     */
    public function getLodgeFinalPayRun()
    {
        return $this->container['lodge_final_pay_run'];
    }

    /**
     * Sets lodge_final_pay_run
     *
     * @param bool|null $lodge_final_pay_run 
     *
     * @return self
     */
    public function setLodgeFinalPayRun($lodge_final_pay_run)
    {
        if (is_null($lodge_final_pay_run)) {
            throw new \InvalidArgumentException('non-nullable lodge_final_pay_run cannot be null');
        }
        $this->container['lodge_final_pay_run'] = $lodge_final_pay_run;

        return $this;
    }

    /**
     * Gets relodge_hmrc_late_submission_reason
     *
     * @return string|null
     */
    public function getRelodgeHmrcLateSubmissionReason()
    {
        return $this->container['relodge_hmrc_late_submission_reason'];
    }

    /**
     * Sets relodge_hmrc_late_submission_reason
     *
     * @param string|null $relodge_hmrc_late_submission_reason 
     *
     * @return self
     */
    public function setRelodgeHmrcLateSubmissionReason($relodge_hmrc_late_submission_reason)
    {
        if (is_null($relodge_hmrc_late_submission_reason)) {
            throw new \InvalidArgumentException('non-nullable relodge_hmrc_late_submission_reason cannot be null');
        }
        $allowedValues = $this->getRelodgeHmrcLateSubmissionReasonAllowableValues();
        if (!in_array($relodge_hmrc_late_submission_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'relodge_hmrc_late_submission_reason', must be one of '%s'",
                    $relodge_hmrc_late_submission_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relodge_hmrc_late_submission_reason'] = $relodge_hmrc_late_submission_reason;

        return $this;
    }

    /**
     * Gets relodge_selected_employees_only
     *
     * @return bool|null
     */
    public function getRelodgeSelectedEmployeesOnly()
    {
        return $this->container['relodge_selected_employees_only'];
    }

    /**
     * Sets relodge_selected_employees_only
     *
     * @param bool|null $relodge_selected_employees_only 
     *
     * @return self
     */
    public function setRelodgeSelectedEmployeesOnly($relodge_selected_employees_only)
    {
        if (is_null($relodge_selected_employees_only)) {
            throw new \InvalidArgumentException('non-nullable relodge_selected_employees_only cannot be null');
        }
        $this->container['relodge_selected_employees_only'] = $relodge_selected_employees_only;

        return $this;
    }

    /**
     * Gets finalise_as_admin
     *
     * @return bool|null
     */
    public function getFinaliseAsAdmin()
    {
        return $this->container['finalise_as_admin'];
    }

    /**
     * Sets finalise_as_admin
     *
     * @param bool|null $finalise_as_admin 
     *
     * @return self
     */
    public function setFinaliseAsAdmin($finalise_as_admin)
    {
        if (is_null($finalise_as_admin)) {
            throw new \InvalidArgumentException('non-nullable finalise_as_admin cannot be null');
        }
        $this->container['finalise_as_admin'] = $finalise_as_admin;

        return $this;
    }

    /**
     * Gets publish_pay_slips_preference
     *
     * @return string|null
     */
    public function getPublishPaySlipsPreference()
    {
        return $this->container['publish_pay_slips_preference'];
    }

    /**
     * Sets publish_pay_slips_preference
     *
     * @param string|null $publish_pay_slips_preference 
     *
     * @return self
     */
    public function setPublishPaySlipsPreference($publish_pay_slips_preference)
    {
        if (is_null($publish_pay_slips_preference)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_preference cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsPreferenceAllowableValues();
        if (!in_array($publish_pay_slips_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips_preference', must be one of '%s'",
                    $publish_pay_slips_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips_preference'] = $publish_pay_slips_preference;

        return $this;
    }

    /**
     * Gets export_journals_preference
     *
     * @return string|null
     */
    public function getExportJournalsPreference()
    {
        return $this->container['export_journals_preference'];
    }

    /**
     * Sets export_journals_preference
     *
     * @param string|null $export_journals_preference 
     *
     * @return self
     */
    public function setExportJournalsPreference($export_journals_preference)
    {
        if (is_null($export_journals_preference)) {
            throw new \InvalidArgumentException('non-nullable export_journals_preference cannot be null');
        }
        $allowedValues = $this->getExportJournalsPreferenceAllowableValues();
        if (!in_array($export_journals_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_journals_preference', must be one of '%s'",
                    $export_journals_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals_preference'] = $export_journals_preference;

        return $this;
    }

    /**
     * Gets export_journals_date_time
     *
     * @return \DateTime|null
     */
    public function getExportJournalsDateTime()
    {
        return $this->container['export_journals_date_time'];
    }

    /**
     * Sets export_journals_date_time
     *
     * @param \DateTime|null $export_journals_date_time 
     *
     * @return self
     */
    public function setExportJournalsDateTime($export_journals_date_time)
    {
        if (is_null($export_journals_date_time)) {
            throw new \InvalidArgumentException('non-nullable export_journals_date_time cannot be null');
        }
        $this->container['export_journals_date_time'] = $export_journals_date_time;

        return $this;
    }

    /**
     * Gets lodge_pay_run_preference
     *
     * @return string|null
     */
    public function getLodgePayRunPreference()
    {
        return $this->container['lodge_pay_run_preference'];
    }

    /**
     * Sets lodge_pay_run_preference
     *
     * @param string|null $lodge_pay_run_preference 
     *
     * @return self
     */
    public function setLodgePayRunPreference($lodge_pay_run_preference)
    {
        if (is_null($lodge_pay_run_preference)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_preference cannot be null');
        }
        $allowedValues = $this->getLodgePayRunPreferenceAllowableValues();
        if (!in_array($lodge_pay_run_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lodge_pay_run_preference', must be one of '%s'",
                    $lodge_pay_run_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run_preference'] = $lodge_pay_run_preference;

        return $this;
    }

    /**
     * Gets lodge_pay_run_date_time
     *
     * @return \DateTime|null
     */
    public function getLodgePayRunDateTime()
    {
        return $this->container['lodge_pay_run_date_time'];
    }

    /**
     * Sets lodge_pay_run_date_time
     *
     * @param \DateTime|null $lodge_pay_run_date_time 
     *
     * @return self
     */
    public function setLodgePayRunDateTime($lodge_pay_run_date_time)
    {
        if (is_null($lodge_pay_run_date_time)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_date_time cannot be null');
        }
        $this->container['lodge_pay_run_date_time'] = $lodge_pay_run_date_time;

        return $this;
    }

    /**
     * Gets run_report_packs_preference
     *
     * @return string|null
     */
    public function getRunReportPacksPreference()
    {
        return $this->container['run_report_packs_preference'];
    }

    /**
     * Sets run_report_packs_preference
     *
     * @param string|null $run_report_packs_preference 
     *
     * @return self
     */
    public function setRunReportPacksPreference($run_report_packs_preference)
    {
        if (is_null($run_report_packs_preference)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_preference cannot be null');
        }
        $allowedValues = $this->getRunReportPacksPreferenceAllowableValues();
        if (!in_array($run_report_packs_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'run_report_packs_preference', must be one of '%s'",
                    $run_report_packs_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs_preference'] = $run_report_packs_preference;

        return $this;
    }

    /**
     * Gets run_report_packs_date_time
     *
     * @return \DateTime|null
     */
    public function getRunReportPacksDateTime()
    {
        return $this->container['run_report_packs_date_time'];
    }

    /**
     * Sets run_report_packs_date_time
     *
     * @param \DateTime|null $run_report_packs_date_time 
     *
     * @return self
     */
    public function setRunReportPacksDateTime($run_report_packs_date_time)
    {
        if (is_null($run_report_packs_date_time)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_date_time cannot be null');
        }
        $this->container['run_report_packs_date_time'] = $run_report_packs_date_time;

        return $this;
    }

    /**
     * Gets report_packs_to_run
     *
     * @return int[]|null
     */
    public function getReportPacksToRun()
    {
        return $this->container['report_packs_to_run'];
    }

    /**
     * Sets report_packs_to_run
     *
     * @param int[]|null $report_packs_to_run 
     *
     * @return self
     */
    public function setReportPacksToRun($report_packs_to_run)
    {
        if (is_null($report_packs_to_run)) {
            throw new \InvalidArgumentException('non-nullable report_packs_to_run cannot be null');
        }
        $this->container['report_packs_to_run'] = $report_packs_to_run;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_preference
     *
     * @return string|null
     */
    public function getSubmitToPensionSyncPreference()
    {
        return $this->container['submit_to_pension_sync_preference'];
    }

    /**
     * Sets submit_to_pension_sync_preference
     *
     * @param string|null $submit_to_pension_sync_preference 
     *
     * @return self
     */
    public function setSubmitToPensionSyncPreference($submit_to_pension_sync_preference)
    {
        if (is_null($submit_to_pension_sync_preference)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_preference cannot be null');
        }
        $allowedValues = $this->getSubmitToPensionSyncPreferenceAllowableValues();
        if (!in_array($submit_to_pension_sync_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'submit_to_pension_sync_preference', must be one of '%s'",
                    $submit_to_pension_sync_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync_preference'] = $submit_to_pension_sync_preference;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_date_time
     *
     * @return \DateTime|null
     */
    public function getSubmitToPensionSyncDateTime()
    {
        return $this->container['submit_to_pension_sync_date_time'];
    }

    /**
     * Sets submit_to_pension_sync_date_time
     *
     * @param \DateTime|null $submit_to_pension_sync_date_time 
     *
     * @return self
     */
    public function setSubmitToPensionSyncDateTime($submit_to_pension_sync_date_time)
    {
        if (is_null($submit_to_pension_sync_date_time)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_date_time cannot be null');
        }
        $this->container['submit_to_pension_sync_date_time'] = $submit_to_pension_sync_date_time;

        return $this;
    }

    /**
     * Gets save_changes_to_default_settings
     *
     * @return bool|null
     */
    public function getSaveChangesToDefaultSettings()
    {
        return $this->container['save_changes_to_default_settings'];
    }

    /**
     * Sets save_changes_to_default_settings
     *
     * @param bool|null $save_changes_to_default_settings 
     *
     * @return self
     */
    public function setSaveChangesToDefaultSettings($save_changes_to_default_settings)
    {
        if (is_null($save_changes_to_default_settings)) {
            throw new \InvalidArgumentException('non-nullable save_changes_to_default_settings cannot be null');
        }
        $this->container['save_changes_to_default_settings'] = $save_changes_to_default_settings;

        return $this;
    }

    /**
     * Gets from_pay_run_automation
     *
     * @return bool|null
     */
    public function getFromPayRunAutomation()
    {
        return $this->container['from_pay_run_automation'];
    }

    /**
     * Sets from_pay_run_automation
     *
     * @param bool|null $from_pay_run_automation 
     *
     * @return self
     */
    public function setFromPayRunAutomation($from_pay_run_automation)
    {
        if (is_null($from_pay_run_automation)) {
            throw new \InvalidArgumentException('non-nullable from_pay_run_automation cannot be null');
        }
        $this->container['from_pay_run_automation'] = $from_pay_run_automation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


