<?php
/**
 * FinalisePayRunOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FinalisePayRunOptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinalisePayRunOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinalisePayRunOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pay_run_id' => 'int',
        'date_paid' => '\DateTime',
        'export_journals' => 'bool',
        'publish_pay_slips' => 'string',
        'publish_pay_slips_date_time' => '\DateTime',
        'suppress_notifications' => 'bool',
        'lodge_pay_run' => 'bool',
        'lodge_pay_run_in_test_mode' => 'bool',
        'submit_to_pension_sync' => 'bool',
        'lodge_final_pay_run' => 'bool',
        'relodge_hmrc_late_submission_reason' => 'string',
        'relodge_selected_employees_only' => 'bool',
        'finalise_as_admin' => 'bool',
        'publish_pay_slips_preference' => 'string',
        'export_journals_preference' => 'string',
        'export_journals_date_time' => '\DateTime',
        'lodge_pay_run_preference' => 'string',
        'lodge_pay_run_date_time' => '\DateTime',
        'run_report_packs_preference' => 'string',
        'run_report_packs_date_time' => '\DateTime',
        'report_packs_to_run' => 'int[]',
        'submit_to_pension_sync_preference' => 'string',
        'submit_to_pension_sync_date_time' => '\DateTime',
        'save_changes_to_default_settings' => 'bool',
        'from_pay_run_automation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pay_run_id' => 'int32',
        'date_paid' => 'date-time',
        'export_journals' => null,
        'publish_pay_slips' => null,
        'publish_pay_slips_date_time' => 'date-time',
        'suppress_notifications' => null,
        'lodge_pay_run' => null,
        'lodge_pay_run_in_test_mode' => null,
        'submit_to_pension_sync' => null,
        'lodge_final_pay_run' => null,
        'relodge_hmrc_late_submission_reason' => null,
        'relodge_selected_employees_only' => null,
        'finalise_as_admin' => null,
        'publish_pay_slips_preference' => null,
        'export_journals_preference' => null,
        'export_journals_date_time' => 'date-time',
        'lodge_pay_run_preference' => null,
        'lodge_pay_run_date_time' => 'date-time',
        'run_report_packs_preference' => null,
        'run_report_packs_date_time' => 'date-time',
        'report_packs_to_run' => 'int32',
        'submit_to_pension_sync_preference' => null,
        'submit_to_pension_sync_date_time' => 'date-time',
        'save_changes_to_default_settings' => null,
        'from_pay_run_automation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_run_id' => 'payRunId',
        'date_paid' => 'datePaid',
        'export_journals' => 'exportJournals',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_pay_slips_date_time' => 'publishPaySlipsDateTime',
        'suppress_notifications' => 'suppressNotifications',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_in_test_mode' => 'lodgePayRunInTestMode',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'lodge_final_pay_run' => 'lodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'relodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'relodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'finaliseAsAdmin',
        'publish_pay_slips_preference' => 'publishPaySlipsPreference',
        'export_journals_preference' => 'exportJournalsPreference',
        'export_journals_date_time' => 'exportJournalsDateTime',
        'lodge_pay_run_preference' => 'lodgePayRunPreference',
        'lodge_pay_run_date_time' => 'lodgePayRunDateTime',
        'run_report_packs_preference' => 'runReportPacksPreference',
        'run_report_packs_date_time' => 'runReportPacksDateTime',
        'report_packs_to_run' => 'reportPacksToRun',
        'submit_to_pension_sync_preference' => 'submitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'submitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'saveChangesToDefaultSettings',
        'from_pay_run_automation' => 'fromPayRunAutomation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_run_id' => 'setPayRunId',
        'date_paid' => 'setDatePaid',
        'export_journals' => 'setExportJournals',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_pay_slips_date_time' => 'setPublishPaySlipsDateTime',
        'suppress_notifications' => 'setSuppressNotifications',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_in_test_mode' => 'setLodgePayRunInTestMode',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'lodge_final_pay_run' => 'setLodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'setRelodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'setRelodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'setFinaliseAsAdmin',
        'publish_pay_slips_preference' => 'setPublishPaySlipsPreference',
        'export_journals_preference' => 'setExportJournalsPreference',
        'export_journals_date_time' => 'setExportJournalsDateTime',
        'lodge_pay_run_preference' => 'setLodgePayRunPreference',
        'lodge_pay_run_date_time' => 'setLodgePayRunDateTime',
        'run_report_packs_preference' => 'setRunReportPacksPreference',
        'run_report_packs_date_time' => 'setRunReportPacksDateTime',
        'report_packs_to_run' => 'setReportPacksToRun',
        'submit_to_pension_sync_preference' => 'setSubmitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'setSubmitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'setSaveChangesToDefaultSettings',
        'from_pay_run_automation' => 'setFromPayRunAutomation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_run_id' => 'getPayRunId',
        'date_paid' => 'getDatePaid',
        'export_journals' => 'getExportJournals',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_pay_slips_date_time' => 'getPublishPaySlipsDateTime',
        'suppress_notifications' => 'getSuppressNotifications',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_in_test_mode' => 'getLodgePayRunInTestMode',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'lodge_final_pay_run' => 'getLodgeFinalPayRun',
        'relodge_hmrc_late_submission_reason' => 'getRelodgeHmrcLateSubmissionReason',
        'relodge_selected_employees_only' => 'getRelodgeSelectedEmployeesOnly',
        'finalise_as_admin' => 'getFinaliseAsAdmin',
        'publish_pay_slips_preference' => 'getPublishPaySlipsPreference',
        'export_journals_preference' => 'getExportJournalsPreference',
        'export_journals_date_time' => 'getExportJournalsDateTime',
        'lodge_pay_run_preference' => 'getLodgePayRunPreference',
        'lodge_pay_run_date_time' => 'getLodgePayRunDateTime',
        'run_report_packs_preference' => 'getRunReportPacksPreference',
        'run_report_packs_date_time' => 'getRunReportPacksDateTime',
        'report_packs_to_run' => 'getReportPacksToRun',
        'submit_to_pension_sync_preference' => 'getSubmitToPensionSyncPreference',
        'submit_to_pension_sync_date_time' => 'getSubmitToPensionSyncDateTime',
        'save_changes_to_default_settings' => 'getSaveChangesToDefaultSettings',
        'from_pay_run_automation' => 'getFromPayRunAutomation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_A = 'A';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_B = 'B';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_C = 'C';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_D = 'D';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_E = 'E';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_F = 'F';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_G = 'G';
    const RELODGE_HMRC_LATE_SUBMISSION_REASON_H = 'H';
    const PUBLISH_PAY_SLIPS_PREFERENCE_MANUAL = 'Manual';
    const PUBLISH_PAY_SLIPS_PREFERENCE_IMMEDIATE = 'Immediate';
    const PUBLISH_PAY_SLIPS_PREFERENCE_SCHEDULED = 'Scheduled';
    const EXPORT_JOURNALS_PREFERENCE_MANUAL = 'Manual';
    const EXPORT_JOURNALS_PREFERENCE_IMMEDIATE = 'Immediate';
    const EXPORT_JOURNALS_PREFERENCE_SCHEDULED = 'Scheduled';
    const LODGE_PAY_RUN_PREFERENCE_MANUAL = 'Manual';
    const LODGE_PAY_RUN_PREFERENCE_IMMEDIATE = 'Immediate';
    const LODGE_PAY_RUN_PREFERENCE_SCHEDULED = 'Scheduled';
    const RUN_REPORT_PACKS_PREFERENCE_MANUAL = 'Manual';
    const RUN_REPORT_PACKS_PREFERENCE_IMMEDIATE = 'Immediate';
    const RUN_REPORT_PACKS_PREFERENCE_SCHEDULED = 'Scheduled';
    const SUBMIT_TO_PENSION_SYNC_PREFERENCE_MANUAL = 'Manual';
    const SUBMIT_TO_PENSION_SYNC_PREFERENCE_IMMEDIATE = 'Immediate';
    const SUBMIT_TO_PENSION_SYNC_PREFERENCE_SCHEDULED = 'Scheduled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelodgeHmrcLateSubmissionReasonAllowableValues()
    {
        return [
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_A,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_B,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_C,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_D,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_E,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_F,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_G,
            self::RELODGE_HMRC_LATE_SUBMISSION_REASON_H,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsPreferenceAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_PREFERENCE_MANUAL,
            self::PUBLISH_PAY_SLIPS_PREFERENCE_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_PREFERENCE_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsPreferenceAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_PREFERENCE_MANUAL,
            self::EXPORT_JOURNALS_PREFERENCE_IMMEDIATE,
            self::EXPORT_JOURNALS_PREFERENCE_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunPreferenceAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_PREFERENCE_MANUAL,
            self::LODGE_PAY_RUN_PREFERENCE_IMMEDIATE,
            self::LODGE_PAY_RUN_PREFERENCE_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksPreferenceAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_PREFERENCE_MANUAL,
            self::RUN_REPORT_PACKS_PREFERENCE_IMMEDIATE,
            self::RUN_REPORT_PACKS_PREFERENCE_SCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncPreferenceAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_PREFERENCE_SCHEDULED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pay_run_id'] = isset($data['pay_run_id']) ? $data['pay_run_id'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['export_journals'] = isset($data['export_journals']) ? $data['export_journals'] : null;
        $this->container['publish_pay_slips'] = isset($data['publish_pay_slips']) ? $data['publish_pay_slips'] : null;
        $this->container['publish_pay_slips_date_time'] = isset($data['publish_pay_slips_date_time']) ? $data['publish_pay_slips_date_time'] : null;
        $this->container['suppress_notifications'] = isset($data['suppress_notifications']) ? $data['suppress_notifications'] : null;
        $this->container['lodge_pay_run'] = isset($data['lodge_pay_run']) ? $data['lodge_pay_run'] : null;
        $this->container['lodge_pay_run_in_test_mode'] = isset($data['lodge_pay_run_in_test_mode']) ? $data['lodge_pay_run_in_test_mode'] : null;
        $this->container['submit_to_pension_sync'] = isset($data['submit_to_pension_sync']) ? $data['submit_to_pension_sync'] : null;
        $this->container['lodge_final_pay_run'] = isset($data['lodge_final_pay_run']) ? $data['lodge_final_pay_run'] : null;
        $this->container['relodge_hmrc_late_submission_reason'] = isset($data['relodge_hmrc_late_submission_reason']) ? $data['relodge_hmrc_late_submission_reason'] : null;
        $this->container['relodge_selected_employees_only'] = isset($data['relodge_selected_employees_only']) ? $data['relodge_selected_employees_only'] : null;
        $this->container['finalise_as_admin'] = isset($data['finalise_as_admin']) ? $data['finalise_as_admin'] : null;
        $this->container['publish_pay_slips_preference'] = isset($data['publish_pay_slips_preference']) ? $data['publish_pay_slips_preference'] : null;
        $this->container['export_journals_preference'] = isset($data['export_journals_preference']) ? $data['export_journals_preference'] : null;
        $this->container['export_journals_date_time'] = isset($data['export_journals_date_time']) ? $data['export_journals_date_time'] : null;
        $this->container['lodge_pay_run_preference'] = isset($data['lodge_pay_run_preference']) ? $data['lodge_pay_run_preference'] : null;
        $this->container['lodge_pay_run_date_time'] = isset($data['lodge_pay_run_date_time']) ? $data['lodge_pay_run_date_time'] : null;
        $this->container['run_report_packs_preference'] = isset($data['run_report_packs_preference']) ? $data['run_report_packs_preference'] : null;
        $this->container['run_report_packs_date_time'] = isset($data['run_report_packs_date_time']) ? $data['run_report_packs_date_time'] : null;
        $this->container['report_packs_to_run'] = isset($data['report_packs_to_run']) ? $data['report_packs_to_run'] : null;
        $this->container['submit_to_pension_sync_preference'] = isset($data['submit_to_pension_sync_preference']) ? $data['submit_to_pension_sync_preference'] : null;
        $this->container['submit_to_pension_sync_date_time'] = isset($data['submit_to_pension_sync_date_time']) ? $data['submit_to_pension_sync_date_time'] : null;
        $this->container['save_changes_to_default_settings'] = isset($data['save_changes_to_default_settings']) ? $data['save_changes_to_default_settings'] : null;
        $this->container['from_pay_run_automation'] = isset($data['from_pay_run_automation']) ? $data['from_pay_run_automation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($this->container['publish_pay_slips']) && !in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_pay_slips', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRelodgeHmrcLateSubmissionReasonAllowableValues();
        if (!is_null($this->container['relodge_hmrc_late_submission_reason']) && !in_array($this->container['relodge_hmrc_late_submission_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'relodge_hmrc_late_submission_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsPreferenceAllowableValues();
        if (!is_null($this->container['publish_pay_slips_preference']) && !in_array($this->container['publish_pay_slips_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_pay_slips_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsPreferenceAllowableValues();
        if (!is_null($this->container['export_journals_preference']) && !in_array($this->container['export_journals_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_journals_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunPreferenceAllowableValues();
        if (!is_null($this->container['lodge_pay_run_preference']) && !in_array($this->container['lodge_pay_run_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lodge_pay_run_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksPreferenceAllowableValues();
        if (!is_null($this->container['run_report_packs_preference']) && !in_array($this->container['run_report_packs_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'run_report_packs_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncPreferenceAllowableValues();
        if (!is_null($this->container['submit_to_pension_sync_preference']) && !in_array($this->container['submit_to_pension_sync_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'submit_to_pension_sync_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_run_id
     *
     * @return int
     */
    public function getPayRunId()
    {
        return $this->container['pay_run_id'];
    }

    /**
     * Sets pay_run_id
     *
     * @param int $pay_run_id 
     *
     * @return $this
     */
    public function setPayRunId($pay_run_id)
    {
        $this->container['pay_run_id'] = $pay_run_id;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime $date_paid 
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets export_journals
     *
     * @return bool
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param bool $export_journals 
     *
     * @return $this
     */
    public function setExportJournals($export_journals)
    {
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string $publish_pay_slips 
     *
     * @return $this
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($publish_pay_slips) && !in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_pay_slips', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_pay_slips_date_time
     *
     * @return \DateTime
     */
    public function getPublishPaySlipsDateTime()
    {
        return $this->container['publish_pay_slips_date_time'];
    }

    /**
     * Sets publish_pay_slips_date_time
     *
     * @param \DateTime $publish_pay_slips_date_time 
     *
     * @return $this
     */
    public function setPublishPaySlipsDateTime($publish_pay_slips_date_time)
    {
        $this->container['publish_pay_slips_date_time'] = $publish_pay_slips_date_time;

        return $this;
    }

    /**
     * Gets suppress_notifications
     *
     * @return bool
     */
    public function getSuppressNotifications()
    {
        return $this->container['suppress_notifications'];
    }

    /**
     * Sets suppress_notifications
     *
     * @param bool $suppress_notifications 
     *
     * @return $this
     */
    public function setSuppressNotifications($suppress_notifications)
    {
        $this->container['suppress_notifications'] = $suppress_notifications;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return bool
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param bool $lodge_pay_run 
     *
     * @return $this
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_in_test_mode
     *
     * @return bool
     */
    public function getLodgePayRunInTestMode()
    {
        return $this->container['lodge_pay_run_in_test_mode'];
    }

    /**
     * Sets lodge_pay_run_in_test_mode
     *
     * @param bool $lodge_pay_run_in_test_mode 
     *
     * @return $this
     */
    public function setLodgePayRunInTestMode($lodge_pay_run_in_test_mode)
    {
        $this->container['lodge_pay_run_in_test_mode'] = $lodge_pay_run_in_test_mode;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return bool
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param bool $submit_to_pension_sync 
     *
     * @return $this
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets lodge_final_pay_run
     *
     * @return bool
     */
    public function getLodgeFinalPayRun()
    {
        return $this->container['lodge_final_pay_run'];
    }

    /**
     * Sets lodge_final_pay_run
     *
     * @param bool $lodge_final_pay_run 
     *
     * @return $this
     */
    public function setLodgeFinalPayRun($lodge_final_pay_run)
    {
        $this->container['lodge_final_pay_run'] = $lodge_final_pay_run;

        return $this;
    }

    /**
     * Gets relodge_hmrc_late_submission_reason
     *
     * @return string
     */
    public function getRelodgeHmrcLateSubmissionReason()
    {
        return $this->container['relodge_hmrc_late_submission_reason'];
    }

    /**
     * Sets relodge_hmrc_late_submission_reason
     *
     * @param string $relodge_hmrc_late_submission_reason 
     *
     * @return $this
     */
    public function setRelodgeHmrcLateSubmissionReason($relodge_hmrc_late_submission_reason)
    {
        $allowedValues = $this->getRelodgeHmrcLateSubmissionReasonAllowableValues();
        if (!is_null($relodge_hmrc_late_submission_reason) && !in_array($relodge_hmrc_late_submission_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'relodge_hmrc_late_submission_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relodge_hmrc_late_submission_reason'] = $relodge_hmrc_late_submission_reason;

        return $this;
    }

    /**
     * Gets relodge_selected_employees_only
     *
     * @return bool
     */
    public function getRelodgeSelectedEmployeesOnly()
    {
        return $this->container['relodge_selected_employees_only'];
    }

    /**
     * Sets relodge_selected_employees_only
     *
     * @param bool $relodge_selected_employees_only 
     *
     * @return $this
     */
    public function setRelodgeSelectedEmployeesOnly($relodge_selected_employees_only)
    {
        $this->container['relodge_selected_employees_only'] = $relodge_selected_employees_only;

        return $this;
    }

    /**
     * Gets finalise_as_admin
     *
     * @return bool
     */
    public function getFinaliseAsAdmin()
    {
        return $this->container['finalise_as_admin'];
    }

    /**
     * Sets finalise_as_admin
     *
     * @param bool $finalise_as_admin 
     *
     * @return $this
     */
    public function setFinaliseAsAdmin($finalise_as_admin)
    {
        $this->container['finalise_as_admin'] = $finalise_as_admin;

        return $this;
    }

    /**
     * Gets publish_pay_slips_preference
     *
     * @return string
     */
    public function getPublishPaySlipsPreference()
    {
        return $this->container['publish_pay_slips_preference'];
    }

    /**
     * Sets publish_pay_slips_preference
     *
     * @param string $publish_pay_slips_preference 
     *
     * @return $this
     */
    public function setPublishPaySlipsPreference($publish_pay_slips_preference)
    {
        $allowedValues = $this->getPublishPaySlipsPreferenceAllowableValues();
        if (!is_null($publish_pay_slips_preference) && !in_array($publish_pay_slips_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_pay_slips_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips_preference'] = $publish_pay_slips_preference;

        return $this;
    }

    /**
     * Gets export_journals_preference
     *
     * @return string
     */
    public function getExportJournalsPreference()
    {
        return $this->container['export_journals_preference'];
    }

    /**
     * Sets export_journals_preference
     *
     * @param string $export_journals_preference 
     *
     * @return $this
     */
    public function setExportJournalsPreference($export_journals_preference)
    {
        $allowedValues = $this->getExportJournalsPreferenceAllowableValues();
        if (!is_null($export_journals_preference) && !in_array($export_journals_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_journals_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals_preference'] = $export_journals_preference;

        return $this;
    }

    /**
     * Gets export_journals_date_time
     *
     * @return \DateTime
     */
    public function getExportJournalsDateTime()
    {
        return $this->container['export_journals_date_time'];
    }

    /**
     * Sets export_journals_date_time
     *
     * @param \DateTime $export_journals_date_time 
     *
     * @return $this
     */
    public function setExportJournalsDateTime($export_journals_date_time)
    {
        $this->container['export_journals_date_time'] = $export_journals_date_time;

        return $this;
    }

    /**
     * Gets lodge_pay_run_preference
     *
     * @return string
     */
    public function getLodgePayRunPreference()
    {
        return $this->container['lodge_pay_run_preference'];
    }

    /**
     * Sets lodge_pay_run_preference
     *
     * @param string $lodge_pay_run_preference 
     *
     * @return $this
     */
    public function setLodgePayRunPreference($lodge_pay_run_preference)
    {
        $allowedValues = $this->getLodgePayRunPreferenceAllowableValues();
        if (!is_null($lodge_pay_run_preference) && !in_array($lodge_pay_run_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lodge_pay_run_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run_preference'] = $lodge_pay_run_preference;

        return $this;
    }

    /**
     * Gets lodge_pay_run_date_time
     *
     * @return \DateTime
     */
    public function getLodgePayRunDateTime()
    {
        return $this->container['lodge_pay_run_date_time'];
    }

    /**
     * Sets lodge_pay_run_date_time
     *
     * @param \DateTime $lodge_pay_run_date_time 
     *
     * @return $this
     */
    public function setLodgePayRunDateTime($lodge_pay_run_date_time)
    {
        $this->container['lodge_pay_run_date_time'] = $lodge_pay_run_date_time;

        return $this;
    }

    /**
     * Gets run_report_packs_preference
     *
     * @return string
     */
    public function getRunReportPacksPreference()
    {
        return $this->container['run_report_packs_preference'];
    }

    /**
     * Sets run_report_packs_preference
     *
     * @param string $run_report_packs_preference 
     *
     * @return $this
     */
    public function setRunReportPacksPreference($run_report_packs_preference)
    {
        $allowedValues = $this->getRunReportPacksPreferenceAllowableValues();
        if (!is_null($run_report_packs_preference) && !in_array($run_report_packs_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'run_report_packs_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs_preference'] = $run_report_packs_preference;

        return $this;
    }

    /**
     * Gets run_report_packs_date_time
     *
     * @return \DateTime
     */
    public function getRunReportPacksDateTime()
    {
        return $this->container['run_report_packs_date_time'];
    }

    /**
     * Sets run_report_packs_date_time
     *
     * @param \DateTime $run_report_packs_date_time 
     *
     * @return $this
     */
    public function setRunReportPacksDateTime($run_report_packs_date_time)
    {
        $this->container['run_report_packs_date_time'] = $run_report_packs_date_time;

        return $this;
    }

    /**
     * Gets report_packs_to_run
     *
     * @return int[]
     */
    public function getReportPacksToRun()
    {
        return $this->container['report_packs_to_run'];
    }

    /**
     * Sets report_packs_to_run
     *
     * @param int[] $report_packs_to_run 
     *
     * @return $this
     */
    public function setReportPacksToRun($report_packs_to_run)
    {
        $this->container['report_packs_to_run'] = $report_packs_to_run;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_preference
     *
     * @return string
     */
    public function getSubmitToPensionSyncPreference()
    {
        return $this->container['submit_to_pension_sync_preference'];
    }

    /**
     * Sets submit_to_pension_sync_preference
     *
     * @param string $submit_to_pension_sync_preference 
     *
     * @return $this
     */
    public function setSubmitToPensionSyncPreference($submit_to_pension_sync_preference)
    {
        $allowedValues = $this->getSubmitToPensionSyncPreferenceAllowableValues();
        if (!is_null($submit_to_pension_sync_preference) && !in_array($submit_to_pension_sync_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'submit_to_pension_sync_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync_preference'] = $submit_to_pension_sync_preference;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_date_time
     *
     * @return \DateTime
     */
    public function getSubmitToPensionSyncDateTime()
    {
        return $this->container['submit_to_pension_sync_date_time'];
    }

    /**
     * Sets submit_to_pension_sync_date_time
     *
     * @param \DateTime $submit_to_pension_sync_date_time 
     *
     * @return $this
     */
    public function setSubmitToPensionSyncDateTime($submit_to_pension_sync_date_time)
    {
        $this->container['submit_to_pension_sync_date_time'] = $submit_to_pension_sync_date_time;

        return $this;
    }

    /**
     * Gets save_changes_to_default_settings
     *
     * @return bool
     */
    public function getSaveChangesToDefaultSettings()
    {
        return $this->container['save_changes_to_default_settings'];
    }

    /**
     * Sets save_changes_to_default_settings
     *
     * @param bool $save_changes_to_default_settings 
     *
     * @return $this
     */
    public function setSaveChangesToDefaultSettings($save_changes_to_default_settings)
    {
        $this->container['save_changes_to_default_settings'] = $save_changes_to_default_settings;

        return $this;
    }

    /**
     * Gets from_pay_run_automation
     *
     * @return bool
     */
    public function getFromPayRunAutomation()
    {
        return $this->container['from_pay_run_automation'];
    }

    /**
     * Sets from_pay_run_automation
     *
     * @param bool $from_pay_run_automation 
     *
     * @return $this
     */
    public function setFromPayRunAutomation($from_pay_run_automation)
    {
        $this->container['from_pay_run_automation'] = $from_pay_run_automation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


