<?php
/**
 * AuPayCategoryModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuPayCategoryModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuPayCategoryModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuPayCategoryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_summary_classification' => 'string',
        'allowance_description' => 'string',
        'default_super_rate' => 'double',
        'super_expense_mapping_code' => 'string',
        'super_liability_mapping_code' => 'string',
        'is_payroll_tax_exempt' => 'bool',
        'award_name' => 'string',
        'award_id' => 'int',
        'pay_category_type' => 'string',
        'id' => 'int',
        'parent_id' => 'int',
        'name' => 'string',
        'rate_unit' => 'string',
        'accrues_leave' => 'bool',
        'rate_loading_percent' => 'double',
        'penalty_loading_percent' => 'double',
        'is_tax_exempt' => 'bool',
        'external_id' => 'string',
        'source' => 'string',
        'general_ledger_mapping_code' => 'string',
        'is_system_pay_category' => 'bool',
        'number_of_decimal_places' => 'int',
        'rounding_method' => 'string',
        'hide_units_on_pay_slip' => 'bool',
        'is_primary' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_summary_classification' => null,
        'allowance_description' => null,
        'default_super_rate' => 'double',
        'super_expense_mapping_code' => null,
        'super_liability_mapping_code' => null,
        'is_payroll_tax_exempt' => null,
        'award_name' => null,
        'award_id' => 'int32',
        'pay_category_type' => null,
        'id' => 'int32',
        'parent_id' => 'int32',
        'name' => null,
        'rate_unit' => null,
        'accrues_leave' => null,
        'rate_loading_percent' => 'double',
        'penalty_loading_percent' => 'double',
        'is_tax_exempt' => null,
        'external_id' => null,
        'source' => null,
        'general_ledger_mapping_code' => null,
        'is_system_pay_category' => null,
        'number_of_decimal_places' => 'int32',
        'rounding_method' => null,
        'hide_units_on_pay_slip' => null,
        'is_primary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_summary_classification' => 'paymentSummaryClassification',
        'allowance_description' => 'allowanceDescription',
        'default_super_rate' => 'defaultSuperRate',
        'super_expense_mapping_code' => 'superExpenseMappingCode',
        'super_liability_mapping_code' => 'superLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'isPayrollTaxExempt',
        'award_name' => 'awardName',
        'award_id' => 'awardId',
        'pay_category_type' => 'payCategoryType',
        'id' => 'id',
        'parent_id' => 'parentId',
        'name' => 'name',
        'rate_unit' => 'rateUnit',
        'accrues_leave' => 'accruesLeave',
        'rate_loading_percent' => 'rateLoadingPercent',
        'penalty_loading_percent' => 'penaltyLoadingPercent',
        'is_tax_exempt' => 'isTaxExempt',
        'external_id' => 'externalId',
        'source' => 'source',
        'general_ledger_mapping_code' => 'generalLedgerMappingCode',
        'is_system_pay_category' => 'isSystemPayCategory',
        'number_of_decimal_places' => 'numberOfDecimalPlaces',
        'rounding_method' => 'roundingMethod',
        'hide_units_on_pay_slip' => 'hideUnitsOnPaySlip',
        'is_primary' => 'isPrimary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_summary_classification' => 'setPaymentSummaryClassification',
        'allowance_description' => 'setAllowanceDescription',
        'default_super_rate' => 'setDefaultSuperRate',
        'super_expense_mapping_code' => 'setSuperExpenseMappingCode',
        'super_liability_mapping_code' => 'setSuperLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'setIsPayrollTaxExempt',
        'award_name' => 'setAwardName',
        'award_id' => 'setAwardId',
        'pay_category_type' => 'setPayCategoryType',
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'rate_unit' => 'setRateUnit',
        'accrues_leave' => 'setAccruesLeave',
        'rate_loading_percent' => 'setRateLoadingPercent',
        'penalty_loading_percent' => 'setPenaltyLoadingPercent',
        'is_tax_exempt' => 'setIsTaxExempt',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'general_ledger_mapping_code' => 'setGeneralLedgerMappingCode',
        'is_system_pay_category' => 'setIsSystemPayCategory',
        'number_of_decimal_places' => 'setNumberOfDecimalPlaces',
        'rounding_method' => 'setRoundingMethod',
        'hide_units_on_pay_slip' => 'setHideUnitsOnPaySlip',
        'is_primary' => 'setIsPrimary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_summary_classification' => 'getPaymentSummaryClassification',
        'allowance_description' => 'getAllowanceDescription',
        'default_super_rate' => 'getDefaultSuperRate',
        'super_expense_mapping_code' => 'getSuperExpenseMappingCode',
        'super_liability_mapping_code' => 'getSuperLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'getIsPayrollTaxExempt',
        'award_name' => 'getAwardName',
        'award_id' => 'getAwardId',
        'pay_category_type' => 'getPayCategoryType',
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'rate_unit' => 'getRateUnit',
        'accrues_leave' => 'getAccruesLeave',
        'rate_loading_percent' => 'getRateLoadingPercent',
        'penalty_loading_percent' => 'getPenaltyLoadingPercent',
        'is_tax_exempt' => 'getIsTaxExempt',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'general_ledger_mapping_code' => 'getGeneralLedgerMappingCode',
        'is_system_pay_category' => 'getIsSystemPayCategory',
        'number_of_decimal_places' => 'getNumberOfDecimalPlaces',
        'rounding_method' => 'getRoundingMethod',
        'hide_units_on_pay_slip' => 'getHideUnitsOnPaySlip',
        'is_primary' => 'getIsPrimary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_SUMMARY_CLASSIFICATION__DEFAULT = 'Default';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE = 'Allowance';
    const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_R = 'LumpSumATypeR';
    const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_T = 'LumpSumATypeT';
    const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_B = 'LumpSumB';
    const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_D = 'LumpSumD';
    const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_E = 'LumpSumE';
    const PAYMENT_SUMMARY_CLASSIFICATION_EXCLUDE = 'Exclude';
    const PAYMENT_SUMMARY_CLASSIFICATION_CDEP = 'Cdep';
    const PAYMENT_SUMMARY_CLASSIFICATION_EXEMPT_FOREIGN_EMPLOYMENT_INCOME = 'ExemptForeignEmploymentIncome';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_CAR = 'AllowanceCar';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRANSPORT = 'AllowanceTransport';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_LAUNDRY = 'AllowanceLaundry';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_MEALS = 'AllowanceMeals';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRAVEL = 'AllowanceTravel';
    const PAYMENT_SUMMARY_CLASSIFICATION_GROSS_SALARY = 'GrossSalary';
    const PAYMENT_SUMMARY_CLASSIFICATION_BONUS = 'Bonus';
    const PAYMENT_SUMMARY_CLASSIFICATION_DIRECTORS_FEES = 'DirectorsFees';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_ENTERTAINMENT = 'AllowanceEntertainment';
    const PAYMENT_SUMMARY_CLASSIFICATION_GROSS_COMMISSION = 'GrossCommission';
    const PAYMENT_SUMMARY_CLASSIFICATION_PENSION = 'Pension';
    const PAYMENT_SUMMARY_CLASSIFICATION_NOT_REPORTABLE = 'NotReportable';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_SALARY = 'MyGrossSalary';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_FEES = 'MyFees';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_TIPS = 'MyGrossTips';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ESOS_BENEFIT = 'MyEsosBenefit';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_GRATUITY = 'MyGratuity';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_BENEFITS_IN_KIND = 'MyBenefitsInKind';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_VALUE_OF_LIVING_ACCOMMODATIONS = 'MyValueOfLivingAccommodations';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_REFUND_PROVIDENT_PENSION_FUND = 'MyRefundProvidentPensionFund';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_COMPENSATION_FOR_LOSS_OF_EMPLOYMENT = 'MyCompensationForLossOfEmployment';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_PENSION = 'MyPension';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ANNUITIES = 'MyAnnuities';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_CP38_DEDUCTION = 'MyCp38Deduction';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_PAID_VIA_SALARY_DEDUCTION = 'MyZakatPaidViaSalaryDeduction';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_RELIEF_CLAIM_TP1 = 'MyReliefClaimTp1';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_RELIEF_CLAIM_TP1 = 'MyZakatReliefClaimTp1';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_TAX_EXEMPT_ALLOWANCES = 'MyTaxExemptAllowances';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_A = 'MyArrearsIncomeA';
    const PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_B = 'MyArrearsIncomeB';
    const PAYMENT_SUMMARY_CLASSIFICATION_NONE = 'None';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_CASH_OUT_OF_LEAVE_IN_SERVICE = 'LeaveCashOutOfLeaveInService';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_UNUSED_LEAVE_ON_TERMINATION = 'LeaveUnusedLeaveOnTermination';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_PAID_PARENTAL_LEAVE = 'LeavePaidParentalLeave';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_WORKERS_COMPENSATION = 'LeaveWorkersCompensation';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_ANCILLARY_AND_DEFENCE_LEAVE = 'LeaveAncillaryAndDefenceLeave';
    const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_OTHER_PAID_LEAVE = 'LeaveOtherPaidLeave';
    const PAYMENT_SUMMARY_CLASSIFICATION_OVERTIME = 'Overtime';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TOOL = 'AllowanceTool';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TASKS = 'AllowanceTasks';
    const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_QUALIFICATIONS_CERTIFICATES = 'AllowanceQualificationsCertificates';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_R = 'EtpLifeBenefitCodeR';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_O = 'EtpLifeBenefitCodeO';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_S = 'EtpMultiplePaymentsCodeS';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_P = 'EtpMultiplePaymentsCodeP';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_D = 'EtpDeathBenefitCodeD';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_N = 'EtpDeathBenefitCodeN';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_B = 'EtpDeathBenefitCodeB';
    const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_T = 'EtpDeathBenefitCodeT';
    const PAYMENT_SUMMARY_CLASSIFICATION_RETURN_TO_WORK_PAYMENT = 'ReturnToWorkPayment';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_GRATUITY = 'SgGratuity';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_NOTICE_PAY = 'SgNoticePay';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_EX_GRATIA_PAYMENT = 'SgExGratiaPayment';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_OTHER_LUMP_SUM_PAYMENTS = 'SgOtherLumpSumPayments';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_COMPENSATION_LOSS_OF_OFFICE = 'SgCompensationLossOfOffice';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_PRE1993 = 'SgRetirementBenefitsPre1993';
    const PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_FROM1993 = 'SgRetirementBenefitsFrom1993';
    const PAY_CATEGORY_TYPE_STANDARD = 'Standard';
    const PAY_CATEGORY_TYPE_LEAVE_LOADING = 'LeaveLoading';
    const PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_PAYMENT = 'GenuineRedundancyLeavePayment';
    const PAY_CATEGORY_TYPE_OPENING_BALANCE_ALLOWANCES = 'OpeningBalanceAllowances';
    const PAY_CATEGORY_TYPE_ETP_TYPE_R_TAXABLE = 'EtpTypeRTaxable';
    const PAY_CATEGORY_TYPE_ETP_TYPE_R_TAX_FREE = 'EtpTypeRTaxFree';
    const PAY_CATEGORY_TYPE_ETP_TYPE_O_TAXABLE = 'EtpTypeOTaxable';
    const PAY_CATEGORY_TYPE_ETP_TYPE_O_TAX_FREE = 'EtpTypeOTaxFree';
    const PAY_CATEGORY_TYPE_ETP_LUMP_SUM_D = 'EtpLumpSumD';
    const PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_LOADING = 'GenuineRedundancyLeaveLoading';
    const PAY_CATEGORY_TYPE_METHOD_B2_ADDITIONAL_PAYMENTS_OPENING_BALANCE = 'MethodB2AdditionalPaymentsOpeningBalance';
    const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAXABLE = 'EtpSuperableTypeOTaxable';
    const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAX_FREE = 'EtpSuperableTypeOTaxFree';
    const PAY_CATEGORY_TYPE_ETP_TYPE_O_UNUSED_LEAVE_PAYMENT = 'EtpTypeOUnusedLeavePayment';
    const PAY_CATEGORY_TYPE_ETP_TYPE_S_TAXABLE = 'EtpTypeSTaxable';
    const PAY_CATEGORY_TYPE_ETP_TYPE_S_TAX_FREE = 'EtpTypeSTaxFree';
    const PAY_CATEGORY_TYPE_ETP_TYPE_P_TAXABLE = 'EtpTypePTaxable';
    const PAY_CATEGORY_TYPE_ETP_TYPE_P_TAX_FREE = 'EtpTypePTaxFree';
    const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAXABLE = 'EtpSuperableTypePTaxable';
    const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAX_FREE = 'EtpSuperableTypePTaxFree';
    const PAY_CATEGORY_TYPE_ETP_TYPE_P_UNUSED_LEAVE_PAYMENT = 'EtpTypePUnusedLeavePayment';
    const PAY_CATEGORY_TYPE_NORMAL_TERMINATION_LEAVE_LOADING = 'NormalTerminationLeaveLoading';
    const RATE_UNIT_HOURLY = 'Hourly';
    const RATE_UNIT_ANNUALLY = 'Annually';
    const RATE_UNIT_FIXED = 'Fixed';
    const RATE_UNIT_DAILY = 'Daily';
    const RATE_UNIT_MONTHLY = 'Monthly';
    const ROUNDING_METHOD_TO_EVEN = 'ToEven';
    const ROUNDING_METHOD_AWAY_FROM_ZERO = 'AwayFromZero';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentSummaryClassificationAllowableValues()
    {
        return [
            self::PAYMENT_SUMMARY_CLASSIFICATION__DEFAULT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_R,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_T,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_D,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_E,
            self::PAYMENT_SUMMARY_CLASSIFICATION_EXCLUDE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_CDEP,
            self::PAYMENT_SUMMARY_CLASSIFICATION_EXEMPT_FOREIGN_EMPLOYMENT_INCOME,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_CAR,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRANSPORT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_LAUNDRY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_MEALS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRAVEL,
            self::PAYMENT_SUMMARY_CLASSIFICATION_GROSS_SALARY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_BONUS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_DIRECTORS_FEES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_ENTERTAINMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_GROSS_COMMISSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_PENSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_NOT_REPORTABLE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_SALARY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_FEES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_TIPS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ESOS_BENEFIT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GRATUITY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_BENEFITS_IN_KIND,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_VALUE_OF_LIVING_ACCOMMODATIONS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_REFUND_PROVIDENT_PENSION_FUND,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_COMPENSATION_FOR_LOSS_OF_EMPLOYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_PENSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ANNUITIES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_CP38_DEDUCTION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_PAID_VIA_SALARY_DEDUCTION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_RELIEF_CLAIM_TP1,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_RELIEF_CLAIM_TP1,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_TAX_EXEMPT_ALLOWANCES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_A,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_NONE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_CASH_OUT_OF_LEAVE_IN_SERVICE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_UNUSED_LEAVE_ON_TERMINATION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_PAID_PARENTAL_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_WORKERS_COMPENSATION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_ANCILLARY_AND_DEFENCE_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_OTHER_PAID_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_OVERTIME,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TOOL,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TASKS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_QUALIFICATIONS_CERTIFICATES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_R,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_O,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_S,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_P,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_D,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_N,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_T,
            self::PAYMENT_SUMMARY_CLASSIFICATION_RETURN_TO_WORK_PAYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_GRATUITY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_NOTICE_PAY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_EX_GRATIA_PAYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_OTHER_LUMP_SUM_PAYMENTS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_COMPENSATION_LOSS_OF_OFFICE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_PRE1993,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_FROM1993,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCategoryTypeAllowableValues()
    {
        return [
            self::PAY_CATEGORY_TYPE_STANDARD,
            self::PAY_CATEGORY_TYPE_LEAVE_LOADING,
            self::PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_OPENING_BALANCE_ALLOWANCES,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_R_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_R_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_LUMP_SUM_D,
            self::PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_LOADING,
            self::PAY_CATEGORY_TYPE_METHOD_B2_ADDITIONAL_PAYMENTS_OPENING_BALANCE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_UNUSED_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_S_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_S_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_UNUSED_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_NORMAL_TERMINATION_LEAVE_LOADING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateUnitAllowableValues()
    {
        return [
            self::RATE_UNIT_HOURLY,
            self::RATE_UNIT_ANNUALLY,
            self::RATE_UNIT_FIXED,
            self::RATE_UNIT_DAILY,
            self::RATE_UNIT_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoundingMethodAllowableValues()
    {
        return [
            self::ROUNDING_METHOD_TO_EVEN,
            self::ROUNDING_METHOD_AWAY_FROM_ZERO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_summary_classification'] = isset($data['payment_summary_classification']) ? $data['payment_summary_classification'] : null;
        $this->container['allowance_description'] = isset($data['allowance_description']) ? $data['allowance_description'] : null;
        $this->container['default_super_rate'] = isset($data['default_super_rate']) ? $data['default_super_rate'] : null;
        $this->container['super_expense_mapping_code'] = isset($data['super_expense_mapping_code']) ? $data['super_expense_mapping_code'] : null;
        $this->container['super_liability_mapping_code'] = isset($data['super_liability_mapping_code']) ? $data['super_liability_mapping_code'] : null;
        $this->container['is_payroll_tax_exempt'] = isset($data['is_payroll_tax_exempt']) ? $data['is_payroll_tax_exempt'] : null;
        $this->container['award_name'] = isset($data['award_name']) ? $data['award_name'] : null;
        $this->container['award_id'] = isset($data['award_id']) ? $data['award_id'] : null;
        $this->container['pay_category_type'] = isset($data['pay_category_type']) ? $data['pay_category_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rate_unit'] = isset($data['rate_unit']) ? $data['rate_unit'] : null;
        $this->container['accrues_leave'] = isset($data['accrues_leave']) ? $data['accrues_leave'] : null;
        $this->container['rate_loading_percent'] = isset($data['rate_loading_percent']) ? $data['rate_loading_percent'] : null;
        $this->container['penalty_loading_percent'] = isset($data['penalty_loading_percent']) ? $data['penalty_loading_percent'] : null;
        $this->container['is_tax_exempt'] = isset($data['is_tax_exempt']) ? $data['is_tax_exempt'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['general_ledger_mapping_code'] = isset($data['general_ledger_mapping_code']) ? $data['general_ledger_mapping_code'] : null;
        $this->container['is_system_pay_category'] = isset($data['is_system_pay_category']) ? $data['is_system_pay_category'] : null;
        $this->container['number_of_decimal_places'] = isset($data['number_of_decimal_places']) ? $data['number_of_decimal_places'] : null;
        $this->container['rounding_method'] = isset($data['rounding_method']) ? $data['rounding_method'] : null;
        $this->container['hide_units_on_pay_slip'] = isset($data['hide_units_on_pay_slip']) ? $data['hide_units_on_pay_slip'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentSummaryClassificationAllowableValues();
        if (!is_null($this->container['payment_summary_classification']) && !in_array($this->container['payment_summary_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_summary_classification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayCategoryTypeAllowableValues();
        if (!is_null($this->container['pay_category_type']) && !in_array($this->container['pay_category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_category_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateUnitAllowableValues();
        if (!is_null($this->container['rate_unit']) && !in_array($this->container['rate_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rate_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoundingMethodAllowableValues();
        if (!is_null($this->container['rounding_method']) && !in_array($this->container['rounding_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rounding_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_summary_classification
     *
     * @return string
     */
    public function getPaymentSummaryClassification()
    {
        return $this->container['payment_summary_classification'];
    }

    /**
     * Sets payment_summary_classification
     *
     * @param string $payment_summary_classification 
     *
     * @return $this
     */
    public function setPaymentSummaryClassification($payment_summary_classification)
    {
        $allowedValues = $this->getPaymentSummaryClassificationAllowableValues();
        if (!is_null($payment_summary_classification) && !in_array($payment_summary_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_summary_classification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_summary_classification'] = $payment_summary_classification;

        return $this;
    }

    /**
     * Gets allowance_description
     *
     * @return string
     */
    public function getAllowanceDescription()
    {
        return $this->container['allowance_description'];
    }

    /**
     * Sets allowance_description
     *
     * @param string $allowance_description 
     *
     * @return $this
     */
    public function setAllowanceDescription($allowance_description)
    {
        $this->container['allowance_description'] = $allowance_description;

        return $this;
    }

    /**
     * Gets default_super_rate
     *
     * @return double
     */
    public function getDefaultSuperRate()
    {
        return $this->container['default_super_rate'];
    }

    /**
     * Sets default_super_rate
     *
     * @param double $default_super_rate 
     *
     * @return $this
     */
    public function setDefaultSuperRate($default_super_rate)
    {
        $this->container['default_super_rate'] = $default_super_rate;

        return $this;
    }

    /**
     * Gets super_expense_mapping_code
     *
     * @return string
     */
    public function getSuperExpenseMappingCode()
    {
        return $this->container['super_expense_mapping_code'];
    }

    /**
     * Sets super_expense_mapping_code
     *
     * @param string $super_expense_mapping_code 
     *
     * @return $this
     */
    public function setSuperExpenseMappingCode($super_expense_mapping_code)
    {
        $this->container['super_expense_mapping_code'] = $super_expense_mapping_code;

        return $this;
    }

    /**
     * Gets super_liability_mapping_code
     *
     * @return string
     */
    public function getSuperLiabilityMappingCode()
    {
        return $this->container['super_liability_mapping_code'];
    }

    /**
     * Sets super_liability_mapping_code
     *
     * @param string $super_liability_mapping_code 
     *
     * @return $this
     */
    public function setSuperLiabilityMappingCode($super_liability_mapping_code)
    {
        $this->container['super_liability_mapping_code'] = $super_liability_mapping_code;

        return $this;
    }

    /**
     * Gets is_payroll_tax_exempt
     *
     * @return bool
     */
    public function getIsPayrollTaxExempt()
    {
        return $this->container['is_payroll_tax_exempt'];
    }

    /**
     * Sets is_payroll_tax_exempt
     *
     * @param bool $is_payroll_tax_exempt 
     *
     * @return $this
     */
    public function setIsPayrollTaxExempt($is_payroll_tax_exempt)
    {
        $this->container['is_payroll_tax_exempt'] = $is_payroll_tax_exempt;

        return $this;
    }

    /**
     * Gets award_name
     *
     * @return string
     */
    public function getAwardName()
    {
        return $this->container['award_name'];
    }

    /**
     * Sets award_name
     *
     * @param string $award_name 
     *
     * @return $this
     */
    public function setAwardName($award_name)
    {
        $this->container['award_name'] = $award_name;

        return $this;
    }

    /**
     * Gets award_id
     *
     * @return int
     */
    public function getAwardId()
    {
        return $this->container['award_id'];
    }

    /**
     * Sets award_id
     *
     * @param int $award_id 
     *
     * @return $this
     */
    public function setAwardId($award_id)
    {
        $this->container['award_id'] = $award_id;

        return $this;
    }

    /**
     * Gets pay_category_type
     *
     * @return string
     */
    public function getPayCategoryType()
    {
        return $this->container['pay_category_type'];
    }

    /**
     * Sets pay_category_type
     *
     * @param string $pay_category_type 
     *
     * @return $this
     */
    public function setPayCategoryType($pay_category_type)
    {
        $allowedValues = $this->getPayCategoryTypeAllowableValues();
        if (!is_null($pay_category_type) && !in_array($pay_category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_category_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_category_type'] = $pay_category_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id 
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rate_unit
     *
     * @return string
     */
    public function getRateUnit()
    {
        return $this->container['rate_unit'];
    }

    /**
     * Sets rate_unit
     *
     * @param string $rate_unit 
     *
     * @return $this
     */
    public function setRateUnit($rate_unit)
    {
        $allowedValues = $this->getRateUnitAllowableValues();
        if (!is_null($rate_unit) && !in_array($rate_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rate_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_unit'] = $rate_unit;

        return $this;
    }

    /**
     * Gets accrues_leave
     *
     * @return bool
     */
    public function getAccruesLeave()
    {
        return $this->container['accrues_leave'];
    }

    /**
     * Sets accrues_leave
     *
     * @param bool $accrues_leave 
     *
     * @return $this
     */
    public function setAccruesLeave($accrues_leave)
    {
        $this->container['accrues_leave'] = $accrues_leave;

        return $this;
    }

    /**
     * Gets rate_loading_percent
     *
     * @return double
     */
    public function getRateLoadingPercent()
    {
        return $this->container['rate_loading_percent'];
    }

    /**
     * Sets rate_loading_percent
     *
     * @param double $rate_loading_percent 
     *
     * @return $this
     */
    public function setRateLoadingPercent($rate_loading_percent)
    {
        $this->container['rate_loading_percent'] = $rate_loading_percent;

        return $this;
    }

    /**
     * Gets penalty_loading_percent
     *
     * @return double
     */
    public function getPenaltyLoadingPercent()
    {
        return $this->container['penalty_loading_percent'];
    }

    /**
     * Sets penalty_loading_percent
     *
     * @param double $penalty_loading_percent 
     *
     * @return $this
     */
    public function setPenaltyLoadingPercent($penalty_loading_percent)
    {
        $this->container['penalty_loading_percent'] = $penalty_loading_percent;

        return $this;
    }

    /**
     * Gets is_tax_exempt
     *
     * @return bool
     */
    public function getIsTaxExempt()
    {
        return $this->container['is_tax_exempt'];
    }

    /**
     * Sets is_tax_exempt
     *
     * @param bool $is_tax_exempt 
     *
     * @return $this
     */
    public function setIsTaxExempt($is_tax_exempt)
    {
        $this->container['is_tax_exempt'] = $is_tax_exempt;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source 
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets general_ledger_mapping_code
     *
     * @return string
     */
    public function getGeneralLedgerMappingCode()
    {
        return $this->container['general_ledger_mapping_code'];
    }

    /**
     * Sets general_ledger_mapping_code
     *
     * @param string $general_ledger_mapping_code 
     *
     * @return $this
     */
    public function setGeneralLedgerMappingCode($general_ledger_mapping_code)
    {
        $this->container['general_ledger_mapping_code'] = $general_ledger_mapping_code;

        return $this;
    }

    /**
     * Gets is_system_pay_category
     *
     * @return bool
     */
    public function getIsSystemPayCategory()
    {
        return $this->container['is_system_pay_category'];
    }

    /**
     * Sets is_system_pay_category
     *
     * @param bool $is_system_pay_category 
     *
     * @return $this
     */
    public function setIsSystemPayCategory($is_system_pay_category)
    {
        $this->container['is_system_pay_category'] = $is_system_pay_category;

        return $this;
    }

    /**
     * Gets number_of_decimal_places
     *
     * @return int
     */
    public function getNumberOfDecimalPlaces()
    {
        return $this->container['number_of_decimal_places'];
    }

    /**
     * Sets number_of_decimal_places
     *
     * @param int $number_of_decimal_places 
     *
     * @return $this
     */
    public function setNumberOfDecimalPlaces($number_of_decimal_places)
    {
        $this->container['number_of_decimal_places'] = $number_of_decimal_places;

        return $this;
    }

    /**
     * Gets rounding_method
     *
     * @return string
     */
    public function getRoundingMethod()
    {
        return $this->container['rounding_method'];
    }

    /**
     * Sets rounding_method
     *
     * @param string $rounding_method 
     *
     * @return $this
     */
    public function setRoundingMethod($rounding_method)
    {
        $allowedValues = $this->getRoundingMethodAllowableValues();
        if (!is_null($rounding_method) && !in_array($rounding_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rounding_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rounding_method'] = $rounding_method;

        return $this;
    }

    /**
     * Gets hide_units_on_pay_slip
     *
     * @return bool
     */
    public function getHideUnitsOnPaySlip()
    {
        return $this->container['hide_units_on_pay_slip'];
    }

    /**
     * Sets hide_units_on_pay_slip
     *
     * @param bool $hide_units_on_pay_slip 
     *
     * @return $this
     */
    public function setHideUnitsOnPaySlip($hide_units_on_pay_slip)
    {
        $this->container['hide_units_on_pay_slip'] = $hide_units_on_pay_slip;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool $is_primary 
     *
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


