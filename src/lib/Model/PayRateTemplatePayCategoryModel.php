<?php
/**
 * PayRateTemplatePayCategoryModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayRateTemplatePayCategoryModel Class Doc Comment
 *
 * @category Class
 * @description TODO: Can we get away with not having UserSuppliedRate and CalculatedRate? can we just have &#39;Rate&#39; and work   (which is interpreted as UserSuppliedRate) and determine calculated rate from there?
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRateTemplatePayCategoryModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRateTemplatePayCategoryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pay_category_id' => 'int',
        'user_supplied_rate' => 'double',
        'calculated_rate' => 'double',
        'standard_weekly_hours' => 'double',
        'super_rate' => 'double',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pay_category_id' => 'int32',
        'user_supplied_rate' => 'double',
        'calculated_rate' => 'double',
        'standard_weekly_hours' => 'double',
        'super_rate' => 'double',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_category_id' => 'payCategoryId',
        'user_supplied_rate' => 'userSuppliedRate',
        'calculated_rate' => 'calculatedRate',
        'standard_weekly_hours' => 'standardWeeklyHours',
        'super_rate' => 'superRate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_category_id' => 'setPayCategoryId',
        'user_supplied_rate' => 'setUserSuppliedRate',
        'calculated_rate' => 'setCalculatedRate',
        'standard_weekly_hours' => 'setStandardWeeklyHours',
        'super_rate' => 'setSuperRate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_category_id' => 'getPayCategoryId',
        'user_supplied_rate' => 'getUserSuppliedRate',
        'calculated_rate' => 'getCalculatedRate',
        'standard_weekly_hours' => 'getStandardWeeklyHours',
        'super_rate' => 'getSuperRate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pay_category_id'] = isset($data['pay_category_id']) ? $data['pay_category_id'] : null;
        $this->container['user_supplied_rate'] = isset($data['user_supplied_rate']) ? $data['user_supplied_rate'] : null;
        $this->container['calculated_rate'] = isset($data['calculated_rate']) ? $data['calculated_rate'] : null;
        $this->container['standard_weekly_hours'] = isset($data['standard_weekly_hours']) ? $data['standard_weekly_hours'] : null;
        $this->container['super_rate'] = isset($data['super_rate']) ? $data['super_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets pay_category_id
     *
     * @return int
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int $pay_category_id
     *
     * @return $this
     */
    public function setPayCategoryId($pay_category_id)
    {
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets user_supplied_rate
     *
     * @return float
     */
    public function getUserSuppliedRate()
    {
        return $this->container['user_supplied_rate'];
    }

    /**
     * Sets user_supplied_rate
     *
     * @param float $user_supplied_rate
     *
     * @return $this
     */
    public function setUserSuppliedRate($user_supplied_rate)
    {
        $this->container['user_supplied_rate'] = $user_supplied_rate;

        return $this;
    }

    /**
     * Gets calculated_rate
     *
     * @return float
     */
    public function getCalculatedRate()
    {
        return $this->container['calculated_rate'];
    }

    /**
     * Sets calculated_rate
     *
     * @param float $calculated_rate
     *
     * @return $this
     */
    public function setCalculatedRate($calculated_rate)
    {
        $this->container['calculated_rate'] = $calculated_rate;

        return $this;
    }

    /**
     * Gets standard_weekly_hours
     *
     * @return float
     */
    public function getStandardWeeklyHours()
    {
        return $this->container['standard_weekly_hours'];
    }

    /**
     * Sets standard_weekly_hours
     *
     * @param float $standard_weekly_hours
     *
     * @return $this
     */
    public function setStandardWeeklyHours($standard_weekly_hours)
    {
        $this->container['standard_weekly_hours'] = $standard_weekly_hours;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return float
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param float $super_rate
     *
     * @return $this
     */
    public function setSuperRate($super_rate)
    {
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
