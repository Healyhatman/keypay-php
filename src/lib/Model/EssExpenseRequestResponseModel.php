<?php
/**
 * EssExpenseRequestResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EssExpenseRequestResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EssExpenseRequestResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EssExpenseRequestResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_cancel' => 'bool',
        'can_modify' => 'bool',
        'id' => 'int',
        'employee_id' => 'int',
        'employee_name' => 'string',
        'status' => 'string',
        'description' => 'string',
        'line_items' => '\OpenAPI\Client\Model\ExpenseRequestLineItemModel[]',
        'attachments' => '\OpenAPI\Client\Model\AttachmentModel[]',
        'status_updated_by_user' => 'string',
        'status_update_notes' => 'string',
        'date_status_updated' => '\DateTime',
        'date_created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_cancel' => null,
        'can_modify' => null,
        'id' => 'int32',
        'employee_id' => 'int32',
        'employee_name' => null,
        'status' => null,
        'description' => null,
        'line_items' => null,
        'attachments' => null,
        'status_updated_by_user' => null,
        'status_update_notes' => null,
        'date_status_updated' => 'date-time',
        'date_created' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can_cancel' => false,
		'can_modify' => false,
		'id' => false,
		'employee_id' => false,
		'employee_name' => false,
		'status' => false,
		'description' => false,
		'line_items' => false,
		'attachments' => false,
		'status_updated_by_user' => false,
		'status_update_notes' => false,
		'date_status_updated' => false,
		'date_created' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_cancel' => 'canCancel',
        'can_modify' => 'canModify',
        'id' => 'id',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'status' => 'status',
        'description' => 'description',
        'line_items' => 'lineItems',
        'attachments' => 'attachments',
        'status_updated_by_user' => 'statusUpdatedByUser',
        'status_update_notes' => 'statusUpdateNotes',
        'date_status_updated' => 'dateStatusUpdated',
        'date_created' => 'dateCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_cancel' => 'setCanCancel',
        'can_modify' => 'setCanModify',
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'line_items' => 'setLineItems',
        'attachments' => 'setAttachments',
        'status_updated_by_user' => 'setStatusUpdatedByUser',
        'status_update_notes' => 'setStatusUpdateNotes',
        'date_status_updated' => 'setDateStatusUpdated',
        'date_created' => 'setDateCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_cancel' => 'getCanCancel',
        'can_modify' => 'getCanModify',
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'line_items' => 'getLineItems',
        'attachments' => 'getAttachments',
        'status_updated_by_user' => 'getStatusUpdatedByUser',
        'status_update_notes' => 'getStatusUpdateNotes',
        'date_status_updated' => 'getDateStatusUpdated',
        'date_created' => 'getDateCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('can_cancel', $data ?? [], null);
        $this->setIfExists('can_modify', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('status_updated_by_user', $data ?? [], null);
        $this->setIfExists('status_update_notes', $data ?? [], null);
        $this->setIfExists('date_status_updated', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_cancel
     *
     * @return bool|null
     */
    public function getCanCancel()
    {
        return $this->container['can_cancel'];
    }

    /**
     * Sets can_cancel
     *
     * @param bool|null $can_cancel 
     *
     * @return self
     */
    public function setCanCancel($can_cancel)
    {
        if (is_null($can_cancel)) {
            throw new \InvalidArgumentException('non-nullable can_cancel cannot be null');
        }
        $this->container['can_cancel'] = $can_cancel;

        return $this;
    }

    /**
     * Gets can_modify
     *
     * @return bool|null
     */
    public function getCanModify()
    {
        return $this->container['can_modify'];
    }

    /**
     * Sets can_modify
     *
     * @param bool|null $can_modify 
     *
     * @return self
     */
    public function setCanModify($can_modify)
    {
        if (is_null($can_modify)) {
            throw new \InvalidArgumentException('non-nullable can_modify cannot be null');
        }
        $this->container['can_modify'] = $can_modify;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\ExpenseRequestLineItemModel[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\ExpenseRequestLineItemModel[]|null $line_items 
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\AttachmentModel[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\AttachmentModel[]|null $attachments 
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets status_updated_by_user
     *
     * @return string|null
     */
    public function getStatusUpdatedByUser()
    {
        return $this->container['status_updated_by_user'];
    }

    /**
     * Sets status_updated_by_user
     *
     * @param string|null $status_updated_by_user 
     *
     * @return self
     */
    public function setStatusUpdatedByUser($status_updated_by_user)
    {
        if (is_null($status_updated_by_user)) {
            throw new \InvalidArgumentException('non-nullable status_updated_by_user cannot be null');
        }
        $this->container['status_updated_by_user'] = $status_updated_by_user;

        return $this;
    }

    /**
     * Gets status_update_notes
     *
     * @return string|null
     */
    public function getStatusUpdateNotes()
    {
        return $this->container['status_update_notes'];
    }

    /**
     * Sets status_update_notes
     *
     * @param string|null $status_update_notes 
     *
     * @return self
     */
    public function setStatusUpdateNotes($status_update_notes)
    {
        if (is_null($status_update_notes)) {
            throw new \InvalidArgumentException('non-nullable status_update_notes cannot be null');
        }
        $this->container['status_update_notes'] = $status_update_notes;

        return $this;
    }

    /**
     * Gets date_status_updated
     *
     * @return \DateTime|null
     */
    public function getDateStatusUpdated()
    {
        return $this->container['date_status_updated'];
    }

    /**
     * Sets date_status_updated
     *
     * @param \DateTime|null $date_status_updated 
     *
     * @return self
     */
    public function setDateStatusUpdated($date_status_updated)
    {
        if (is_null($date_status_updated)) {
            throw new \InvalidArgumentException('non-nullable date_status_updated cannot be null');
        }
        $this->container['date_status_updated'] = $date_status_updated;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created 
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


