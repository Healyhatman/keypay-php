<?php
/**
 * AuEarningsLineModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEarningsLineModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEarningsLineModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEarningsLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'super' => 'float',
        'sfss' => 'float',
        'help' => 'float',
        'payg' => 'float',
        'pay_category_id' => 'string',
        'pay_category_name' => 'string',
        'units' => 'float',
        'notes' => 'string',
        'rate' => 'float',
        'earnings' => 'float',
        'lump_sum_number_of_pay_periods' => 'float',
        'lump_sum_calculation_method' => 'string',
        'lump_sum_e_financial_year' => 'int',
        'timesheet_line_id' => 'int',
        'timesheet_line_external_id' => 'string',
        'reporting_dimension_value_ids' => 'int[]',
        'reporting_dimension_value_names' => 'array<string,string[]>',
        'net_payment' => 'float',
        'id' => 'int',
        'external_id' => 'string',
        'location_id' => 'string',
        'location_name' => 'string',
        'employee_id' => 'string',
        'employee_name' => 'string',
        'employee_external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'super' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'payg' => 'double',
        'pay_category_id' => null,
        'pay_category_name' => null,
        'units' => 'double',
        'notes' => null,
        'rate' => 'double',
        'earnings' => 'double',
        'lump_sum_number_of_pay_periods' => 'double',
        'lump_sum_calculation_method' => null,
        'lump_sum_e_financial_year' => 'int32',
        'timesheet_line_id' => 'int32',
        'timesheet_line_external_id' => null,
        'reporting_dimension_value_ids' => 'int32',
        'reporting_dimension_value_names' => null,
        'net_payment' => 'double',
        'id' => 'int64',
        'external_id' => null,
        'location_id' => null,
        'location_name' => null,
        'employee_id' => null,
        'employee_name' => null,
        'employee_external_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'super' => false,
		'sfss' => false,
		'help' => false,
		'payg' => false,
		'pay_category_id' => false,
		'pay_category_name' => false,
		'units' => false,
		'notes' => false,
		'rate' => false,
		'earnings' => false,
		'lump_sum_number_of_pay_periods' => false,
		'lump_sum_calculation_method' => false,
		'lump_sum_e_financial_year' => false,
		'timesheet_line_id' => false,
		'timesheet_line_external_id' => false,
		'reporting_dimension_value_ids' => false,
		'reporting_dimension_value_names' => false,
		'net_payment' => false,
		'id' => false,
		'external_id' => false,
		'location_id' => false,
		'location_name' => false,
		'employee_id' => false,
		'employee_name' => false,
		'employee_external_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super' => 'super',
        'sfss' => 'sfss',
        'help' => 'help',
        'payg' => 'payg',
        'pay_category_id' => 'payCategoryId',
        'pay_category_name' => 'payCategoryName',
        'units' => 'units',
        'notes' => 'notes',
        'rate' => 'rate',
        'earnings' => 'earnings',
        'lump_sum_number_of_pay_periods' => 'lumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'lumpSumCalculationMethod',
        'lump_sum_e_financial_year' => 'lumpSumEFinancialYear',
        'timesheet_line_id' => 'timesheetLineId',
        'timesheet_line_external_id' => 'timesheetLineExternalId',
        'reporting_dimension_value_ids' => 'reportingDimensionValueIds',
        'reporting_dimension_value_names' => 'reportingDimensionValueNames',
        'net_payment' => 'netPayment',
        'id' => 'id',
        'external_id' => 'externalId',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'employee_external_id' => 'employeeExternalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super' => 'setSuper',
        'sfss' => 'setSfss',
        'help' => 'setHelp',
        'payg' => 'setPayg',
        'pay_category_id' => 'setPayCategoryId',
        'pay_category_name' => 'setPayCategoryName',
        'units' => 'setUnits',
        'notes' => 'setNotes',
        'rate' => 'setRate',
        'earnings' => 'setEarnings',
        'lump_sum_number_of_pay_periods' => 'setLumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'setLumpSumCalculationMethod',
        'lump_sum_e_financial_year' => 'setLumpSumEFinancialYear',
        'timesheet_line_id' => 'setTimesheetLineId',
        'timesheet_line_external_id' => 'setTimesheetLineExternalId',
        'reporting_dimension_value_ids' => 'setReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'setReportingDimensionValueNames',
        'net_payment' => 'setNetPayment',
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'employee_external_id' => 'setEmployeeExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super' => 'getSuper',
        'sfss' => 'getSfss',
        'help' => 'getHelp',
        'payg' => 'getPayg',
        'pay_category_id' => 'getPayCategoryId',
        'pay_category_name' => 'getPayCategoryName',
        'units' => 'getUnits',
        'notes' => 'getNotes',
        'rate' => 'getRate',
        'earnings' => 'getEarnings',
        'lump_sum_number_of_pay_periods' => 'getLumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'getLumpSumCalculationMethod',
        'lump_sum_e_financial_year' => 'getLumpSumEFinancialYear',
        'timesheet_line_id' => 'getTimesheetLineId',
        'timesheet_line_external_id' => 'getTimesheetLineExternalId',
        'reporting_dimension_value_ids' => 'getReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'getReportingDimensionValueNames',
        'net_payment' => 'getNetPayment',
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'employee_external_id' => 'getEmployeeExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LUMP_SUM_CALCULATION_METHOD_A = 'A';
    public const LUMP_SUM_CALCULATION_METHOD_B2 = 'B2';
    public const LUMP_SUM_CALCULATION_METHOD_NOT_APPLICABLE = 'NotApplicable';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLumpSumCalculationMethodAllowableValues()
    {
        return [
            self::LUMP_SUM_CALCULATION_METHOD_A,
            self::LUMP_SUM_CALCULATION_METHOD_B2,
            self::LUMP_SUM_CALCULATION_METHOD_NOT_APPLICABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('super', $data ?? [], null);
        $this->setIfExists('sfss', $data ?? [], null);
        $this->setIfExists('help', $data ?? [], null);
        $this->setIfExists('payg', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('pay_category_name', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('earnings', $data ?? [], null);
        $this->setIfExists('lump_sum_number_of_pay_periods', $data ?? [], null);
        $this->setIfExists('lump_sum_calculation_method', $data ?? [], null);
        $this->setIfExists('lump_sum_e_financial_year', $data ?? [], null);
        $this->setIfExists('timesheet_line_id', $data ?? [], null);
        $this->setIfExists('timesheet_line_external_id', $data ?? [], null);
        $this->setIfExists('reporting_dimension_value_ids', $data ?? [], null);
        $this->setIfExists('reporting_dimension_value_names', $data ?? [], null);
        $this->setIfExists('net_payment', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLumpSumCalculationMethodAllowableValues();
        if (!is_null($this->container['lump_sum_calculation_method']) && !in_array($this->container['lump_sum_calculation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lump_sum_calculation_method', must be one of '%s'",
                $this->container['lump_sum_calculation_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super
     *
     * @return float|null
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param float|null $super 
     *
     * @return self
     */
    public function setSuper($super)
    {
        if (is_null($super)) {
            throw new \InvalidArgumentException('non-nullable super cannot be null');
        }
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets sfss
     *
     * @return float|null
     */
    public function getSfss()
    {
        return $this->container['sfss'];
    }

    /**
     * Sets sfss
     *
     * @param float|null $sfss 
     *
     * @return self
     */
    public function setSfss($sfss)
    {
        if (is_null($sfss)) {
            throw new \InvalidArgumentException('non-nullable sfss cannot be null');
        }
        $this->container['sfss'] = $sfss;

        return $this;
    }

    /**
     * Gets help
     *
     * @return float|null
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param float|null $help 
     *
     * @return self
     */
    public function setHelp($help)
    {
        if (is_null($help)) {
            throw new \InvalidArgumentException('non-nullable help cannot be null');
        }
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets payg
     *
     * @return float|null
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param float|null $payg 
     *
     * @return self
     */
    public function setPayg($payg)
    {
        if (is_null($payg)) {
            throw new \InvalidArgumentException('non-nullable payg cannot be null');
        }
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return string|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param string|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets pay_category_name
     *
     * @return string|null
     */
    public function getPayCategoryName()
    {
        return $this->container['pay_category_name'];
    }

    /**
     * Sets pay_category_name
     *
     * @param string|null $pay_category_name 
     *
     * @return self
     */
    public function setPayCategoryName($pay_category_name)
    {
        if (is_null($pay_category_name)) {
            throw new \InvalidArgumentException('non-nullable pay_category_name cannot be null');
        }
        $this->container['pay_category_name'] = $pay_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate 
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return float|null
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param float|null $earnings 
     *
     * @return self
     */
    public function setEarnings($earnings)
    {
        if (is_null($earnings)) {
            throw new \InvalidArgumentException('non-nullable earnings cannot be null');
        }
        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets lump_sum_number_of_pay_periods
     *
     * @return float|null
     */
    public function getLumpSumNumberOfPayPeriods()
    {
        return $this->container['lump_sum_number_of_pay_periods'];
    }

    /**
     * Sets lump_sum_number_of_pay_periods
     *
     * @param float|null $lump_sum_number_of_pay_periods 
     *
     * @return self
     */
    public function setLumpSumNumberOfPayPeriods($lump_sum_number_of_pay_periods)
    {
        if (is_null($lump_sum_number_of_pay_periods)) {
            throw new \InvalidArgumentException('non-nullable lump_sum_number_of_pay_periods cannot be null');
        }
        $this->container['lump_sum_number_of_pay_periods'] = $lump_sum_number_of_pay_periods;

        return $this;
    }

    /**
     * Gets lump_sum_calculation_method
     *
     * @return string|null
     */
    public function getLumpSumCalculationMethod()
    {
        return $this->container['lump_sum_calculation_method'];
    }

    /**
     * Sets lump_sum_calculation_method
     *
     * @param string|null $lump_sum_calculation_method 
     *
     * @return self
     */
    public function setLumpSumCalculationMethod($lump_sum_calculation_method)
    {
        if (is_null($lump_sum_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable lump_sum_calculation_method cannot be null');
        }
        $allowedValues = $this->getLumpSumCalculationMethodAllowableValues();
        if (!in_array($lump_sum_calculation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lump_sum_calculation_method', must be one of '%s'",
                    $lump_sum_calculation_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lump_sum_calculation_method'] = $lump_sum_calculation_method;

        return $this;
    }

    /**
     * Gets lump_sum_e_financial_year
     *
     * @return int|null
     */
    public function getLumpSumEFinancialYear()
    {
        return $this->container['lump_sum_e_financial_year'];
    }

    /**
     * Sets lump_sum_e_financial_year
     *
     * @param int|null $lump_sum_e_financial_year 
     *
     * @return self
     */
    public function setLumpSumEFinancialYear($lump_sum_e_financial_year)
    {
        if (is_null($lump_sum_e_financial_year)) {
            throw new \InvalidArgumentException('non-nullable lump_sum_e_financial_year cannot be null');
        }
        $this->container['lump_sum_e_financial_year'] = $lump_sum_e_financial_year;

        return $this;
    }

    /**
     * Gets timesheet_line_id
     *
     * @return int|null
     */
    public function getTimesheetLineId()
    {
        return $this->container['timesheet_line_id'];
    }

    /**
     * Sets timesheet_line_id
     *
     * @param int|null $timesheet_line_id 
     *
     * @return self
     */
    public function setTimesheetLineId($timesheet_line_id)
    {
        if (is_null($timesheet_line_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_line_id cannot be null');
        }
        $this->container['timesheet_line_id'] = $timesheet_line_id;

        return $this;
    }

    /**
     * Gets timesheet_line_external_id
     *
     * @return string|null
     */
    public function getTimesheetLineExternalId()
    {
        return $this->container['timesheet_line_external_id'];
    }

    /**
     * Sets timesheet_line_external_id
     *
     * @param string|null $timesheet_line_external_id 
     *
     * @return self
     */
    public function setTimesheetLineExternalId($timesheet_line_external_id)
    {
        if (is_null($timesheet_line_external_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_line_external_id cannot be null');
        }
        $this->container['timesheet_line_external_id'] = $timesheet_line_external_id;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_ids
     *
     * @return int[]|null
     */
    public function getReportingDimensionValueIds()
    {
        return $this->container['reporting_dimension_value_ids'];
    }

    /**
     * Sets reporting_dimension_value_ids
     *
     * @param int[]|null $reporting_dimension_value_ids Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return self
     */
    public function setReportingDimensionValueIds($reporting_dimension_value_ids)
    {
        if (is_null($reporting_dimension_value_ids)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_value_ids cannot be null');
        }
        $this->container['reporting_dimension_value_ids'] = $reporting_dimension_value_ids;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_names
     *
     * @return array<string,string[]>|null
     */
    public function getReportingDimensionValueNames()
    {
        return $this->container['reporting_dimension_value_names'];
    }

    /**
     * Sets reporting_dimension_value_names
     *
     * @param array<string,string[]>|null $reporting_dimension_value_names Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { \"Department\": [\"Accounting\"], \"Job Code\": [\"JC1\"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return self
     */
    public function setReportingDimensionValueNames($reporting_dimension_value_names)
    {
        if (is_null($reporting_dimension_value_names)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_value_names cannot be null');
        }
        $this->container['reporting_dimension_value_names'] = $reporting_dimension_value_names;

        return $this;
    }

    /**
     * Gets net_payment
     *
     * @return float|null
     */
    public function getNetPayment()
    {
        return $this->container['net_payment'];
    }

    /**
     * Sets net_payment
     *
     * @param float|null $net_payment 
     *
     * @return self
     */
    public function setNetPayment($net_payment)
    {
        if (is_null($net_payment)) {
            throw new \InvalidArgumentException('non-nullable net_payment cannot be null');
        }
        $this->container['net_payment'] = $net_payment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


