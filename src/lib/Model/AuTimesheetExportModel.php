<?php
/**
 * AuTimesheetExportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuTimesheetExportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuTimesheetExportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuTimesheetExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'super' => 'float',
        'payg' => 'float',
        'classification' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'employee_external_id' => 'string',
        'id' => 'int',
        'status' => 'string',
        'location' => 'string',
        'start' => '\DateTime',
        'start_time' => 'string',
        'end' => '\DateTime',
        'end_time' => 'string',
        'actual_start' => '\DateTime',
        'actual_start_time' => 'string',
        'actual_end' => '\DateTime',
        'actual_end_time' => 'string',
        'time_variance' => 'string',
        'formatted_time_variance' => 'string',
        'duration_excluding_breaks' => 'string',
        'duration' => 'string',
        'units' => 'float',
        'unit_type' => 'string',
        'work_type' => 'string',
        'shift_conditions' => 'string',
        'number_of_breaks' => 'int',
        'break_duration' => 'string',
        'comments' => 'string',
        'consolidated_with_timesheet_line_id' => 'int',
        'reviewed_by' => 'string',
        'gross' => 'float',
        'net_earnings' => 'float',
        'employer_liabilities' => 'float',
        'total_cost' => 'float',
        'total_cost_variance' => 'float',
        'date_created' => '\DateTime',
        'date_reviewed' => '\DateTime',
        'shift_condition_short_codes' => 'string[]',
        'breaks' => '\OpenAPI\Client\Model\TimesheetBreakModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'super' => 'double',
        'payg' => 'double',
        'classification' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'employee_external_id' => null,
        'id' => 'int32',
        'status' => null,
        'location' => null,
        'start' => 'date-time',
        'start_time' => null,
        'end' => 'date-time',
        'end_time' => null,
        'actual_start' => 'date-time',
        'actual_start_time' => null,
        'actual_end' => 'date-time',
        'actual_end_time' => null,
        'time_variance' => null,
        'formatted_time_variance' => null,
        'duration_excluding_breaks' => null,
        'duration' => null,
        'units' => 'double',
        'unit_type' => null,
        'work_type' => null,
        'shift_conditions' => null,
        'number_of_breaks' => 'int32',
        'break_duration' => null,
        'comments' => null,
        'consolidated_with_timesheet_line_id' => 'int32',
        'reviewed_by' => null,
        'gross' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double',
        'total_cost' => 'double',
        'total_cost_variance' => 'double',
        'date_created' => 'date-time',
        'date_reviewed' => 'date-time',
        'shift_condition_short_codes' => null,
        'breaks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'super' => false,
		'payg' => false,
		'classification' => false,
		'employee_id' => false,
		'first_name' => false,
		'surname' => false,
		'employee_external_id' => false,
		'id' => false,
		'status' => false,
		'location' => false,
		'start' => false,
		'start_time' => false,
		'end' => false,
		'end_time' => false,
		'actual_start' => false,
		'actual_start_time' => false,
		'actual_end' => false,
		'actual_end_time' => false,
		'time_variance' => false,
		'formatted_time_variance' => false,
		'duration_excluding_breaks' => false,
		'duration' => false,
		'units' => false,
		'unit_type' => false,
		'work_type' => false,
		'shift_conditions' => false,
		'number_of_breaks' => false,
		'break_duration' => false,
		'comments' => false,
		'consolidated_with_timesheet_line_id' => false,
		'reviewed_by' => false,
		'gross' => false,
		'net_earnings' => false,
		'employer_liabilities' => false,
		'total_cost' => false,
		'total_cost_variance' => false,
		'date_created' => false,
		'date_reviewed' => false,
		'shift_condition_short_codes' => false,
		'breaks' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super' => 'super',
        'payg' => 'payg',
        'classification' => 'classification',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'employee_external_id' => 'employeeExternalId',
        'id' => 'id',
        'status' => 'status',
        'location' => 'location',
        'start' => 'start',
        'start_time' => 'startTime',
        'end' => 'end',
        'end_time' => 'endTime',
        'actual_start' => 'actualStart',
        'actual_start_time' => 'actualStartTime',
        'actual_end' => 'actualEnd',
        'actual_end_time' => 'actualEndTime',
        'time_variance' => 'timeVariance',
        'formatted_time_variance' => 'formattedTimeVariance',
        'duration_excluding_breaks' => 'durationExcludingBreaks',
        'duration' => 'duration',
        'units' => 'units',
        'unit_type' => 'unitType',
        'work_type' => 'workType',
        'shift_conditions' => 'shiftConditions',
        'number_of_breaks' => 'numberOfBreaks',
        'break_duration' => 'breakDuration',
        'comments' => 'comments',
        'consolidated_with_timesheet_line_id' => 'consolidatedWithTimesheetLineId',
        'reviewed_by' => 'reviewedBy',
        'gross' => 'gross',
        'net_earnings' => 'netEarnings',
        'employer_liabilities' => 'employerLiabilities',
        'total_cost' => 'totalCost',
        'total_cost_variance' => 'totalCostVariance',
        'date_created' => 'dateCreated',
        'date_reviewed' => 'dateReviewed',
        'shift_condition_short_codes' => 'shiftConditionShortCodes',
        'breaks' => 'breaks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super' => 'setSuper',
        'payg' => 'setPayg',
        'classification' => 'setClassification',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'employee_external_id' => 'setEmployeeExternalId',
        'id' => 'setId',
        'status' => 'setStatus',
        'location' => 'setLocation',
        'start' => 'setStart',
        'start_time' => 'setStartTime',
        'end' => 'setEnd',
        'end_time' => 'setEndTime',
        'actual_start' => 'setActualStart',
        'actual_start_time' => 'setActualStartTime',
        'actual_end' => 'setActualEnd',
        'actual_end_time' => 'setActualEndTime',
        'time_variance' => 'setTimeVariance',
        'formatted_time_variance' => 'setFormattedTimeVariance',
        'duration_excluding_breaks' => 'setDurationExcludingBreaks',
        'duration' => 'setDuration',
        'units' => 'setUnits',
        'unit_type' => 'setUnitType',
        'work_type' => 'setWorkType',
        'shift_conditions' => 'setShiftConditions',
        'number_of_breaks' => 'setNumberOfBreaks',
        'break_duration' => 'setBreakDuration',
        'comments' => 'setComments',
        'consolidated_with_timesheet_line_id' => 'setConsolidatedWithTimesheetLineId',
        'reviewed_by' => 'setReviewedBy',
        'gross' => 'setGross',
        'net_earnings' => 'setNetEarnings',
        'employer_liabilities' => 'setEmployerLiabilities',
        'total_cost' => 'setTotalCost',
        'total_cost_variance' => 'setTotalCostVariance',
        'date_created' => 'setDateCreated',
        'date_reviewed' => 'setDateReviewed',
        'shift_condition_short_codes' => 'setShiftConditionShortCodes',
        'breaks' => 'setBreaks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super' => 'getSuper',
        'payg' => 'getPayg',
        'classification' => 'getClassification',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'employee_external_id' => 'getEmployeeExternalId',
        'id' => 'getId',
        'status' => 'getStatus',
        'location' => 'getLocation',
        'start' => 'getStart',
        'start_time' => 'getStartTime',
        'end' => 'getEnd',
        'end_time' => 'getEndTime',
        'actual_start' => 'getActualStart',
        'actual_start_time' => 'getActualStartTime',
        'actual_end' => 'getActualEnd',
        'actual_end_time' => 'getActualEndTime',
        'time_variance' => 'getTimeVariance',
        'formatted_time_variance' => 'getFormattedTimeVariance',
        'duration_excluding_breaks' => 'getDurationExcludingBreaks',
        'duration' => 'getDuration',
        'units' => 'getUnits',
        'unit_type' => 'getUnitType',
        'work_type' => 'getWorkType',
        'shift_conditions' => 'getShiftConditions',
        'number_of_breaks' => 'getNumberOfBreaks',
        'break_duration' => 'getBreakDuration',
        'comments' => 'getComments',
        'consolidated_with_timesheet_line_id' => 'getConsolidatedWithTimesheetLineId',
        'reviewed_by' => 'getReviewedBy',
        'gross' => 'getGross',
        'net_earnings' => 'getNetEarnings',
        'employer_liabilities' => 'getEmployerLiabilities',
        'total_cost' => 'getTotalCost',
        'total_cost_variance' => 'getTotalCostVariance',
        'date_created' => 'getDateCreated',
        'date_reviewed' => 'getDateReviewed',
        'shift_condition_short_codes' => 'getShiftConditionShortCodes',
        'breaks' => 'getBreaks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('super', $data ?? [], null);
        $this->setIfExists('payg', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('actual_start', $data ?? [], null);
        $this->setIfExists('actual_start_time', $data ?? [], null);
        $this->setIfExists('actual_end', $data ?? [], null);
        $this->setIfExists('actual_end_time', $data ?? [], null);
        $this->setIfExists('time_variance', $data ?? [], null);
        $this->setIfExists('formatted_time_variance', $data ?? [], null);
        $this->setIfExists('duration_excluding_breaks', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('work_type', $data ?? [], null);
        $this->setIfExists('shift_conditions', $data ?? [], null);
        $this->setIfExists('number_of_breaks', $data ?? [], null);
        $this->setIfExists('break_duration', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('consolidated_with_timesheet_line_id', $data ?? [], null);
        $this->setIfExists('reviewed_by', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('employer_liabilities', $data ?? [], null);
        $this->setIfExists('total_cost', $data ?? [], null);
        $this->setIfExists('total_cost_variance', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_reviewed', $data ?? [], null);
        $this->setIfExists('shift_condition_short_codes', $data ?? [], null);
        $this->setIfExists('breaks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super
     *
     * @return float|null
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param float|null $super 
     *
     * @return self
     */
    public function setSuper($super)
    {
        if (is_null($super)) {
            throw new \InvalidArgumentException('non-nullable super cannot be null');
        }
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets payg
     *
     * @return float|null
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param float|null $payg 
     *
     * @return self
     */
    public function setPayg($payg)
    {
        if (is_null($payg)) {
            throw new \InvalidArgumentException('non-nullable payg cannot be null');
        }
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification 
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location 
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime|null $start 
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time 
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime|null $end 
     *
     * @return self
     */
    public function setEnd($end)
    {
        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time 
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets actual_start
     *
     * @return \DateTime|null
     */
    public function getActualStart()
    {
        return $this->container['actual_start'];
    }

    /**
     * Sets actual_start
     *
     * @param \DateTime|null $actual_start 
     *
     * @return self
     */
    public function setActualStart($actual_start)
    {
        if (is_null($actual_start)) {
            throw new \InvalidArgumentException('non-nullable actual_start cannot be null');
        }
        $this->container['actual_start'] = $actual_start;

        return $this;
    }

    /**
     * Gets actual_start_time
     *
     * @return string|null
     */
    public function getActualStartTime()
    {
        return $this->container['actual_start_time'];
    }

    /**
     * Sets actual_start_time
     *
     * @param string|null $actual_start_time 
     *
     * @return self
     */
    public function setActualStartTime($actual_start_time)
    {
        if (is_null($actual_start_time)) {
            throw new \InvalidArgumentException('non-nullable actual_start_time cannot be null');
        }
        $this->container['actual_start_time'] = $actual_start_time;

        return $this;
    }

    /**
     * Gets actual_end
     *
     * @return \DateTime|null
     */
    public function getActualEnd()
    {
        return $this->container['actual_end'];
    }

    /**
     * Sets actual_end
     *
     * @param \DateTime|null $actual_end 
     *
     * @return self
     */
    public function setActualEnd($actual_end)
    {
        if (is_null($actual_end)) {
            throw new \InvalidArgumentException('non-nullable actual_end cannot be null');
        }
        $this->container['actual_end'] = $actual_end;

        return $this;
    }

    /**
     * Gets actual_end_time
     *
     * @return string|null
     */
    public function getActualEndTime()
    {
        return $this->container['actual_end_time'];
    }

    /**
     * Sets actual_end_time
     *
     * @param string|null $actual_end_time 
     *
     * @return self
     */
    public function setActualEndTime($actual_end_time)
    {
        if (is_null($actual_end_time)) {
            throw new \InvalidArgumentException('non-nullable actual_end_time cannot be null');
        }
        $this->container['actual_end_time'] = $actual_end_time;

        return $this;
    }

    /**
     * Gets time_variance
     *
     * @return string|null
     */
    public function getTimeVariance()
    {
        return $this->container['time_variance'];
    }

    /**
     * Sets time_variance
     *
     * @param string|null $time_variance 
     *
     * @return self
     */
    public function setTimeVariance($time_variance)
    {
        if (is_null($time_variance)) {
            throw new \InvalidArgumentException('non-nullable time_variance cannot be null');
        }
        $this->container['time_variance'] = $time_variance;

        return $this;
    }

    /**
     * Gets formatted_time_variance
     *
     * @return string|null
     */
    public function getFormattedTimeVariance()
    {
        return $this->container['formatted_time_variance'];
    }

    /**
     * Sets formatted_time_variance
     *
     * @param string|null $formatted_time_variance 
     *
     * @return self
     */
    public function setFormattedTimeVariance($formatted_time_variance)
    {
        if (is_null($formatted_time_variance)) {
            throw new \InvalidArgumentException('non-nullable formatted_time_variance cannot be null');
        }
        $this->container['formatted_time_variance'] = $formatted_time_variance;

        return $this;
    }

    /**
     * Gets duration_excluding_breaks
     *
     * @return string|null
     */
    public function getDurationExcludingBreaks()
    {
        return $this->container['duration_excluding_breaks'];
    }

    /**
     * Sets duration_excluding_breaks
     *
     * @param string|null $duration_excluding_breaks 
     *
     * @return self
     */
    public function setDurationExcludingBreaks($duration_excluding_breaks)
    {
        if (is_null($duration_excluding_breaks)) {
            throw new \InvalidArgumentException('non-nullable duration_excluding_breaks cannot be null');
        }
        $this->container['duration_excluding_breaks'] = $duration_excluding_breaks;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration 
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets work_type
     *
     * @return string|null
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     *
     * @param string|null $work_type 
     *
     * @return self
     */
    public function setWorkType($work_type)
    {
        if (is_null($work_type)) {
            throw new \InvalidArgumentException('non-nullable work_type cannot be null');
        }
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return string|null
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param string|null $shift_conditions 
     *
     * @return self
     */
    public function setShiftConditions($shift_conditions)
    {
        if (is_null($shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable shift_conditions cannot be null');
        }
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets number_of_breaks
     *
     * @return int|null
     */
    public function getNumberOfBreaks()
    {
        return $this->container['number_of_breaks'];
    }

    /**
     * Sets number_of_breaks
     *
     * @param int|null $number_of_breaks 
     *
     * @return self
     */
    public function setNumberOfBreaks($number_of_breaks)
    {
        if (is_null($number_of_breaks)) {
            throw new \InvalidArgumentException('non-nullable number_of_breaks cannot be null');
        }
        $this->container['number_of_breaks'] = $number_of_breaks;

        return $this;
    }

    /**
     * Gets break_duration
     *
     * @return string|null
     */
    public function getBreakDuration()
    {
        return $this->container['break_duration'];
    }

    /**
     * Sets break_duration
     *
     * @param string|null $break_duration 
     *
     * @return self
     */
    public function setBreakDuration($break_duration)
    {
        if (is_null($break_duration)) {
            throw new \InvalidArgumentException('non-nullable break_duration cannot be null');
        }
        $this->container['break_duration'] = $break_duration;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments 
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets consolidated_with_timesheet_line_id
     *
     * @return int|null
     */
    public function getConsolidatedWithTimesheetLineId()
    {
        return $this->container['consolidated_with_timesheet_line_id'];
    }

    /**
     * Sets consolidated_with_timesheet_line_id
     *
     * @param int|null $consolidated_with_timesheet_line_id 
     *
     * @return self
     */
    public function setConsolidatedWithTimesheetLineId($consolidated_with_timesheet_line_id)
    {
        if (is_null($consolidated_with_timesheet_line_id)) {
            throw new \InvalidArgumentException('non-nullable consolidated_with_timesheet_line_id cannot be null');
        }
        $this->container['consolidated_with_timesheet_line_id'] = $consolidated_with_timesheet_line_id;

        return $this;
    }

    /**
     * Gets reviewed_by
     *
     * @return string|null
     */
    public function getReviewedBy()
    {
        return $this->container['reviewed_by'];
    }

    /**
     * Sets reviewed_by
     *
     * @param string|null $reviewed_by 
     *
     * @return self
     */
    public function setReviewedBy($reviewed_by)
    {
        if (is_null($reviewed_by)) {
            throw new \InvalidArgumentException('non-nullable reviewed_by cannot be null');
        }
        $this->container['reviewed_by'] = $reviewed_by;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return float|null
     */
    public function getGross()
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param float|null $gross 
     *
     * @return self
     */
    public function setGross($gross)
    {
        if (is_null($gross)) {
            throw new \InvalidArgumentException('non-nullable gross cannot be null');
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return float|null
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param float|null $employer_liabilities 
     *
     * @return self
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        if (is_null($employer_liabilities)) {
            throw new \InvalidArgumentException('non-nullable employer_liabilities cannot be null');
        }
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return float|null
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param float|null $total_cost 
     *
     * @return self
     */
    public function setTotalCost($total_cost)
    {
        if (is_null($total_cost)) {
            throw new \InvalidArgumentException('non-nullable total_cost cannot be null');
        }
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_cost_variance
     *
     * @return float|null
     */
    public function getTotalCostVariance()
    {
        return $this->container['total_cost_variance'];
    }

    /**
     * Sets total_cost_variance
     *
     * @param float|null $total_cost_variance 
     *
     * @return self
     */
    public function setTotalCostVariance($total_cost_variance)
    {
        if (is_null($total_cost_variance)) {
            throw new \InvalidArgumentException('non-nullable total_cost_variance cannot be null');
        }
        $this->container['total_cost_variance'] = $total_cost_variance;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created 
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_reviewed
     *
     * @return \DateTime|null
     */
    public function getDateReviewed()
    {
        return $this->container['date_reviewed'];
    }

    /**
     * Sets date_reviewed
     *
     * @param \DateTime|null $date_reviewed 
     *
     * @return self
     */
    public function setDateReviewed($date_reviewed)
    {
        if (is_null($date_reviewed)) {
            throw new \InvalidArgumentException('non-nullable date_reviewed cannot be null');
        }
        $this->container['date_reviewed'] = $date_reviewed;

        return $this;
    }

    /**
     * Gets shift_condition_short_codes
     *
     * @return string[]|null
     */
    public function getShiftConditionShortCodes()
    {
        return $this->container['shift_condition_short_codes'];
    }

    /**
     * Sets shift_condition_short_codes
     *
     * @param string[]|null $shift_condition_short_codes 
     *
     * @return self
     */
    public function setShiftConditionShortCodes($shift_condition_short_codes)
    {
        if (is_null($shift_condition_short_codes)) {
            throw new \InvalidArgumentException('non-nullable shift_condition_short_codes cannot be null');
        }
        $this->container['shift_condition_short_codes'] = $shift_condition_short_codes;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \OpenAPI\Client\Model\TimesheetBreakModel[]|null
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \OpenAPI\Client\Model\TimesheetBreakModel[]|null $breaks 
     *
     * @return self
     */
    public function setBreaks($breaks)
    {
        if (is_null($breaks)) {
            throw new \InvalidArgumentException('non-nullable breaks cannot be null');
        }
        $this->container['breaks'] = $breaks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


