<?php
/**
 * EssLeaveRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EssLeaveRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EssLeaveRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EssLeaveRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_hours' => 'float',
        'leave_category_id' => 'int',
        'work_type_id' => 'int',
        'work_type_name' => 'string',
        'is_approved' => 'bool',
        'is_declined' => 'bool',
        'is_cancelled' => 'bool',
        'is_pending' => 'bool',
        'id' => 'int',
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'requested_date' => '\DateTime',
        'leave_category_name' => 'string',
        'hours_per_day' => 'float',
        'total_units' => 'float',
        'previously_applied_units' => 'float',
        'can_partially_edit' => 'bool',
        'notes' => 'string',
        'total_days' => 'float',
        'amount' => 'string',
        'status' => 'string',
        'status_update_notes' => 'string',
        'can_cancel' => 'bool',
        'can_modify' => 'bool',
        'require_notes_for_leave_requests' => 'bool',
        'attachment' => '\OpenAPI\Client\Model\AttachmentModel',
        'unit_type' => 'string',
        'banner' => '\OpenAPI\Client\Model\PartiallyAppliedLeaveRequestBannerModel',
        'manually_applied' => 'bool',
        'applied_leave_unit_type_description' => 'string',
        'return_to_work_interview_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_hours' => 'double',
        'leave_category_id' => 'int32',
        'work_type_id' => 'int32',
        'work_type_name' => null,
        'is_approved' => null,
        'is_declined' => null,
        'is_cancelled' => null,
        'is_pending' => null,
        'id' => 'int32',
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'requested_date' => 'date-time',
        'leave_category_name' => null,
        'hours_per_day' => 'double',
        'total_units' => 'double',
        'previously_applied_units' => 'double',
        'can_partially_edit' => null,
        'notes' => null,
        'total_days' => 'double',
        'amount' => null,
        'status' => null,
        'status_update_notes' => null,
        'can_cancel' => null,
        'can_modify' => null,
        'require_notes_for_leave_requests' => null,
        'attachment' => null,
        'unit_type' => null,
        'banner' => null,
        'manually_applied' => null,
        'applied_leave_unit_type_description' => null,
        'return_to_work_interview_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_hours' => false,
		'leave_category_id' => false,
		'work_type_id' => false,
		'work_type_name' => false,
		'is_approved' => false,
		'is_declined' => false,
		'is_cancelled' => false,
		'is_pending' => false,
		'id' => false,
		'from_date' => false,
		'to_date' => false,
		'requested_date' => false,
		'leave_category_name' => false,
		'hours_per_day' => false,
		'total_units' => false,
		'previously_applied_units' => false,
		'can_partially_edit' => false,
		'notes' => false,
		'total_days' => false,
		'amount' => false,
		'status' => false,
		'status_update_notes' => false,
		'can_cancel' => false,
		'can_modify' => false,
		'require_notes_for_leave_requests' => false,
		'attachment' => false,
		'unit_type' => false,
		'banner' => false,
		'manually_applied' => false,
		'applied_leave_unit_type_description' => false,
		'return_to_work_interview_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_hours' => 'totalHours',
        'leave_category_id' => 'leaveCategoryId',
        'work_type_id' => 'workTypeId',
        'work_type_name' => 'workTypeName',
        'is_approved' => 'isApproved',
        'is_declined' => 'isDeclined',
        'is_cancelled' => 'isCancelled',
        'is_pending' => 'isPending',
        'id' => 'id',
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'requested_date' => 'requestedDate',
        'leave_category_name' => 'leaveCategoryName',
        'hours_per_day' => 'hoursPerDay',
        'total_units' => 'totalUnits',
        'previously_applied_units' => 'previouslyAppliedUnits',
        'can_partially_edit' => 'canPartiallyEdit',
        'notes' => 'notes',
        'total_days' => 'totalDays',
        'amount' => 'amount',
        'status' => 'status',
        'status_update_notes' => 'statusUpdateNotes',
        'can_cancel' => 'canCancel',
        'can_modify' => 'canModify',
        'require_notes_for_leave_requests' => 'requireNotesForLeaveRequests',
        'attachment' => 'attachment',
        'unit_type' => 'unitType',
        'banner' => 'banner',
        'manually_applied' => 'manuallyApplied',
        'applied_leave_unit_type_description' => 'appliedLeaveUnitTypeDescription',
        'return_to_work_interview_url' => 'returnToWorkInterviewUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_hours' => 'setTotalHours',
        'leave_category_id' => 'setLeaveCategoryId',
        'work_type_id' => 'setWorkTypeId',
        'work_type_name' => 'setWorkTypeName',
        'is_approved' => 'setIsApproved',
        'is_declined' => 'setIsDeclined',
        'is_cancelled' => 'setIsCancelled',
        'is_pending' => 'setIsPending',
        'id' => 'setId',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'requested_date' => 'setRequestedDate',
        'leave_category_name' => 'setLeaveCategoryName',
        'hours_per_day' => 'setHoursPerDay',
        'total_units' => 'setTotalUnits',
        'previously_applied_units' => 'setPreviouslyAppliedUnits',
        'can_partially_edit' => 'setCanPartiallyEdit',
        'notes' => 'setNotes',
        'total_days' => 'setTotalDays',
        'amount' => 'setAmount',
        'status' => 'setStatus',
        'status_update_notes' => 'setStatusUpdateNotes',
        'can_cancel' => 'setCanCancel',
        'can_modify' => 'setCanModify',
        'require_notes_for_leave_requests' => 'setRequireNotesForLeaveRequests',
        'attachment' => 'setAttachment',
        'unit_type' => 'setUnitType',
        'banner' => 'setBanner',
        'manually_applied' => 'setManuallyApplied',
        'applied_leave_unit_type_description' => 'setAppliedLeaveUnitTypeDescription',
        'return_to_work_interview_url' => 'setReturnToWorkInterviewUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_hours' => 'getTotalHours',
        'leave_category_id' => 'getLeaveCategoryId',
        'work_type_id' => 'getWorkTypeId',
        'work_type_name' => 'getWorkTypeName',
        'is_approved' => 'getIsApproved',
        'is_declined' => 'getIsDeclined',
        'is_cancelled' => 'getIsCancelled',
        'is_pending' => 'getIsPending',
        'id' => 'getId',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'requested_date' => 'getRequestedDate',
        'leave_category_name' => 'getLeaveCategoryName',
        'hours_per_day' => 'getHoursPerDay',
        'total_units' => 'getTotalUnits',
        'previously_applied_units' => 'getPreviouslyAppliedUnits',
        'can_partially_edit' => 'getCanPartiallyEdit',
        'notes' => 'getNotes',
        'total_days' => 'getTotalDays',
        'amount' => 'getAmount',
        'status' => 'getStatus',
        'status_update_notes' => 'getStatusUpdateNotes',
        'can_cancel' => 'getCanCancel',
        'can_modify' => 'getCanModify',
        'require_notes_for_leave_requests' => 'getRequireNotesForLeaveRequests',
        'attachment' => 'getAttachment',
        'unit_type' => 'getUnitType',
        'banner' => 'getBanner',
        'manually_applied' => 'getManuallyApplied',
        'applied_leave_unit_type_description' => 'getAppliedLeaveUnitTypeDescription',
        'return_to_work_interview_url' => 'getReturnToWorkInterviewUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_TYPE_HOURS = 'Hours';
    public const UNIT_TYPE_DAYS = 'Days';
    public const UNIT_TYPE_WEEKS = 'Weeks';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitTypeAllowableValues()
    {
        return [
            self::UNIT_TYPE_HOURS,
            self::UNIT_TYPE_DAYS,
            self::UNIT_TYPE_WEEKS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('leave_category_id', $data ?? [], null);
        $this->setIfExists('work_type_id', $data ?? [], null);
        $this->setIfExists('work_type_name', $data ?? [], null);
        $this->setIfExists('is_approved', $data ?? [], null);
        $this->setIfExists('is_declined', $data ?? [], null);
        $this->setIfExists('is_cancelled', $data ?? [], null);
        $this->setIfExists('is_pending', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('requested_date', $data ?? [], null);
        $this->setIfExists('leave_category_name', $data ?? [], null);
        $this->setIfExists('hours_per_day', $data ?? [], null);
        $this->setIfExists('total_units', $data ?? [], null);
        $this->setIfExists('previously_applied_units', $data ?? [], null);
        $this->setIfExists('can_partially_edit', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('total_days', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_update_notes', $data ?? [], null);
        $this->setIfExists('can_cancel', $data ?? [], null);
        $this->setIfExists('can_modify', $data ?? [], null);
        $this->setIfExists('require_notes_for_leave_requests', $data ?? [], null);
        $this->setIfExists('attachment', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('manually_applied', $data ?? [], null);
        $this->setIfExists('applied_leave_unit_type_description', $data ?? [], null);
        $this->setIfExists('return_to_work_interview_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!is_null($this->container['unit_type']) && !in_array($this->container['unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_type', must be one of '%s'",
                $this->container['unit_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int|null
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int|null $leave_category_id 
     *
     * @return self
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        if (is_null($leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable leave_category_id cannot be null');
        }
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int|null
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int|null $work_type_id 
     *
     * @return self
     */
    public function setWorkTypeId($work_type_id)
    {
        if (is_null($work_type_id)) {
            throw new \InvalidArgumentException('non-nullable work_type_id cannot be null');
        }
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets work_type_name
     *
     * @return string|null
     */
    public function getWorkTypeName()
    {
        return $this->container['work_type_name'];
    }

    /**
     * Sets work_type_name
     *
     * @param string|null $work_type_name 
     *
     * @return self
     */
    public function setWorkTypeName($work_type_name)
    {
        if (is_null($work_type_name)) {
            throw new \InvalidArgumentException('non-nullable work_type_name cannot be null');
        }
        $this->container['work_type_name'] = $work_type_name;

        return $this;
    }

    /**
     * Gets is_approved
     *
     * @return bool|null
     */
    public function getIsApproved()
    {
        return $this->container['is_approved'];
    }

    /**
     * Sets is_approved
     *
     * @param bool|null $is_approved 
     *
     * @return self
     */
    public function setIsApproved($is_approved)
    {
        if (is_null($is_approved)) {
            throw new \InvalidArgumentException('non-nullable is_approved cannot be null');
        }
        $this->container['is_approved'] = $is_approved;

        return $this;
    }

    /**
     * Gets is_declined
     *
     * @return bool|null
     */
    public function getIsDeclined()
    {
        return $this->container['is_declined'];
    }

    /**
     * Sets is_declined
     *
     * @param bool|null $is_declined 
     *
     * @return self
     */
    public function setIsDeclined($is_declined)
    {
        if (is_null($is_declined)) {
            throw new \InvalidArgumentException('non-nullable is_declined cannot be null');
        }
        $this->container['is_declined'] = $is_declined;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool|null
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool|null $is_cancelled 
     *
     * @return self
     */
    public function setIsCancelled($is_cancelled)
    {
        if (is_null($is_cancelled)) {
            throw new \InvalidArgumentException('non-nullable is_cancelled cannot be null');
        }
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets is_pending
     *
     * @return bool|null
     */
    public function getIsPending()
    {
        return $this->container['is_pending'];
    }

    /**
     * Sets is_pending
     *
     * @param bool|null $is_pending 
     *
     * @return self
     */
    public function setIsPending($is_pending)
    {
        if (is_null($is_pending)) {
            throw new \InvalidArgumentException('non-nullable is_pending cannot be null');
        }
        $this->container['is_pending'] = $is_pending;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date 
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date 
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets requested_date
     *
     * @return \DateTime|null
     */
    public function getRequestedDate()
    {
        return $this->container['requested_date'];
    }

    /**
     * Sets requested_date
     *
     * @param \DateTime|null $requested_date 
     *
     * @return self
     */
    public function setRequestedDate($requested_date)
    {
        if (is_null($requested_date)) {
            throw new \InvalidArgumentException('non-nullable requested_date cannot be null');
        }
        $this->container['requested_date'] = $requested_date;

        return $this;
    }

    /**
     * Gets leave_category_name
     *
     * @return string|null
     */
    public function getLeaveCategoryName()
    {
        return $this->container['leave_category_name'];
    }

    /**
     * Sets leave_category_name
     *
     * @param string|null $leave_category_name 
     *
     * @return self
     */
    public function setLeaveCategoryName($leave_category_name)
    {
        if (is_null($leave_category_name)) {
            throw new \InvalidArgumentException('non-nullable leave_category_name cannot be null');
        }
        $this->container['leave_category_name'] = $leave_category_name;

        return $this;
    }

    /**
     * Gets hours_per_day
     *
     * @return float|null
     */
    public function getHoursPerDay()
    {
        return $this->container['hours_per_day'];
    }

    /**
     * Sets hours_per_day
     *
     * @param float|null $hours_per_day 
     *
     * @return self
     */
    public function setHoursPerDay($hours_per_day)
    {
        if (is_null($hours_per_day)) {
            throw new \InvalidArgumentException('non-nullable hours_per_day cannot be null');
        }
        $this->container['hours_per_day'] = $hours_per_day;

        return $this;
    }

    /**
     * Gets total_units
     *
     * @return float|null
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     *
     * @param float|null $total_units 
     *
     * @return self
     */
    public function setTotalUnits($total_units)
    {
        if (is_null($total_units)) {
            throw new \InvalidArgumentException('non-nullable total_units cannot be null');
        }
        $this->container['total_units'] = $total_units;

        return $this;
    }

    /**
     * Gets previously_applied_units
     *
     * @return float|null
     */
    public function getPreviouslyAppliedUnits()
    {
        return $this->container['previously_applied_units'];
    }

    /**
     * Sets previously_applied_units
     *
     * @param float|null $previously_applied_units 
     *
     * @return self
     */
    public function setPreviouslyAppliedUnits($previously_applied_units)
    {
        if (is_null($previously_applied_units)) {
            throw new \InvalidArgumentException('non-nullable previously_applied_units cannot be null');
        }
        $this->container['previously_applied_units'] = $previously_applied_units;

        return $this;
    }

    /**
     * Gets can_partially_edit
     *
     * @return bool|null
     */
    public function getCanPartiallyEdit()
    {
        return $this->container['can_partially_edit'];
    }

    /**
     * Sets can_partially_edit
     *
     * @param bool|null $can_partially_edit 
     *
     * @return self
     */
    public function setCanPartiallyEdit($can_partially_edit)
    {
        if (is_null($can_partially_edit)) {
            throw new \InvalidArgumentException('non-nullable can_partially_edit cannot be null');
        }
        $this->container['can_partially_edit'] = $can_partially_edit;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets total_days
     *
     * @return float|null
     */
    public function getTotalDays()
    {
        return $this->container['total_days'];
    }

    /**
     * Sets total_days
     *
     * @param float|null $total_days 
     *
     * @return self
     */
    public function setTotalDays($total_days)
    {
        if (is_null($total_days)) {
            throw new \InvalidArgumentException('non-nullable total_days cannot be null');
        }
        $this->container['total_days'] = $total_days;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_update_notes
     *
     * @return string|null
     */
    public function getStatusUpdateNotes()
    {
        return $this->container['status_update_notes'];
    }

    /**
     * Sets status_update_notes
     *
     * @param string|null $status_update_notes 
     *
     * @return self
     */
    public function setStatusUpdateNotes($status_update_notes)
    {
        if (is_null($status_update_notes)) {
            throw new \InvalidArgumentException('non-nullable status_update_notes cannot be null');
        }
        $this->container['status_update_notes'] = $status_update_notes;

        return $this;
    }

    /**
     * Gets can_cancel
     *
     * @return bool|null
     */
    public function getCanCancel()
    {
        return $this->container['can_cancel'];
    }

    /**
     * Sets can_cancel
     *
     * @param bool|null $can_cancel 
     *
     * @return self
     */
    public function setCanCancel($can_cancel)
    {
        if (is_null($can_cancel)) {
            throw new \InvalidArgumentException('non-nullable can_cancel cannot be null');
        }
        $this->container['can_cancel'] = $can_cancel;

        return $this;
    }

    /**
     * Gets can_modify
     *
     * @return bool|null
     */
    public function getCanModify()
    {
        return $this->container['can_modify'];
    }

    /**
     * Sets can_modify
     *
     * @param bool|null $can_modify 
     *
     * @return self
     */
    public function setCanModify($can_modify)
    {
        if (is_null($can_modify)) {
            throw new \InvalidArgumentException('non-nullable can_modify cannot be null');
        }
        $this->container['can_modify'] = $can_modify;

        return $this;
    }

    /**
     * Gets require_notes_for_leave_requests
     *
     * @return bool|null
     */
    public function getRequireNotesForLeaveRequests()
    {
        return $this->container['require_notes_for_leave_requests'];
    }

    /**
     * Sets require_notes_for_leave_requests
     *
     * @param bool|null $require_notes_for_leave_requests 
     *
     * @return self
     */
    public function setRequireNotesForLeaveRequests($require_notes_for_leave_requests)
    {
        if (is_null($require_notes_for_leave_requests)) {
            throw new \InvalidArgumentException('non-nullable require_notes_for_leave_requests cannot be null');
        }
        $this->container['require_notes_for_leave_requests'] = $require_notes_for_leave_requests;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \OpenAPI\Client\Model\AttachmentModel|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \OpenAPI\Client\Model\AttachmentModel|null $attachment attachment
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!in_array($unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_type', must be one of '%s'",
                    $unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return \OpenAPI\Client\Model\PartiallyAppliedLeaveRequestBannerModel|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param \OpenAPI\Client\Model\PartiallyAppliedLeaveRequestBannerModel|null $banner banner
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets manually_applied
     *
     * @return bool|null
     */
    public function getManuallyApplied()
    {
        return $this->container['manually_applied'];
    }

    /**
     * Sets manually_applied
     *
     * @param bool|null $manually_applied 
     *
     * @return self
     */
    public function setManuallyApplied($manually_applied)
    {
        if (is_null($manually_applied)) {
            throw new \InvalidArgumentException('non-nullable manually_applied cannot be null');
        }
        $this->container['manually_applied'] = $manually_applied;

        return $this;
    }

    /**
     * Gets applied_leave_unit_type_description
     *
     * @return string|null
     */
    public function getAppliedLeaveUnitTypeDescription()
    {
        return $this->container['applied_leave_unit_type_description'];
    }

    /**
     * Sets applied_leave_unit_type_description
     *
     * @param string|null $applied_leave_unit_type_description 
     *
     * @return self
     */
    public function setAppliedLeaveUnitTypeDescription($applied_leave_unit_type_description)
    {
        if (is_null($applied_leave_unit_type_description)) {
            throw new \InvalidArgumentException('non-nullable applied_leave_unit_type_description cannot be null');
        }
        $this->container['applied_leave_unit_type_description'] = $applied_leave_unit_type_description;

        return $this;
    }

    /**
     * Gets return_to_work_interview_url
     *
     * @return string|null
     */
    public function getReturnToWorkInterviewUrl()
    {
        return $this->container['return_to_work_interview_url'];
    }

    /**
     * Sets return_to_work_interview_url
     *
     * @param string|null $return_to_work_interview_url 
     *
     * @return self
     */
    public function setReturnToWorkInterviewUrl($return_to_work_interview_url)
    {
        if (is_null($return_to_work_interview_url)) {
            throw new \InvalidArgumentException('non-nullable return_to_work_interview_url cannot be null');
        }
        $this->container['return_to_work_interview_url'] = $return_to_work_interview_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


