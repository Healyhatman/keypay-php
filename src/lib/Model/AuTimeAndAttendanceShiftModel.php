<?php
/**
 * AuTimeAndAttendanceShiftModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuTimeAndAttendanceShiftModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuTimeAndAttendanceShiftModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuTimeAndAttendanceShiftModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'classification_id' => 'int',
        'classification_name' => 'string',
        'id' => 'int',
        'start_time_local' => '\DateTime',
        'start_time_utc' => '\DateTime',
        'end_time_utc' => '\DateTime',
        'end_time_local' => '\DateTime',
        'location_id' => 'int',
        'location_fully_qualified_name' => 'string',
        'work_type_id' => 'int',
        'work_type_name' => 'string',
        'kiosk_id' => 'int',
        'kiosk_name' => 'string',
        'timesheet_line_id' => 'int',
        'employee' => '\OpenAPI\Client\Model\BasicKioskEmployeeModel',
        'breaks' => '\OpenAPI\Client\Model\TimeAndAttendanceBreakModel[]',
        'shift_conditions' => '\OpenAPI\Client\Model\ShiftConditionModel[]',
        'dimension_values' => '\OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'classification_id' => 'int32',
        'classification_name' => null,
        'id' => 'int32',
        'start_time_local' => 'date-time',
        'start_time_utc' => 'date-time',
        'end_time_utc' => 'date-time',
        'end_time_local' => 'date-time',
        'location_id' => 'int32',
        'location_fully_qualified_name' => null,
        'work_type_id' => 'int32',
        'work_type_name' => null,
        'kiosk_id' => 'int32',
        'kiosk_name' => null,
        'timesheet_line_id' => 'int32',
        'employee' => null,
        'breaks' => null,
        'shift_conditions' => null,
        'dimension_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'classification_id' => false,
		'classification_name' => false,
		'id' => false,
		'start_time_local' => false,
		'start_time_utc' => false,
		'end_time_utc' => false,
		'end_time_local' => false,
		'location_id' => false,
		'location_fully_qualified_name' => false,
		'work_type_id' => false,
		'work_type_name' => false,
		'kiosk_id' => false,
		'kiosk_name' => false,
		'timesheet_line_id' => false,
		'employee' => false,
		'breaks' => false,
		'shift_conditions' => false,
		'dimension_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classification_id' => 'classificationId',
        'classification_name' => 'classificationName',
        'id' => 'id',
        'start_time_local' => 'startTimeLocal',
        'start_time_utc' => 'startTimeUtc',
        'end_time_utc' => 'endTimeUtc',
        'end_time_local' => 'endTimeLocal',
        'location_id' => 'locationId',
        'location_fully_qualified_name' => 'locationFullyQualifiedName',
        'work_type_id' => 'workTypeId',
        'work_type_name' => 'workTypeName',
        'kiosk_id' => 'kioskId',
        'kiosk_name' => 'kioskName',
        'timesheet_line_id' => 'timesheetLineId',
        'employee' => 'employee',
        'breaks' => 'breaks',
        'shift_conditions' => 'shiftConditions',
        'dimension_values' => 'dimensionValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classification_id' => 'setClassificationId',
        'classification_name' => 'setClassificationName',
        'id' => 'setId',
        'start_time_local' => 'setStartTimeLocal',
        'start_time_utc' => 'setStartTimeUtc',
        'end_time_utc' => 'setEndTimeUtc',
        'end_time_local' => 'setEndTimeLocal',
        'location_id' => 'setLocationId',
        'location_fully_qualified_name' => 'setLocationFullyQualifiedName',
        'work_type_id' => 'setWorkTypeId',
        'work_type_name' => 'setWorkTypeName',
        'kiosk_id' => 'setKioskId',
        'kiosk_name' => 'setKioskName',
        'timesheet_line_id' => 'setTimesheetLineId',
        'employee' => 'setEmployee',
        'breaks' => 'setBreaks',
        'shift_conditions' => 'setShiftConditions',
        'dimension_values' => 'setDimensionValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classification_id' => 'getClassificationId',
        'classification_name' => 'getClassificationName',
        'id' => 'getId',
        'start_time_local' => 'getStartTimeLocal',
        'start_time_utc' => 'getStartTimeUtc',
        'end_time_utc' => 'getEndTimeUtc',
        'end_time_local' => 'getEndTimeLocal',
        'location_id' => 'getLocationId',
        'location_fully_qualified_name' => 'getLocationFullyQualifiedName',
        'work_type_id' => 'getWorkTypeId',
        'work_type_name' => 'getWorkTypeName',
        'kiosk_id' => 'getKioskId',
        'kiosk_name' => 'getKioskName',
        'timesheet_line_id' => 'getTimesheetLineId',
        'employee' => 'getEmployee',
        'breaks' => 'getBreaks',
        'shift_conditions' => 'getShiftConditions',
        'dimension_values' => 'getDimensionValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('classification_id', $data ?? [], null);
        $this->setIfExists('classification_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('start_time_local', $data ?? [], null);
        $this->setIfExists('start_time_utc', $data ?? [], null);
        $this->setIfExists('end_time_utc', $data ?? [], null);
        $this->setIfExists('end_time_local', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location_fully_qualified_name', $data ?? [], null);
        $this->setIfExists('work_type_id', $data ?? [], null);
        $this->setIfExists('work_type_name', $data ?? [], null);
        $this->setIfExists('kiosk_id', $data ?? [], null);
        $this->setIfExists('kiosk_name', $data ?? [], null);
        $this->setIfExists('timesheet_line_id', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('breaks', $data ?? [], null);
        $this->setIfExists('shift_conditions', $data ?? [], null);
        $this->setIfExists('dimension_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets classification_id
     *
     * @return int|null
     */
    public function getClassificationId()
    {
        return $this->container['classification_id'];
    }

    /**
     * Sets classification_id
     *
     * @param int|null $classification_id 
     *
     * @return self
     */
    public function setClassificationId($classification_id)
    {
        if (is_null($classification_id)) {
            throw new \InvalidArgumentException('non-nullable classification_id cannot be null');
        }
        $this->container['classification_id'] = $classification_id;

        return $this;
    }

    /**
     * Gets classification_name
     *
     * @return string|null
     */
    public function getClassificationName()
    {
        return $this->container['classification_name'];
    }

    /**
     * Sets classification_name
     *
     * @param string|null $classification_name 
     *
     * @return self
     */
    public function setClassificationName($classification_name)
    {
        if (is_null($classification_name)) {
            throw new \InvalidArgumentException('non-nullable classification_name cannot be null');
        }
        $this->container['classification_name'] = $classification_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets start_time_local
     *
     * @return \DateTime|null
     */
    public function getStartTimeLocal()
    {
        return $this->container['start_time_local'];
    }

    /**
     * Sets start_time_local
     *
     * @param \DateTime|null $start_time_local 
     *
     * @return self
     */
    public function setStartTimeLocal($start_time_local)
    {
        if (is_null($start_time_local)) {
            throw new \InvalidArgumentException('non-nullable start_time_local cannot be null');
        }
        $this->container['start_time_local'] = $start_time_local;

        return $this;
    }

    /**
     * Gets start_time_utc
     *
     * @return \DateTime|null
     */
    public function getStartTimeUtc()
    {
        return $this->container['start_time_utc'];
    }

    /**
     * Sets start_time_utc
     *
     * @param \DateTime|null $start_time_utc 
     *
     * @return self
     */
    public function setStartTimeUtc($start_time_utc)
    {
        if (is_null($start_time_utc)) {
            throw new \InvalidArgumentException('non-nullable start_time_utc cannot be null');
        }
        $this->container['start_time_utc'] = $start_time_utc;

        return $this;
    }

    /**
     * Gets end_time_utc
     *
     * @return \DateTime|null
     */
    public function getEndTimeUtc()
    {
        return $this->container['end_time_utc'];
    }

    /**
     * Sets end_time_utc
     *
     * @param \DateTime|null $end_time_utc 
     *
     * @return self
     */
    public function setEndTimeUtc($end_time_utc)
    {
        if (is_null($end_time_utc)) {
            throw new \InvalidArgumentException('non-nullable end_time_utc cannot be null');
        }
        $this->container['end_time_utc'] = $end_time_utc;

        return $this;
    }

    /**
     * Gets end_time_local
     *
     * @return \DateTime|null
     */
    public function getEndTimeLocal()
    {
        return $this->container['end_time_local'];
    }

    /**
     * Sets end_time_local
     *
     * @param \DateTime|null $end_time_local 
     *
     * @return self
     */
    public function setEndTimeLocal($end_time_local)
    {
        if (is_null($end_time_local)) {
            throw new \InvalidArgumentException('non-nullable end_time_local cannot be null');
        }
        $this->container['end_time_local'] = $end_time_local;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_fully_qualified_name
     *
     * @return string|null
     */
    public function getLocationFullyQualifiedName()
    {
        return $this->container['location_fully_qualified_name'];
    }

    /**
     * Sets location_fully_qualified_name
     *
     * @param string|null $location_fully_qualified_name 
     *
     * @return self
     */
    public function setLocationFullyQualifiedName($location_fully_qualified_name)
    {
        if (is_null($location_fully_qualified_name)) {
            throw new \InvalidArgumentException('non-nullable location_fully_qualified_name cannot be null');
        }
        $this->container['location_fully_qualified_name'] = $location_fully_qualified_name;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int|null
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int|null $work_type_id 
     *
     * @return self
     */
    public function setWorkTypeId($work_type_id)
    {
        if (is_null($work_type_id)) {
            throw new \InvalidArgumentException('non-nullable work_type_id cannot be null');
        }
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets work_type_name
     *
     * @return string|null
     */
    public function getWorkTypeName()
    {
        return $this->container['work_type_name'];
    }

    /**
     * Sets work_type_name
     *
     * @param string|null $work_type_name 
     *
     * @return self
     */
    public function setWorkTypeName($work_type_name)
    {
        if (is_null($work_type_name)) {
            throw new \InvalidArgumentException('non-nullable work_type_name cannot be null');
        }
        $this->container['work_type_name'] = $work_type_name;

        return $this;
    }

    /**
     * Gets kiosk_id
     *
     * @return int|null
     */
    public function getKioskId()
    {
        return $this->container['kiosk_id'];
    }

    /**
     * Sets kiosk_id
     *
     * @param int|null $kiosk_id 
     *
     * @return self
     */
    public function setKioskId($kiosk_id)
    {
        if (is_null($kiosk_id)) {
            throw new \InvalidArgumentException('non-nullable kiosk_id cannot be null');
        }
        $this->container['kiosk_id'] = $kiosk_id;

        return $this;
    }

    /**
     * Gets kiosk_name
     *
     * @return string|null
     */
    public function getKioskName()
    {
        return $this->container['kiosk_name'];
    }

    /**
     * Sets kiosk_name
     *
     * @param string|null $kiosk_name 
     *
     * @return self
     */
    public function setKioskName($kiosk_name)
    {
        if (is_null($kiosk_name)) {
            throw new \InvalidArgumentException('non-nullable kiosk_name cannot be null');
        }
        $this->container['kiosk_name'] = $kiosk_name;

        return $this;
    }

    /**
     * Gets timesheet_line_id
     *
     * @return int|null
     */
    public function getTimesheetLineId()
    {
        return $this->container['timesheet_line_id'];
    }

    /**
     * Sets timesheet_line_id
     *
     * @param int|null $timesheet_line_id 
     *
     * @return self
     */
    public function setTimesheetLineId($timesheet_line_id)
    {
        if (is_null($timesheet_line_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_line_id cannot be null');
        }
        $this->container['timesheet_line_id'] = $timesheet_line_id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Model\BasicKioskEmployeeModel|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Model\BasicKioskEmployeeModel|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \OpenAPI\Client\Model\TimeAndAttendanceBreakModel[]|null
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \OpenAPI\Client\Model\TimeAndAttendanceBreakModel[]|null $breaks 
     *
     * @return self
     */
    public function setBreaks($breaks)
    {
        if (is_null($breaks)) {
            throw new \InvalidArgumentException('non-nullable breaks cannot be null');
        }
        $this->container['breaks'] = $breaks;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \OpenAPI\Client\Model\ShiftConditionModel[]|null
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \OpenAPI\Client\Model\ShiftConditionModel[]|null $shift_conditions 
     *
     * @return self
     */
    public function setShiftConditions($shift_conditions)
    {
        if (is_null($shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable shift_conditions cannot be null');
        }
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets dimension_values
     *
     * @return \OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]|null
     */
    public function getDimensionValues()
    {
        return $this->container['dimension_values'];
    }

    /**
     * Sets dimension_values
     *
     * @param \OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]|null $dimension_values 
     *
     * @return self
     */
    public function setDimensionValues($dimension_values)
    {
        if (is_null($dimension_values)) {
            throw new \InvalidArgumentException('non-nullable dimension_values cannot be null');
        }
        $this->container['dimension_values'] = $dimension_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


