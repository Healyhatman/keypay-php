<?php
/**
 * AuDetailedActivityReportExportModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuDetailedActivityReportExportModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuDetailedActivityReportExportModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuDetailedActivityReportExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payg' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'super' => 'double',
        'gross_plus_super' => 'double',
        'location' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'hours' => 'double',
        'gross_earnings' => 'double',
        'pre_tax_deductions' => 'double',
        'post_tax_deductions' => 'object',
        'tax_exempt_earnings' => 'double',
        'taxable_earnings' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payg' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'super' => 'double',
        'gross_plus_super' => 'double',
        'location' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'hours' => 'double',
        'gross_earnings' => 'double',
        'pre_tax_deductions' => 'double',
        'post_tax_deductions' => null,
        'tax_exempt_earnings' => 'double',
        'taxable_earnings' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg' => 'payg',
        'sfss' => 'sfss',
        'help' => 'help',
        'super' => 'super',
        'gross_plus_super' => 'grossPlusSuper',
        'location' => 'location',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'hours' => 'hours',
        'gross_earnings' => 'grossEarnings',
        'pre_tax_deductions' => 'preTaxDeductions',
        'post_tax_deductions' => 'postTaxDeductions',
        'tax_exempt_earnings' => 'taxExemptEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'net_earnings' => 'netEarnings',
        'employer_liabilities' => 'employerLiabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg' => 'setPayg',
        'sfss' => 'setSfss',
        'help' => 'setHelp',
        'super' => 'setSuper',
        'gross_plus_super' => 'setGrossPlusSuper',
        'location' => 'setLocation',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'hours' => 'setHours',
        'gross_earnings' => 'setGrossEarnings',
        'pre_tax_deductions' => 'setPreTaxDeductions',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'tax_exempt_earnings' => 'setTaxExemptEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'net_earnings' => 'setNetEarnings',
        'employer_liabilities' => 'setEmployerLiabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg' => 'getPayg',
        'sfss' => 'getSfss',
        'help' => 'getHelp',
        'super' => 'getSuper',
        'gross_plus_super' => 'getGrossPlusSuper',
        'location' => 'getLocation',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'hours' => 'getHours',
        'gross_earnings' => 'getGrossEarnings',
        'pre_tax_deductions' => 'getPreTaxDeductions',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'tax_exempt_earnings' => 'getTaxExemptEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'net_earnings' => 'getNetEarnings',
        'employer_liabilities' => 'getEmployerLiabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payg'] = isset($data['payg']) ? $data['payg'] : null;
        $this->container['sfss'] = isset($data['sfss']) ? $data['sfss'] : null;
        $this->container['help'] = isset($data['help']) ? $data['help'] : null;
        $this->container['super'] = isset($data['super']) ? $data['super'] : null;
        $this->container['gross_plus_super'] = isset($data['gross_plus_super']) ? $data['gross_plus_super'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['gross_earnings'] = isset($data['gross_earnings']) ? $data['gross_earnings'] : null;
        $this->container['pre_tax_deductions'] = isset($data['pre_tax_deductions']) ? $data['pre_tax_deductions'] : null;
        $this->container['post_tax_deductions'] = isset($data['post_tax_deductions']) ? $data['post_tax_deductions'] : null;
        $this->container['tax_exempt_earnings'] = isset($data['tax_exempt_earnings']) ? $data['tax_exempt_earnings'] : null;
        $this->container['taxable_earnings'] = isset($data['taxable_earnings']) ? $data['taxable_earnings'] : null;
        $this->container['net_earnings'] = isset($data['net_earnings']) ? $data['net_earnings'] : null;
        $this->container['employer_liabilities'] = isset($data['employer_liabilities']) ? $data['employer_liabilities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg
     *
     * @return double
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param double $payg 
     *
     * @return $this
     */
    public function setPayg($payg)
    {
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets sfss
     *
     * @return double
     */
    public function getSfss()
    {
        return $this->container['sfss'];
    }

    /**
     * Sets sfss
     *
     * @param double $sfss 
     *
     * @return $this
     */
    public function setSfss($sfss)
    {
        $this->container['sfss'] = $sfss;

        return $this;
    }

    /**
     * Gets help
     *
     * @return double
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param double $help 
     *
     * @return $this
     */
    public function setHelp($help)
    {
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets super
     *
     * @return double
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param double $super 
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets gross_plus_super
     *
     * @return double
     */
    public function getGrossPlusSuper()
    {
        return $this->container['gross_plus_super'];
    }

    /**
     * Sets gross_plus_super
     *
     * @param double $gross_plus_super 
     *
     * @return $this
     */
    public function setGrossPlusSuper($gross_plus_super)
    {
        $this->container['gross_plus_super'] = $gross_plus_super;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location 
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name 
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname 
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return double
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param double $hours 
     *
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return double
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param double $gross_earnings 
     *
     * @return $this
     */
    public function setGrossEarnings($gross_earnings)
    {
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets pre_tax_deductions
     *
     * @return double
     */
    public function getPreTaxDeductions()
    {
        return $this->container['pre_tax_deductions'];
    }

    /**
     * Sets pre_tax_deductions
     *
     * @param double $pre_tax_deductions 
     *
     * @return $this
     */
    public function setPreTaxDeductions($pre_tax_deductions)
    {
        $this->container['pre_tax_deductions'] = $pre_tax_deductions;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return object
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param object $post_tax_deductions 
     *
     * @return $this
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets tax_exempt_earnings
     *
     * @return double
     */
    public function getTaxExemptEarnings()
    {
        return $this->container['tax_exempt_earnings'];
    }

    /**
     * Sets tax_exempt_earnings
     *
     * @param double $tax_exempt_earnings 
     *
     * @return $this
     */
    public function setTaxExemptEarnings($tax_exempt_earnings)
    {
        $this->container['tax_exempt_earnings'] = $tax_exempt_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return double
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param double $taxable_earnings 
     *
     * @return $this
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return double
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param double $net_earnings 
     *
     * @return $this
     */
    public function setNetEarnings($net_earnings)
    {
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return double
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param double $employer_liabilities 
     *
     * @return $this
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


