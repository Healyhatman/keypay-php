<?php
/**
 * AuDetailedActivityReportExportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuDetailedActivityReportExportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuDetailedActivityReportExportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuDetailedActivityReportExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payg' => 'float',
        'sfss' => 'float',
        'help' => 'float',
        'super' => 'float',
        'gross_plus_super' => 'float',
        'location' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'hours' => 'float',
        'gross_earnings' => 'float',
        'pre_tax_deductions' => 'float',
        'post_tax_deductions' => 'object',
        'tax_exempt_earnings' => 'float',
        'taxable_earnings' => 'float',
        'net_earnings' => 'float',
        'employer_liabilities' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payg' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'super' => 'double',
        'gross_plus_super' => 'double',
        'location' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'hours' => 'double',
        'gross_earnings' => 'double',
        'pre_tax_deductions' => 'double',
        'post_tax_deductions' => null,
        'tax_exempt_earnings' => 'double',
        'taxable_earnings' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payg' => false,
		'sfss' => false,
		'help' => false,
		'super' => false,
		'gross_plus_super' => false,
		'location' => false,
		'employee_id' => false,
		'first_name' => false,
		'surname' => false,
		'external_id' => false,
		'hours' => false,
		'gross_earnings' => false,
		'pre_tax_deductions' => false,
		'post_tax_deductions' => false,
		'tax_exempt_earnings' => false,
		'taxable_earnings' => false,
		'net_earnings' => false,
		'employer_liabilities' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg' => 'payg',
        'sfss' => 'sfss',
        'help' => 'help',
        'super' => 'super',
        'gross_plus_super' => 'grossPlusSuper',
        'location' => 'location',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'hours' => 'hours',
        'gross_earnings' => 'grossEarnings',
        'pre_tax_deductions' => 'preTaxDeductions',
        'post_tax_deductions' => 'postTaxDeductions',
        'tax_exempt_earnings' => 'taxExemptEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'net_earnings' => 'netEarnings',
        'employer_liabilities' => 'employerLiabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg' => 'setPayg',
        'sfss' => 'setSfss',
        'help' => 'setHelp',
        'super' => 'setSuper',
        'gross_plus_super' => 'setGrossPlusSuper',
        'location' => 'setLocation',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'hours' => 'setHours',
        'gross_earnings' => 'setGrossEarnings',
        'pre_tax_deductions' => 'setPreTaxDeductions',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'tax_exempt_earnings' => 'setTaxExemptEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'net_earnings' => 'setNetEarnings',
        'employer_liabilities' => 'setEmployerLiabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg' => 'getPayg',
        'sfss' => 'getSfss',
        'help' => 'getHelp',
        'super' => 'getSuper',
        'gross_plus_super' => 'getGrossPlusSuper',
        'location' => 'getLocation',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'hours' => 'getHours',
        'gross_earnings' => 'getGrossEarnings',
        'pre_tax_deductions' => 'getPreTaxDeductions',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'tax_exempt_earnings' => 'getTaxExemptEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'net_earnings' => 'getNetEarnings',
        'employer_liabilities' => 'getEmployerLiabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payg', $data ?? [], null);
        $this->setIfExists('sfss', $data ?? [], null);
        $this->setIfExists('help', $data ?? [], null);
        $this->setIfExists('super', $data ?? [], null);
        $this->setIfExists('gross_plus_super', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('pre_tax_deductions', $data ?? [], null);
        $this->setIfExists('post_tax_deductions', $data ?? [], null);
        $this->setIfExists('tax_exempt_earnings', $data ?? [], null);
        $this->setIfExists('taxable_earnings', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('employer_liabilities', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg
     *
     * @return float|null
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param float|null $payg 
     *
     * @return self
     */
    public function setPayg($payg)
    {
        if (is_null($payg)) {
            throw new \InvalidArgumentException('non-nullable payg cannot be null');
        }
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets sfss
     *
     * @return float|null
     */
    public function getSfss()
    {
        return $this->container['sfss'];
    }

    /**
     * Sets sfss
     *
     * @param float|null $sfss 
     *
     * @return self
     */
    public function setSfss($sfss)
    {
        if (is_null($sfss)) {
            throw new \InvalidArgumentException('non-nullable sfss cannot be null');
        }
        $this->container['sfss'] = $sfss;

        return $this;
    }

    /**
     * Gets help
     *
     * @return float|null
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param float|null $help 
     *
     * @return self
     */
    public function setHelp($help)
    {
        if (is_null($help)) {
            throw new \InvalidArgumentException('non-nullable help cannot be null');
        }
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets super
     *
     * @return float|null
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param float|null $super 
     *
     * @return self
     */
    public function setSuper($super)
    {
        if (is_null($super)) {
            throw new \InvalidArgumentException('non-nullable super cannot be null');
        }
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets gross_plus_super
     *
     * @return float|null
     */
    public function getGrossPlusSuper()
    {
        return $this->container['gross_plus_super'];
    }

    /**
     * Sets gross_plus_super
     *
     * @param float|null $gross_plus_super 
     *
     * @return self
     */
    public function setGrossPlusSuper($gross_plus_super)
    {
        if (is_null($gross_plus_super)) {
            throw new \InvalidArgumentException('non-nullable gross_plus_super cannot be null');
        }
        $this->container['gross_plus_super'] = $gross_plus_super;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location 
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return float|null
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param float|null $hours 
     *
     * @return self
     */
    public function setHours($hours)
    {
        if (is_null($hours)) {
            throw new \InvalidArgumentException('non-nullable hours cannot be null');
        }
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets pre_tax_deductions
     *
     * @return float|null
     */
    public function getPreTaxDeductions()
    {
        return $this->container['pre_tax_deductions'];
    }

    /**
     * Sets pre_tax_deductions
     *
     * @param float|null $pre_tax_deductions 
     *
     * @return self
     */
    public function setPreTaxDeductions($pre_tax_deductions)
    {
        if (is_null($pre_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deductions cannot be null');
        }
        $this->container['pre_tax_deductions'] = $pre_tax_deductions;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return object|null
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param object|null $post_tax_deductions 
     *
     * @return self
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        if (is_null($post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions cannot be null');
        }
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets tax_exempt_earnings
     *
     * @return float|null
     */
    public function getTaxExemptEarnings()
    {
        return $this->container['tax_exempt_earnings'];
    }

    /**
     * Sets tax_exempt_earnings
     *
     * @param float|null $tax_exempt_earnings 
     *
     * @return self
     */
    public function setTaxExemptEarnings($tax_exempt_earnings)
    {
        if (is_null($tax_exempt_earnings)) {
            throw new \InvalidArgumentException('non-nullable tax_exempt_earnings cannot be null');
        }
        $this->container['tax_exempt_earnings'] = $tax_exempt_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float|null
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float|null $taxable_earnings 
     *
     * @return self
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        if (is_null($taxable_earnings)) {
            throw new \InvalidArgumentException('non-nullable taxable_earnings cannot be null');
        }
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return float|null
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param float|null $employer_liabilities 
     *
     * @return self
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        if (is_null($employer_liabilities)) {
            throw new \InvalidArgumentException('non-nullable employer_liabilities cannot be null');
        }
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


