<?php
/**
 * AuUnstructuredEmployeeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuUnstructuredEmployeeModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuUnstructuredEmployeeModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuUnstructuredEmployeeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_file_number' => 'string',
        'residential_suburb' => 'string',
        'residential_state' => 'string',
        'postal_suburb' => 'string',
        'postal_state' => 'string',
        'employing_entity_abn' => 'string',
        'employing_entity_id' => 'string',
        'previous_surname' => 'string',
        'australian_resident' => 'bool',
        'claim_tax_free_threshold' => 'bool',
        'seniors_tax_offset' => 'bool',
        'other_tax_offset' => 'bool',
        'stsl_debt' => 'bool',
        'is_exempt_from_flood_levy' => 'bool',
        'has_approved_working_holiday_visa' => 'bool',
        'working_holiday_visa_country' => 'string',
        'is_seasonal_worker' => 'bool',
        'has_withholding_variation' => 'bool',
        'tax_variation' => 'double',
        'date_tax_file_declaration_signed' => '\DateTime',
        'date_tax_file_declaration_reported' => '\DateTime',
        'employment_agreement' => 'string',
        'is_exempt_from_payroll_tax' => 'bool',
        'bank_account1_bsb' => 'string',
        'bank_account2_bsb' => 'string',
        'bank_account3_bsb' => 'string',
        'super_fund1_product_code' => 'string',
        'super_fund1_fund_name' => 'string',
        'super_fund1_member_number' => 'string',
        'super_fund1_allocated_percentage' => 'double',
        'super_fund1_fixed_amount' => 'double',
        'super_fund1_employer_nominated_fund' => 'bool',
        'super_fund2_product_code' => 'string',
        'super_fund2_fund_name' => 'string',
        'super_fund2_member_number' => 'string',
        'super_fund2_allocated_percentage' => 'double',
        'super_fund2_fixed_amount' => 'double',
        'super_fund2_employer_nominated_fund' => 'bool',
        'super_fund3_product_code' => 'string',
        'super_fund3_fund_name' => 'string',
        'super_fund3_member_number' => 'string',
        'super_fund3_allocated_percentage' => 'double',
        'super_fund3_fixed_amount' => 'double',
        'super_fund3_employer_nominated_fund' => 'bool',
        'super_threshold_amount' => 'double',
        'maximum_quarterly_super_contributions_base' => 'double',
        'medicare_levy_exemption' => 'string',
        'closely_held_employee' => 'bool',
        'closely_held_reporting' => 'string',
        'single_touch_payroll' => 'string',
        'hours_per_day' => 'double',
        'postal_address_is_overseas' => 'bool',
        'residential_address_is_overseas' => 'bool',
        'employment_type' => 'string',
        'termination_reason' => 'string',
        'id' => 'int',
        'title' => 'string',
        'preferred_name' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'surname' => 'string',
        'date_of_birth' => '\DateTime',
        'gender' => 'string',
        'external_id' => 'string',
        'residential_street_address' => 'string',
        'residential_address_line2' => 'string',
        'residential_post_code' => 'string',
        'residential_country' => 'string',
        'postal_street_address' => 'string',
        'postal_address_line2' => 'string',
        'postal_post_code' => 'string',
        'postal_country' => 'string',
        'email_address' => 'string',
        'home_phone' => 'string',
        'work_phone' => 'string',
        'mobile_phone' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'anniversary_date' => '\DateTime',
        'tags' => 'string',
        'job_title' => 'string',
        'pay_schedule' => 'string',
        'primary_pay_category' => 'string',
        'primary_location' => 'string',
        'pay_slip_notification_type' => 'string',
        'rate' => 'double',
        'override_template_rate' => 'string',
        'rate_unit' => 'string',
        'hours_per_week' => 'double',
        'automatically_pay_employee' => 'string',
        'leave_template' => 'string',
        'pay_rate_template' => 'string',
        'pay_condition_rule_set' => 'string',
        'is_enabled_for_timesheets' => 'string',
        'locations' => 'string',
        'work_types' => 'string',
        'emergency_contact1_name' => 'string',
        'emergency_contact1_relationship' => 'string',
        'emergency_contact1_address' => 'string',
        'emergency_contact1_contact_number' => 'string',
        'emergency_contact1_alternate_contact_number' => 'string',
        'emergency_contact2_name' => 'string',
        'emergency_contact2_relationship' => 'string',
        'emergency_contact2_address' => 'string',
        'emergency_contact2_contact_number' => 'string',
        'emergency_contact2_alternate_contact_number' => 'string',
        'bank_account1_account_number' => 'string',
        'bank_account1_account_name' => 'string',
        'bank_account1_allocated_percentage' => 'double',
        'bank_account1_fixed_amount' => 'double',
        'bank_account2_account_number' => 'string',
        'bank_account2_account_name' => 'string',
        'bank_account2_allocated_percentage' => 'double',
        'bank_account2_fixed_amount' => 'double',
        'bank_account3_account_number' => 'string',
        'bank_account3_account_name' => 'string',
        'bank_account3_allocated_percentage' => 'double',
        'bank_account3_fixed_amount' => 'double',
        'rostering_notification_choices' => 'string',
        'leave_accrual_start_date_type' => 'string',
        'leave_year_start' => '\DateTime',
        'status' => 'string',
        'date_created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_file_number' => null,
        'residential_suburb' => null,
        'residential_state' => null,
        'postal_suburb' => null,
        'postal_state' => null,
        'employing_entity_abn' => null,
        'employing_entity_id' => null,
        'previous_surname' => null,
        'australian_resident' => null,
        'claim_tax_free_threshold' => null,
        'seniors_tax_offset' => null,
        'other_tax_offset' => null,
        'stsl_debt' => null,
        'is_exempt_from_flood_levy' => null,
        'has_approved_working_holiday_visa' => null,
        'working_holiday_visa_country' => null,
        'is_seasonal_worker' => null,
        'has_withholding_variation' => null,
        'tax_variation' => 'double',
        'date_tax_file_declaration_signed' => 'date-time',
        'date_tax_file_declaration_reported' => 'date-time',
        'employment_agreement' => null,
        'is_exempt_from_payroll_tax' => null,
        'bank_account1_bsb' => null,
        'bank_account2_bsb' => null,
        'bank_account3_bsb' => null,
        'super_fund1_product_code' => null,
        'super_fund1_fund_name' => null,
        'super_fund1_member_number' => null,
        'super_fund1_allocated_percentage' => 'double',
        'super_fund1_fixed_amount' => 'double',
        'super_fund1_employer_nominated_fund' => null,
        'super_fund2_product_code' => null,
        'super_fund2_fund_name' => null,
        'super_fund2_member_number' => null,
        'super_fund2_allocated_percentage' => 'double',
        'super_fund2_fixed_amount' => 'double',
        'super_fund2_employer_nominated_fund' => null,
        'super_fund3_product_code' => null,
        'super_fund3_fund_name' => null,
        'super_fund3_member_number' => null,
        'super_fund3_allocated_percentage' => 'double',
        'super_fund3_fixed_amount' => 'double',
        'super_fund3_employer_nominated_fund' => null,
        'super_threshold_amount' => 'double',
        'maximum_quarterly_super_contributions_base' => 'double',
        'medicare_levy_exemption' => null,
        'closely_held_employee' => null,
        'closely_held_reporting' => null,
        'single_touch_payroll' => null,
        'hours_per_day' => 'double',
        'postal_address_is_overseas' => null,
        'residential_address_is_overseas' => null,
        'employment_type' => null,
        'termination_reason' => null,
        'id' => 'int32',
        'title' => null,
        'preferred_name' => null,
        'first_name' => null,
        'middle_name' => null,
        'surname' => null,
        'date_of_birth' => 'date-time',
        'gender' => null,
        'external_id' => null,
        'residential_street_address' => null,
        'residential_address_line2' => null,
        'residential_post_code' => null,
        'residential_country' => null,
        'postal_street_address' => null,
        'postal_address_line2' => null,
        'postal_post_code' => null,
        'postal_country' => null,
        'email_address' => null,
        'home_phone' => null,
        'work_phone' => null,
        'mobile_phone' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'anniversary_date' => 'date-time',
        'tags' => null,
        'job_title' => null,
        'pay_schedule' => null,
        'primary_pay_category' => null,
        'primary_location' => null,
        'pay_slip_notification_type' => null,
        'rate' => 'double',
        'override_template_rate' => null,
        'rate_unit' => null,
        'hours_per_week' => 'double',
        'automatically_pay_employee' => null,
        'leave_template' => null,
        'pay_rate_template' => null,
        'pay_condition_rule_set' => null,
        'is_enabled_for_timesheets' => null,
        'locations' => null,
        'work_types' => null,
        'emergency_contact1_name' => null,
        'emergency_contact1_relationship' => null,
        'emergency_contact1_address' => null,
        'emergency_contact1_contact_number' => null,
        'emergency_contact1_alternate_contact_number' => null,
        'emergency_contact2_name' => null,
        'emergency_contact2_relationship' => null,
        'emergency_contact2_address' => null,
        'emergency_contact2_contact_number' => null,
        'emergency_contact2_alternate_contact_number' => null,
        'bank_account1_account_number' => null,
        'bank_account1_account_name' => null,
        'bank_account1_allocated_percentage' => 'double',
        'bank_account1_fixed_amount' => 'double',
        'bank_account2_account_number' => null,
        'bank_account2_account_name' => null,
        'bank_account2_allocated_percentage' => 'double',
        'bank_account2_fixed_amount' => 'double',
        'bank_account3_account_number' => null,
        'bank_account3_account_name' => null,
        'bank_account3_allocated_percentage' => 'double',
        'bank_account3_fixed_amount' => 'double',
        'rostering_notification_choices' => null,
        'leave_accrual_start_date_type' => null,
        'leave_year_start' => 'date-time',
        'status' => null,
        'date_created' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_file_number' => 'taxFileNumber',
        'residential_suburb' => 'residentialSuburb',
        'residential_state' => 'residentialState',
        'postal_suburb' => 'postalSuburb',
        'postal_state' => 'postalState',
        'employing_entity_abn' => 'employingEntityABN',
        'employing_entity_id' => 'employingEntityId',
        'previous_surname' => 'previousSurname',
        'australian_resident' => 'australianResident',
        'claim_tax_free_threshold' => 'claimTaxFreeThreshold',
        'seniors_tax_offset' => 'seniorsTaxOffset',
        'other_tax_offset' => 'otherTaxOffset',
        'stsl_debt' => 'stslDebt',
        'is_exempt_from_flood_levy' => 'isExemptFromFloodLevy',
        'has_approved_working_holiday_visa' => 'hasApprovedWorkingHolidayVisa',
        'working_holiday_visa_country' => 'workingHolidayVisaCountry',
        'is_seasonal_worker' => 'isSeasonalWorker',
        'has_withholding_variation' => 'hasWithholdingVariation',
        'tax_variation' => 'taxVariation',
        'date_tax_file_declaration_signed' => 'dateTaxFileDeclarationSigned',
        'date_tax_file_declaration_reported' => 'dateTaxFileDeclarationReported',
        'employment_agreement' => 'employmentAgreement',
        'is_exempt_from_payroll_tax' => 'isExemptFromPayrollTax',
        'bank_account1_bsb' => 'bankAccount1_BSB',
        'bank_account2_bsb' => 'bankAccount2_BSB',
        'bank_account3_bsb' => 'bankAccount3_BSB',
        'super_fund1_product_code' => 'superFund1_ProductCode',
        'super_fund1_fund_name' => 'superFund1_FundName',
        'super_fund1_member_number' => 'superFund1_MemberNumber',
        'super_fund1_allocated_percentage' => 'superFund1_AllocatedPercentage',
        'super_fund1_fixed_amount' => 'superFund1_FixedAmount',
        'super_fund1_employer_nominated_fund' => 'superFund1_EmployerNominatedFund',
        'super_fund2_product_code' => 'superFund2_ProductCode',
        'super_fund2_fund_name' => 'superFund2_FundName',
        'super_fund2_member_number' => 'superFund2_MemberNumber',
        'super_fund2_allocated_percentage' => 'superFund2_AllocatedPercentage',
        'super_fund2_fixed_amount' => 'superFund2_FixedAmount',
        'super_fund2_employer_nominated_fund' => 'superFund2_EmployerNominatedFund',
        'super_fund3_product_code' => 'superFund3_ProductCode',
        'super_fund3_fund_name' => 'superFund3_FundName',
        'super_fund3_member_number' => 'superFund3_MemberNumber',
        'super_fund3_allocated_percentage' => 'superFund3_AllocatedPercentage',
        'super_fund3_fixed_amount' => 'superFund3_FixedAmount',
        'super_fund3_employer_nominated_fund' => 'superFund3_EmployerNominatedFund',
        'super_threshold_amount' => 'superThresholdAmount',
        'maximum_quarterly_super_contributions_base' => 'maximumQuarterlySuperContributionsBase',
        'medicare_levy_exemption' => 'medicareLevyExemption',
        'closely_held_employee' => 'closelyHeldEmployee',
        'closely_held_reporting' => 'closelyHeldReporting',
        'single_touch_payroll' => 'singleTouchPayroll',
        'hours_per_day' => 'hoursPerDay',
        'postal_address_is_overseas' => 'postalAddressIsOverseas',
        'residential_address_is_overseas' => 'residentialAddressIsOverseas',
        'employment_type' => 'employmentType',
        'termination_reason' => 'terminationReason',
        'id' => 'id',
        'title' => 'title',
        'preferred_name' => 'preferredName',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'surname' => 'surname',
        'date_of_birth' => 'dateOfBirth',
        'gender' => 'gender',
        'external_id' => 'externalId',
        'residential_street_address' => 'residentialStreetAddress',
        'residential_address_line2' => 'residentialAddressLine2',
        'residential_post_code' => 'residentialPostCode',
        'residential_country' => 'residentialCountry',
        'postal_street_address' => 'postalStreetAddress',
        'postal_address_line2' => 'postalAddressLine2',
        'postal_post_code' => 'postalPostCode',
        'postal_country' => 'postalCountry',
        'email_address' => 'emailAddress',
        'home_phone' => 'homePhone',
        'work_phone' => 'workPhone',
        'mobile_phone' => 'mobilePhone',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'anniversary_date' => 'anniversaryDate',
        'tags' => 'tags',
        'job_title' => 'jobTitle',
        'pay_schedule' => 'paySchedule',
        'primary_pay_category' => 'primaryPayCategory',
        'primary_location' => 'primaryLocation',
        'pay_slip_notification_type' => 'paySlipNotificationType',
        'rate' => 'rate',
        'override_template_rate' => 'overrideTemplateRate',
        'rate_unit' => 'rateUnit',
        'hours_per_week' => 'hoursPerWeek',
        'automatically_pay_employee' => 'automaticallyPayEmployee',
        'leave_template' => 'leaveTemplate',
        'pay_rate_template' => 'payRateTemplate',
        'pay_condition_rule_set' => 'payConditionRuleSet',
        'is_enabled_for_timesheets' => 'isEnabledForTimesheets',
        'locations' => 'locations',
        'work_types' => 'workTypes',
        'emergency_contact1_name' => 'emergencyContact1_Name',
        'emergency_contact1_relationship' => 'emergencyContact1_Relationship',
        'emergency_contact1_address' => 'emergencyContact1_Address',
        'emergency_contact1_contact_number' => 'emergencyContact1_ContactNumber',
        'emergency_contact1_alternate_contact_number' => 'emergencyContact1_AlternateContactNumber',
        'emergency_contact2_name' => 'emergencyContact2_Name',
        'emergency_contact2_relationship' => 'emergencyContact2_Relationship',
        'emergency_contact2_address' => 'emergencyContact2_Address',
        'emergency_contact2_contact_number' => 'emergencyContact2_ContactNumber',
        'emergency_contact2_alternate_contact_number' => 'emergencyContact2_AlternateContactNumber',
        'bank_account1_account_number' => 'bankAccount1_AccountNumber',
        'bank_account1_account_name' => 'bankAccount1_AccountName',
        'bank_account1_allocated_percentage' => 'bankAccount1_AllocatedPercentage',
        'bank_account1_fixed_amount' => 'bankAccount1_FixedAmount',
        'bank_account2_account_number' => 'bankAccount2_AccountNumber',
        'bank_account2_account_name' => 'bankAccount2_AccountName',
        'bank_account2_allocated_percentage' => 'bankAccount2_AllocatedPercentage',
        'bank_account2_fixed_amount' => 'bankAccount2_FixedAmount',
        'bank_account3_account_number' => 'bankAccount3_AccountNumber',
        'bank_account3_account_name' => 'bankAccount3_AccountName',
        'bank_account3_allocated_percentage' => 'bankAccount3_AllocatedPercentage',
        'bank_account3_fixed_amount' => 'bankAccount3_FixedAmount',
        'rostering_notification_choices' => 'rosteringNotificationChoices',
        'leave_accrual_start_date_type' => 'leaveAccrualStartDateType',
        'leave_year_start' => 'leaveYearStart',
        'status' => 'status',
        'date_created' => 'dateCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_file_number' => 'setTaxFileNumber',
        'residential_suburb' => 'setResidentialSuburb',
        'residential_state' => 'setResidentialState',
        'postal_suburb' => 'setPostalSuburb',
        'postal_state' => 'setPostalState',
        'employing_entity_abn' => 'setEmployingEntityAbn',
        'employing_entity_id' => 'setEmployingEntityId',
        'previous_surname' => 'setPreviousSurname',
        'australian_resident' => 'setAustralianResident',
        'claim_tax_free_threshold' => 'setClaimTaxFreeThreshold',
        'seniors_tax_offset' => 'setSeniorsTaxOffset',
        'other_tax_offset' => 'setOtherTaxOffset',
        'stsl_debt' => 'setStslDebt',
        'is_exempt_from_flood_levy' => 'setIsExemptFromFloodLevy',
        'has_approved_working_holiday_visa' => 'setHasApprovedWorkingHolidayVisa',
        'working_holiday_visa_country' => 'setWorkingHolidayVisaCountry',
        'is_seasonal_worker' => 'setIsSeasonalWorker',
        'has_withholding_variation' => 'setHasWithholdingVariation',
        'tax_variation' => 'setTaxVariation',
        'date_tax_file_declaration_signed' => 'setDateTaxFileDeclarationSigned',
        'date_tax_file_declaration_reported' => 'setDateTaxFileDeclarationReported',
        'employment_agreement' => 'setEmploymentAgreement',
        'is_exempt_from_payroll_tax' => 'setIsExemptFromPayrollTax',
        'bank_account1_bsb' => 'setBankAccount1Bsb',
        'bank_account2_bsb' => 'setBankAccount2Bsb',
        'bank_account3_bsb' => 'setBankAccount3Bsb',
        'super_fund1_product_code' => 'setSuperFund1ProductCode',
        'super_fund1_fund_name' => 'setSuperFund1FundName',
        'super_fund1_member_number' => 'setSuperFund1MemberNumber',
        'super_fund1_allocated_percentage' => 'setSuperFund1AllocatedPercentage',
        'super_fund1_fixed_amount' => 'setSuperFund1FixedAmount',
        'super_fund1_employer_nominated_fund' => 'setSuperFund1EmployerNominatedFund',
        'super_fund2_product_code' => 'setSuperFund2ProductCode',
        'super_fund2_fund_name' => 'setSuperFund2FundName',
        'super_fund2_member_number' => 'setSuperFund2MemberNumber',
        'super_fund2_allocated_percentage' => 'setSuperFund2AllocatedPercentage',
        'super_fund2_fixed_amount' => 'setSuperFund2FixedAmount',
        'super_fund2_employer_nominated_fund' => 'setSuperFund2EmployerNominatedFund',
        'super_fund3_product_code' => 'setSuperFund3ProductCode',
        'super_fund3_fund_name' => 'setSuperFund3FundName',
        'super_fund3_member_number' => 'setSuperFund3MemberNumber',
        'super_fund3_allocated_percentage' => 'setSuperFund3AllocatedPercentage',
        'super_fund3_fixed_amount' => 'setSuperFund3FixedAmount',
        'super_fund3_employer_nominated_fund' => 'setSuperFund3EmployerNominatedFund',
        'super_threshold_amount' => 'setSuperThresholdAmount',
        'maximum_quarterly_super_contributions_base' => 'setMaximumQuarterlySuperContributionsBase',
        'medicare_levy_exemption' => 'setMedicareLevyExemption',
        'closely_held_employee' => 'setCloselyHeldEmployee',
        'closely_held_reporting' => 'setCloselyHeldReporting',
        'single_touch_payroll' => 'setSingleTouchPayroll',
        'hours_per_day' => 'setHoursPerDay',
        'postal_address_is_overseas' => 'setPostalAddressIsOverseas',
        'residential_address_is_overseas' => 'setResidentialAddressIsOverseas',
        'employment_type' => 'setEmploymentType',
        'termination_reason' => 'setTerminationReason',
        'id' => 'setId',
        'title' => 'setTitle',
        'preferred_name' => 'setPreferredName',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'surname' => 'setSurname',
        'date_of_birth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'external_id' => 'setExternalId',
        'residential_street_address' => 'setResidentialStreetAddress',
        'residential_address_line2' => 'setResidentialAddressLine2',
        'residential_post_code' => 'setResidentialPostCode',
        'residential_country' => 'setResidentialCountry',
        'postal_street_address' => 'setPostalStreetAddress',
        'postal_address_line2' => 'setPostalAddressLine2',
        'postal_post_code' => 'setPostalPostCode',
        'postal_country' => 'setPostalCountry',
        'email_address' => 'setEmailAddress',
        'home_phone' => 'setHomePhone',
        'work_phone' => 'setWorkPhone',
        'mobile_phone' => 'setMobilePhone',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'anniversary_date' => 'setAnniversaryDate',
        'tags' => 'setTags',
        'job_title' => 'setJobTitle',
        'pay_schedule' => 'setPaySchedule',
        'primary_pay_category' => 'setPrimaryPayCategory',
        'primary_location' => 'setPrimaryLocation',
        'pay_slip_notification_type' => 'setPaySlipNotificationType',
        'rate' => 'setRate',
        'override_template_rate' => 'setOverrideTemplateRate',
        'rate_unit' => 'setRateUnit',
        'hours_per_week' => 'setHoursPerWeek',
        'automatically_pay_employee' => 'setAutomaticallyPayEmployee',
        'leave_template' => 'setLeaveTemplate',
        'pay_rate_template' => 'setPayRateTemplate',
        'pay_condition_rule_set' => 'setPayConditionRuleSet',
        'is_enabled_for_timesheets' => 'setIsEnabledForTimesheets',
        'locations' => 'setLocations',
        'work_types' => 'setWorkTypes',
        'emergency_contact1_name' => 'setEmergencyContact1Name',
        'emergency_contact1_relationship' => 'setEmergencyContact1Relationship',
        'emergency_contact1_address' => 'setEmergencyContact1Address',
        'emergency_contact1_contact_number' => 'setEmergencyContact1ContactNumber',
        'emergency_contact1_alternate_contact_number' => 'setEmergencyContact1AlternateContactNumber',
        'emergency_contact2_name' => 'setEmergencyContact2Name',
        'emergency_contact2_relationship' => 'setEmergencyContact2Relationship',
        'emergency_contact2_address' => 'setEmergencyContact2Address',
        'emergency_contact2_contact_number' => 'setEmergencyContact2ContactNumber',
        'emergency_contact2_alternate_contact_number' => 'setEmergencyContact2AlternateContactNumber',
        'bank_account1_account_number' => 'setBankAccount1AccountNumber',
        'bank_account1_account_name' => 'setBankAccount1AccountName',
        'bank_account1_allocated_percentage' => 'setBankAccount1AllocatedPercentage',
        'bank_account1_fixed_amount' => 'setBankAccount1FixedAmount',
        'bank_account2_account_number' => 'setBankAccount2AccountNumber',
        'bank_account2_account_name' => 'setBankAccount2AccountName',
        'bank_account2_allocated_percentage' => 'setBankAccount2AllocatedPercentage',
        'bank_account2_fixed_amount' => 'setBankAccount2FixedAmount',
        'bank_account3_account_number' => 'setBankAccount3AccountNumber',
        'bank_account3_account_name' => 'setBankAccount3AccountName',
        'bank_account3_allocated_percentage' => 'setBankAccount3AllocatedPercentage',
        'bank_account3_fixed_amount' => 'setBankAccount3FixedAmount',
        'rostering_notification_choices' => 'setRosteringNotificationChoices',
        'leave_accrual_start_date_type' => 'setLeaveAccrualStartDateType',
        'leave_year_start' => 'setLeaveYearStart',
        'status' => 'setStatus',
        'date_created' => 'setDateCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_file_number' => 'getTaxFileNumber',
        'residential_suburb' => 'getResidentialSuburb',
        'residential_state' => 'getResidentialState',
        'postal_suburb' => 'getPostalSuburb',
        'postal_state' => 'getPostalState',
        'employing_entity_abn' => 'getEmployingEntityAbn',
        'employing_entity_id' => 'getEmployingEntityId',
        'previous_surname' => 'getPreviousSurname',
        'australian_resident' => 'getAustralianResident',
        'claim_tax_free_threshold' => 'getClaimTaxFreeThreshold',
        'seniors_tax_offset' => 'getSeniorsTaxOffset',
        'other_tax_offset' => 'getOtherTaxOffset',
        'stsl_debt' => 'getStslDebt',
        'is_exempt_from_flood_levy' => 'getIsExemptFromFloodLevy',
        'has_approved_working_holiday_visa' => 'getHasApprovedWorkingHolidayVisa',
        'working_holiday_visa_country' => 'getWorkingHolidayVisaCountry',
        'is_seasonal_worker' => 'getIsSeasonalWorker',
        'has_withholding_variation' => 'getHasWithholdingVariation',
        'tax_variation' => 'getTaxVariation',
        'date_tax_file_declaration_signed' => 'getDateTaxFileDeclarationSigned',
        'date_tax_file_declaration_reported' => 'getDateTaxFileDeclarationReported',
        'employment_agreement' => 'getEmploymentAgreement',
        'is_exempt_from_payroll_tax' => 'getIsExemptFromPayrollTax',
        'bank_account1_bsb' => 'getBankAccount1Bsb',
        'bank_account2_bsb' => 'getBankAccount2Bsb',
        'bank_account3_bsb' => 'getBankAccount3Bsb',
        'super_fund1_product_code' => 'getSuperFund1ProductCode',
        'super_fund1_fund_name' => 'getSuperFund1FundName',
        'super_fund1_member_number' => 'getSuperFund1MemberNumber',
        'super_fund1_allocated_percentage' => 'getSuperFund1AllocatedPercentage',
        'super_fund1_fixed_amount' => 'getSuperFund1FixedAmount',
        'super_fund1_employer_nominated_fund' => 'getSuperFund1EmployerNominatedFund',
        'super_fund2_product_code' => 'getSuperFund2ProductCode',
        'super_fund2_fund_name' => 'getSuperFund2FundName',
        'super_fund2_member_number' => 'getSuperFund2MemberNumber',
        'super_fund2_allocated_percentage' => 'getSuperFund2AllocatedPercentage',
        'super_fund2_fixed_amount' => 'getSuperFund2FixedAmount',
        'super_fund2_employer_nominated_fund' => 'getSuperFund2EmployerNominatedFund',
        'super_fund3_product_code' => 'getSuperFund3ProductCode',
        'super_fund3_fund_name' => 'getSuperFund3FundName',
        'super_fund3_member_number' => 'getSuperFund3MemberNumber',
        'super_fund3_allocated_percentage' => 'getSuperFund3AllocatedPercentage',
        'super_fund3_fixed_amount' => 'getSuperFund3FixedAmount',
        'super_fund3_employer_nominated_fund' => 'getSuperFund3EmployerNominatedFund',
        'super_threshold_amount' => 'getSuperThresholdAmount',
        'maximum_quarterly_super_contributions_base' => 'getMaximumQuarterlySuperContributionsBase',
        'medicare_levy_exemption' => 'getMedicareLevyExemption',
        'closely_held_employee' => 'getCloselyHeldEmployee',
        'closely_held_reporting' => 'getCloselyHeldReporting',
        'single_touch_payroll' => 'getSingleTouchPayroll',
        'hours_per_day' => 'getHoursPerDay',
        'postal_address_is_overseas' => 'getPostalAddressIsOverseas',
        'residential_address_is_overseas' => 'getResidentialAddressIsOverseas',
        'employment_type' => 'getEmploymentType',
        'termination_reason' => 'getTerminationReason',
        'id' => 'getId',
        'title' => 'getTitle',
        'preferred_name' => 'getPreferredName',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'surname' => 'getSurname',
        'date_of_birth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'external_id' => 'getExternalId',
        'residential_street_address' => 'getResidentialStreetAddress',
        'residential_address_line2' => 'getResidentialAddressLine2',
        'residential_post_code' => 'getResidentialPostCode',
        'residential_country' => 'getResidentialCountry',
        'postal_street_address' => 'getPostalStreetAddress',
        'postal_address_line2' => 'getPostalAddressLine2',
        'postal_post_code' => 'getPostalPostCode',
        'postal_country' => 'getPostalCountry',
        'email_address' => 'getEmailAddress',
        'home_phone' => 'getHomePhone',
        'work_phone' => 'getWorkPhone',
        'mobile_phone' => 'getMobilePhone',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'anniversary_date' => 'getAnniversaryDate',
        'tags' => 'getTags',
        'job_title' => 'getJobTitle',
        'pay_schedule' => 'getPaySchedule',
        'primary_pay_category' => 'getPrimaryPayCategory',
        'primary_location' => 'getPrimaryLocation',
        'pay_slip_notification_type' => 'getPaySlipNotificationType',
        'rate' => 'getRate',
        'override_template_rate' => 'getOverrideTemplateRate',
        'rate_unit' => 'getRateUnit',
        'hours_per_week' => 'getHoursPerWeek',
        'automatically_pay_employee' => 'getAutomaticallyPayEmployee',
        'leave_template' => 'getLeaveTemplate',
        'pay_rate_template' => 'getPayRateTemplate',
        'pay_condition_rule_set' => 'getPayConditionRuleSet',
        'is_enabled_for_timesheets' => 'getIsEnabledForTimesheets',
        'locations' => 'getLocations',
        'work_types' => 'getWorkTypes',
        'emergency_contact1_name' => 'getEmergencyContact1Name',
        'emergency_contact1_relationship' => 'getEmergencyContact1Relationship',
        'emergency_contact1_address' => 'getEmergencyContact1Address',
        'emergency_contact1_contact_number' => 'getEmergencyContact1ContactNumber',
        'emergency_contact1_alternate_contact_number' => 'getEmergencyContact1AlternateContactNumber',
        'emergency_contact2_name' => 'getEmergencyContact2Name',
        'emergency_contact2_relationship' => 'getEmergencyContact2Relationship',
        'emergency_contact2_address' => 'getEmergencyContact2Address',
        'emergency_contact2_contact_number' => 'getEmergencyContact2ContactNumber',
        'emergency_contact2_alternate_contact_number' => 'getEmergencyContact2AlternateContactNumber',
        'bank_account1_account_number' => 'getBankAccount1AccountNumber',
        'bank_account1_account_name' => 'getBankAccount1AccountName',
        'bank_account1_allocated_percentage' => 'getBankAccount1AllocatedPercentage',
        'bank_account1_fixed_amount' => 'getBankAccount1FixedAmount',
        'bank_account2_account_number' => 'getBankAccount2AccountNumber',
        'bank_account2_account_name' => 'getBankAccount2AccountName',
        'bank_account2_allocated_percentage' => 'getBankAccount2AllocatedPercentage',
        'bank_account2_fixed_amount' => 'getBankAccount2FixedAmount',
        'bank_account3_account_number' => 'getBankAccount3AccountNumber',
        'bank_account3_account_name' => 'getBankAccount3AccountName',
        'bank_account3_allocated_percentage' => 'getBankAccount3AllocatedPercentage',
        'bank_account3_fixed_amount' => 'getBankAccount3FixedAmount',
        'rostering_notification_choices' => 'getRosteringNotificationChoices',
        'leave_accrual_start_date_type' => 'getLeaveAccrualStartDateType',
        'leave_year_start' => 'getLeaveYearStart',
        'status' => 'getStatus',
        'date_created' => 'getDateCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CLOSELY_HELD_REPORTING_PER_QUARTER = 'PerQuarter';
    const CLOSELY_HELD_REPORTING_PER_PAY_RUN = 'PerPayRun';
    const SINGLE_TOUCH_PAYROLL_CLOSELY_HELD = 'CloselyHeld';
    const SINGLE_TOUCH_PAYROLL_FOREIGN_EMPLOYMENT = 'ForeignEmployment';
    const SINGLE_TOUCH_PAYROLL_INBOUND_ASSIGNEE = 'InboundAssignee';
    const SINGLE_TOUCH_PAYROLL_LABOUR_HIRE = 'LabourHire';
    const SINGLE_TOUCH_PAYROLL_OTHER_SPECIFIED_PAYMENTS = 'OtherSpecifiedPayments';
    const LEAVE_ACCRUAL_START_DATE_TYPE_EMPLOYEE_START_DATE = 'EmployeeStartDate';
    const LEAVE_ACCRUAL_START_DATE_TYPE_SPECIFIED_DATE = 'SpecifiedDate';
    const STATUS_ACTIVE = 'Active';
    const STATUS_TERMINATED = 'Terminated';
    const STATUS_INCOMPLETE = 'Incomplete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloselyHeldReportingAllowableValues()
    {
        return [
            self::CLOSELY_HELD_REPORTING_PER_QUARTER,
            self::CLOSELY_HELD_REPORTING_PER_PAY_RUN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSingleTouchPayrollAllowableValues()
    {
        return [
            self::SINGLE_TOUCH_PAYROLL_CLOSELY_HELD,
            self::SINGLE_TOUCH_PAYROLL_FOREIGN_EMPLOYMENT,
            self::SINGLE_TOUCH_PAYROLL_INBOUND_ASSIGNEE,
            self::SINGLE_TOUCH_PAYROLL_LABOUR_HIRE,
            self::SINGLE_TOUCH_PAYROLL_OTHER_SPECIFIED_PAYMENTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveAccrualStartDateTypeAllowableValues()
    {
        return [
            self::LEAVE_ACCRUAL_START_DATE_TYPE_EMPLOYEE_START_DATE,
            self::LEAVE_ACCRUAL_START_DATE_TYPE_SPECIFIED_DATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_TERMINATED,
            self::STATUS_INCOMPLETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_file_number'] = isset($data['tax_file_number']) ? $data['tax_file_number'] : null;
        $this->container['residential_suburb'] = isset($data['residential_suburb']) ? $data['residential_suburb'] : null;
        $this->container['residential_state'] = isset($data['residential_state']) ? $data['residential_state'] : null;
        $this->container['postal_suburb'] = isset($data['postal_suburb']) ? $data['postal_suburb'] : null;
        $this->container['postal_state'] = isset($data['postal_state']) ? $data['postal_state'] : null;
        $this->container['employing_entity_abn'] = isset($data['employing_entity_abn']) ? $data['employing_entity_abn'] : null;
        $this->container['employing_entity_id'] = isset($data['employing_entity_id']) ? $data['employing_entity_id'] : null;
        $this->container['previous_surname'] = isset($data['previous_surname']) ? $data['previous_surname'] : null;
        $this->container['australian_resident'] = isset($data['australian_resident']) ? $data['australian_resident'] : null;
        $this->container['claim_tax_free_threshold'] = isset($data['claim_tax_free_threshold']) ? $data['claim_tax_free_threshold'] : null;
        $this->container['seniors_tax_offset'] = isset($data['seniors_tax_offset']) ? $data['seniors_tax_offset'] : null;
        $this->container['other_tax_offset'] = isset($data['other_tax_offset']) ? $data['other_tax_offset'] : null;
        $this->container['stsl_debt'] = isset($data['stsl_debt']) ? $data['stsl_debt'] : null;
        $this->container['is_exempt_from_flood_levy'] = isset($data['is_exempt_from_flood_levy']) ? $data['is_exempt_from_flood_levy'] : null;
        $this->container['has_approved_working_holiday_visa'] = isset($data['has_approved_working_holiday_visa']) ? $data['has_approved_working_holiday_visa'] : null;
        $this->container['working_holiday_visa_country'] = isset($data['working_holiday_visa_country']) ? $data['working_holiday_visa_country'] : null;
        $this->container['is_seasonal_worker'] = isset($data['is_seasonal_worker']) ? $data['is_seasonal_worker'] : null;
        $this->container['has_withholding_variation'] = isset($data['has_withholding_variation']) ? $data['has_withholding_variation'] : null;
        $this->container['tax_variation'] = isset($data['tax_variation']) ? $data['tax_variation'] : null;
        $this->container['date_tax_file_declaration_signed'] = isset($data['date_tax_file_declaration_signed']) ? $data['date_tax_file_declaration_signed'] : null;
        $this->container['date_tax_file_declaration_reported'] = isset($data['date_tax_file_declaration_reported']) ? $data['date_tax_file_declaration_reported'] : null;
        $this->container['employment_agreement'] = isset($data['employment_agreement']) ? $data['employment_agreement'] : null;
        $this->container['is_exempt_from_payroll_tax'] = isset($data['is_exempt_from_payroll_tax']) ? $data['is_exempt_from_payroll_tax'] : null;
        $this->container['bank_account1_bsb'] = isset($data['bank_account1_bsb']) ? $data['bank_account1_bsb'] : null;
        $this->container['bank_account2_bsb'] = isset($data['bank_account2_bsb']) ? $data['bank_account2_bsb'] : null;
        $this->container['bank_account3_bsb'] = isset($data['bank_account3_bsb']) ? $data['bank_account3_bsb'] : null;
        $this->container['super_fund1_product_code'] = isset($data['super_fund1_product_code']) ? $data['super_fund1_product_code'] : null;
        $this->container['super_fund1_fund_name'] = isset($data['super_fund1_fund_name']) ? $data['super_fund1_fund_name'] : null;
        $this->container['super_fund1_member_number'] = isset($data['super_fund1_member_number']) ? $data['super_fund1_member_number'] : null;
        $this->container['super_fund1_allocated_percentage'] = isset($data['super_fund1_allocated_percentage']) ? $data['super_fund1_allocated_percentage'] : null;
        $this->container['super_fund1_fixed_amount'] = isset($data['super_fund1_fixed_amount']) ? $data['super_fund1_fixed_amount'] : null;
        $this->container['super_fund1_employer_nominated_fund'] = isset($data['super_fund1_employer_nominated_fund']) ? $data['super_fund1_employer_nominated_fund'] : null;
        $this->container['super_fund2_product_code'] = isset($data['super_fund2_product_code']) ? $data['super_fund2_product_code'] : null;
        $this->container['super_fund2_fund_name'] = isset($data['super_fund2_fund_name']) ? $data['super_fund2_fund_name'] : null;
        $this->container['super_fund2_member_number'] = isset($data['super_fund2_member_number']) ? $data['super_fund2_member_number'] : null;
        $this->container['super_fund2_allocated_percentage'] = isset($data['super_fund2_allocated_percentage']) ? $data['super_fund2_allocated_percentage'] : null;
        $this->container['super_fund2_fixed_amount'] = isset($data['super_fund2_fixed_amount']) ? $data['super_fund2_fixed_amount'] : null;
        $this->container['super_fund2_employer_nominated_fund'] = isset($data['super_fund2_employer_nominated_fund']) ? $data['super_fund2_employer_nominated_fund'] : null;
        $this->container['super_fund3_product_code'] = isset($data['super_fund3_product_code']) ? $data['super_fund3_product_code'] : null;
        $this->container['super_fund3_fund_name'] = isset($data['super_fund3_fund_name']) ? $data['super_fund3_fund_name'] : null;
        $this->container['super_fund3_member_number'] = isset($data['super_fund3_member_number']) ? $data['super_fund3_member_number'] : null;
        $this->container['super_fund3_allocated_percentage'] = isset($data['super_fund3_allocated_percentage']) ? $data['super_fund3_allocated_percentage'] : null;
        $this->container['super_fund3_fixed_amount'] = isset($data['super_fund3_fixed_amount']) ? $data['super_fund3_fixed_amount'] : null;
        $this->container['super_fund3_employer_nominated_fund'] = isset($data['super_fund3_employer_nominated_fund']) ? $data['super_fund3_employer_nominated_fund'] : null;
        $this->container['super_threshold_amount'] = isset($data['super_threshold_amount']) ? $data['super_threshold_amount'] : null;
        $this->container['maximum_quarterly_super_contributions_base'] = isset($data['maximum_quarterly_super_contributions_base']) ? $data['maximum_quarterly_super_contributions_base'] : null;
        $this->container['medicare_levy_exemption'] = isset($data['medicare_levy_exemption']) ? $data['medicare_levy_exemption'] : null;
        $this->container['closely_held_employee'] = isset($data['closely_held_employee']) ? $data['closely_held_employee'] : null;
        $this->container['closely_held_reporting'] = isset($data['closely_held_reporting']) ? $data['closely_held_reporting'] : null;
        $this->container['single_touch_payroll'] = isset($data['single_touch_payroll']) ? $data['single_touch_payroll'] : null;
        $this->container['hours_per_day'] = isset($data['hours_per_day']) ? $data['hours_per_day'] : null;
        $this->container['postal_address_is_overseas'] = isset($data['postal_address_is_overseas']) ? $data['postal_address_is_overseas'] : null;
        $this->container['residential_address_is_overseas'] = isset($data['residential_address_is_overseas']) ? $data['residential_address_is_overseas'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['termination_reason'] = isset($data['termination_reason']) ? $data['termination_reason'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['preferred_name'] = isset($data['preferred_name']) ? $data['preferred_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['residential_street_address'] = isset($data['residential_street_address']) ? $data['residential_street_address'] : null;
        $this->container['residential_address_line2'] = isset($data['residential_address_line2']) ? $data['residential_address_line2'] : null;
        $this->container['residential_post_code'] = isset($data['residential_post_code']) ? $data['residential_post_code'] : null;
        $this->container['residential_country'] = isset($data['residential_country']) ? $data['residential_country'] : null;
        $this->container['postal_street_address'] = isset($data['postal_street_address']) ? $data['postal_street_address'] : null;
        $this->container['postal_address_line2'] = isset($data['postal_address_line2']) ? $data['postal_address_line2'] : null;
        $this->container['postal_post_code'] = isset($data['postal_post_code']) ? $data['postal_post_code'] : null;
        $this->container['postal_country'] = isset($data['postal_country']) ? $data['postal_country'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['anniversary_date'] = isset($data['anniversary_date']) ? $data['anniversary_date'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['pay_schedule'] = isset($data['pay_schedule']) ? $data['pay_schedule'] : null;
        $this->container['primary_pay_category'] = isset($data['primary_pay_category']) ? $data['primary_pay_category'] : null;
        $this->container['primary_location'] = isset($data['primary_location']) ? $data['primary_location'] : null;
        $this->container['pay_slip_notification_type'] = isset($data['pay_slip_notification_type']) ? $data['pay_slip_notification_type'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['override_template_rate'] = isset($data['override_template_rate']) ? $data['override_template_rate'] : null;
        $this->container['rate_unit'] = isset($data['rate_unit']) ? $data['rate_unit'] : null;
        $this->container['hours_per_week'] = isset($data['hours_per_week']) ? $data['hours_per_week'] : null;
        $this->container['automatically_pay_employee'] = isset($data['automatically_pay_employee']) ? $data['automatically_pay_employee'] : null;
        $this->container['leave_template'] = isset($data['leave_template']) ? $data['leave_template'] : null;
        $this->container['pay_rate_template'] = isset($data['pay_rate_template']) ? $data['pay_rate_template'] : null;
        $this->container['pay_condition_rule_set'] = isset($data['pay_condition_rule_set']) ? $data['pay_condition_rule_set'] : null;
        $this->container['is_enabled_for_timesheets'] = isset($data['is_enabled_for_timesheets']) ? $data['is_enabled_for_timesheets'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['work_types'] = isset($data['work_types']) ? $data['work_types'] : null;
        $this->container['emergency_contact1_name'] = isset($data['emergency_contact1_name']) ? $data['emergency_contact1_name'] : null;
        $this->container['emergency_contact1_relationship'] = isset($data['emergency_contact1_relationship']) ? $data['emergency_contact1_relationship'] : null;
        $this->container['emergency_contact1_address'] = isset($data['emergency_contact1_address']) ? $data['emergency_contact1_address'] : null;
        $this->container['emergency_contact1_contact_number'] = isset($data['emergency_contact1_contact_number']) ? $data['emergency_contact1_contact_number'] : null;
        $this->container['emergency_contact1_alternate_contact_number'] = isset($data['emergency_contact1_alternate_contact_number']) ? $data['emergency_contact1_alternate_contact_number'] : null;
        $this->container['emergency_contact2_name'] = isset($data['emergency_contact2_name']) ? $data['emergency_contact2_name'] : null;
        $this->container['emergency_contact2_relationship'] = isset($data['emergency_contact2_relationship']) ? $data['emergency_contact2_relationship'] : null;
        $this->container['emergency_contact2_address'] = isset($data['emergency_contact2_address']) ? $data['emergency_contact2_address'] : null;
        $this->container['emergency_contact2_contact_number'] = isset($data['emergency_contact2_contact_number']) ? $data['emergency_contact2_contact_number'] : null;
        $this->container['emergency_contact2_alternate_contact_number'] = isset($data['emergency_contact2_alternate_contact_number']) ? $data['emergency_contact2_alternate_contact_number'] : null;
        $this->container['bank_account1_account_number'] = isset($data['bank_account1_account_number']) ? $data['bank_account1_account_number'] : null;
        $this->container['bank_account1_account_name'] = isset($data['bank_account1_account_name']) ? $data['bank_account1_account_name'] : null;
        $this->container['bank_account1_allocated_percentage'] = isset($data['bank_account1_allocated_percentage']) ? $data['bank_account1_allocated_percentage'] : null;
        $this->container['bank_account1_fixed_amount'] = isset($data['bank_account1_fixed_amount']) ? $data['bank_account1_fixed_amount'] : null;
        $this->container['bank_account2_account_number'] = isset($data['bank_account2_account_number']) ? $data['bank_account2_account_number'] : null;
        $this->container['bank_account2_account_name'] = isset($data['bank_account2_account_name']) ? $data['bank_account2_account_name'] : null;
        $this->container['bank_account2_allocated_percentage'] = isset($data['bank_account2_allocated_percentage']) ? $data['bank_account2_allocated_percentage'] : null;
        $this->container['bank_account2_fixed_amount'] = isset($data['bank_account2_fixed_amount']) ? $data['bank_account2_fixed_amount'] : null;
        $this->container['bank_account3_account_number'] = isset($data['bank_account3_account_number']) ? $data['bank_account3_account_number'] : null;
        $this->container['bank_account3_account_name'] = isset($data['bank_account3_account_name']) ? $data['bank_account3_account_name'] : null;
        $this->container['bank_account3_allocated_percentage'] = isset($data['bank_account3_allocated_percentage']) ? $data['bank_account3_allocated_percentage'] : null;
        $this->container['bank_account3_fixed_amount'] = isset($data['bank_account3_fixed_amount']) ? $data['bank_account3_fixed_amount'] : null;
        $this->container['rostering_notification_choices'] = isset($data['rostering_notification_choices']) ? $data['rostering_notification_choices'] : null;
        $this->container['leave_accrual_start_date_type'] = isset($data['leave_accrual_start_date_type']) ? $data['leave_accrual_start_date_type'] : null;
        $this->container['leave_year_start'] = isset($data['leave_year_start']) ? $data['leave_year_start'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCloselyHeldReportingAllowableValues();
        if (!is_null($this->container['closely_held_reporting']) && !in_array($this->container['closely_held_reporting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'closely_held_reporting', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSingleTouchPayrollAllowableValues();
        if (!is_null($this->container['single_touch_payroll']) && !in_array($this->container['single_touch_payroll'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'single_touch_payroll', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['emergency_contact1_name']) && (mb_strlen($this->container['emergency_contact1_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['emergency_contact1_name']) && (mb_strlen($this->container['emergency_contact1_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact1_relationship']) && (mb_strlen($this->container['emergency_contact1_relationship']) > 100)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_relationship', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['emergency_contact1_relationship']) && (mb_strlen($this->container['emergency_contact1_relationship']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_relationship', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact1_address']) && (mb_strlen($this->container['emergency_contact1_address']) > 500)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_address', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['emergency_contact1_address']) && (mb_strlen($this->container['emergency_contact1_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact1_contact_number']) && (mb_strlen($this->container['emergency_contact1_contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_contact_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['emergency_contact1_contact_number']) && (mb_strlen($this->container['emergency_contact1_contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_contact_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact1_alternate_contact_number']) && (mb_strlen($this->container['emergency_contact1_alternate_contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_alternate_contact_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['emergency_contact1_alternate_contact_number']) && (mb_strlen($this->container['emergency_contact1_alternate_contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact1_alternate_contact_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact2_name']) && (mb_strlen($this->container['emergency_contact2_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['emergency_contact2_name']) && (mb_strlen($this->container['emergency_contact2_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact2_relationship']) && (mb_strlen($this->container['emergency_contact2_relationship']) > 100)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_relationship', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['emergency_contact2_relationship']) && (mb_strlen($this->container['emergency_contact2_relationship']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_relationship', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact2_address']) && (mb_strlen($this->container['emergency_contact2_address']) > 500)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_address', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['emergency_contact2_address']) && (mb_strlen($this->container['emergency_contact2_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact2_contact_number']) && (mb_strlen($this->container['emergency_contact2_contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_contact_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['emergency_contact2_contact_number']) && (mb_strlen($this->container['emergency_contact2_contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_contact_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emergency_contact2_alternate_contact_number']) && (mb_strlen($this->container['emergency_contact2_alternate_contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_alternate_contact_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['emergency_contact2_alternate_contact_number']) && (mb_strlen($this->container['emergency_contact2_alternate_contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'emergency_contact2_alternate_contact_number', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getLeaveAccrualStartDateTypeAllowableValues();
        if (!is_null($this->container['leave_accrual_start_date_type']) && !in_array($this->container['leave_accrual_start_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'leave_accrual_start_date_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_file_number
     *
     * @return string
     */
    public function getTaxFileNumber()
    {
        return $this->container['tax_file_number'];
    }

    /**
     * Sets tax_file_number
     *
     * @param string $tax_file_number 
     *
     * @return $this
     */
    public function setTaxFileNumber($tax_file_number)
    {
        $this->container['tax_file_number'] = $tax_file_number;

        return $this;
    }

    /**
     * Gets residential_suburb
     *
     * @return string
     */
    public function getResidentialSuburb()
    {
        return $this->container['residential_suburb'];
    }

    /**
     * Sets residential_suburb
     *
     * @param string $residential_suburb 
     *
     * @return $this
     */
    public function setResidentialSuburb($residential_suburb)
    {
        $this->container['residential_suburb'] = $residential_suburb;

        return $this;
    }

    /**
     * Gets residential_state
     *
     * @return string
     */
    public function getResidentialState()
    {
        return $this->container['residential_state'];
    }

    /**
     * Sets residential_state
     *
     * @param string $residential_state 
     *
     * @return $this
     */
    public function setResidentialState($residential_state)
    {
        $this->container['residential_state'] = $residential_state;

        return $this;
    }

    /**
     * Gets postal_suburb
     *
     * @return string
     */
    public function getPostalSuburb()
    {
        return $this->container['postal_suburb'];
    }

    /**
     * Sets postal_suburb
     *
     * @param string $postal_suburb 
     *
     * @return $this
     */
    public function setPostalSuburb($postal_suburb)
    {
        $this->container['postal_suburb'] = $postal_suburb;

        return $this;
    }

    /**
     * Gets postal_state
     *
     * @return string
     */
    public function getPostalState()
    {
        return $this->container['postal_state'];
    }

    /**
     * Sets postal_state
     *
     * @param string $postal_state 
     *
     * @return $this
     */
    public function setPostalState($postal_state)
    {
        $this->container['postal_state'] = $postal_state;

        return $this;
    }

    /**
     * Gets employing_entity_abn
     *
     * @return string
     */
    public function getEmployingEntityAbn()
    {
        return $this->container['employing_entity_abn'];
    }

    /**
     * Sets employing_entity_abn
     *
     * @param string $employing_entity_abn 
     *
     * @return $this
     */
    public function setEmployingEntityAbn($employing_entity_abn)
    {
        $this->container['employing_entity_abn'] = $employing_entity_abn;

        return $this;
    }

    /**
     * Gets employing_entity_id
     *
     * @return string
     */
    public function getEmployingEntityId()
    {
        return $this->container['employing_entity_id'];
    }

    /**
     * Sets employing_entity_id
     *
     * @param string $employing_entity_id 
     *
     * @return $this
     */
    public function setEmployingEntityId($employing_entity_id)
    {
        $this->container['employing_entity_id'] = $employing_entity_id;

        return $this;
    }

    /**
     * Gets previous_surname
     *
     * @return string
     */
    public function getPreviousSurname()
    {
        return $this->container['previous_surname'];
    }

    /**
     * Sets previous_surname
     *
     * @param string $previous_surname 
     *
     * @return $this
     */
    public function setPreviousSurname($previous_surname)
    {
        $this->container['previous_surname'] = $previous_surname;

        return $this;
    }

    /**
     * Gets australian_resident
     *
     * @return bool
     */
    public function getAustralianResident()
    {
        return $this->container['australian_resident'];
    }

    /**
     * Sets australian_resident
     *
     * @param bool $australian_resident 
     *
     * @return $this
     */
    public function setAustralianResident($australian_resident)
    {
        $this->container['australian_resident'] = $australian_resident;

        return $this;
    }

    /**
     * Gets claim_tax_free_threshold
     *
     * @return bool
     */
    public function getClaimTaxFreeThreshold()
    {
        return $this->container['claim_tax_free_threshold'];
    }

    /**
     * Sets claim_tax_free_threshold
     *
     * @param bool $claim_tax_free_threshold 
     *
     * @return $this
     */
    public function setClaimTaxFreeThreshold($claim_tax_free_threshold)
    {
        $this->container['claim_tax_free_threshold'] = $claim_tax_free_threshold;

        return $this;
    }

    /**
     * Gets seniors_tax_offset
     *
     * @return bool
     */
    public function getSeniorsTaxOffset()
    {
        return $this->container['seniors_tax_offset'];
    }

    /**
     * Sets seniors_tax_offset
     *
     * @param bool $seniors_tax_offset 
     *
     * @return $this
     */
    public function setSeniorsTaxOffset($seniors_tax_offset)
    {
        $this->container['seniors_tax_offset'] = $seniors_tax_offset;

        return $this;
    }

    /**
     * Gets other_tax_offset
     *
     * @return bool
     */
    public function getOtherTaxOffset()
    {
        return $this->container['other_tax_offset'];
    }

    /**
     * Sets other_tax_offset
     *
     * @param bool $other_tax_offset 
     *
     * @return $this
     */
    public function setOtherTaxOffset($other_tax_offset)
    {
        $this->container['other_tax_offset'] = $other_tax_offset;

        return $this;
    }

    /**
     * Gets stsl_debt
     *
     * @return bool
     */
    public function getStslDebt()
    {
        return $this->container['stsl_debt'];
    }

    /**
     * Sets stsl_debt
     *
     * @param bool $stsl_debt 
     *
     * @return $this
     */
    public function setStslDebt($stsl_debt)
    {
        $this->container['stsl_debt'] = $stsl_debt;

        return $this;
    }

    /**
     * Gets is_exempt_from_flood_levy
     *
     * @return bool
     */
    public function getIsExemptFromFloodLevy()
    {
        return $this->container['is_exempt_from_flood_levy'];
    }

    /**
     * Sets is_exempt_from_flood_levy
     *
     * @param bool $is_exempt_from_flood_levy 
     *
     * @return $this
     */
    public function setIsExemptFromFloodLevy($is_exempt_from_flood_levy)
    {
        $this->container['is_exempt_from_flood_levy'] = $is_exempt_from_flood_levy;

        return $this;
    }

    /**
     * Gets has_approved_working_holiday_visa
     *
     * @return bool
     */
    public function getHasApprovedWorkingHolidayVisa()
    {
        return $this->container['has_approved_working_holiday_visa'];
    }

    /**
     * Sets has_approved_working_holiday_visa
     *
     * @param bool $has_approved_working_holiday_visa 
     *
     * @return $this
     */
    public function setHasApprovedWorkingHolidayVisa($has_approved_working_holiday_visa)
    {
        $this->container['has_approved_working_holiday_visa'] = $has_approved_working_holiday_visa;

        return $this;
    }

    /**
     * Gets working_holiday_visa_country
     *
     * @return string
     */
    public function getWorkingHolidayVisaCountry()
    {
        return $this->container['working_holiday_visa_country'];
    }

    /**
     * Sets working_holiday_visa_country
     *
     * @param string $working_holiday_visa_country 
     *
     * @return $this
     */
    public function setWorkingHolidayVisaCountry($working_holiday_visa_country)
    {
        $this->container['working_holiday_visa_country'] = $working_holiday_visa_country;

        return $this;
    }

    /**
     * Gets is_seasonal_worker
     *
     * @return bool
     */
    public function getIsSeasonalWorker()
    {
        return $this->container['is_seasonal_worker'];
    }

    /**
     * Sets is_seasonal_worker
     *
     * @param bool $is_seasonal_worker 
     *
     * @return $this
     */
    public function setIsSeasonalWorker($is_seasonal_worker)
    {
        $this->container['is_seasonal_worker'] = $is_seasonal_worker;

        return $this;
    }

    /**
     * Gets has_withholding_variation
     *
     * @return bool
     */
    public function getHasWithholdingVariation()
    {
        return $this->container['has_withholding_variation'];
    }

    /**
     * Sets has_withholding_variation
     *
     * @param bool $has_withholding_variation 
     *
     * @return $this
     */
    public function setHasWithholdingVariation($has_withholding_variation)
    {
        $this->container['has_withholding_variation'] = $has_withholding_variation;

        return $this;
    }

    /**
     * Gets tax_variation
     *
     * @return double
     */
    public function getTaxVariation()
    {
        return $this->container['tax_variation'];
    }

    /**
     * Sets tax_variation
     *
     * @param double $tax_variation 
     *
     * @return $this
     */
    public function setTaxVariation($tax_variation)
    {
        $this->container['tax_variation'] = $tax_variation;

        return $this;
    }

    /**
     * Gets date_tax_file_declaration_signed
     *
     * @return \DateTime
     */
    public function getDateTaxFileDeclarationSigned()
    {
        return $this->container['date_tax_file_declaration_signed'];
    }

    /**
     * Sets date_tax_file_declaration_signed
     *
     * @param \DateTime $date_tax_file_declaration_signed 
     *
     * @return $this
     */
    public function setDateTaxFileDeclarationSigned($date_tax_file_declaration_signed)
    {
        $this->container['date_tax_file_declaration_signed'] = $date_tax_file_declaration_signed;

        return $this;
    }

    /**
     * Gets date_tax_file_declaration_reported
     *
     * @return \DateTime
     */
    public function getDateTaxFileDeclarationReported()
    {
        return $this->container['date_tax_file_declaration_reported'];
    }

    /**
     * Sets date_tax_file_declaration_reported
     *
     * @param \DateTime $date_tax_file_declaration_reported 
     *
     * @return $this
     */
    public function setDateTaxFileDeclarationReported($date_tax_file_declaration_reported)
    {
        $this->container['date_tax_file_declaration_reported'] = $date_tax_file_declaration_reported;

        return $this;
    }

    /**
     * Gets employment_agreement
     *
     * @return string
     */
    public function getEmploymentAgreement()
    {
        return $this->container['employment_agreement'];
    }

    /**
     * Sets employment_agreement
     *
     * @param string $employment_agreement 
     *
     * @return $this
     */
    public function setEmploymentAgreement($employment_agreement)
    {
        $this->container['employment_agreement'] = $employment_agreement;

        return $this;
    }

    /**
     * Gets is_exempt_from_payroll_tax
     *
     * @return bool
     */
    public function getIsExemptFromPayrollTax()
    {
        return $this->container['is_exempt_from_payroll_tax'];
    }

    /**
     * Sets is_exempt_from_payroll_tax
     *
     * @param bool $is_exempt_from_payroll_tax 
     *
     * @return $this
     */
    public function setIsExemptFromPayrollTax($is_exempt_from_payroll_tax)
    {
        $this->container['is_exempt_from_payroll_tax'] = $is_exempt_from_payroll_tax;

        return $this;
    }

    /**
     * Gets bank_account1_bsb
     *
     * @return string
     */
    public function getBankAccount1Bsb()
    {
        return $this->container['bank_account1_bsb'];
    }

    /**
     * Sets bank_account1_bsb
     *
     * @param string $bank_account1_bsb 
     *
     * @return $this
     */
    public function setBankAccount1Bsb($bank_account1_bsb)
    {
        $this->container['bank_account1_bsb'] = $bank_account1_bsb;

        return $this;
    }

    /**
     * Gets bank_account2_bsb
     *
     * @return string
     */
    public function getBankAccount2Bsb()
    {
        return $this->container['bank_account2_bsb'];
    }

    /**
     * Sets bank_account2_bsb
     *
     * @param string $bank_account2_bsb 
     *
     * @return $this
     */
    public function setBankAccount2Bsb($bank_account2_bsb)
    {
        $this->container['bank_account2_bsb'] = $bank_account2_bsb;

        return $this;
    }

    /**
     * Gets bank_account3_bsb
     *
     * @return string
     */
    public function getBankAccount3Bsb()
    {
        return $this->container['bank_account3_bsb'];
    }

    /**
     * Sets bank_account3_bsb
     *
     * @param string $bank_account3_bsb 
     *
     * @return $this
     */
    public function setBankAccount3Bsb($bank_account3_bsb)
    {
        $this->container['bank_account3_bsb'] = $bank_account3_bsb;

        return $this;
    }

    /**
     * Gets super_fund1_product_code
     *
     * @return string
     */
    public function getSuperFund1ProductCode()
    {
        return $this->container['super_fund1_product_code'];
    }

    /**
     * Sets super_fund1_product_code
     *
     * @param string $super_fund1_product_code Nullable</p><p>Must be \"SMSF\" for a self managed super fund
     *
     * @return $this
     */
    public function setSuperFund1ProductCode($super_fund1_product_code)
    {
        $this->container['super_fund1_product_code'] = $super_fund1_product_code;

        return $this;
    }

    /**
     * Gets super_fund1_fund_name
     *
     * @return string
     */
    public function getSuperFund1FundName()
    {
        return $this->container['super_fund1_fund_name'];
    }

    /**
     * Sets super_fund1_fund_name
     *
     * @param string $super_fund1_fund_name 
     *
     * @return $this
     */
    public function setSuperFund1FundName($super_fund1_fund_name)
    {
        $this->container['super_fund1_fund_name'] = $super_fund1_fund_name;

        return $this;
    }

    /**
     * Gets super_fund1_member_number
     *
     * @return string
     */
    public function getSuperFund1MemberNumber()
    {
        return $this->container['super_fund1_member_number'];
    }

    /**
     * Sets super_fund1_member_number
     *
     * @param string $super_fund1_member_number 
     *
     * @return $this
     */
    public function setSuperFund1MemberNumber($super_fund1_member_number)
    {
        $this->container['super_fund1_member_number'] = $super_fund1_member_number;

        return $this;
    }

    /**
     * Gets super_fund1_allocated_percentage
     *
     * @return double
     */
    public function getSuperFund1AllocatedPercentage()
    {
        return $this->container['super_fund1_allocated_percentage'];
    }

    /**
     * Sets super_fund1_allocated_percentage
     *
     * @param double $super_fund1_allocated_percentage 
     *
     * @return $this
     */
    public function setSuperFund1AllocatedPercentage($super_fund1_allocated_percentage)
    {
        $this->container['super_fund1_allocated_percentage'] = $super_fund1_allocated_percentage;

        return $this;
    }

    /**
     * Gets super_fund1_fixed_amount
     *
     * @return double
     */
    public function getSuperFund1FixedAmount()
    {
        return $this->container['super_fund1_fixed_amount'];
    }

    /**
     * Sets super_fund1_fixed_amount
     *
     * @param double $super_fund1_fixed_amount 
     *
     * @return $this
     */
    public function setSuperFund1FixedAmount($super_fund1_fixed_amount)
    {
        $this->container['super_fund1_fixed_amount'] = $super_fund1_fixed_amount;

        return $this;
    }

    /**
     * Gets super_fund1_employer_nominated_fund
     *
     * @return bool
     */
    public function getSuperFund1EmployerNominatedFund()
    {
        return $this->container['super_fund1_employer_nominated_fund'];
    }

    /**
     * Sets super_fund1_employer_nominated_fund
     *
     * @param bool $super_fund1_employer_nominated_fund 
     *
     * @return $this
     */
    public function setSuperFund1EmployerNominatedFund($super_fund1_employer_nominated_fund)
    {
        $this->container['super_fund1_employer_nominated_fund'] = $super_fund1_employer_nominated_fund;

        return $this;
    }

    /**
     * Gets super_fund2_product_code
     *
     * @return string
     */
    public function getSuperFund2ProductCode()
    {
        return $this->container['super_fund2_product_code'];
    }

    /**
     * Sets super_fund2_product_code
     *
     * @param string $super_fund2_product_code Nullable</p><p>Must be \"SMSF\" for a self managed super fund
     *
     * @return $this
     */
    public function setSuperFund2ProductCode($super_fund2_product_code)
    {
        $this->container['super_fund2_product_code'] = $super_fund2_product_code;

        return $this;
    }

    /**
     * Gets super_fund2_fund_name
     *
     * @return string
     */
    public function getSuperFund2FundName()
    {
        return $this->container['super_fund2_fund_name'];
    }

    /**
     * Sets super_fund2_fund_name
     *
     * @param string $super_fund2_fund_name 
     *
     * @return $this
     */
    public function setSuperFund2FundName($super_fund2_fund_name)
    {
        $this->container['super_fund2_fund_name'] = $super_fund2_fund_name;

        return $this;
    }

    /**
     * Gets super_fund2_member_number
     *
     * @return string
     */
    public function getSuperFund2MemberNumber()
    {
        return $this->container['super_fund2_member_number'];
    }

    /**
     * Sets super_fund2_member_number
     *
     * @param string $super_fund2_member_number 
     *
     * @return $this
     */
    public function setSuperFund2MemberNumber($super_fund2_member_number)
    {
        $this->container['super_fund2_member_number'] = $super_fund2_member_number;

        return $this;
    }

    /**
     * Gets super_fund2_allocated_percentage
     *
     * @return double
     */
    public function getSuperFund2AllocatedPercentage()
    {
        return $this->container['super_fund2_allocated_percentage'];
    }

    /**
     * Sets super_fund2_allocated_percentage
     *
     * @param double $super_fund2_allocated_percentage 
     *
     * @return $this
     */
    public function setSuperFund2AllocatedPercentage($super_fund2_allocated_percentage)
    {
        $this->container['super_fund2_allocated_percentage'] = $super_fund2_allocated_percentage;

        return $this;
    }

    /**
     * Gets super_fund2_fixed_amount
     *
     * @return double
     */
    public function getSuperFund2FixedAmount()
    {
        return $this->container['super_fund2_fixed_amount'];
    }

    /**
     * Sets super_fund2_fixed_amount
     *
     * @param double $super_fund2_fixed_amount 
     *
     * @return $this
     */
    public function setSuperFund2FixedAmount($super_fund2_fixed_amount)
    {
        $this->container['super_fund2_fixed_amount'] = $super_fund2_fixed_amount;

        return $this;
    }

    /**
     * Gets super_fund2_employer_nominated_fund
     *
     * @return bool
     */
    public function getSuperFund2EmployerNominatedFund()
    {
        return $this->container['super_fund2_employer_nominated_fund'];
    }

    /**
     * Sets super_fund2_employer_nominated_fund
     *
     * @param bool $super_fund2_employer_nominated_fund 
     *
     * @return $this
     */
    public function setSuperFund2EmployerNominatedFund($super_fund2_employer_nominated_fund)
    {
        $this->container['super_fund2_employer_nominated_fund'] = $super_fund2_employer_nominated_fund;

        return $this;
    }

    /**
     * Gets super_fund3_product_code
     *
     * @return string
     */
    public function getSuperFund3ProductCode()
    {
        return $this->container['super_fund3_product_code'];
    }

    /**
     * Sets super_fund3_product_code
     *
     * @param string $super_fund3_product_code Nullable</p><p>Must be \"SMSF\" for a self managed super fund
     *
     * @return $this
     */
    public function setSuperFund3ProductCode($super_fund3_product_code)
    {
        $this->container['super_fund3_product_code'] = $super_fund3_product_code;

        return $this;
    }

    /**
     * Gets super_fund3_fund_name
     *
     * @return string
     */
    public function getSuperFund3FundName()
    {
        return $this->container['super_fund3_fund_name'];
    }

    /**
     * Sets super_fund3_fund_name
     *
     * @param string $super_fund3_fund_name 
     *
     * @return $this
     */
    public function setSuperFund3FundName($super_fund3_fund_name)
    {
        $this->container['super_fund3_fund_name'] = $super_fund3_fund_name;

        return $this;
    }

    /**
     * Gets super_fund3_member_number
     *
     * @return string
     */
    public function getSuperFund3MemberNumber()
    {
        return $this->container['super_fund3_member_number'];
    }

    /**
     * Sets super_fund3_member_number
     *
     * @param string $super_fund3_member_number 
     *
     * @return $this
     */
    public function setSuperFund3MemberNumber($super_fund3_member_number)
    {
        $this->container['super_fund3_member_number'] = $super_fund3_member_number;

        return $this;
    }

    /**
     * Gets super_fund3_allocated_percentage
     *
     * @return double
     */
    public function getSuperFund3AllocatedPercentage()
    {
        return $this->container['super_fund3_allocated_percentage'];
    }

    /**
     * Sets super_fund3_allocated_percentage
     *
     * @param double $super_fund3_allocated_percentage 
     *
     * @return $this
     */
    public function setSuperFund3AllocatedPercentage($super_fund3_allocated_percentage)
    {
        $this->container['super_fund3_allocated_percentage'] = $super_fund3_allocated_percentage;

        return $this;
    }

    /**
     * Gets super_fund3_fixed_amount
     *
     * @return double
     */
    public function getSuperFund3FixedAmount()
    {
        return $this->container['super_fund3_fixed_amount'];
    }

    /**
     * Sets super_fund3_fixed_amount
     *
     * @param double $super_fund3_fixed_amount 
     *
     * @return $this
     */
    public function setSuperFund3FixedAmount($super_fund3_fixed_amount)
    {
        $this->container['super_fund3_fixed_amount'] = $super_fund3_fixed_amount;

        return $this;
    }

    /**
     * Gets super_fund3_employer_nominated_fund
     *
     * @return bool
     */
    public function getSuperFund3EmployerNominatedFund()
    {
        return $this->container['super_fund3_employer_nominated_fund'];
    }

    /**
     * Sets super_fund3_employer_nominated_fund
     *
     * @param bool $super_fund3_employer_nominated_fund 
     *
     * @return $this
     */
    public function setSuperFund3EmployerNominatedFund($super_fund3_employer_nominated_fund)
    {
        $this->container['super_fund3_employer_nominated_fund'] = $super_fund3_employer_nominated_fund;

        return $this;
    }

    /**
     * Gets super_threshold_amount
     *
     * @return double
     */
    public function getSuperThresholdAmount()
    {
        return $this->container['super_threshold_amount'];
    }

    /**
     * Sets super_threshold_amount
     *
     * @param double $super_threshold_amount 
     *
     * @return $this
     */
    public function setSuperThresholdAmount($super_threshold_amount)
    {
        $this->container['super_threshold_amount'] = $super_threshold_amount;

        return $this;
    }

    /**
     * Gets maximum_quarterly_super_contributions_base
     *
     * @return double
     */
    public function getMaximumQuarterlySuperContributionsBase()
    {
        return $this->container['maximum_quarterly_super_contributions_base'];
    }

    /**
     * Sets maximum_quarterly_super_contributions_base
     *
     * @param double $maximum_quarterly_super_contributions_base 
     *
     * @return $this
     */
    public function setMaximumQuarterlySuperContributionsBase($maximum_quarterly_super_contributions_base)
    {
        $this->container['maximum_quarterly_super_contributions_base'] = $maximum_quarterly_super_contributions_base;

        return $this;
    }

    /**
     * Gets medicare_levy_exemption
     *
     * @return string
     */
    public function getMedicareLevyExemption()
    {
        return $this->container['medicare_levy_exemption'];
    }

    /**
     * Sets medicare_levy_exemption
     *
     * @param string $medicare_levy_exemption 
     *
     * @return $this
     */
    public function setMedicareLevyExemption($medicare_levy_exemption)
    {
        $this->container['medicare_levy_exemption'] = $medicare_levy_exemption;

        return $this;
    }

    /**
     * Gets closely_held_employee
     *
     * @return bool
     */
    public function getCloselyHeldEmployee()
    {
        return $this->container['closely_held_employee'];
    }

    /**
     * Sets closely_held_employee
     *
     * @param bool $closely_held_employee Nullable</p><p><i>Note:</i>A non-null value here will overwrite the <i>SingleTouchPayroll</i> value. Set this to null if <i>SingleTouchPayroll</i> value should be used.
     *
     * @return $this
     */
    public function setCloselyHeldEmployee($closely_held_employee)
    {
        $this->container['closely_held_employee'] = $closely_held_employee;

        return $this;
    }

    /**
     * Gets closely_held_reporting
     *
     * @return string
     */
    public function getCloselyHeldReporting()
    {
        return $this->container['closely_held_reporting'];
    }

    /**
     * Sets closely_held_reporting
     *
     * @param string $closely_held_reporting Nullable</p><p><i>Note:</i>During a transition period, a null value will default to <i>PayPerQuarter</i> if CloselyHeldEmployee is \"true\".</p><p>A null value with CloselyHeldEmployee = \"true\" will not be valid in the future.
     *
     * @return $this
     */
    public function setCloselyHeldReporting($closely_held_reporting)
    {
        $allowedValues = $this->getCloselyHeldReportingAllowableValues();
        if (!is_null($closely_held_reporting) && !in_array($closely_held_reporting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'closely_held_reporting', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['closely_held_reporting'] = $closely_held_reporting;

        return $this;
    }

    /**
     * Gets single_touch_payroll
     *
     * @return string
     */
    public function getSingleTouchPayroll()
    {
        return $this->container['single_touch_payroll'];
    }

    /**
     * Sets single_touch_payroll
     *
     * @param string $single_touch_payroll 
     *
     * @return $this
     */
    public function setSingleTouchPayroll($single_touch_payroll)
    {
        $allowedValues = $this->getSingleTouchPayrollAllowableValues();
        if (!is_null($single_touch_payroll) && !in_array($single_touch_payroll, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'single_touch_payroll', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['single_touch_payroll'] = $single_touch_payroll;

        return $this;
    }

    /**
     * Gets hours_per_day
     *
     * @return double
     */
    public function getHoursPerDay()
    {
        return $this->container['hours_per_day'];
    }

    /**
     * Sets hours_per_day
     *
     * @param double $hours_per_day Nullable</p><p>A null value will default to the business setting for <i>Standard hours per day</i>
     *
     * @return $this
     */
    public function setHoursPerDay($hours_per_day)
    {
        $this->container['hours_per_day'] = $hours_per_day;

        return $this;
    }

    /**
     * Gets postal_address_is_overseas
     *
     * @return bool
     */
    public function getPostalAddressIsOverseas()
    {
        return $this->container['postal_address_is_overseas'];
    }

    /**
     * Sets postal_address_is_overseas
     *
     * @param bool $postal_address_is_overseas 
     *
     * @return $this
     */
    public function setPostalAddressIsOverseas($postal_address_is_overseas)
    {
        $this->container['postal_address_is_overseas'] = $postal_address_is_overseas;

        return $this;
    }

    /**
     * Gets residential_address_is_overseas
     *
     * @return bool
     */
    public function getResidentialAddressIsOverseas()
    {
        return $this->container['residential_address_is_overseas'];
    }

    /**
     * Sets residential_address_is_overseas
     *
     * @param bool $residential_address_is_overseas 
     *
     * @return $this
     */
    public function setResidentialAddressIsOverseas($residential_address_is_overseas)
    {
        $this->container['residential_address_is_overseas'] = $residential_address_is_overseas;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string $employment_type 
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets termination_reason
     *
     * @return string
     */
    public function getTerminationReason()
    {
        return $this->container['termination_reason'];
    }

    /**
     * Sets termination_reason
     *
     * @param string $termination_reason 
     *
     * @return $this
     */
    public function setTerminationReason($termination_reason)
    {
        $this->container['termination_reason'] = $termination_reason;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string $preferred_name 
     *
     * @return $this
     */
    public function setPreferredName($preferred_name)
    {
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name 
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name 
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname 
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth 
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender 
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets residential_street_address
     *
     * @return string
     */
    public function getResidentialStreetAddress()
    {
        return $this->container['residential_street_address'];
    }

    /**
     * Sets residential_street_address
     *
     * @param string $residential_street_address 
     *
     * @return $this
     */
    public function setResidentialStreetAddress($residential_street_address)
    {
        $this->container['residential_street_address'] = $residential_street_address;

        return $this;
    }

    /**
     * Gets residential_address_line2
     *
     * @return string
     */
    public function getResidentialAddressLine2()
    {
        return $this->container['residential_address_line2'];
    }

    /**
     * Sets residential_address_line2
     *
     * @param string $residential_address_line2 
     *
     * @return $this
     */
    public function setResidentialAddressLine2($residential_address_line2)
    {
        $this->container['residential_address_line2'] = $residential_address_line2;

        return $this;
    }

    /**
     * Gets residential_post_code
     *
     * @return string
     */
    public function getResidentialPostCode()
    {
        return $this->container['residential_post_code'];
    }

    /**
     * Sets residential_post_code
     *
     * @param string $residential_post_code 
     *
     * @return $this
     */
    public function setResidentialPostCode($residential_post_code)
    {
        $this->container['residential_post_code'] = $residential_post_code;

        return $this;
    }

    /**
     * Gets residential_country
     *
     * @return string
     */
    public function getResidentialCountry()
    {
        return $this->container['residential_country'];
    }

    /**
     * Sets residential_country
     *
     * @param string $residential_country 
     *
     * @return $this
     */
    public function setResidentialCountry($residential_country)
    {
        $this->container['residential_country'] = $residential_country;

        return $this;
    }

    /**
     * Gets postal_street_address
     *
     * @return string
     */
    public function getPostalStreetAddress()
    {
        return $this->container['postal_street_address'];
    }

    /**
     * Sets postal_street_address
     *
     * @param string $postal_street_address 
     *
     * @return $this
     */
    public function setPostalStreetAddress($postal_street_address)
    {
        $this->container['postal_street_address'] = $postal_street_address;

        return $this;
    }

    /**
     * Gets postal_address_line2
     *
     * @return string
     */
    public function getPostalAddressLine2()
    {
        return $this->container['postal_address_line2'];
    }

    /**
     * Sets postal_address_line2
     *
     * @param string $postal_address_line2 
     *
     * @return $this
     */
    public function setPostalAddressLine2($postal_address_line2)
    {
        $this->container['postal_address_line2'] = $postal_address_line2;

        return $this;
    }

    /**
     * Gets postal_post_code
     *
     * @return string
     */
    public function getPostalPostCode()
    {
        return $this->container['postal_post_code'];
    }

    /**
     * Sets postal_post_code
     *
     * @param string $postal_post_code 
     *
     * @return $this
     */
    public function setPostalPostCode($postal_post_code)
    {
        $this->container['postal_post_code'] = $postal_post_code;

        return $this;
    }

    /**
     * Gets postal_country
     *
     * @return string
     */
    public function getPostalCountry()
    {
        return $this->container['postal_country'];
    }

    /**
     * Sets postal_country
     *
     * @param string $postal_country 
     *
     * @return $this
     */
    public function setPostalCountry($postal_country)
    {
        $this->container['postal_country'] = $postal_country;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address 
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone 
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string $work_phone 
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone 
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date 
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date 
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets anniversary_date
     *
     * @return \DateTime
     */
    public function getAnniversaryDate()
    {
        return $this->container['anniversary_date'];
    }

    /**
     * Sets anniversary_date
     *
     * @param \DateTime $anniversary_date 
     *
     * @return $this
     */
    public function setAnniversaryDate($anniversary_date)
    {
        $this->container['anniversary_date'] = $anniversary_date;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags 
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title 
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets pay_schedule
     *
     * @return string
     */
    public function getPaySchedule()
    {
        return $this->container['pay_schedule'];
    }

    /**
     * Sets pay_schedule
     *
     * @param string $pay_schedule 
     *
     * @return $this
     */
    public function setPaySchedule($pay_schedule)
    {
        $this->container['pay_schedule'] = $pay_schedule;

        return $this;
    }

    /**
     * Gets primary_pay_category
     *
     * @return string
     */
    public function getPrimaryPayCategory()
    {
        return $this->container['primary_pay_category'];
    }

    /**
     * Sets primary_pay_category
     *
     * @param string $primary_pay_category 
     *
     * @return $this
     */
    public function setPrimaryPayCategory($primary_pay_category)
    {
        $this->container['primary_pay_category'] = $primary_pay_category;

        return $this;
    }

    /**
     * Gets primary_location
     *
     * @return string
     */
    public function getPrimaryLocation()
    {
        return $this->container['primary_location'];
    }

    /**
     * Sets primary_location
     *
     * @param string $primary_location 
     *
     * @return $this
     */
    public function setPrimaryLocation($primary_location)
    {
        $this->container['primary_location'] = $primary_location;

        return $this;
    }

    /**
     * Gets pay_slip_notification_type
     *
     * @return string
     */
    public function getPaySlipNotificationType()
    {
        return $this->container['pay_slip_notification_type'];
    }

    /**
     * Sets pay_slip_notification_type
     *
     * @param string $pay_slip_notification_type 
     *
     * @return $this
     */
    public function setPaySlipNotificationType($pay_slip_notification_type)
    {
        $this->container['pay_slip_notification_type'] = $pay_slip_notification_type;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate 
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets override_template_rate
     *
     * @return string
     */
    public function getOverrideTemplateRate()
    {
        return $this->container['override_template_rate'];
    }

    /**
     * Sets override_template_rate
     *
     * @param string $override_template_rate 
     *
     * @return $this
     */
    public function setOverrideTemplateRate($override_template_rate)
    {
        $this->container['override_template_rate'] = $override_template_rate;

        return $this;
    }

    /**
     * Gets rate_unit
     *
     * @return string
     */
    public function getRateUnit()
    {
        return $this->container['rate_unit'];
    }

    /**
     * Sets rate_unit
     *
     * @param string $rate_unit 
     *
     * @return $this
     */
    public function setRateUnit($rate_unit)
    {
        $this->container['rate_unit'] = $rate_unit;

        return $this;
    }

    /**
     * Gets hours_per_week
     *
     * @return double
     */
    public function getHoursPerWeek()
    {
        return $this->container['hours_per_week'];
    }

    /**
     * Sets hours_per_week
     *
     * @param double $hours_per_week 
     *
     * @return $this
     */
    public function setHoursPerWeek($hours_per_week)
    {
        $this->container['hours_per_week'] = $hours_per_week;

        return $this;
    }

    /**
     * Gets automatically_pay_employee
     *
     * @return string
     */
    public function getAutomaticallyPayEmployee()
    {
        return $this->container['automatically_pay_employee'];
    }

    /**
     * Sets automatically_pay_employee
     *
     * @param string $automatically_pay_employee 
     *
     * @return $this
     */
    public function setAutomaticallyPayEmployee($automatically_pay_employee)
    {
        $this->container['automatically_pay_employee'] = $automatically_pay_employee;

        return $this;
    }

    /**
     * Gets leave_template
     *
     * @return string
     */
    public function getLeaveTemplate()
    {
        return $this->container['leave_template'];
    }

    /**
     * Sets leave_template
     *
     * @param string $leave_template 
     *
     * @return $this
     */
    public function setLeaveTemplate($leave_template)
    {
        $this->container['leave_template'] = $leave_template;

        return $this;
    }

    /**
     * Gets pay_rate_template
     *
     * @return string
     */
    public function getPayRateTemplate()
    {
        return $this->container['pay_rate_template'];
    }

    /**
     * Sets pay_rate_template
     *
     * @param string $pay_rate_template 
     *
     * @return $this
     */
    public function setPayRateTemplate($pay_rate_template)
    {
        $this->container['pay_rate_template'] = $pay_rate_template;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set
     *
     * @return string
     */
    public function getPayConditionRuleSet()
    {
        return $this->container['pay_condition_rule_set'];
    }

    /**
     * Sets pay_condition_rule_set
     *
     * @param string $pay_condition_rule_set 
     *
     * @return $this
     */
    public function setPayConditionRuleSet($pay_condition_rule_set)
    {
        $this->container['pay_condition_rule_set'] = $pay_condition_rule_set;

        return $this;
    }

    /**
     * Gets is_enabled_for_timesheets
     *
     * @return string
     */
    public function getIsEnabledForTimesheets()
    {
        return $this->container['is_enabled_for_timesheets'];
    }

    /**
     * Sets is_enabled_for_timesheets
     *
     * @param string $is_enabled_for_timesheets 
     *
     * @return $this
     */
    public function setIsEnabledForTimesheets($is_enabled_for_timesheets)
    {
        $this->container['is_enabled_for_timesheets'] = $is_enabled_for_timesheets;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return string
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param string $locations 
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets work_types
     *
     * @return string
     */
    public function getWorkTypes()
    {
        return $this->container['work_types'];
    }

    /**
     * Sets work_types
     *
     * @param string $work_types 
     *
     * @return $this
     */
    public function setWorkTypes($work_types)
    {
        $this->container['work_types'] = $work_types;

        return $this;
    }

    /**
     * Gets emergency_contact1_name
     *
     * @return string
     */
    public function getEmergencyContact1Name()
    {
        return $this->container['emergency_contact1_name'];
    }

    /**
     * Sets emergency_contact1_name
     *
     * @param string $emergency_contact1_name 
     *
     * @return $this
     */
    public function setEmergencyContact1Name($emergency_contact1_name)
    {
        if (!is_null($emergency_contact1_name) && (mb_strlen($emergency_contact1_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_name when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 100.');
        }
        if (!is_null($emergency_contact1_name) && (mb_strlen($emergency_contact1_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_name when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact1_name'] = $emergency_contact1_name;

        return $this;
    }

    /**
     * Gets emergency_contact1_relationship
     *
     * @return string
     */
    public function getEmergencyContact1Relationship()
    {
        return $this->container['emergency_contact1_relationship'];
    }

    /**
     * Sets emergency_contact1_relationship
     *
     * @param string $emergency_contact1_relationship 
     *
     * @return $this
     */
    public function setEmergencyContact1Relationship($emergency_contact1_relationship)
    {
        if (!is_null($emergency_contact1_relationship) && (mb_strlen($emergency_contact1_relationship) > 100)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_relationship when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 100.');
        }
        if (!is_null($emergency_contact1_relationship) && (mb_strlen($emergency_contact1_relationship) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_relationship when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact1_relationship'] = $emergency_contact1_relationship;

        return $this;
    }

    /**
     * Gets emergency_contact1_address
     *
     * @return string
     */
    public function getEmergencyContact1Address()
    {
        return $this->container['emergency_contact1_address'];
    }

    /**
     * Sets emergency_contact1_address
     *
     * @param string $emergency_contact1_address 
     *
     * @return $this
     */
    public function setEmergencyContact1Address($emergency_contact1_address)
    {
        if (!is_null($emergency_contact1_address) && (mb_strlen($emergency_contact1_address) > 500)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_address when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 500.');
        }
        if (!is_null($emergency_contact1_address) && (mb_strlen($emergency_contact1_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_address when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact1_address'] = $emergency_contact1_address;

        return $this;
    }

    /**
     * Gets emergency_contact1_contact_number
     *
     * @return string
     */
    public function getEmergencyContact1ContactNumber()
    {
        return $this->container['emergency_contact1_contact_number'];
    }

    /**
     * Sets emergency_contact1_contact_number
     *
     * @param string $emergency_contact1_contact_number 
     *
     * @return $this
     */
    public function setEmergencyContact1ContactNumber($emergency_contact1_contact_number)
    {
        if (!is_null($emergency_contact1_contact_number) && (mb_strlen($emergency_contact1_contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_contact_number when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 50.');
        }
        if (!is_null($emergency_contact1_contact_number) && (mb_strlen($emergency_contact1_contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_contact_number when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact1_contact_number'] = $emergency_contact1_contact_number;

        return $this;
    }

    /**
     * Gets emergency_contact1_alternate_contact_number
     *
     * @return string
     */
    public function getEmergencyContact1AlternateContactNumber()
    {
        return $this->container['emergency_contact1_alternate_contact_number'];
    }

    /**
     * Sets emergency_contact1_alternate_contact_number
     *
     * @param string $emergency_contact1_alternate_contact_number 
     *
     * @return $this
     */
    public function setEmergencyContact1AlternateContactNumber($emergency_contact1_alternate_contact_number)
    {
        if (!is_null($emergency_contact1_alternate_contact_number) && (mb_strlen($emergency_contact1_alternate_contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_alternate_contact_number when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 50.');
        }
        if (!is_null($emergency_contact1_alternate_contact_number) && (mb_strlen($emergency_contact1_alternate_contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact1_alternate_contact_number when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact1_alternate_contact_number'] = $emergency_contact1_alternate_contact_number;

        return $this;
    }

    /**
     * Gets emergency_contact2_name
     *
     * @return string
     */
    public function getEmergencyContact2Name()
    {
        return $this->container['emergency_contact2_name'];
    }

    /**
     * Sets emergency_contact2_name
     *
     * @param string $emergency_contact2_name 
     *
     * @return $this
     */
    public function setEmergencyContact2Name($emergency_contact2_name)
    {
        if (!is_null($emergency_contact2_name) && (mb_strlen($emergency_contact2_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_name when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 100.');
        }
        if (!is_null($emergency_contact2_name) && (mb_strlen($emergency_contact2_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_name when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact2_name'] = $emergency_contact2_name;

        return $this;
    }

    /**
     * Gets emergency_contact2_relationship
     *
     * @return string
     */
    public function getEmergencyContact2Relationship()
    {
        return $this->container['emergency_contact2_relationship'];
    }

    /**
     * Sets emergency_contact2_relationship
     *
     * @param string $emergency_contact2_relationship 
     *
     * @return $this
     */
    public function setEmergencyContact2Relationship($emergency_contact2_relationship)
    {
        if (!is_null($emergency_contact2_relationship) && (mb_strlen($emergency_contact2_relationship) > 100)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_relationship when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 100.');
        }
        if (!is_null($emergency_contact2_relationship) && (mb_strlen($emergency_contact2_relationship) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_relationship when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact2_relationship'] = $emergency_contact2_relationship;

        return $this;
    }

    /**
     * Gets emergency_contact2_address
     *
     * @return string
     */
    public function getEmergencyContact2Address()
    {
        return $this->container['emergency_contact2_address'];
    }

    /**
     * Sets emergency_contact2_address
     *
     * @param string $emergency_contact2_address 
     *
     * @return $this
     */
    public function setEmergencyContact2Address($emergency_contact2_address)
    {
        if (!is_null($emergency_contact2_address) && (mb_strlen($emergency_contact2_address) > 500)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_address when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 500.');
        }
        if (!is_null($emergency_contact2_address) && (mb_strlen($emergency_contact2_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_address when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact2_address'] = $emergency_contact2_address;

        return $this;
    }

    /**
     * Gets emergency_contact2_contact_number
     *
     * @return string
     */
    public function getEmergencyContact2ContactNumber()
    {
        return $this->container['emergency_contact2_contact_number'];
    }

    /**
     * Sets emergency_contact2_contact_number
     *
     * @param string $emergency_contact2_contact_number 
     *
     * @return $this
     */
    public function setEmergencyContact2ContactNumber($emergency_contact2_contact_number)
    {
        if (!is_null($emergency_contact2_contact_number) && (mb_strlen($emergency_contact2_contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_contact_number when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 50.');
        }
        if (!is_null($emergency_contact2_contact_number) && (mb_strlen($emergency_contact2_contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_contact_number when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact2_contact_number'] = $emergency_contact2_contact_number;

        return $this;
    }

    /**
     * Gets emergency_contact2_alternate_contact_number
     *
     * @return string
     */
    public function getEmergencyContact2AlternateContactNumber()
    {
        return $this->container['emergency_contact2_alternate_contact_number'];
    }

    /**
     * Sets emergency_contact2_alternate_contact_number
     *
     * @param string $emergency_contact2_alternate_contact_number 
     *
     * @return $this
     */
    public function setEmergencyContact2AlternateContactNumber($emergency_contact2_alternate_contact_number)
    {
        if (!is_null($emergency_contact2_alternate_contact_number) && (mb_strlen($emergency_contact2_alternate_contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_alternate_contact_number when calling AuUnstructuredEmployeeModel., must be smaller than or equal to 50.');
        }
        if (!is_null($emergency_contact2_alternate_contact_number) && (mb_strlen($emergency_contact2_alternate_contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $emergency_contact2_alternate_contact_number when calling AuUnstructuredEmployeeModel., must be bigger than or equal to 0.');
        }

        $this->container['emergency_contact2_alternate_contact_number'] = $emergency_contact2_alternate_contact_number;

        return $this;
    }

    /**
     * Gets bank_account1_account_number
     *
     * @return string
     */
    public function getBankAccount1AccountNumber()
    {
        return $this->container['bank_account1_account_number'];
    }

    /**
     * Sets bank_account1_account_number
     *
     * @param string $bank_account1_account_number 
     *
     * @return $this
     */
    public function setBankAccount1AccountNumber($bank_account1_account_number)
    {
        $this->container['bank_account1_account_number'] = $bank_account1_account_number;

        return $this;
    }

    /**
     * Gets bank_account1_account_name
     *
     * @return string
     */
    public function getBankAccount1AccountName()
    {
        return $this->container['bank_account1_account_name'];
    }

    /**
     * Sets bank_account1_account_name
     *
     * @param string $bank_account1_account_name 
     *
     * @return $this
     */
    public function setBankAccount1AccountName($bank_account1_account_name)
    {
        $this->container['bank_account1_account_name'] = $bank_account1_account_name;

        return $this;
    }

    /**
     * Gets bank_account1_allocated_percentage
     *
     * @return double
     */
    public function getBankAccount1AllocatedPercentage()
    {
        return $this->container['bank_account1_allocated_percentage'];
    }

    /**
     * Sets bank_account1_allocated_percentage
     *
     * @param double $bank_account1_allocated_percentage 
     *
     * @return $this
     */
    public function setBankAccount1AllocatedPercentage($bank_account1_allocated_percentage)
    {
        $this->container['bank_account1_allocated_percentage'] = $bank_account1_allocated_percentage;

        return $this;
    }

    /**
     * Gets bank_account1_fixed_amount
     *
     * @return double
     */
    public function getBankAccount1FixedAmount()
    {
        return $this->container['bank_account1_fixed_amount'];
    }

    /**
     * Sets bank_account1_fixed_amount
     *
     * @param double $bank_account1_fixed_amount 
     *
     * @return $this
     */
    public function setBankAccount1FixedAmount($bank_account1_fixed_amount)
    {
        $this->container['bank_account1_fixed_amount'] = $bank_account1_fixed_amount;

        return $this;
    }

    /**
     * Gets bank_account2_account_number
     *
     * @return string
     */
    public function getBankAccount2AccountNumber()
    {
        return $this->container['bank_account2_account_number'];
    }

    /**
     * Sets bank_account2_account_number
     *
     * @param string $bank_account2_account_number 
     *
     * @return $this
     */
    public function setBankAccount2AccountNumber($bank_account2_account_number)
    {
        $this->container['bank_account2_account_number'] = $bank_account2_account_number;

        return $this;
    }

    /**
     * Gets bank_account2_account_name
     *
     * @return string
     */
    public function getBankAccount2AccountName()
    {
        return $this->container['bank_account2_account_name'];
    }

    /**
     * Sets bank_account2_account_name
     *
     * @param string $bank_account2_account_name 
     *
     * @return $this
     */
    public function setBankAccount2AccountName($bank_account2_account_name)
    {
        $this->container['bank_account2_account_name'] = $bank_account2_account_name;

        return $this;
    }

    /**
     * Gets bank_account2_allocated_percentage
     *
     * @return double
     */
    public function getBankAccount2AllocatedPercentage()
    {
        return $this->container['bank_account2_allocated_percentage'];
    }

    /**
     * Sets bank_account2_allocated_percentage
     *
     * @param double $bank_account2_allocated_percentage 
     *
     * @return $this
     */
    public function setBankAccount2AllocatedPercentage($bank_account2_allocated_percentage)
    {
        $this->container['bank_account2_allocated_percentage'] = $bank_account2_allocated_percentage;

        return $this;
    }

    /**
     * Gets bank_account2_fixed_amount
     *
     * @return double
     */
    public function getBankAccount2FixedAmount()
    {
        return $this->container['bank_account2_fixed_amount'];
    }

    /**
     * Sets bank_account2_fixed_amount
     *
     * @param double $bank_account2_fixed_amount 
     *
     * @return $this
     */
    public function setBankAccount2FixedAmount($bank_account2_fixed_amount)
    {
        $this->container['bank_account2_fixed_amount'] = $bank_account2_fixed_amount;

        return $this;
    }

    /**
     * Gets bank_account3_account_number
     *
     * @return string
     */
    public function getBankAccount3AccountNumber()
    {
        return $this->container['bank_account3_account_number'];
    }

    /**
     * Sets bank_account3_account_number
     *
     * @param string $bank_account3_account_number 
     *
     * @return $this
     */
    public function setBankAccount3AccountNumber($bank_account3_account_number)
    {
        $this->container['bank_account3_account_number'] = $bank_account3_account_number;

        return $this;
    }

    /**
     * Gets bank_account3_account_name
     *
     * @return string
     */
    public function getBankAccount3AccountName()
    {
        return $this->container['bank_account3_account_name'];
    }

    /**
     * Sets bank_account3_account_name
     *
     * @param string $bank_account3_account_name 
     *
     * @return $this
     */
    public function setBankAccount3AccountName($bank_account3_account_name)
    {
        $this->container['bank_account3_account_name'] = $bank_account3_account_name;

        return $this;
    }

    /**
     * Gets bank_account3_allocated_percentage
     *
     * @return double
     */
    public function getBankAccount3AllocatedPercentage()
    {
        return $this->container['bank_account3_allocated_percentage'];
    }

    /**
     * Sets bank_account3_allocated_percentage
     *
     * @param double $bank_account3_allocated_percentage 
     *
     * @return $this
     */
    public function setBankAccount3AllocatedPercentage($bank_account3_allocated_percentage)
    {
        $this->container['bank_account3_allocated_percentage'] = $bank_account3_allocated_percentage;

        return $this;
    }

    /**
     * Gets bank_account3_fixed_amount
     *
     * @return double
     */
    public function getBankAccount3FixedAmount()
    {
        return $this->container['bank_account3_fixed_amount'];
    }

    /**
     * Sets bank_account3_fixed_amount
     *
     * @param double $bank_account3_fixed_amount 
     *
     * @return $this
     */
    public function setBankAccount3FixedAmount($bank_account3_fixed_amount)
    {
        $this->container['bank_account3_fixed_amount'] = $bank_account3_fixed_amount;

        return $this;
    }

    /**
     * Gets rostering_notification_choices
     *
     * @return string
     */
    public function getRosteringNotificationChoices()
    {
        return $this->container['rostering_notification_choices'];
    }

    /**
     * Sets rostering_notification_choices
     *
     * @param string $rostering_notification_choices 
     *
     * @return $this
     */
    public function setRosteringNotificationChoices($rostering_notification_choices)
    {
        $this->container['rostering_notification_choices'] = $rostering_notification_choices;

        return $this;
    }

    /**
     * Gets leave_accrual_start_date_type
     *
     * @return string
     */
    public function getLeaveAccrualStartDateType()
    {
        return $this->container['leave_accrual_start_date_type'];
    }

    /**
     * Sets leave_accrual_start_date_type
     *
     * @param string $leave_accrual_start_date_type 
     *
     * @return $this
     */
    public function setLeaveAccrualStartDateType($leave_accrual_start_date_type)
    {
        $allowedValues = $this->getLeaveAccrualStartDateTypeAllowableValues();
        if (!is_null($leave_accrual_start_date_type) && !in_array($leave_accrual_start_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'leave_accrual_start_date_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_accrual_start_date_type'] = $leave_accrual_start_date_type;

        return $this;
    }

    /**
     * Gets leave_year_start
     *
     * @return \DateTime
     */
    public function getLeaveYearStart()
    {
        return $this->container['leave_year_start'];
    }

    /**
     * Sets leave_year_start
     *
     * @param \DateTime $leave_year_start 
     *
     * @return $this
     */
    public function setLeaveYearStart($leave_year_start)
    {
        $this->container['leave_year_start'] = $leave_year_start;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created 
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


