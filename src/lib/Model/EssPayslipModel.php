<?php
/**
 * EssPayslipModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EssPayslipModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EssPayslipModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EssPayslipModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'pay_schedule' => 'string',
        'date_paid' => '\DateTime',
        'pay_period_start' => '\DateTime',
        'pay_period_end' => '\DateTime',
        'net_pay' => 'double',
        'payer_name' => 'string',
        'payer_abn' => 'string',
        'payer_business_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'employee_id' => 'int32',
        'pay_schedule' => null,
        'date_paid' => 'date-time',
        'pay_period_start' => 'date-time',
        'pay_period_end' => 'date-time',
        'net_pay' => 'double',
        'payer_name' => null,
        'payer_abn' => null,
        'payer_business_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'pay_schedule' => 'paySchedule',
        'date_paid' => 'datePaid',
        'pay_period_start' => 'payPeriodStart',
        'pay_period_end' => 'payPeriodEnd',
        'net_pay' => 'netPay',
        'payer_name' => 'payerName',
        'payer_abn' => 'payerAbn',
        'payer_business_number' => 'payerBusinessNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'pay_schedule' => 'setPaySchedule',
        'date_paid' => 'setDatePaid',
        'pay_period_start' => 'setPayPeriodStart',
        'pay_period_end' => 'setPayPeriodEnd',
        'net_pay' => 'setNetPay',
        'payer_name' => 'setPayerName',
        'payer_abn' => 'setPayerAbn',
        'payer_business_number' => 'setPayerBusinessNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'pay_schedule' => 'getPaySchedule',
        'date_paid' => 'getDatePaid',
        'pay_period_start' => 'getPayPeriodStart',
        'pay_period_end' => 'getPayPeriodEnd',
        'net_pay' => 'getNetPay',
        'payer_name' => 'getPayerName',
        'payer_abn' => 'getPayerAbn',
        'payer_business_number' => 'getPayerBusinessNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['pay_schedule'] = isset($data['pay_schedule']) ? $data['pay_schedule'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['pay_period_start'] = isset($data['pay_period_start']) ? $data['pay_period_start'] : null;
        $this->container['pay_period_end'] = isset($data['pay_period_end']) ? $data['pay_period_end'] : null;
        $this->container['net_pay'] = isset($data['net_pay']) ? $data['net_pay'] : null;
        $this->container['payer_name'] = isset($data['payer_name']) ? $data['payer_name'] : null;
        $this->container['payer_abn'] = isset($data['payer_abn']) ? $data['payer_abn'] : null;
        $this->container['payer_business_number'] = isset($data['payer_business_number']) ? $data['payer_business_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets pay_schedule
     *
     * @return string
     */
    public function getPaySchedule()
    {
        return $this->container['pay_schedule'];
    }

    /**
     * Sets pay_schedule
     *
     * @param string $pay_schedule 
     *
     * @return $this
     */
    public function setPaySchedule($pay_schedule)
    {
        $this->container['pay_schedule'] = $pay_schedule;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime $date_paid 
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets pay_period_start
     *
     * @return \DateTime
     */
    public function getPayPeriodStart()
    {
        return $this->container['pay_period_start'];
    }

    /**
     * Sets pay_period_start
     *
     * @param \DateTime $pay_period_start 
     *
     * @return $this
     */
    public function setPayPeriodStart($pay_period_start)
    {
        $this->container['pay_period_start'] = $pay_period_start;

        return $this;
    }

    /**
     * Gets pay_period_end
     *
     * @return \DateTime
     */
    public function getPayPeriodEnd()
    {
        return $this->container['pay_period_end'];
    }

    /**
     * Sets pay_period_end
     *
     * @param \DateTime $pay_period_end 
     *
     * @return $this
     */
    public function setPayPeriodEnd($pay_period_end)
    {
        $this->container['pay_period_end'] = $pay_period_end;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return double
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param double $net_pay 
     *
     * @return $this
     */
    public function setNetPay($net_pay)
    {
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string $payer_name 
     *
     * @return $this
     */
    public function setPayerName($payer_name)
    {
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets payer_abn
     *
     * @return string
     */
    public function getPayerAbn()
    {
        return $this->container['payer_abn'];
    }

    /**
     * Sets payer_abn
     *
     * @param string $payer_abn 
     *
     * @return $this
     */
    public function setPayerAbn($payer_abn)
    {
        $this->container['payer_abn'] = $payer_abn;

        return $this;
    }

    /**
     * Gets payer_business_number
     *
     * @return string
     */
    public function getPayerBusinessNumber()
    {
        return $this->container['payer_business_number'];
    }

    /**
     * Sets payer_business_number
     *
     * @param string $payer_business_number 
     *
     * @return $this
     */
    public function setPayerBusinessNumber($payer_business_number)
    {
        $this->container['payer_business_number'] = $payer_business_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


