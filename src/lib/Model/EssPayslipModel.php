<?php
/**
 * EssPayslipModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EssPayslipModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EssPayslipModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EssPayslipModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'pay_schedule' => 'string',
        'date_paid' => '\DateTime',
        'pay_period_start' => '\DateTime',
        'pay_period_end' => '\DateTime',
        'net_pay' => 'float',
        'payer_name' => 'string',
        'payer_abn' => 'string',
        'payer_business_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'employee_id' => 'int32',
        'pay_schedule' => null,
        'date_paid' => 'date-time',
        'pay_period_start' => 'date-time',
        'pay_period_end' => 'date-time',
        'net_pay' => 'double',
        'payer_name' => null,
        'payer_abn' => null,
        'payer_business_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'employee_id' => false,
		'pay_schedule' => false,
		'date_paid' => false,
		'pay_period_start' => false,
		'pay_period_end' => false,
		'net_pay' => false,
		'payer_name' => false,
		'payer_abn' => false,
		'payer_business_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'pay_schedule' => 'paySchedule',
        'date_paid' => 'datePaid',
        'pay_period_start' => 'payPeriodStart',
        'pay_period_end' => 'payPeriodEnd',
        'net_pay' => 'netPay',
        'payer_name' => 'payerName',
        'payer_abn' => 'payerAbn',
        'payer_business_number' => 'payerBusinessNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'pay_schedule' => 'setPaySchedule',
        'date_paid' => 'setDatePaid',
        'pay_period_start' => 'setPayPeriodStart',
        'pay_period_end' => 'setPayPeriodEnd',
        'net_pay' => 'setNetPay',
        'payer_name' => 'setPayerName',
        'payer_abn' => 'setPayerAbn',
        'payer_business_number' => 'setPayerBusinessNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'pay_schedule' => 'getPaySchedule',
        'date_paid' => 'getDatePaid',
        'pay_period_start' => 'getPayPeriodStart',
        'pay_period_end' => 'getPayPeriodEnd',
        'net_pay' => 'getNetPay',
        'payer_name' => 'getPayerName',
        'payer_abn' => 'getPayerAbn',
        'payer_business_number' => 'getPayerBusinessNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('pay_schedule', $data ?? [], null);
        $this->setIfExists('date_paid', $data ?? [], null);
        $this->setIfExists('pay_period_start', $data ?? [], null);
        $this->setIfExists('pay_period_end', $data ?? [], null);
        $this->setIfExists('net_pay', $data ?? [], null);
        $this->setIfExists('payer_name', $data ?? [], null);
        $this->setIfExists('payer_abn', $data ?? [], null);
        $this->setIfExists('payer_business_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets pay_schedule
     *
     * @return string|null
     */
    public function getPaySchedule()
    {
        return $this->container['pay_schedule'];
    }

    /**
     * Sets pay_schedule
     *
     * @param string|null $pay_schedule 
     *
     * @return self
     */
    public function setPaySchedule($pay_schedule)
    {
        if (is_null($pay_schedule)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule cannot be null');
        }
        $this->container['pay_schedule'] = $pay_schedule;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime|null
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime|null $date_paid 
     *
     * @return self
     */
    public function setDatePaid($date_paid)
    {
        if (is_null($date_paid)) {
            throw new \InvalidArgumentException('non-nullable date_paid cannot be null');
        }
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets pay_period_start
     *
     * @return \DateTime|null
     */
    public function getPayPeriodStart()
    {
        return $this->container['pay_period_start'];
    }

    /**
     * Sets pay_period_start
     *
     * @param \DateTime|null $pay_period_start 
     *
     * @return self
     */
    public function setPayPeriodStart($pay_period_start)
    {
        if (is_null($pay_period_start)) {
            throw new \InvalidArgumentException('non-nullable pay_period_start cannot be null');
        }
        $this->container['pay_period_start'] = $pay_period_start;

        return $this;
    }

    /**
     * Gets pay_period_end
     *
     * @return \DateTime|null
     */
    public function getPayPeriodEnd()
    {
        return $this->container['pay_period_end'];
    }

    /**
     * Sets pay_period_end
     *
     * @param \DateTime|null $pay_period_end 
     *
     * @return self
     */
    public function setPayPeriodEnd($pay_period_end)
    {
        if (is_null($pay_period_end)) {
            throw new \InvalidArgumentException('non-nullable pay_period_end cannot be null');
        }
        $this->container['pay_period_end'] = $pay_period_end;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return float|null
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param float|null $net_pay 
     *
     * @return self
     */
    public function setNetPay($net_pay)
    {
        if (is_null($net_pay)) {
            throw new \InvalidArgumentException('non-nullable net_pay cannot be null');
        }
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string|null
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string|null $payer_name 
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        if (is_null($payer_name)) {
            throw new \InvalidArgumentException('non-nullable payer_name cannot be null');
        }
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets payer_abn
     *
     * @return string|null
     */
    public function getPayerAbn()
    {
        return $this->container['payer_abn'];
    }

    /**
     * Sets payer_abn
     *
     * @param string|null $payer_abn 
     *
     * @return self
     */
    public function setPayerAbn($payer_abn)
    {
        if (is_null($payer_abn)) {
            throw new \InvalidArgumentException('non-nullable payer_abn cannot be null');
        }
        $this->container['payer_abn'] = $payer_abn;

        return $this;
    }

    /**
     * Gets payer_business_number
     *
     * @return string|null
     */
    public function getPayerBusinessNumber()
    {
        return $this->container['payer_business_number'];
    }

    /**
     * Sets payer_business_number
     *
     * @param string|null $payer_business_number 
     *
     * @return self
     */
    public function setPayerBusinessNumber($payer_business_number)
    {
        if (is_null($payer_business_number)) {
            throw new \InvalidArgumentException('non-nullable payer_business_number cannot be null');
        }
        $this->container['payer_business_number'] = $payer_business_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


