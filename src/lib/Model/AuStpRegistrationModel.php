<?php
/**
 * AuStpRegistrationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuStpRegistrationModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuStpRegistrationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuStpRegistrationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'branch' => 'string',
        'abn' => 'string',
        'contact_name' => 'string',
        'contact_phone_number' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'suburb_id' => 'int',
        'suburb' => 'string',
        'post_code' => 'string',
        'state' => 'string',
        'lodgement_role' => 'string',
        'tax_agent_number' => 'string',
        'intermediary_abn' => 'string',
        'intermediary_contact_name' => 'string',
        'intermediary_contact_email' => 'string',
        'intermediary_contact_phone' => 'string',
        'ato_integration_option' => 'string',
        'sbr_software_id' => 'string',
        'sbr_enabled' => 'bool',
        'single_touch_payroll_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'branch' => null,
        'abn' => null,
        'contact_name' => null,
        'contact_phone_number' => null,
        'address_line1' => null,
        'address_line2' => null,
        'suburb_id' => 'int32',
        'suburb' => null,
        'post_code' => null,
        'state' => null,
        'lodgement_role' => null,
        'tax_agent_number' => null,
        'intermediary_abn' => null,
        'intermediary_contact_name' => null,
        'intermediary_contact_email' => null,
        'intermediary_contact_phone' => null,
        'ato_integration_option' => null,
        'sbr_software_id' => null,
        'sbr_enabled' => null,
        'single_touch_payroll_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'branch' => 'branch',
        'abn' => 'abn',
        'contact_name' => 'contactName',
        'contact_phone_number' => 'contactPhoneNumber',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'suburb_id' => 'suburbId',
        'suburb' => 'suburb',
        'post_code' => 'postCode',
        'state' => 'state',
        'lodgement_role' => 'lodgementRole',
        'tax_agent_number' => 'taxAgentNumber',
        'intermediary_abn' => 'intermediaryAbn',
        'intermediary_contact_name' => 'intermediaryContactName',
        'intermediary_contact_email' => 'intermediaryContactEmail',
        'intermediary_contact_phone' => 'intermediaryContactPhone',
        'ato_integration_option' => 'atoIntegrationOption',
        'sbr_software_id' => 'sbrSoftwareId',
        'sbr_enabled' => 'sbrEnabled',
        'single_touch_payroll_enabled' => 'singleTouchPayrollEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'branch' => 'setBranch',
        'abn' => 'setAbn',
        'contact_name' => 'setContactName',
        'contact_phone_number' => 'setContactPhoneNumber',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'suburb_id' => 'setSuburbId',
        'suburb' => 'setSuburb',
        'post_code' => 'setPostCode',
        'state' => 'setState',
        'lodgement_role' => 'setLodgementRole',
        'tax_agent_number' => 'setTaxAgentNumber',
        'intermediary_abn' => 'setIntermediaryAbn',
        'intermediary_contact_name' => 'setIntermediaryContactName',
        'intermediary_contact_email' => 'setIntermediaryContactEmail',
        'intermediary_contact_phone' => 'setIntermediaryContactPhone',
        'ato_integration_option' => 'setAtoIntegrationOption',
        'sbr_software_id' => 'setSbrSoftwareId',
        'sbr_enabled' => 'setSbrEnabled',
        'single_touch_payroll_enabled' => 'setSingleTouchPayrollEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'branch' => 'getBranch',
        'abn' => 'getAbn',
        'contact_name' => 'getContactName',
        'contact_phone_number' => 'getContactPhoneNumber',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'suburb_id' => 'getSuburbId',
        'suburb' => 'getSuburb',
        'post_code' => 'getPostCode',
        'state' => 'getState',
        'lodgement_role' => 'getLodgementRole',
        'tax_agent_number' => 'getTaxAgentNumber',
        'intermediary_abn' => 'getIntermediaryAbn',
        'intermediary_contact_name' => 'getIntermediaryContactName',
        'intermediary_contact_email' => 'getIntermediaryContactEmail',
        'intermediary_contact_phone' => 'getIntermediaryContactPhone',
        'ato_integration_option' => 'getAtoIntegrationOption',
        'sbr_software_id' => 'getSbrSoftwareId',
        'sbr_enabled' => 'getSbrEnabled',
        'single_touch_payroll_enabled' => 'getSingleTouchPayrollEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LODGEMENT_ROLE_EMPLOYER = 'Employer';
    const LODGEMENT_ROLE_REGISTERED_TAX_AGENT = 'RegisteredTaxAgent';
    const LODGEMENT_ROLE_INTERMEDIARY = 'Intermediary';
    const ATO_INTEGRATION_OPTION_PHONE = 'Phone';
    const ATO_INTEGRATION_OPTION_ACCESS_MANAGER = 'AccessManager';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgementRoleAllowableValues()
    {
        return [
            self::LODGEMENT_ROLE_EMPLOYER,
            self::LODGEMENT_ROLE_REGISTERED_TAX_AGENT,
            self::LODGEMENT_ROLE_INTERMEDIARY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAtoIntegrationOptionAllowableValues()
    {
        return [
            self::ATO_INTEGRATION_OPTION_PHONE,
            self::ATO_INTEGRATION_OPTION_ACCESS_MANAGER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['abn'] = isset($data['abn']) ? $data['abn'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_phone_number'] = isset($data['contact_phone_number']) ? $data['contact_phone_number'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['suburb_id'] = isset($data['suburb_id']) ? $data['suburb_id'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['lodgement_role'] = isset($data['lodgement_role']) ? $data['lodgement_role'] : null;
        $this->container['tax_agent_number'] = isset($data['tax_agent_number']) ? $data['tax_agent_number'] : null;
        $this->container['intermediary_abn'] = isset($data['intermediary_abn']) ? $data['intermediary_abn'] : null;
        $this->container['intermediary_contact_name'] = isset($data['intermediary_contact_name']) ? $data['intermediary_contact_name'] : null;
        $this->container['intermediary_contact_email'] = isset($data['intermediary_contact_email']) ? $data['intermediary_contact_email'] : null;
        $this->container['intermediary_contact_phone'] = isset($data['intermediary_contact_phone']) ? $data['intermediary_contact_phone'] : null;
        $this->container['ato_integration_option'] = isset($data['ato_integration_option']) ? $data['ato_integration_option'] : null;
        $this->container['sbr_software_id'] = isset($data['sbr_software_id']) ? $data['sbr_software_id'] : null;
        $this->container['sbr_enabled'] = isset($data['sbr_enabled']) ? $data['sbr_enabled'] : null;
        $this->container['single_touch_payroll_enabled'] = isset($data['single_touch_payroll_enabled']) ? $data['single_touch_payroll_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLodgementRoleAllowableValues();
        if (!is_null($this->container['lodgement_role']) && !in_array($this->container['lodgement_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lodgement_role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAtoIntegrationOptionAllowableValues();
        if (!is_null($this->container['ato_integration_option']) && !in_array($this->container['ato_integration_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ato_integration_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch 
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string $abn 
     *
     * @return $this
     */
    public function setAbn($abn)
    {
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name 
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_phone_number
     *
     * @return string
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     *
     * @param string $contact_phone_number 
     *
     * @return $this
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets suburb_id
     *
     * @return int
     */
    public function getSuburbId()
    {
        return $this->container['suburb_id'];
    }

    /**
     * Sets suburb_id
     *
     * @param int $suburb_id 
     *
     * @return $this
     */
    public function setSuburbId($suburb_id)
    {
        $this->container['suburb_id'] = $suburb_id;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb 
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code 
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state 
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets lodgement_role
     *
     * @return string
     */
    public function getLodgementRole()
    {
        return $this->container['lodgement_role'];
    }

    /**
     * Sets lodgement_role
     *
     * @param string $lodgement_role 
     *
     * @return $this
     */
    public function setLodgementRole($lodgement_role)
    {
        $allowedValues = $this->getLodgementRoleAllowableValues();
        if (!is_null($lodgement_role) && !in_array($lodgement_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lodgement_role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodgement_role'] = $lodgement_role;

        return $this;
    }

    /**
     * Gets tax_agent_number
     *
     * @return string
     */
    public function getTaxAgentNumber()
    {
        return $this->container['tax_agent_number'];
    }

    /**
     * Sets tax_agent_number
     *
     * @param string $tax_agent_number 
     *
     * @return $this
     */
    public function setTaxAgentNumber($tax_agent_number)
    {
        $this->container['tax_agent_number'] = $tax_agent_number;

        return $this;
    }

    /**
     * Gets intermediary_abn
     *
     * @return string
     */
    public function getIntermediaryAbn()
    {
        return $this->container['intermediary_abn'];
    }

    /**
     * Sets intermediary_abn
     *
     * @param string $intermediary_abn 
     *
     * @return $this
     */
    public function setIntermediaryAbn($intermediary_abn)
    {
        $this->container['intermediary_abn'] = $intermediary_abn;

        return $this;
    }

    /**
     * Gets intermediary_contact_name
     *
     * @return string
     */
    public function getIntermediaryContactName()
    {
        return $this->container['intermediary_contact_name'];
    }

    /**
     * Sets intermediary_contact_name
     *
     * @param string $intermediary_contact_name 
     *
     * @return $this
     */
    public function setIntermediaryContactName($intermediary_contact_name)
    {
        $this->container['intermediary_contact_name'] = $intermediary_contact_name;

        return $this;
    }

    /**
     * Gets intermediary_contact_email
     *
     * @return string
     */
    public function getIntermediaryContactEmail()
    {
        return $this->container['intermediary_contact_email'];
    }

    /**
     * Sets intermediary_contact_email
     *
     * @param string $intermediary_contact_email 
     *
     * @return $this
     */
    public function setIntermediaryContactEmail($intermediary_contact_email)
    {
        $this->container['intermediary_contact_email'] = $intermediary_contact_email;

        return $this;
    }

    /**
     * Gets intermediary_contact_phone
     *
     * @return string
     */
    public function getIntermediaryContactPhone()
    {
        return $this->container['intermediary_contact_phone'];
    }

    /**
     * Sets intermediary_contact_phone
     *
     * @param string $intermediary_contact_phone 
     *
     * @return $this
     */
    public function setIntermediaryContactPhone($intermediary_contact_phone)
    {
        $this->container['intermediary_contact_phone'] = $intermediary_contact_phone;

        return $this;
    }

    /**
     * Gets ato_integration_option
     *
     * @return string
     */
    public function getAtoIntegrationOption()
    {
        return $this->container['ato_integration_option'];
    }

    /**
     * Sets ato_integration_option
     *
     * @param string $ato_integration_option 
     *
     * @return $this
     */
    public function setAtoIntegrationOption($ato_integration_option)
    {
        $allowedValues = $this->getAtoIntegrationOptionAllowableValues();
        if (!is_null($ato_integration_option) && !in_array($ato_integration_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ato_integration_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ato_integration_option'] = $ato_integration_option;

        return $this;
    }

    /**
     * Gets sbr_software_id
     *
     * @return string
     */
    public function getSbrSoftwareId()
    {
        return $this->container['sbr_software_id'];
    }

    /**
     * Sets sbr_software_id
     *
     * @param string $sbr_software_id 
     *
     * @return $this
     */
    public function setSbrSoftwareId($sbr_software_id)
    {
        $this->container['sbr_software_id'] = $sbr_software_id;

        return $this;
    }

    /**
     * Gets sbr_enabled
     *
     * @return bool
     */
    public function getSbrEnabled()
    {
        return $this->container['sbr_enabled'];
    }

    /**
     * Sets sbr_enabled
     *
     * @param bool $sbr_enabled 
     *
     * @return $this
     */
    public function setSbrEnabled($sbr_enabled)
    {
        $this->container['sbr_enabled'] = $sbr_enabled;

        return $this;
    }

    /**
     * Gets single_touch_payroll_enabled
     *
     * @return bool
     */
    public function getSingleTouchPayrollEnabled()
    {
        return $this->container['single_touch_payroll_enabled'];
    }

    /**
     * Sets single_touch_payroll_enabled
     *
     * @param bool $single_touch_payroll_enabled 
     *
     * @return $this
     */
    public function setSingleTouchPayrollEnabled($single_touch_payroll_enabled)
    {
        $this->container['single_touch_payroll_enabled'] = $single_touch_payroll_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


