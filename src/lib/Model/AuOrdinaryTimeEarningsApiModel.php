<?php
/**
 * AuOrdinaryTimeEarningsApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuOrdinaryTimeEarningsApiModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuOrdinaryTimeEarningsApiModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuOrdinaryTimeEarningsApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super' => 'double',
        'super_percentage_of_earnings' => 'double',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'pay_run' => 'string',
        'pay_category' => 'string',
        'pay_period_starting' => '\DateTime',
        'pay_period_ending' => '\DateTime',
        'earnings' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super' => 'double',
        'super_percentage_of_earnings' => 'double',
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'pay_run' => null,
        'pay_category' => null,
        'pay_period_starting' => 'date-time',
        'pay_period_ending' => 'date-time',
        'earnings' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super' => 'super',
        'super_percentage_of_earnings' => 'superPercentageOfEarnings',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'pay_run' => 'payRun',
        'pay_category' => 'payCategory',
        'pay_period_starting' => 'payPeriodStarting',
        'pay_period_ending' => 'payPeriodEnding',
        'earnings' => 'earnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super' => 'setSuper',
        'super_percentage_of_earnings' => 'setSuperPercentageOfEarnings',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'pay_run' => 'setPayRun',
        'pay_category' => 'setPayCategory',
        'pay_period_starting' => 'setPayPeriodStarting',
        'pay_period_ending' => 'setPayPeriodEnding',
        'earnings' => 'setEarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super' => 'getSuper',
        'super_percentage_of_earnings' => 'getSuperPercentageOfEarnings',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'pay_run' => 'getPayRun',
        'pay_category' => 'getPayCategory',
        'pay_period_starting' => 'getPayPeriodStarting',
        'pay_period_ending' => 'getPayPeriodEnding',
        'earnings' => 'getEarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super'] = isset($data['super']) ? $data['super'] : null;
        $this->container['super_percentage_of_earnings'] = isset($data['super_percentage_of_earnings']) ? $data['super_percentage_of_earnings'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['pay_run'] = isset($data['pay_run']) ? $data['pay_run'] : null;
        $this->container['pay_category'] = isset($data['pay_category']) ? $data['pay_category'] : null;
        $this->container['pay_period_starting'] = isset($data['pay_period_starting']) ? $data['pay_period_starting'] : null;
        $this->container['pay_period_ending'] = isset($data['pay_period_ending']) ? $data['pay_period_ending'] : null;
        $this->container['earnings'] = isset($data['earnings']) ? $data['earnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super
     *
     * @return double
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param double $super 
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets super_percentage_of_earnings
     *
     * @return double
     */
    public function getSuperPercentageOfEarnings()
    {
        return $this->container['super_percentage_of_earnings'];
    }

    /**
     * Sets super_percentage_of_earnings
     *
     * @param double $super_percentage_of_earnings 
     *
     * @return $this
     */
    public function setSuperPercentageOfEarnings($super_percentage_of_earnings)
    {
        $this->container['super_percentage_of_earnings'] = $super_percentage_of_earnings;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name 
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname 
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets pay_run
     *
     * @return string
     */
    public function getPayRun()
    {
        return $this->container['pay_run'];
    }

    /**
     * Sets pay_run
     *
     * @param string $pay_run 
     *
     * @return $this
     */
    public function setPayRun($pay_run)
    {
        $this->container['pay_run'] = $pay_run;

        return $this;
    }

    /**
     * Gets pay_category
     *
     * @return string
     */
    public function getPayCategory()
    {
        return $this->container['pay_category'];
    }

    /**
     * Sets pay_category
     *
     * @param string $pay_category 
     *
     * @return $this
     */
    public function setPayCategory($pay_category)
    {
        $this->container['pay_category'] = $pay_category;

        return $this;
    }

    /**
     * Gets pay_period_starting
     *
     * @return \DateTime
     */
    public function getPayPeriodStarting()
    {
        return $this->container['pay_period_starting'];
    }

    /**
     * Sets pay_period_starting
     *
     * @param \DateTime $pay_period_starting 
     *
     * @return $this
     */
    public function setPayPeriodStarting($pay_period_starting)
    {
        $this->container['pay_period_starting'] = $pay_period_starting;

        return $this;
    }

    /**
     * Gets pay_period_ending
     *
     * @return \DateTime
     */
    public function getPayPeriodEnding()
    {
        return $this->container['pay_period_ending'];
    }

    /**
     * Sets pay_period_ending
     *
     * @param \DateTime $pay_period_ending 
     *
     * @return $this
     */
    public function setPayPeriodEnding($pay_period_ending)
    {
        $this->container['pay_period_ending'] = $pay_period_ending;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return double
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param double $earnings 
     *
     * @return $this
     */
    public function setEarnings($earnings)
    {
        $this->container['earnings'] = $earnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


