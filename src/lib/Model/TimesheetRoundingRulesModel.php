<?php
/**
 * TimesheetRoundingRulesModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TimesheetRoundingRulesModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimesheetRoundingRulesModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimesheetRoundingRulesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'shift_start_rounding_direction' => 'string',
        'shift_start_rounding_interval' => 'int',
        'shift_end_rounding_direction' => 'string',
        'shift_end_rounding_interval' => 'int',
        'break_start_rounding_direction' => 'string',
        'break_start_rounding_interval' => 'int',
        'break_end_rounding_direction' => 'string',
        'break_end_rounding_interval' => 'int',
        'round_up_to_shift_start_time_rounding_interval' => 'int',
        'round_down_to_shift_start_time_rounding_interval' => 'int',
        'round_up_to_shift_end_time_rounding_interval' => 'int',
        'round_down_to_shift_end_time_rounding_interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'shift_start_rounding_direction' => null,
        'shift_start_rounding_interval' => 'int32',
        'shift_end_rounding_direction' => null,
        'shift_end_rounding_interval' => 'int32',
        'break_start_rounding_direction' => null,
        'break_start_rounding_interval' => 'int32',
        'break_end_rounding_direction' => null,
        'break_end_rounding_interval' => 'int32',
        'round_up_to_shift_start_time_rounding_interval' => 'int32',
        'round_down_to_shift_start_time_rounding_interval' => 'int32',
        'round_up_to_shift_end_time_rounding_interval' => 'int32',
        'round_down_to_shift_end_time_rounding_interval' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'shift_start_rounding_direction' => false,
		'shift_start_rounding_interval' => false,
		'shift_end_rounding_direction' => false,
		'shift_end_rounding_interval' => false,
		'break_start_rounding_direction' => false,
		'break_start_rounding_interval' => false,
		'break_end_rounding_direction' => false,
		'break_end_rounding_interval' => false,
		'round_up_to_shift_start_time_rounding_interval' => false,
		'round_down_to_shift_start_time_rounding_interval' => false,
		'round_up_to_shift_end_time_rounding_interval' => false,
		'round_down_to_shift_end_time_rounding_interval' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shift_start_rounding_direction' => 'shiftStartRoundingDirection',
        'shift_start_rounding_interval' => 'shiftStartRoundingInterval',
        'shift_end_rounding_direction' => 'shiftEndRoundingDirection',
        'shift_end_rounding_interval' => 'shiftEndRoundingInterval',
        'break_start_rounding_direction' => 'breakStartRoundingDirection',
        'break_start_rounding_interval' => 'breakStartRoundingInterval',
        'break_end_rounding_direction' => 'breakEndRoundingDirection',
        'break_end_rounding_interval' => 'breakEndRoundingInterval',
        'round_up_to_shift_start_time_rounding_interval' => 'roundUpToShiftStartTimeRoundingInterval',
        'round_down_to_shift_start_time_rounding_interval' => 'roundDownToShiftStartTimeRoundingInterval',
        'round_up_to_shift_end_time_rounding_interval' => 'roundUpToShiftEndTimeRoundingInterval',
        'round_down_to_shift_end_time_rounding_interval' => 'roundDownToShiftEndTimeRoundingInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shift_start_rounding_direction' => 'setShiftStartRoundingDirection',
        'shift_start_rounding_interval' => 'setShiftStartRoundingInterval',
        'shift_end_rounding_direction' => 'setShiftEndRoundingDirection',
        'shift_end_rounding_interval' => 'setShiftEndRoundingInterval',
        'break_start_rounding_direction' => 'setBreakStartRoundingDirection',
        'break_start_rounding_interval' => 'setBreakStartRoundingInterval',
        'break_end_rounding_direction' => 'setBreakEndRoundingDirection',
        'break_end_rounding_interval' => 'setBreakEndRoundingInterval',
        'round_up_to_shift_start_time_rounding_interval' => 'setRoundUpToShiftStartTimeRoundingInterval',
        'round_down_to_shift_start_time_rounding_interval' => 'setRoundDownToShiftStartTimeRoundingInterval',
        'round_up_to_shift_end_time_rounding_interval' => 'setRoundUpToShiftEndTimeRoundingInterval',
        'round_down_to_shift_end_time_rounding_interval' => 'setRoundDownToShiftEndTimeRoundingInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shift_start_rounding_direction' => 'getShiftStartRoundingDirection',
        'shift_start_rounding_interval' => 'getShiftStartRoundingInterval',
        'shift_end_rounding_direction' => 'getShiftEndRoundingDirection',
        'shift_end_rounding_interval' => 'getShiftEndRoundingInterval',
        'break_start_rounding_direction' => 'getBreakStartRoundingDirection',
        'break_start_rounding_interval' => 'getBreakStartRoundingInterval',
        'break_end_rounding_direction' => 'getBreakEndRoundingDirection',
        'break_end_rounding_interval' => 'getBreakEndRoundingInterval',
        'round_up_to_shift_start_time_rounding_interval' => 'getRoundUpToShiftStartTimeRoundingInterval',
        'round_down_to_shift_start_time_rounding_interval' => 'getRoundDownToShiftStartTimeRoundingInterval',
        'round_up_to_shift_end_time_rounding_interval' => 'getRoundUpToShiftEndTimeRoundingInterval',
        'round_down_to_shift_end_time_rounding_interval' => 'getRoundDownToShiftEndTimeRoundingInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIFT_START_ROUNDING_DIRECTION_NONE = 'None';
    public const SHIFT_START_ROUNDING_DIRECTION_UP = 'Up';
    public const SHIFT_START_ROUNDING_DIRECTION_DOWN = 'Down';
    public const SHIFT_START_ROUNDING_DIRECTION_TO_THE_NEAREST = 'ToTheNearest';
    public const SHIFT_END_ROUNDING_DIRECTION_NONE = 'None';
    public const SHIFT_END_ROUNDING_DIRECTION_UP = 'Up';
    public const SHIFT_END_ROUNDING_DIRECTION_DOWN = 'Down';
    public const SHIFT_END_ROUNDING_DIRECTION_TO_THE_NEAREST = 'ToTheNearest';
    public const BREAK_START_ROUNDING_DIRECTION_NONE = 'None';
    public const BREAK_START_ROUNDING_DIRECTION_UP = 'Up';
    public const BREAK_START_ROUNDING_DIRECTION_DOWN = 'Down';
    public const BREAK_START_ROUNDING_DIRECTION_TO_THE_NEAREST = 'ToTheNearest';
    public const BREAK_END_ROUNDING_DIRECTION_NONE = 'None';
    public const BREAK_END_ROUNDING_DIRECTION_UP = 'Up';
    public const BREAK_END_ROUNDING_DIRECTION_DOWN = 'Down';
    public const BREAK_END_ROUNDING_DIRECTION_TO_THE_NEAREST = 'ToTheNearest';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftStartRoundingDirectionAllowableValues()
    {
        return [
            self::SHIFT_START_ROUNDING_DIRECTION_NONE,
            self::SHIFT_START_ROUNDING_DIRECTION_UP,
            self::SHIFT_START_ROUNDING_DIRECTION_DOWN,
            self::SHIFT_START_ROUNDING_DIRECTION_TO_THE_NEAREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftEndRoundingDirectionAllowableValues()
    {
        return [
            self::SHIFT_END_ROUNDING_DIRECTION_NONE,
            self::SHIFT_END_ROUNDING_DIRECTION_UP,
            self::SHIFT_END_ROUNDING_DIRECTION_DOWN,
            self::SHIFT_END_ROUNDING_DIRECTION_TO_THE_NEAREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBreakStartRoundingDirectionAllowableValues()
    {
        return [
            self::BREAK_START_ROUNDING_DIRECTION_NONE,
            self::BREAK_START_ROUNDING_DIRECTION_UP,
            self::BREAK_START_ROUNDING_DIRECTION_DOWN,
            self::BREAK_START_ROUNDING_DIRECTION_TO_THE_NEAREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBreakEndRoundingDirectionAllowableValues()
    {
        return [
            self::BREAK_END_ROUNDING_DIRECTION_NONE,
            self::BREAK_END_ROUNDING_DIRECTION_UP,
            self::BREAK_END_ROUNDING_DIRECTION_DOWN,
            self::BREAK_END_ROUNDING_DIRECTION_TO_THE_NEAREST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('shift_start_rounding_direction', $data ?? [], null);
        $this->setIfExists('shift_start_rounding_interval', $data ?? [], null);
        $this->setIfExists('shift_end_rounding_direction', $data ?? [], null);
        $this->setIfExists('shift_end_rounding_interval', $data ?? [], null);
        $this->setIfExists('break_start_rounding_direction', $data ?? [], null);
        $this->setIfExists('break_start_rounding_interval', $data ?? [], null);
        $this->setIfExists('break_end_rounding_direction', $data ?? [], null);
        $this->setIfExists('break_end_rounding_interval', $data ?? [], null);
        $this->setIfExists('round_up_to_shift_start_time_rounding_interval', $data ?? [], null);
        $this->setIfExists('round_down_to_shift_start_time_rounding_interval', $data ?? [], null);
        $this->setIfExists('round_up_to_shift_end_time_rounding_interval', $data ?? [], null);
        $this->setIfExists('round_down_to_shift_end_time_rounding_interval', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShiftStartRoundingDirectionAllowableValues();
        if (!is_null($this->container['shift_start_rounding_direction']) && !in_array($this->container['shift_start_rounding_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shift_start_rounding_direction', must be one of '%s'",
                $this->container['shift_start_rounding_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShiftEndRoundingDirectionAllowableValues();
        if (!is_null($this->container['shift_end_rounding_direction']) && !in_array($this->container['shift_end_rounding_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shift_end_rounding_direction', must be one of '%s'",
                $this->container['shift_end_rounding_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBreakStartRoundingDirectionAllowableValues();
        if (!is_null($this->container['break_start_rounding_direction']) && !in_array($this->container['break_start_rounding_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'break_start_rounding_direction', must be one of '%s'",
                $this->container['break_start_rounding_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBreakEndRoundingDirectionAllowableValues();
        if (!is_null($this->container['break_end_rounding_direction']) && !in_array($this->container['break_end_rounding_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'break_end_rounding_direction', must be one of '%s'",
                $this->container['break_end_rounding_direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shift_start_rounding_direction
     *
     * @return string|null
     */
    public function getShiftStartRoundingDirection()
    {
        return $this->container['shift_start_rounding_direction'];
    }

    /**
     * Sets shift_start_rounding_direction
     *
     * @param string|null $shift_start_rounding_direction 
     *
     * @return self
     */
    public function setShiftStartRoundingDirection($shift_start_rounding_direction)
    {
        if (is_null($shift_start_rounding_direction)) {
            throw new \InvalidArgumentException('non-nullable shift_start_rounding_direction cannot be null');
        }
        $allowedValues = $this->getShiftStartRoundingDirectionAllowableValues();
        if (!in_array($shift_start_rounding_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shift_start_rounding_direction', must be one of '%s'",
                    $shift_start_rounding_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_start_rounding_direction'] = $shift_start_rounding_direction;

        return $this;
    }

    /**
     * Gets shift_start_rounding_interval
     *
     * @return int|null
     */
    public function getShiftStartRoundingInterval()
    {
        return $this->container['shift_start_rounding_interval'];
    }

    /**
     * Sets shift_start_rounding_interval
     *
     * @param int|null $shift_start_rounding_interval 
     *
     * @return self
     */
    public function setShiftStartRoundingInterval($shift_start_rounding_interval)
    {
        if (is_null($shift_start_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable shift_start_rounding_interval cannot be null');
        }
        $this->container['shift_start_rounding_interval'] = $shift_start_rounding_interval;

        return $this;
    }

    /**
     * Gets shift_end_rounding_direction
     *
     * @return string|null
     */
    public function getShiftEndRoundingDirection()
    {
        return $this->container['shift_end_rounding_direction'];
    }

    /**
     * Sets shift_end_rounding_direction
     *
     * @param string|null $shift_end_rounding_direction 
     *
     * @return self
     */
    public function setShiftEndRoundingDirection($shift_end_rounding_direction)
    {
        if (is_null($shift_end_rounding_direction)) {
            throw new \InvalidArgumentException('non-nullable shift_end_rounding_direction cannot be null');
        }
        $allowedValues = $this->getShiftEndRoundingDirectionAllowableValues();
        if (!in_array($shift_end_rounding_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shift_end_rounding_direction', must be one of '%s'",
                    $shift_end_rounding_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_end_rounding_direction'] = $shift_end_rounding_direction;

        return $this;
    }

    /**
     * Gets shift_end_rounding_interval
     *
     * @return int|null
     */
    public function getShiftEndRoundingInterval()
    {
        return $this->container['shift_end_rounding_interval'];
    }

    /**
     * Sets shift_end_rounding_interval
     *
     * @param int|null $shift_end_rounding_interval 
     *
     * @return self
     */
    public function setShiftEndRoundingInterval($shift_end_rounding_interval)
    {
        if (is_null($shift_end_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable shift_end_rounding_interval cannot be null');
        }
        $this->container['shift_end_rounding_interval'] = $shift_end_rounding_interval;

        return $this;
    }

    /**
     * Gets break_start_rounding_direction
     *
     * @return string|null
     */
    public function getBreakStartRoundingDirection()
    {
        return $this->container['break_start_rounding_direction'];
    }

    /**
     * Sets break_start_rounding_direction
     *
     * @param string|null $break_start_rounding_direction 
     *
     * @return self
     */
    public function setBreakStartRoundingDirection($break_start_rounding_direction)
    {
        if (is_null($break_start_rounding_direction)) {
            throw new \InvalidArgumentException('non-nullable break_start_rounding_direction cannot be null');
        }
        $allowedValues = $this->getBreakStartRoundingDirectionAllowableValues();
        if (!in_array($break_start_rounding_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'break_start_rounding_direction', must be one of '%s'",
                    $break_start_rounding_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['break_start_rounding_direction'] = $break_start_rounding_direction;

        return $this;
    }

    /**
     * Gets break_start_rounding_interval
     *
     * @return int|null
     */
    public function getBreakStartRoundingInterval()
    {
        return $this->container['break_start_rounding_interval'];
    }

    /**
     * Sets break_start_rounding_interval
     *
     * @param int|null $break_start_rounding_interval 
     *
     * @return self
     */
    public function setBreakStartRoundingInterval($break_start_rounding_interval)
    {
        if (is_null($break_start_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable break_start_rounding_interval cannot be null');
        }
        $this->container['break_start_rounding_interval'] = $break_start_rounding_interval;

        return $this;
    }

    /**
     * Gets break_end_rounding_direction
     *
     * @return string|null
     */
    public function getBreakEndRoundingDirection()
    {
        return $this->container['break_end_rounding_direction'];
    }

    /**
     * Sets break_end_rounding_direction
     *
     * @param string|null $break_end_rounding_direction 
     *
     * @return self
     */
    public function setBreakEndRoundingDirection($break_end_rounding_direction)
    {
        if (is_null($break_end_rounding_direction)) {
            throw new \InvalidArgumentException('non-nullable break_end_rounding_direction cannot be null');
        }
        $allowedValues = $this->getBreakEndRoundingDirectionAllowableValues();
        if (!in_array($break_end_rounding_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'break_end_rounding_direction', must be one of '%s'",
                    $break_end_rounding_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['break_end_rounding_direction'] = $break_end_rounding_direction;

        return $this;
    }

    /**
     * Gets break_end_rounding_interval
     *
     * @return int|null
     */
    public function getBreakEndRoundingInterval()
    {
        return $this->container['break_end_rounding_interval'];
    }

    /**
     * Sets break_end_rounding_interval
     *
     * @param int|null $break_end_rounding_interval 
     *
     * @return self
     */
    public function setBreakEndRoundingInterval($break_end_rounding_interval)
    {
        if (is_null($break_end_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable break_end_rounding_interval cannot be null');
        }
        $this->container['break_end_rounding_interval'] = $break_end_rounding_interval;

        return $this;
    }

    /**
     * Gets round_up_to_shift_start_time_rounding_interval
     *
     * @return int|null
     */
    public function getRoundUpToShiftStartTimeRoundingInterval()
    {
        return $this->container['round_up_to_shift_start_time_rounding_interval'];
    }

    /**
     * Sets round_up_to_shift_start_time_rounding_interval
     *
     * @param int|null $round_up_to_shift_start_time_rounding_interval 
     *
     * @return self
     */
    public function setRoundUpToShiftStartTimeRoundingInterval($round_up_to_shift_start_time_rounding_interval)
    {
        if (is_null($round_up_to_shift_start_time_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable round_up_to_shift_start_time_rounding_interval cannot be null');
        }
        $this->container['round_up_to_shift_start_time_rounding_interval'] = $round_up_to_shift_start_time_rounding_interval;

        return $this;
    }

    /**
     * Gets round_down_to_shift_start_time_rounding_interval
     *
     * @return int|null
     */
    public function getRoundDownToShiftStartTimeRoundingInterval()
    {
        return $this->container['round_down_to_shift_start_time_rounding_interval'];
    }

    /**
     * Sets round_down_to_shift_start_time_rounding_interval
     *
     * @param int|null $round_down_to_shift_start_time_rounding_interval 
     *
     * @return self
     */
    public function setRoundDownToShiftStartTimeRoundingInterval($round_down_to_shift_start_time_rounding_interval)
    {
        if (is_null($round_down_to_shift_start_time_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable round_down_to_shift_start_time_rounding_interval cannot be null');
        }
        $this->container['round_down_to_shift_start_time_rounding_interval'] = $round_down_to_shift_start_time_rounding_interval;

        return $this;
    }

    /**
     * Gets round_up_to_shift_end_time_rounding_interval
     *
     * @return int|null
     */
    public function getRoundUpToShiftEndTimeRoundingInterval()
    {
        return $this->container['round_up_to_shift_end_time_rounding_interval'];
    }

    /**
     * Sets round_up_to_shift_end_time_rounding_interval
     *
     * @param int|null $round_up_to_shift_end_time_rounding_interval 
     *
     * @return self
     */
    public function setRoundUpToShiftEndTimeRoundingInterval($round_up_to_shift_end_time_rounding_interval)
    {
        if (is_null($round_up_to_shift_end_time_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable round_up_to_shift_end_time_rounding_interval cannot be null');
        }
        $this->container['round_up_to_shift_end_time_rounding_interval'] = $round_up_to_shift_end_time_rounding_interval;

        return $this;
    }

    /**
     * Gets round_down_to_shift_end_time_rounding_interval
     *
     * @return int|null
     */
    public function getRoundDownToShiftEndTimeRoundingInterval()
    {
        return $this->container['round_down_to_shift_end_time_rounding_interval'];
    }

    /**
     * Sets round_down_to_shift_end_time_rounding_interval
     *
     * @param int|null $round_down_to_shift_end_time_rounding_interval 
     *
     * @return self
     */
    public function setRoundDownToShiftEndTimeRoundingInterval($round_down_to_shift_end_time_rounding_interval)
    {
        if (is_null($round_down_to_shift_end_time_rounding_interval)) {
            throw new \InvalidArgumentException('non-nullable round_down_to_shift_end_time_rounding_interval cannot be null');
        }
        $this->container['round_down_to_shift_end_time_rounding_interval'] = $round_down_to_shift_end_time_rounding_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


