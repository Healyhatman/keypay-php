<?php
/**
 * AuJournalItemResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuJournalItemResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuJournalItemResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuJournalItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'journal_item_type' => 'string',
        'external_account_reference_id' => 'string',
        'units' => 'float',
        'amount' => 'float',
        'amount_unrounded' => 'float',
        'reference' => 'string',
        'tax_code' => 'string',
        'account_code' => 'string',
        'account_name' => 'string',
        'details' => 'string',
        'location' => 'string',
        'is_credit' => 'bool',
        'is_debit' => 'bool',
        'location_external_reference_id' => 'string',
        'reporting_dimension_value_ids' => 'int[]',
        'reporting_dimension_value_names' => 'array<string,string[]>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'journal_item_type' => null,
        'external_account_reference_id' => null,
        'units' => 'double',
        'amount' => 'double',
        'amount_unrounded' => 'double',
        'reference' => null,
        'tax_code' => null,
        'account_code' => null,
        'account_name' => null,
        'details' => null,
        'location' => null,
        'is_credit' => null,
        'is_debit' => null,
        'location_external_reference_id' => null,
        'reporting_dimension_value_ids' => 'int32',
        'reporting_dimension_value_names' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'journal_item_type' => false,
		'external_account_reference_id' => false,
		'units' => false,
		'amount' => false,
		'amount_unrounded' => false,
		'reference' => false,
		'tax_code' => false,
		'account_code' => false,
		'account_name' => false,
		'details' => false,
		'location' => false,
		'is_credit' => false,
		'is_debit' => false,
		'location_external_reference_id' => false,
		'reporting_dimension_value_ids' => false,
		'reporting_dimension_value_names' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_item_type' => 'journalItemType',
        'external_account_reference_id' => 'externalAccountReferenceId',
        'units' => 'units',
        'amount' => 'amount',
        'amount_unrounded' => 'amountUnrounded',
        'reference' => 'reference',
        'tax_code' => 'taxCode',
        'account_code' => 'accountCode',
        'account_name' => 'accountName',
        'details' => 'details',
        'location' => 'location',
        'is_credit' => 'isCredit',
        'is_debit' => 'isDebit',
        'location_external_reference_id' => 'locationExternalReferenceId',
        'reporting_dimension_value_ids' => 'reportingDimensionValueIds',
        'reporting_dimension_value_names' => 'reportingDimensionValueNames'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_item_type' => 'setJournalItemType',
        'external_account_reference_id' => 'setExternalAccountReferenceId',
        'units' => 'setUnits',
        'amount' => 'setAmount',
        'amount_unrounded' => 'setAmountUnrounded',
        'reference' => 'setReference',
        'tax_code' => 'setTaxCode',
        'account_code' => 'setAccountCode',
        'account_name' => 'setAccountName',
        'details' => 'setDetails',
        'location' => 'setLocation',
        'is_credit' => 'setIsCredit',
        'is_debit' => 'setIsDebit',
        'location_external_reference_id' => 'setLocationExternalReferenceId',
        'reporting_dimension_value_ids' => 'setReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'setReportingDimensionValueNames'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_item_type' => 'getJournalItemType',
        'external_account_reference_id' => 'getExternalAccountReferenceId',
        'units' => 'getUnits',
        'amount' => 'getAmount',
        'amount_unrounded' => 'getAmountUnrounded',
        'reference' => 'getReference',
        'tax_code' => 'getTaxCode',
        'account_code' => 'getAccountCode',
        'account_name' => 'getAccountName',
        'details' => 'getDetails',
        'location' => 'getLocation',
        'is_credit' => 'getIsCredit',
        'is_debit' => 'getIsDebit',
        'location_external_reference_id' => 'getLocationExternalReferenceId',
        'reporting_dimension_value_ids' => 'getReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'getReportingDimensionValueNames'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JOURNAL_ITEM_TYPE_ASSET = 'Asset';
    public const JOURNAL_ITEM_TYPE_PAYG_EXPENSE = 'PaygExpense';
    public const JOURNAL_ITEM_TYPE_PAYG_LIABILITY = 'PaygLiability';
    public const JOURNAL_ITEM_TYPE_STUDENT_LOAN_LIABILITY = 'StudentLoanLiability';
    public const JOURNAL_ITEM_TYPE_POST_GRADUATE_STUDENT_LOAN_LIABILITY = 'PostGraduateStudentLoanLiability';
    public const JOURNAL_ITEM_TYPE_SUPER_EXPENSE = 'SuperExpense';
    public const JOURNAL_ITEM_TYPE_SUPER_LIABILITY = 'SuperLiability';
    public const JOURNAL_ITEM_TYPE_DEFAULT_EXPENSE = 'DefaultExpense';
    public const JOURNAL_ITEM_TYPE_WAGES_EXPENSE = 'WagesExpense';
    public const JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_EXPENSE = 'DefaultSalarySacrificeExpense';
    public const JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_LIABILITY = 'DefaultSalarySacrificeLiability';
    public const JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_EXPENSE = 'DefaultDeductionExpense';
    public const JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_LIABILITY = 'DefaultDeductionLiability';
    public const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_EXPENSE = 'DefaultEmployerLiabilityExpense';
    public const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_LIABILITY = 'DefaultEmployerLiabilityLiability';
    public const JOURNAL_ITEM_TYPE_DEDUCTION_EXPENSE = 'DeductionExpense';
    public const JOURNAL_ITEM_TYPE_DEDUCTION_LIABILITY = 'DeductionLiability';
    public const JOURNAL_ITEM_TYPE_DEDUCTION_ASSET = 'DeductionAsset';
    public const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYEE_EXPENSE = 'DefaultEmployeeExpense';
    public const JOURNAL_ITEM_TYPE_EMPLOYEE_EXPENSE = 'EmployeeExpense';
    public const JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_LIABILITY = 'PreTaxDeductionLiability';
    public const JOURNAL_ITEM_TYPE_POST_TAX_DEDUCTION_LIABILITY = 'PostTaxDeductionLiability';
    public const JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_EXPENSE = 'EmployerLiabilityExpense';
    public const JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_LIABILITY = 'EmployerLiabilityLiability';
    public const JOURNAL_ITEM_TYPE_W1_EXEMPT_WAGES_EXPENSE = 'W1ExemptWagesExpense';
    public const JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_ASSET = 'PreTaxDeductionAsset';
    public const JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_CREDIT = 'InterCompanyLoanCredit';
    public const JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_DEBIT = 'InterCompanyLoanDebit';
    public const JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_LIABILITY = 'LeaveAccrualLiability';
    public const JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_EXPENSE = 'LeaveAccrualExpense';
    public const JOURNAL_ITEM_TYPE_LEAVE_TAKEN_LIABILITY = 'LeaveTakenLiability';
    public const JOURNAL_ITEM_TYPE_LEAVE_TAKEN_EXPENSE = 'LeaveTakenExpense';
    public const JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_LIABILITY = 'LeaveAdjustmentLiability';
    public const JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_EXPENSE = 'LeaveAdjustmentExpense';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJournalItemTypeAllowableValues()
    {
        return [
            self::JOURNAL_ITEM_TYPE_ASSET,
            self::JOURNAL_ITEM_TYPE_PAYG_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PAYG_LIABILITY,
            self::JOURNAL_ITEM_TYPE_STUDENT_LOAN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_POST_GRADUATE_STUDENT_LOAN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_SUPER_EXPENSE,
            self::JOURNAL_ITEM_TYPE_SUPER_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EXPENSE,
            self::JOURNAL_ITEM_TYPE_WAGES_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_ASSET,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYEE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_EMPLOYEE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_POST_TAX_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_EXPENSE,
            self::JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_LIABILITY,
            self::JOURNAL_ITEM_TYPE_W1_EXEMPT_WAGES_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_ASSET,
            self::JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_CREDIT,
            self::JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_DEBIT,
            self::JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_EXPENSE,
            self::JOURNAL_ITEM_TYPE_LEAVE_TAKEN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_TAKEN_EXPENSE,
            self::JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_EXPENSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('journal_item_type', $data ?? [], null);
        $this->setIfExists('external_account_reference_id', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_unrounded', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('is_credit', $data ?? [], null);
        $this->setIfExists('is_debit', $data ?? [], null);
        $this->setIfExists('location_external_reference_id', $data ?? [], null);
        $this->setIfExists('reporting_dimension_value_ids', $data ?? [], null);
        $this->setIfExists('reporting_dimension_value_names', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJournalItemTypeAllowableValues();
        if (!is_null($this->container['journal_item_type']) && !in_array($this->container['journal_item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'journal_item_type', must be one of '%s'",
                $this->container['journal_item_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets journal_item_type
     *
     * @return string|null
     */
    public function getJournalItemType()
    {
        return $this->container['journal_item_type'];
    }

    /**
     * Sets journal_item_type
     *
     * @param string|null $journal_item_type 
     *
     * @return self
     */
    public function setJournalItemType($journal_item_type)
    {
        if (is_null($journal_item_type)) {
            throw new \InvalidArgumentException('non-nullable journal_item_type cannot be null');
        }
        $allowedValues = $this->getJournalItemTypeAllowableValues();
        if (!in_array($journal_item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'journal_item_type', must be one of '%s'",
                    $journal_item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['journal_item_type'] = $journal_item_type;

        return $this;
    }

    /**
     * Gets external_account_reference_id
     *
     * @return string|null
     */
    public function getExternalAccountReferenceId()
    {
        return $this->container['external_account_reference_id'];
    }

    /**
     * Sets external_account_reference_id
     *
     * @param string|null $external_account_reference_id 
     *
     * @return self
     */
    public function setExternalAccountReferenceId($external_account_reference_id)
    {
        if (is_null($external_account_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_account_reference_id cannot be null');
        }
        $this->container['external_account_reference_id'] = $external_account_reference_id;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_unrounded
     *
     * @return float|null
     */
    public function getAmountUnrounded()
    {
        return $this->container['amount_unrounded'];
    }

    /**
     * Sets amount_unrounded
     *
     * @param float|null $amount_unrounded 
     *
     * @return self
     */
    public function setAmountUnrounded($amount_unrounded)
    {
        if (is_null($amount_unrounded)) {
            throw new \InvalidArgumentException('non-nullable amount_unrounded cannot be null');
        }
        $this->container['amount_unrounded'] = $amount_unrounded;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference 
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code 
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string|null $account_code 
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name 
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string|null $details 
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location 
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets is_credit
     *
     * @return bool|null
     */
    public function getIsCredit()
    {
        return $this->container['is_credit'];
    }

    /**
     * Sets is_credit
     *
     * @param bool|null $is_credit 
     *
     * @return self
     */
    public function setIsCredit($is_credit)
    {
        if (is_null($is_credit)) {
            throw new \InvalidArgumentException('non-nullable is_credit cannot be null');
        }
        $this->container['is_credit'] = $is_credit;

        return $this;
    }

    /**
     * Gets is_debit
     *
     * @return bool|null
     */
    public function getIsDebit()
    {
        return $this->container['is_debit'];
    }

    /**
     * Sets is_debit
     *
     * @param bool|null $is_debit 
     *
     * @return self
     */
    public function setIsDebit($is_debit)
    {
        if (is_null($is_debit)) {
            throw new \InvalidArgumentException('non-nullable is_debit cannot be null');
        }
        $this->container['is_debit'] = $is_debit;

        return $this;
    }

    /**
     * Gets location_external_reference_id
     *
     * @return string|null
     */
    public function getLocationExternalReferenceId()
    {
        return $this->container['location_external_reference_id'];
    }

    /**
     * Sets location_external_reference_id
     *
     * @param string|null $location_external_reference_id 
     *
     * @return self
     */
    public function setLocationExternalReferenceId($location_external_reference_id)
    {
        if (is_null($location_external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable location_external_reference_id cannot be null');
        }
        $this->container['location_external_reference_id'] = $location_external_reference_id;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_ids
     *
     * @return int[]|null
     */
    public function getReportingDimensionValueIds()
    {
        return $this->container['reporting_dimension_value_ids'];
    }

    /**
     * Sets reporting_dimension_value_ids
     *
     * @param int[]|null $reporting_dimension_value_ids Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return self
     */
    public function setReportingDimensionValueIds($reporting_dimension_value_ids)
    {
        if (is_null($reporting_dimension_value_ids)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_value_ids cannot be null');
        }
        $this->container['reporting_dimension_value_ids'] = $reporting_dimension_value_ids;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_names
     *
     * @return array<string,string[]>|null
     */
    public function getReportingDimensionValueNames()
    {
        return $this->container['reporting_dimension_value_names'];
    }

    /**
     * Sets reporting_dimension_value_names
     *
     * @param array<string,string[]>|null $reporting_dimension_value_names Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { \"Department\": [\"Accounting\"], \"Job Code\": [\"JC1\"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return self
     */
    public function setReportingDimensionValueNames($reporting_dimension_value_names)
    {
        if (is_null($reporting_dimension_value_names)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_value_names cannot be null');
        }
        $this->container['reporting_dimension_value_names'] = $reporting_dimension_value_names;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


