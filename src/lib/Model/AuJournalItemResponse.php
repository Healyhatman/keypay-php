<?php
/**
 * AuJournalItemResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuJournalItemResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuJournalItemResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuJournalItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'journal_item_type' => 'string',
        'external_account_reference_id' => 'string',
        'units' => 'double',
        'amount' => 'double',
        'amount_unrounded' => 'double',
        'reference' => 'string',
        'tax_code' => 'string',
        'account_code' => 'string',
        'account_name' => 'string',
        'details' => 'string',
        'location' => 'string',
        'is_credit' => 'bool',
        'is_debit' => 'bool',
        'location_external_reference_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'journal_item_type' => null,
        'external_account_reference_id' => null,
        'units' => 'double',
        'amount' => 'double',
        'amount_unrounded' => 'double',
        'reference' => null,
        'tax_code' => null,
        'account_code' => null,
        'account_name' => null,
        'details' => null,
        'location' => null,
        'is_credit' => null,
        'is_debit' => null,
        'location_external_reference_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_item_type' => 'journalItemType',
        'external_account_reference_id' => 'externalAccountReferenceId',
        'units' => 'units',
        'amount' => 'amount',
        'amount_unrounded' => 'amountUnrounded',
        'reference' => 'reference',
        'tax_code' => 'taxCode',
        'account_code' => 'accountCode',
        'account_name' => 'accountName',
        'details' => 'details',
        'location' => 'location',
        'is_credit' => 'isCredit',
        'is_debit' => 'isDebit',
        'location_external_reference_id' => 'locationExternalReferenceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_item_type' => 'setJournalItemType',
        'external_account_reference_id' => 'setExternalAccountReferenceId',
        'units' => 'setUnits',
        'amount' => 'setAmount',
        'amount_unrounded' => 'setAmountUnrounded',
        'reference' => 'setReference',
        'tax_code' => 'setTaxCode',
        'account_code' => 'setAccountCode',
        'account_name' => 'setAccountName',
        'details' => 'setDetails',
        'location' => 'setLocation',
        'is_credit' => 'setIsCredit',
        'is_debit' => 'setIsDebit',
        'location_external_reference_id' => 'setLocationExternalReferenceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_item_type' => 'getJournalItemType',
        'external_account_reference_id' => 'getExternalAccountReferenceId',
        'units' => 'getUnits',
        'amount' => 'getAmount',
        'amount_unrounded' => 'getAmountUnrounded',
        'reference' => 'getReference',
        'tax_code' => 'getTaxCode',
        'account_code' => 'getAccountCode',
        'account_name' => 'getAccountName',
        'details' => 'getDetails',
        'location' => 'getLocation',
        'is_credit' => 'getIsCredit',
        'is_debit' => 'getIsDebit',
        'location_external_reference_id' => 'getLocationExternalReferenceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JOURNAL_ITEM_TYPE_ASSET = 'Asset';
    const JOURNAL_ITEM_TYPE_PAYG_EXPENSE = 'PaygExpense';
    const JOURNAL_ITEM_TYPE_PAYG_LIABILITY = 'PaygLiability';
    const JOURNAL_ITEM_TYPE_STUDENT_LOAN_LIABILITY = 'StudentLoanLiability';
    const JOURNAL_ITEM_TYPE_POST_GRADUATE_STUDENT_LOAN_LIABILITY = 'PostGraduateStudentLoanLiability';
    const JOURNAL_ITEM_TYPE_SUPER_EXPENSE = 'SuperExpense';
    const JOURNAL_ITEM_TYPE_SUPER_LIABILITY = 'SuperLiability';
    const JOURNAL_ITEM_TYPE_DEFAULT_EXPENSE = 'DefaultExpense';
    const JOURNAL_ITEM_TYPE_WAGES_EXPENSE = 'WagesExpense';
    const JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_EXPENSE = 'DefaultSalarySacrificeExpense';
    const JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_LIABILITY = 'DefaultSalarySacrificeLiability';
    const JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_EXPENSE = 'DefaultDeductionExpense';
    const JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_LIABILITY = 'DefaultDeductionLiability';
    const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_EXPENSE = 'DefaultEmployerLiabilityExpense';
    const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_LIABILITY = 'DefaultEmployerLiabilityLiability';
    const JOURNAL_ITEM_TYPE_DEDUCTION_EXPENSE = 'DeductionExpense';
    const JOURNAL_ITEM_TYPE_DEDUCTION_LIABILITY = 'DeductionLiability';
    const JOURNAL_ITEM_TYPE_DEDUCTION_ASSET = 'DeductionAsset';
    const JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYEE_EXPENSE = 'DefaultEmployeeExpense';
    const JOURNAL_ITEM_TYPE_EMPLOYEE_EXPENSE = 'EmployeeExpense';
    const JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_LIABILITY = 'PreTaxDeductionLiability';
    const JOURNAL_ITEM_TYPE_POST_TAX_DEDUCTION_LIABILITY = 'PostTaxDeductionLiability';
    const JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_EXPENSE = 'EmployerLiabilityExpense';
    const JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_LIABILITY = 'EmployerLiabilityLiability';
    const JOURNAL_ITEM_TYPE_W1_EXEMPT_WAGES_EXPENSE = 'W1ExemptWagesExpense';
    const JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_ASSET = 'PreTaxDeductionAsset';
    const JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_CREDIT = 'InterCompanyLoanCredit';
    const JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_DEBIT = 'InterCompanyLoanDebit';
    const JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_LIABILITY = 'LeaveAccrualLiability';
    const JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_EXPENSE = 'LeaveAccrualExpense';
    const JOURNAL_ITEM_TYPE_LEAVE_TAKEN_LIABILITY = 'LeaveTakenLiability';
    const JOURNAL_ITEM_TYPE_LEAVE_TAKEN_EXPENSE = 'LeaveTakenExpense';
    const JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_LIABILITY = 'LeaveAdjustmentLiability';
    const JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_EXPENSE = 'LeaveAdjustmentExpense';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJournalItemTypeAllowableValues()
    {
        return [
            self::JOURNAL_ITEM_TYPE_ASSET,
            self::JOURNAL_ITEM_TYPE_PAYG_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PAYG_LIABILITY,
            self::JOURNAL_ITEM_TYPE_STUDENT_LOAN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_POST_GRADUATE_STUDENT_LOAN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_SUPER_EXPENSE,
            self::JOURNAL_ITEM_TYPE_SUPER_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EXPENSE,
            self::JOURNAL_ITEM_TYPE_WAGES_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_SALARY_SACRIFICE_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYER_LIABILITY_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_EXPENSE,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_DEDUCTION_ASSET,
            self::JOURNAL_ITEM_TYPE_DEFAULT_EMPLOYEE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_EMPLOYEE_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_POST_TAX_DEDUCTION_LIABILITY,
            self::JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_EXPENSE,
            self::JOURNAL_ITEM_TYPE_EMPLOYER_LIABILITY_LIABILITY,
            self::JOURNAL_ITEM_TYPE_W1_EXEMPT_WAGES_EXPENSE,
            self::JOURNAL_ITEM_TYPE_PRE_TAX_DEDUCTION_ASSET,
            self::JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_CREDIT,
            self::JOURNAL_ITEM_TYPE_INTER_COMPANY_LOAN_DEBIT,
            self::JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_ACCRUAL_EXPENSE,
            self::JOURNAL_ITEM_TYPE_LEAVE_TAKEN_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_TAKEN_EXPENSE,
            self::JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_LIABILITY,
            self::JOURNAL_ITEM_TYPE_LEAVE_ADJUSTMENT_EXPENSE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['journal_item_type'] = isset($data['journal_item_type']) ? $data['journal_item_type'] : null;
        $this->container['external_account_reference_id'] = isset($data['external_account_reference_id']) ? $data['external_account_reference_id'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_unrounded'] = isset($data['amount_unrounded']) ? $data['amount_unrounded'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['is_credit'] = isset($data['is_credit']) ? $data['is_credit'] : null;
        $this->container['is_debit'] = isset($data['is_debit']) ? $data['is_debit'] : null;
        $this->container['location_external_reference_id'] = isset($data['location_external_reference_id']) ? $data['location_external_reference_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJournalItemTypeAllowableValues();
        if (!is_null($this->container['journal_item_type']) && !in_array($this->container['journal_item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'journal_item_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets journal_item_type
     *
     * @return string
     */
    public function getJournalItemType()
    {
        return $this->container['journal_item_type'];
    }

    /**
     * Sets journal_item_type
     *
     * @param string $journal_item_type 
     *
     * @return $this
     */
    public function setJournalItemType($journal_item_type)
    {
        $allowedValues = $this->getJournalItemTypeAllowableValues();
        if (!is_null($journal_item_type) && !in_array($journal_item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'journal_item_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['journal_item_type'] = $journal_item_type;

        return $this;
    }

    /**
     * Gets external_account_reference_id
     *
     * @return string
     */
    public function getExternalAccountReferenceId()
    {
        return $this->container['external_account_reference_id'];
    }

    /**
     * Sets external_account_reference_id
     *
     * @param string $external_account_reference_id 
     *
     * @return $this
     */
    public function setExternalAccountReferenceId($external_account_reference_id)
    {
        $this->container['external_account_reference_id'] = $external_account_reference_id;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units 
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount 
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_unrounded
     *
     * @return double
     */
    public function getAmountUnrounded()
    {
        return $this->container['amount_unrounded'];
    }

    /**
     * Sets amount_unrounded
     *
     * @param double $amount_unrounded 
     *
     * @return $this
     */
    public function setAmountUnrounded($amount_unrounded)
    {
        $this->container['amount_unrounded'] = $amount_unrounded;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference 
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code 
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string $account_code 
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name 
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details 
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location 
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets is_credit
     *
     * @return bool
     */
    public function getIsCredit()
    {
        return $this->container['is_credit'];
    }

    /**
     * Sets is_credit
     *
     * @param bool $is_credit 
     *
     * @return $this
     */
    public function setIsCredit($is_credit)
    {
        $this->container['is_credit'] = $is_credit;

        return $this;
    }

    /**
     * Gets is_debit
     *
     * @return bool
     */
    public function getIsDebit()
    {
        return $this->container['is_debit'];
    }

    /**
     * Sets is_debit
     *
     * @param bool $is_debit 
     *
     * @return $this
     */
    public function setIsDebit($is_debit)
    {
        $this->container['is_debit'] = $is_debit;

        return $this;
    }

    /**
     * Gets location_external_reference_id
     *
     * @return string
     */
    public function getLocationExternalReferenceId()
    {
        return $this->container['location_external_reference_id'];
    }

    /**
     * Sets location_external_reference_id
     *
     * @param string $location_external_reference_id 
     *
     * @return $this
     */
    public function setLocationExternalReferenceId($location_external_reference_id)
    {
        $this->container['location_external_reference_id'] = $location_external_reference_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


