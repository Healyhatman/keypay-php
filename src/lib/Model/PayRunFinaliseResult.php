<?php
/**
 * PayRunFinaliseResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayRunFinaliseResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayRunFinaliseResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayRunFinaliseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'journal_export_result' => '\OpenAPI\Client\Model\JournalExportResult',
        'journal_export_failed_message' => 'string',
        'removed_employees' => 'int[]',
        'notifications' => '\OpenAPI\Client\Model\PaySlipNotificationResponse',
        'pay_slips_published' => 'bool',
        'publish_preference' => 'string',
        'date_paid' => '\DateTime',
        'export_journals_preference' => 'bool',
        'publish_pay_slips_scheduled_date_time_utc' => '\DateTime',
        'pay_run_lodgement_job_id' => 'string',
        'pension_sync_job_id' => 'string',
        'active_employees' => 'int',
        'publish_pay_slips' => 'string',
        'publish_preference_time_of_day' => 'string',
        'export_journals' => 'string',
        'export_journals_scheduled_date_time_utc' => '\DateTime',
        'lodge_pay_run' => 'string',
        'lodge_pay_run_scheduled_date_time_utc' => '\DateTime',
        'run_report_packs' => 'string',
        'run_report_packs_scheduled_date_time_utc' => '\DateTime',
        'are_report_packs_processed' => 'bool',
        'selected_report_packs' => 'string[]',
        'submit_to_pension_sync' => 'string',
        'submit_to_pension_sync_scheduled_date_time_utc' => '\DateTime',
        'is_first_finalisation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'journal_export_result' => null,
        'journal_export_failed_message' => null,
        'removed_employees' => 'int32',
        'notifications' => null,
        'pay_slips_published' => null,
        'publish_preference' => null,
        'date_paid' => 'date-time',
        'export_journals_preference' => null,
        'publish_pay_slips_scheduled_date_time_utc' => 'date-time',
        'pay_run_lodgement_job_id' => 'uuid',
        'pension_sync_job_id' => 'uuid',
        'active_employees' => 'int32',
        'publish_pay_slips' => null,
        'publish_preference_time_of_day' => null,
        'export_journals' => null,
        'export_journals_scheduled_date_time_utc' => 'date-time',
        'lodge_pay_run' => null,
        'lodge_pay_run_scheduled_date_time_utc' => 'date-time',
        'run_report_packs' => null,
        'run_report_packs_scheduled_date_time_utc' => 'date-time',
        'are_report_packs_processed' => null,
        'selected_report_packs' => null,
        'submit_to_pension_sync' => null,
        'submit_to_pension_sync_scheduled_date_time_utc' => 'date-time',
        'is_first_finalisation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'journal_export_result' => false,
		'journal_export_failed_message' => false,
		'removed_employees' => false,
		'notifications' => false,
		'pay_slips_published' => false,
		'publish_preference' => false,
		'date_paid' => false,
		'export_journals_preference' => false,
		'publish_pay_slips_scheduled_date_time_utc' => false,
		'pay_run_lodgement_job_id' => false,
		'pension_sync_job_id' => false,
		'active_employees' => false,
		'publish_pay_slips' => false,
		'publish_preference_time_of_day' => false,
		'export_journals' => false,
		'export_journals_scheduled_date_time_utc' => false,
		'lodge_pay_run' => false,
		'lodge_pay_run_scheduled_date_time_utc' => false,
		'run_report_packs' => false,
		'run_report_packs_scheduled_date_time_utc' => false,
		'are_report_packs_processed' => false,
		'selected_report_packs' => false,
		'submit_to_pension_sync' => false,
		'submit_to_pension_sync_scheduled_date_time_utc' => false,
		'is_first_finalisation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_export_result' => 'journalExportResult',
        'journal_export_failed_message' => 'journalExportFailedMessage',
        'removed_employees' => 'removedEmployees',
        'notifications' => 'notifications',
        'pay_slips_published' => 'paySlipsPublished',
        'publish_preference' => 'publishPreference',
        'date_paid' => 'datePaid',
        'export_journals_preference' => 'exportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'publishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'payRunLodgementJobId',
        'pension_sync_job_id' => 'pensionSyncJobId',
        'active_employees' => 'activeEmployees',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_preference_time_of_day' => 'publishPreferenceTimeOfDay',
        'export_journals' => 'exportJournals',
        'export_journals_scheduled_date_time_utc' => 'exportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'lodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'runReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'runReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'areReportPacksProcessed',
        'selected_report_packs' => 'selectedReportPacks',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'submitToPensionSyncScheduledDateTimeUtc',
        'is_first_finalisation' => 'isFirstFinalisation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_export_result' => 'setJournalExportResult',
        'journal_export_failed_message' => 'setJournalExportFailedMessage',
        'removed_employees' => 'setRemovedEmployees',
        'notifications' => 'setNotifications',
        'pay_slips_published' => 'setPaySlipsPublished',
        'publish_preference' => 'setPublishPreference',
        'date_paid' => 'setDatePaid',
        'export_journals_preference' => 'setExportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'setPublishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'setPayRunLodgementJobId',
        'pension_sync_job_id' => 'setPensionSyncJobId',
        'active_employees' => 'setActiveEmployees',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_preference_time_of_day' => 'setPublishPreferenceTimeOfDay',
        'export_journals' => 'setExportJournals',
        'export_journals_scheduled_date_time_utc' => 'setExportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'setLodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'setRunReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'setRunReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'setAreReportPacksProcessed',
        'selected_report_packs' => 'setSelectedReportPacks',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'setSubmitToPensionSyncScheduledDateTimeUtc',
        'is_first_finalisation' => 'setIsFirstFinalisation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_export_result' => 'getJournalExportResult',
        'journal_export_failed_message' => 'getJournalExportFailedMessage',
        'removed_employees' => 'getRemovedEmployees',
        'notifications' => 'getNotifications',
        'pay_slips_published' => 'getPaySlipsPublished',
        'publish_preference' => 'getPublishPreference',
        'date_paid' => 'getDatePaid',
        'export_journals_preference' => 'getExportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'getPublishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'getPayRunLodgementJobId',
        'pension_sync_job_id' => 'getPensionSyncJobId',
        'active_employees' => 'getActiveEmployees',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_preference_time_of_day' => 'getPublishPreferenceTimeOfDay',
        'export_journals' => 'getExportJournals',
        'export_journals_scheduled_date_time_utc' => 'getExportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'getLodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'getRunReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'getRunReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'getAreReportPacksProcessed',
        'selected_report_packs' => 'getSelectedReportPacks',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'getSubmitToPensionSyncScheduledDateTimeUtc',
        'is_first_finalisation' => 'getIsFirstFinalisation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PUBLISH_PREFERENCE_MANUAL = 'Manual';
    public const PUBLISH_PREFERENCE_IMMEDIATE = 'Immediate';
    public const PUBLISH_PREFERENCE_SCHEDULED = 'Scheduled';
    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    public const EXPORT_JOURNALS_MANUAL = 'Manual';
    public const EXPORT_JOURNALS_IMMEDIATE = 'Immediate';
    public const EXPORT_JOURNALS_SCHEDULED = 'Scheduled';
    public const LODGE_PAY_RUN_MANUAL = 'Manual';
    public const LODGE_PAY_RUN_IMMEDIATE = 'Immediate';
    public const LODGE_PAY_RUN_SCHEDULED = 'Scheduled';
    public const RUN_REPORT_PACKS_MANUAL = 'Manual';
    public const RUN_REPORT_PACKS_IMMEDIATE = 'Immediate';
    public const RUN_REPORT_PACKS_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_MANUAL = 'Manual';
    public const SUBMIT_TO_PENSION_SYNC_IMMEDIATE = 'Immediate';
    public const SUBMIT_TO_PENSION_SYNC_SCHEDULED = 'Scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPreferenceAllowableValues()
    {
        return [
            self::PUBLISH_PREFERENCE_MANUAL,
            self::PUBLISH_PREFERENCE_IMMEDIATE,
            self::PUBLISH_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_MANUAL,
            self::EXPORT_JOURNALS_IMMEDIATE,
            self::EXPORT_JOURNALS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_MANUAL,
            self::LODGE_PAY_RUN_IMMEDIATE,
            self::LODGE_PAY_RUN_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_MANUAL,
            self::RUN_REPORT_PACKS_IMMEDIATE,
            self::RUN_REPORT_PACKS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('journal_export_result', $data ?? [], null);
        $this->setIfExists('journal_export_failed_message', $data ?? [], null);
        $this->setIfExists('removed_employees', $data ?? [], null);
        $this->setIfExists('notifications', $data ?? [], null);
        $this->setIfExists('pay_slips_published', $data ?? [], null);
        $this->setIfExists('publish_preference', $data ?? [], null);
        $this->setIfExists('date_paid', $data ?? [], null);
        $this->setIfExists('export_journals_preference', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_scheduled_date_time_utc', $data ?? [], null);
        $this->setIfExists('pay_run_lodgement_job_id', $data ?? [], null);
        $this->setIfExists('pension_sync_job_id', $data ?? [], null);
        $this->setIfExists('active_employees', $data ?? [], null);
        $this->setIfExists('publish_pay_slips', $data ?? [], null);
        $this->setIfExists('publish_preference_time_of_day', $data ?? [], null);
        $this->setIfExists('export_journals', $data ?? [], null);
        $this->setIfExists('export_journals_scheduled_date_time_utc', $data ?? [], null);
        $this->setIfExists('lodge_pay_run', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_scheduled_date_time_utc', $data ?? [], null);
        $this->setIfExists('run_report_packs', $data ?? [], null);
        $this->setIfExists('run_report_packs_scheduled_date_time_utc', $data ?? [], null);
        $this->setIfExists('are_report_packs_processed', $data ?? [], null);
        $this->setIfExists('selected_report_packs', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_scheduled_date_time_utc', $data ?? [], null);
        $this->setIfExists('is_first_finalisation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPublishPreferenceAllowableValues();
        if (!is_null($this->container['publish_preference']) && !in_array($this->container['publish_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_preference', must be one of '%s'",
                $this->container['publish_preference'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($this->container['publish_pay_slips']) && !in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                $this->container['publish_pay_slips'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsAllowableValues();
        if (!is_null($this->container['export_journals']) && !in_array($this->container['export_journals'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_journals', must be one of '%s'",
                $this->container['export_journals'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (!is_null($this->container['lodge_pay_run']) && !in_array($this->container['lodge_pay_run'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lodge_pay_run', must be one of '%s'",
                $this->container['lodge_pay_run'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (!is_null($this->container['run_report_packs']) && !in_array($this->container['run_report_packs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'run_report_packs', must be one of '%s'",
                $this->container['run_report_packs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (!is_null($this->container['submit_to_pension_sync']) && !in_array($this->container['submit_to_pension_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'submit_to_pension_sync', must be one of '%s'",
                $this->container['submit_to_pension_sync'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets journal_export_result
     *
     * @return \OpenAPI\Client\Model\JournalExportResult|null
     */
    public function getJournalExportResult()
    {
        return $this->container['journal_export_result'];
    }

    /**
     * Sets journal_export_result
     *
     * @param \OpenAPI\Client\Model\JournalExportResult|null $journal_export_result journal_export_result
     *
     * @return self
     */
    public function setJournalExportResult($journal_export_result)
    {
        if (is_null($journal_export_result)) {
            throw new \InvalidArgumentException('non-nullable journal_export_result cannot be null');
        }
        $this->container['journal_export_result'] = $journal_export_result;

        return $this;
    }

    /**
     * Gets journal_export_failed_message
     *
     * @return string|null
     */
    public function getJournalExportFailedMessage()
    {
        return $this->container['journal_export_failed_message'];
    }

    /**
     * Sets journal_export_failed_message
     *
     * @param string|null $journal_export_failed_message 
     *
     * @return self
     */
    public function setJournalExportFailedMessage($journal_export_failed_message)
    {
        if (is_null($journal_export_failed_message)) {
            throw new \InvalidArgumentException('non-nullable journal_export_failed_message cannot be null');
        }
        $this->container['journal_export_failed_message'] = $journal_export_failed_message;

        return $this;
    }

    /**
     * Gets removed_employees
     *
     * @return int[]|null
     */
    public function getRemovedEmployees()
    {
        return $this->container['removed_employees'];
    }

    /**
     * Sets removed_employees
     *
     * @param int[]|null $removed_employees 
     *
     * @return self
     */
    public function setRemovedEmployees($removed_employees)
    {
        if (is_null($removed_employees)) {
            throw new \InvalidArgumentException('non-nullable removed_employees cannot be null');
        }
        $this->container['removed_employees'] = $removed_employees;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \OpenAPI\Client\Model\PaySlipNotificationResponse|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \OpenAPI\Client\Model\PaySlipNotificationResponse|null $notifications notifications
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        if (is_null($notifications)) {
            throw new \InvalidArgumentException('non-nullable notifications cannot be null');
        }
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets pay_slips_published
     *
     * @return bool|null
     */
    public function getPaySlipsPublished()
    {
        return $this->container['pay_slips_published'];
    }

    /**
     * Sets pay_slips_published
     *
     * @param bool|null $pay_slips_published 
     *
     * @return self
     */
    public function setPaySlipsPublished($pay_slips_published)
    {
        if (is_null($pay_slips_published)) {
            throw new \InvalidArgumentException('non-nullable pay_slips_published cannot be null');
        }
        $this->container['pay_slips_published'] = $pay_slips_published;

        return $this;
    }

    /**
     * Gets publish_preference
     *
     * @return string|null
     */
    public function getPublishPreference()
    {
        return $this->container['publish_preference'];
    }

    /**
     * Sets publish_preference
     *
     * @param string|null $publish_preference 
     *
     * @return self
     */
    public function setPublishPreference($publish_preference)
    {
        if (is_null($publish_preference)) {
            throw new \InvalidArgumentException('non-nullable publish_preference cannot be null');
        }
        $allowedValues = $this->getPublishPreferenceAllowableValues();
        if (!in_array($publish_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_preference', must be one of '%s'",
                    $publish_preference,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_preference'] = $publish_preference;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime|null
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime|null $date_paid 
     *
     * @return self
     */
    public function setDatePaid($date_paid)
    {
        if (is_null($date_paid)) {
            throw new \InvalidArgumentException('non-nullable date_paid cannot be null');
        }
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets export_journals_preference
     *
     * @return bool|null
     */
    public function getExportJournalsPreference()
    {
        return $this->container['export_journals_preference'];
    }

    /**
     * Sets export_journals_preference
     *
     * @param bool|null $export_journals_preference 
     *
     * @return self
     */
    public function setExportJournalsPreference($export_journals_preference)
    {
        if (is_null($export_journals_preference)) {
            throw new \InvalidArgumentException('non-nullable export_journals_preference cannot be null');
        }
        $this->container['export_journals_preference'] = $export_journals_preference;

        return $this;
    }

    /**
     * Gets publish_pay_slips_scheduled_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getPublishPaySlipsScheduledDateTimeUtc()
    {
        return $this->container['publish_pay_slips_scheduled_date_time_utc'];
    }

    /**
     * Sets publish_pay_slips_scheduled_date_time_utc
     *
     * @param \DateTime|null $publish_pay_slips_scheduled_date_time_utc 
     *
     * @return self
     */
    public function setPublishPaySlipsScheduledDateTimeUtc($publish_pay_slips_scheduled_date_time_utc)
    {
        if (is_null($publish_pay_slips_scheduled_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_scheduled_date_time_utc cannot be null');
        }
        $this->container['publish_pay_slips_scheduled_date_time_utc'] = $publish_pay_slips_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets pay_run_lodgement_job_id
     *
     * @return string|null
     */
    public function getPayRunLodgementJobId()
    {
        return $this->container['pay_run_lodgement_job_id'];
    }

    /**
     * Sets pay_run_lodgement_job_id
     *
     * @param string|null $pay_run_lodgement_job_id 
     *
     * @return self
     */
    public function setPayRunLodgementJobId($pay_run_lodgement_job_id)
    {
        if (is_null($pay_run_lodgement_job_id)) {
            throw new \InvalidArgumentException('non-nullable pay_run_lodgement_job_id cannot be null');
        }
        $this->container['pay_run_lodgement_job_id'] = $pay_run_lodgement_job_id;

        return $this;
    }

    /**
     * Gets pension_sync_job_id
     *
     * @return string|null
     */
    public function getPensionSyncJobId()
    {
        return $this->container['pension_sync_job_id'];
    }

    /**
     * Sets pension_sync_job_id
     *
     * @param string|null $pension_sync_job_id 
     *
     * @return self
     */
    public function setPensionSyncJobId($pension_sync_job_id)
    {
        if (is_null($pension_sync_job_id)) {
            throw new \InvalidArgumentException('non-nullable pension_sync_job_id cannot be null');
        }
        $this->container['pension_sync_job_id'] = $pension_sync_job_id;

        return $this;
    }

    /**
     * Gets active_employees
     *
     * @return int|null
     */
    public function getActiveEmployees()
    {
        return $this->container['active_employees'];
    }

    /**
     * Sets active_employees
     *
     * @param int|null $active_employees 
     *
     * @return self
     */
    public function setActiveEmployees($active_employees)
    {
        if (is_null($active_employees)) {
            throw new \InvalidArgumentException('non-nullable active_employees cannot be null');
        }
        $this->container['active_employees'] = $active_employees;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string|null
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string|null $publish_pay_slips 
     *
     * @return self
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        if (is_null($publish_pay_slips)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                    $publish_pay_slips,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_preference_time_of_day
     *
     * @return string|null
     */
    public function getPublishPreferenceTimeOfDay()
    {
        return $this->container['publish_preference_time_of_day'];
    }

    /**
     * Sets publish_preference_time_of_day
     *
     * @param string|null $publish_preference_time_of_day 
     *
     * @return self
     */
    public function setPublishPreferenceTimeOfDay($publish_preference_time_of_day)
    {
        if (is_null($publish_preference_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable publish_preference_time_of_day cannot be null');
        }
        $this->container['publish_preference_time_of_day'] = $publish_preference_time_of_day;

        return $this;
    }

    /**
     * Gets export_journals
     *
     * @return string|null
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param string|null $export_journals 
     *
     * @return self
     */
    public function setExportJournals($export_journals)
    {
        if (is_null($export_journals)) {
            throw new \InvalidArgumentException('non-nullable export_journals cannot be null');
        }
        $allowedValues = $this->getExportJournalsAllowableValues();
        if (!in_array($export_journals, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_journals', must be one of '%s'",
                    $export_journals,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets export_journals_scheduled_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getExportJournalsScheduledDateTimeUtc()
    {
        return $this->container['export_journals_scheduled_date_time_utc'];
    }

    /**
     * Sets export_journals_scheduled_date_time_utc
     *
     * @param \DateTime|null $export_journals_scheduled_date_time_utc 
     *
     * @return self
     */
    public function setExportJournalsScheduledDateTimeUtc($export_journals_scheduled_date_time_utc)
    {
        if (is_null($export_journals_scheduled_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable export_journals_scheduled_date_time_utc cannot be null');
        }
        $this->container['export_journals_scheduled_date_time_utc'] = $export_journals_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return string|null
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param string|null $lodge_pay_run 
     *
     * @return self
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        if (is_null($lodge_pay_run)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run cannot be null');
        }
        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (!in_array($lodge_pay_run, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lodge_pay_run', must be one of '%s'",
                    $lodge_pay_run,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_scheduled_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getLodgePayRunScheduledDateTimeUtc()
    {
        return $this->container['lodge_pay_run_scheduled_date_time_utc'];
    }

    /**
     * Sets lodge_pay_run_scheduled_date_time_utc
     *
     * @param \DateTime|null $lodge_pay_run_scheduled_date_time_utc 
     *
     * @return self
     */
    public function setLodgePayRunScheduledDateTimeUtc($lodge_pay_run_scheduled_date_time_utc)
    {
        if (is_null($lodge_pay_run_scheduled_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_scheduled_date_time_utc cannot be null');
        }
        $this->container['lodge_pay_run_scheduled_date_time_utc'] = $lodge_pay_run_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets run_report_packs
     *
     * @return string|null
     */
    public function getRunReportPacks()
    {
        return $this->container['run_report_packs'];
    }

    /**
     * Sets run_report_packs
     *
     * @param string|null $run_report_packs 
     *
     * @return self
     */
    public function setRunReportPacks($run_report_packs)
    {
        if (is_null($run_report_packs)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs cannot be null');
        }
        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (!in_array($run_report_packs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'run_report_packs', must be one of '%s'",
                    $run_report_packs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs'] = $run_report_packs;

        return $this;
    }

    /**
     * Gets run_report_packs_scheduled_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getRunReportPacksScheduledDateTimeUtc()
    {
        return $this->container['run_report_packs_scheduled_date_time_utc'];
    }

    /**
     * Sets run_report_packs_scheduled_date_time_utc
     *
     * @param \DateTime|null $run_report_packs_scheduled_date_time_utc 
     *
     * @return self
     */
    public function setRunReportPacksScheduledDateTimeUtc($run_report_packs_scheduled_date_time_utc)
    {
        if (is_null($run_report_packs_scheduled_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_scheduled_date_time_utc cannot be null');
        }
        $this->container['run_report_packs_scheduled_date_time_utc'] = $run_report_packs_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets are_report_packs_processed
     *
     * @return bool|null
     */
    public function getAreReportPacksProcessed()
    {
        return $this->container['are_report_packs_processed'];
    }

    /**
     * Sets are_report_packs_processed
     *
     * @param bool|null $are_report_packs_processed 
     *
     * @return self
     */
    public function setAreReportPacksProcessed($are_report_packs_processed)
    {
        if (is_null($are_report_packs_processed)) {
            throw new \InvalidArgumentException('non-nullable are_report_packs_processed cannot be null');
        }
        $this->container['are_report_packs_processed'] = $are_report_packs_processed;

        return $this;
    }

    /**
     * Gets selected_report_packs
     *
     * @return string[]|null
     */
    public function getSelectedReportPacks()
    {
        return $this->container['selected_report_packs'];
    }

    /**
     * Sets selected_report_packs
     *
     * @param string[]|null $selected_report_packs 
     *
     * @return self
     */
    public function setSelectedReportPacks($selected_report_packs)
    {
        if (is_null($selected_report_packs)) {
            throw new \InvalidArgumentException('non-nullable selected_report_packs cannot be null');
        }
        $this->container['selected_report_packs'] = $selected_report_packs;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return string|null
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param string|null $submit_to_pension_sync 
     *
     * @return self
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        if (is_null($submit_to_pension_sync)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync cannot be null');
        }
        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (!in_array($submit_to_pension_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'submit_to_pension_sync', must be one of '%s'",
                    $submit_to_pension_sync,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_scheduled_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getSubmitToPensionSyncScheduledDateTimeUtc()
    {
        return $this->container['submit_to_pension_sync_scheduled_date_time_utc'];
    }

    /**
     * Sets submit_to_pension_sync_scheduled_date_time_utc
     *
     * @param \DateTime|null $submit_to_pension_sync_scheduled_date_time_utc 
     *
     * @return self
     */
    public function setSubmitToPensionSyncScheduledDateTimeUtc($submit_to_pension_sync_scheduled_date_time_utc)
    {
        if (is_null($submit_to_pension_sync_scheduled_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_scheduled_date_time_utc cannot be null');
        }
        $this->container['submit_to_pension_sync_scheduled_date_time_utc'] = $submit_to_pension_sync_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets is_first_finalisation
     *
     * @return bool|null
     */
    public function getIsFirstFinalisation()
    {
        return $this->container['is_first_finalisation'];
    }

    /**
     * Sets is_first_finalisation
     *
     * @param bool|null $is_first_finalisation 
     *
     * @return self
     */
    public function setIsFirstFinalisation($is_first_finalisation)
    {
        if (is_null($is_first_finalisation)) {
            throw new \InvalidArgumentException('non-nullable is_first_finalisation cannot be null');
        }
        $this->container['is_first_finalisation'] = $is_first_finalisation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


