<?php
/**
 * PaygPaymentSummaryModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaygPaymentSummaryModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaygPaymentSummaryModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaygPaymentSummaryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee_id' => 'int',
        'employing_entity_id' => 'int',
        'date_generated' => '\DateTime',
        'payment_summary_type' => 'string',
        'status' => 'string',
        'etp_code' => 'string',
        'is_amended' => 'bool',
        'payee_name' => 'string',
        'payee_address' => 'string',
        'payee_address_line2' => 'string',
        'payee_suburb' => 'string',
        'payee_post_code' => 'string',
        'payee_state' => 'string',
        'payee_country' => 'string',
        'payment_period_start' => '\DateTime',
        'payment_period_end' => '\DateTime',
        'financial_year_start' => '\DateTime',
        'financial_year_end' => '\DateTime',
        'payee_tax_file_number' => 'string',
        'total_tax_withheld' => 'int',
        'gross_payments' => 'int',
        'cdep_payments' => 'int',
        'fringe_benefits' => 'int',
        'is_exempt_from_fringe_benefits_tax' => 'bool',
        'employer_super_contributions' => 'int',
        'total_allowances' => 'int',
        'lump_sum_a' => 'int',
        'lump_sum_b' => 'int',
        'lump_sum_d' => 'int',
        'lump_sum_e' => 'int',
        'lump_sum_a_type' => 'string',
        'not_reported_amount' => 'int',
        'allowances' => 'map[string,int]',
        'union_fee_deductions' => 'map[string,int]',
        'workplace_giving' => 'int',
        'exempt_foreign_employment_income' => 'int',
        'deductible_amount_of_undeducted_annuity_price' => 'int',
        'other_amounts' => '\Swagger\Client\Model\OtherAmounts[]',
        'payer_abn' => 'string',
        'payer_name' => 'string',
        'payer_branch' => 'string',
        'payer_signatory' => 'string',
        'payment_date' => '\DateTime',
        'is_transitional_termination_payment' => 'bool',
        'is_part_of_earlier_payment' => 'bool',
        'taxable_component' => 'int',
        'tax_free_component' => 'int',
        'payee_abn' => 'string',
        'payment_type' => 'string',
        'gross_payment_type' => 'string',
        'foreign_tax_paid' => 'int',
        'taxable_component_taxed_element' => 'int',
        'taxable_component_untaxed_element' => 'int',
        'taxable_component_tax_free_component' => 'int',
        'taxable_component_tax_offset_amount' => 'int',
        'lump_sum_in_arrears_taxed_element' => 'int',
        'lump_sum_in_arrears_untaxed_element' => 'int',
        'lump_sum_in_arrears_tax_free_component' => 'int',
        'is_death_benefit' => 'bool',
        'death_benefit_type' => 'string',
        'input_gross_earnings' => 'double',
        'input_pre_tax_deduction_amount' => 'double',
        'total_deductions' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee_id' => 'int32',
        'employing_entity_id' => 'int32',
        'date_generated' => 'date-time',
        'payment_summary_type' => null,
        'status' => null,
        'etp_code' => null,
        'is_amended' => null,
        'payee_name' => null,
        'payee_address' => null,
        'payee_address_line2' => null,
        'payee_suburb' => null,
        'payee_post_code' => null,
        'payee_state' => null,
        'payee_country' => null,
        'payment_period_start' => 'date-time',
        'payment_period_end' => 'date-time',
        'financial_year_start' => 'date-time',
        'financial_year_end' => 'date-time',
        'payee_tax_file_number' => null,
        'total_tax_withheld' => 'int32',
        'gross_payments' => 'int32',
        'cdep_payments' => 'int32',
        'fringe_benefits' => 'int32',
        'is_exempt_from_fringe_benefits_tax' => null,
        'employer_super_contributions' => 'int32',
        'total_allowances' => 'int32',
        'lump_sum_a' => 'int32',
        'lump_sum_b' => 'int32',
        'lump_sum_d' => 'int32',
        'lump_sum_e' => 'int32',
        'lump_sum_a_type' => null,
        'not_reported_amount' => 'int32',
        'allowances' => 'int32',
        'union_fee_deductions' => 'int32',
        'workplace_giving' => 'int32',
        'exempt_foreign_employment_income' => 'int32',
        'deductible_amount_of_undeducted_annuity_price' => 'int32',
        'other_amounts' => null,
        'payer_abn' => null,
        'payer_name' => null,
        'payer_branch' => null,
        'payer_signatory' => null,
        'payment_date' => 'date-time',
        'is_transitional_termination_payment' => null,
        'is_part_of_earlier_payment' => null,
        'taxable_component' => 'int32',
        'tax_free_component' => 'int32',
        'payee_abn' => null,
        'payment_type' => null,
        'gross_payment_type' => null,
        'foreign_tax_paid' => 'int32',
        'taxable_component_taxed_element' => 'int32',
        'taxable_component_untaxed_element' => 'int32',
        'taxable_component_tax_free_component' => 'int32',
        'taxable_component_tax_offset_amount' => 'int32',
        'lump_sum_in_arrears_taxed_element' => 'int32',
        'lump_sum_in_arrears_untaxed_element' => 'int32',
        'lump_sum_in_arrears_tax_free_component' => 'int32',
        'is_death_benefit' => null,
        'death_benefit_type' => null,
        'input_gross_earnings' => 'double',
        'input_pre_tax_deduction_amount' => 'double',
        'total_deductions' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'employing_entity_id' => 'employingEntityId',
        'date_generated' => 'dateGenerated',
        'payment_summary_type' => 'paymentSummaryType',
        'status' => 'status',
        'etp_code' => 'etpCode',
        'is_amended' => 'isAmended',
        'payee_name' => 'payeeName',
        'payee_address' => 'payeeAddress',
        'payee_address_line2' => 'payeeAddressLine2',
        'payee_suburb' => 'payeeSuburb',
        'payee_post_code' => 'payeePostCode',
        'payee_state' => 'payeeState',
        'payee_country' => 'payeeCountry',
        'payment_period_start' => 'paymentPeriodStart',
        'payment_period_end' => 'paymentPeriodEnd',
        'financial_year_start' => 'financialYearStart',
        'financial_year_end' => 'financialYearEnd',
        'payee_tax_file_number' => 'payeeTaxFileNumber',
        'total_tax_withheld' => 'totalTaxWithheld',
        'gross_payments' => 'grossPayments',
        'cdep_payments' => 'cdepPayments',
        'fringe_benefits' => 'fringeBenefits',
        'is_exempt_from_fringe_benefits_tax' => 'isExemptFromFringeBenefitsTax',
        'employer_super_contributions' => 'employerSuperContributions',
        'total_allowances' => 'totalAllowances',
        'lump_sum_a' => 'lumpSumA',
        'lump_sum_b' => 'lumpSumB',
        'lump_sum_d' => 'lumpSumD',
        'lump_sum_e' => 'lumpSumE',
        'lump_sum_a_type' => 'lumpSumAType',
        'not_reported_amount' => 'notReportedAmount',
        'allowances' => 'allowances',
        'union_fee_deductions' => 'unionFeeDeductions',
        'workplace_giving' => 'workplaceGiving',
        'exempt_foreign_employment_income' => 'exemptForeignEmploymentIncome',
        'deductible_amount_of_undeducted_annuity_price' => 'deductibleAmountOfUndeductedAnnuityPrice',
        'other_amounts' => 'otherAmounts',
        'payer_abn' => 'payerABN',
        'payer_name' => 'payerName',
        'payer_branch' => 'payerBranch',
        'payer_signatory' => 'payerSignatory',
        'payment_date' => 'paymentDate',
        'is_transitional_termination_payment' => 'isTransitionalTerminationPayment',
        'is_part_of_earlier_payment' => 'isPartOfEarlierPayment',
        'taxable_component' => 'taxableComponent',
        'tax_free_component' => 'taxFreeComponent',
        'payee_abn' => 'payeeABN',
        'payment_type' => 'paymentType',
        'gross_payment_type' => 'grossPaymentType',
        'foreign_tax_paid' => 'foreignTaxPaid',
        'taxable_component_taxed_element' => 'taxableComponentTaxedElement',
        'taxable_component_untaxed_element' => 'taxableComponentUntaxedElement',
        'taxable_component_tax_free_component' => 'taxableComponentTaxFreeComponent',
        'taxable_component_tax_offset_amount' => 'taxableComponentTaxOffsetAmount',
        'lump_sum_in_arrears_taxed_element' => 'lumpSumInArrearsTaxedElement',
        'lump_sum_in_arrears_untaxed_element' => 'lumpSumInArrearsUntaxedElement',
        'lump_sum_in_arrears_tax_free_component' => 'lumpSumInArrearsTaxFreeComponent',
        'is_death_benefit' => 'isDeathBenefit',
        'death_benefit_type' => 'deathBenefitType',
        'input_gross_earnings' => 'inputGrossEarnings',
        'input_pre_tax_deduction_amount' => 'inputPreTaxDeductionAmount',
        'total_deductions' => 'totalDeductions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'employing_entity_id' => 'setEmployingEntityId',
        'date_generated' => 'setDateGenerated',
        'payment_summary_type' => 'setPaymentSummaryType',
        'status' => 'setStatus',
        'etp_code' => 'setEtpCode',
        'is_amended' => 'setIsAmended',
        'payee_name' => 'setPayeeName',
        'payee_address' => 'setPayeeAddress',
        'payee_address_line2' => 'setPayeeAddressLine2',
        'payee_suburb' => 'setPayeeSuburb',
        'payee_post_code' => 'setPayeePostCode',
        'payee_state' => 'setPayeeState',
        'payee_country' => 'setPayeeCountry',
        'payment_period_start' => 'setPaymentPeriodStart',
        'payment_period_end' => 'setPaymentPeriodEnd',
        'financial_year_start' => 'setFinancialYearStart',
        'financial_year_end' => 'setFinancialYearEnd',
        'payee_tax_file_number' => 'setPayeeTaxFileNumber',
        'total_tax_withheld' => 'setTotalTaxWithheld',
        'gross_payments' => 'setGrossPayments',
        'cdep_payments' => 'setCdepPayments',
        'fringe_benefits' => 'setFringeBenefits',
        'is_exempt_from_fringe_benefits_tax' => 'setIsExemptFromFringeBenefitsTax',
        'employer_super_contributions' => 'setEmployerSuperContributions',
        'total_allowances' => 'setTotalAllowances',
        'lump_sum_a' => 'setLumpSumA',
        'lump_sum_b' => 'setLumpSumB',
        'lump_sum_d' => 'setLumpSumD',
        'lump_sum_e' => 'setLumpSumE',
        'lump_sum_a_type' => 'setLumpSumAType',
        'not_reported_amount' => 'setNotReportedAmount',
        'allowances' => 'setAllowances',
        'union_fee_deductions' => 'setUnionFeeDeductions',
        'workplace_giving' => 'setWorkplaceGiving',
        'exempt_foreign_employment_income' => 'setExemptForeignEmploymentIncome',
        'deductible_amount_of_undeducted_annuity_price' => 'setDeductibleAmountOfUndeductedAnnuityPrice',
        'other_amounts' => 'setOtherAmounts',
        'payer_abn' => 'setPayerAbn',
        'payer_name' => 'setPayerName',
        'payer_branch' => 'setPayerBranch',
        'payer_signatory' => 'setPayerSignatory',
        'payment_date' => 'setPaymentDate',
        'is_transitional_termination_payment' => 'setIsTransitionalTerminationPayment',
        'is_part_of_earlier_payment' => 'setIsPartOfEarlierPayment',
        'taxable_component' => 'setTaxableComponent',
        'tax_free_component' => 'setTaxFreeComponent',
        'payee_abn' => 'setPayeeAbn',
        'payment_type' => 'setPaymentType',
        'gross_payment_type' => 'setGrossPaymentType',
        'foreign_tax_paid' => 'setForeignTaxPaid',
        'taxable_component_taxed_element' => 'setTaxableComponentTaxedElement',
        'taxable_component_untaxed_element' => 'setTaxableComponentUntaxedElement',
        'taxable_component_tax_free_component' => 'setTaxableComponentTaxFreeComponent',
        'taxable_component_tax_offset_amount' => 'setTaxableComponentTaxOffsetAmount',
        'lump_sum_in_arrears_taxed_element' => 'setLumpSumInArrearsTaxedElement',
        'lump_sum_in_arrears_untaxed_element' => 'setLumpSumInArrearsUntaxedElement',
        'lump_sum_in_arrears_tax_free_component' => 'setLumpSumInArrearsTaxFreeComponent',
        'is_death_benefit' => 'setIsDeathBenefit',
        'death_benefit_type' => 'setDeathBenefitType',
        'input_gross_earnings' => 'setInputGrossEarnings',
        'input_pre_tax_deduction_amount' => 'setInputPreTaxDeductionAmount',
        'total_deductions' => 'setTotalDeductions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'employing_entity_id' => 'getEmployingEntityId',
        'date_generated' => 'getDateGenerated',
        'payment_summary_type' => 'getPaymentSummaryType',
        'status' => 'getStatus',
        'etp_code' => 'getEtpCode',
        'is_amended' => 'getIsAmended',
        'payee_name' => 'getPayeeName',
        'payee_address' => 'getPayeeAddress',
        'payee_address_line2' => 'getPayeeAddressLine2',
        'payee_suburb' => 'getPayeeSuburb',
        'payee_post_code' => 'getPayeePostCode',
        'payee_state' => 'getPayeeState',
        'payee_country' => 'getPayeeCountry',
        'payment_period_start' => 'getPaymentPeriodStart',
        'payment_period_end' => 'getPaymentPeriodEnd',
        'financial_year_start' => 'getFinancialYearStart',
        'financial_year_end' => 'getFinancialYearEnd',
        'payee_tax_file_number' => 'getPayeeTaxFileNumber',
        'total_tax_withheld' => 'getTotalTaxWithheld',
        'gross_payments' => 'getGrossPayments',
        'cdep_payments' => 'getCdepPayments',
        'fringe_benefits' => 'getFringeBenefits',
        'is_exempt_from_fringe_benefits_tax' => 'getIsExemptFromFringeBenefitsTax',
        'employer_super_contributions' => 'getEmployerSuperContributions',
        'total_allowances' => 'getTotalAllowances',
        'lump_sum_a' => 'getLumpSumA',
        'lump_sum_b' => 'getLumpSumB',
        'lump_sum_d' => 'getLumpSumD',
        'lump_sum_e' => 'getLumpSumE',
        'lump_sum_a_type' => 'getLumpSumAType',
        'not_reported_amount' => 'getNotReportedAmount',
        'allowances' => 'getAllowances',
        'union_fee_deductions' => 'getUnionFeeDeductions',
        'workplace_giving' => 'getWorkplaceGiving',
        'exempt_foreign_employment_income' => 'getExemptForeignEmploymentIncome',
        'deductible_amount_of_undeducted_annuity_price' => 'getDeductibleAmountOfUndeductedAnnuityPrice',
        'other_amounts' => 'getOtherAmounts',
        'payer_abn' => 'getPayerAbn',
        'payer_name' => 'getPayerName',
        'payer_branch' => 'getPayerBranch',
        'payer_signatory' => 'getPayerSignatory',
        'payment_date' => 'getPaymentDate',
        'is_transitional_termination_payment' => 'getIsTransitionalTerminationPayment',
        'is_part_of_earlier_payment' => 'getIsPartOfEarlierPayment',
        'taxable_component' => 'getTaxableComponent',
        'tax_free_component' => 'getTaxFreeComponent',
        'payee_abn' => 'getPayeeAbn',
        'payment_type' => 'getPaymentType',
        'gross_payment_type' => 'getGrossPaymentType',
        'foreign_tax_paid' => 'getForeignTaxPaid',
        'taxable_component_taxed_element' => 'getTaxableComponentTaxedElement',
        'taxable_component_untaxed_element' => 'getTaxableComponentUntaxedElement',
        'taxable_component_tax_free_component' => 'getTaxableComponentTaxFreeComponent',
        'taxable_component_tax_offset_amount' => 'getTaxableComponentTaxOffsetAmount',
        'lump_sum_in_arrears_taxed_element' => 'getLumpSumInArrearsTaxedElement',
        'lump_sum_in_arrears_untaxed_element' => 'getLumpSumInArrearsUntaxedElement',
        'lump_sum_in_arrears_tax_free_component' => 'getLumpSumInArrearsTaxFreeComponent',
        'is_death_benefit' => 'getIsDeathBenefit',
        'death_benefit_type' => 'getDeathBenefitType',
        'input_gross_earnings' => 'getInputGrossEarnings',
        'input_pre_tax_deduction_amount' => 'getInputPreTaxDeductionAmount',
        'total_deductions' => 'getTotalDeductions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_SUMMARY_TYPE_BUSINESS_AND_PERSONAL_SERVICES_INCOME = 'BusinessAndPersonalServicesIncome';
    const PAYMENT_SUMMARY_TYPE_EMPLOYEE_TERMINATION_PAYMENT = 'EmployeeTerminationPayment';
    const PAYMENT_SUMMARY_TYPE_FOREIGN_EMPLOYMENT = 'ForeignEmployment';
    const PAYMENT_SUMMARY_TYPE_INDIVIDUAL_NON_BUSINESS = 'IndividualNonBusiness';
    const PAYMENT_SUMMARY_TYPE_SUPERANNUATION_INCOME_STREAM = 'SuperannuationIncomeStream';
    const PAYMENT_SUMMARY_TYPE_SUPERANNUATION_LUMP_SUM = 'SuperannuationLumpSum';
    const PAYMENT_SUMMARY_TYPE_PAY_EVENT = 'PayEvent';
    const STATUS_GENERATED = 'Generated';
    const STATUS_PUBLISHED = 'Published';
    const STATUS_UNPUBLISHED = 'Unpublished';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentSummaryTypeAllowableValues()
    {
        return [
            self::PAYMENT_SUMMARY_TYPE_BUSINESS_AND_PERSONAL_SERVICES_INCOME,
            self::PAYMENT_SUMMARY_TYPE_EMPLOYEE_TERMINATION_PAYMENT,
            self::PAYMENT_SUMMARY_TYPE_FOREIGN_EMPLOYMENT,
            self::PAYMENT_SUMMARY_TYPE_INDIVIDUAL_NON_BUSINESS,
            self::PAYMENT_SUMMARY_TYPE_SUPERANNUATION_INCOME_STREAM,
            self::PAYMENT_SUMMARY_TYPE_SUPERANNUATION_LUMP_SUM,
            self::PAYMENT_SUMMARY_TYPE_PAY_EVENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_GENERATED,
            self::STATUS_PUBLISHED,
            self::STATUS_UNPUBLISHED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['employing_entity_id'] = isset($data['employing_entity_id']) ? $data['employing_entity_id'] : null;
        $this->container['date_generated'] = isset($data['date_generated']) ? $data['date_generated'] : null;
        $this->container['payment_summary_type'] = isset($data['payment_summary_type']) ? $data['payment_summary_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['etp_code'] = isset($data['etp_code']) ? $data['etp_code'] : null;
        $this->container['is_amended'] = isset($data['is_amended']) ? $data['is_amended'] : null;
        $this->container['payee_name'] = isset($data['payee_name']) ? $data['payee_name'] : null;
        $this->container['payee_address'] = isset($data['payee_address']) ? $data['payee_address'] : null;
        $this->container['payee_address_line2'] = isset($data['payee_address_line2']) ? $data['payee_address_line2'] : null;
        $this->container['payee_suburb'] = isset($data['payee_suburb']) ? $data['payee_suburb'] : null;
        $this->container['payee_post_code'] = isset($data['payee_post_code']) ? $data['payee_post_code'] : null;
        $this->container['payee_state'] = isset($data['payee_state']) ? $data['payee_state'] : null;
        $this->container['payee_country'] = isset($data['payee_country']) ? $data['payee_country'] : null;
        $this->container['payment_period_start'] = isset($data['payment_period_start']) ? $data['payment_period_start'] : null;
        $this->container['payment_period_end'] = isset($data['payment_period_end']) ? $data['payment_period_end'] : null;
        $this->container['financial_year_start'] = isset($data['financial_year_start']) ? $data['financial_year_start'] : null;
        $this->container['financial_year_end'] = isset($data['financial_year_end']) ? $data['financial_year_end'] : null;
        $this->container['payee_tax_file_number'] = isset($data['payee_tax_file_number']) ? $data['payee_tax_file_number'] : null;
        $this->container['total_tax_withheld'] = isset($data['total_tax_withheld']) ? $data['total_tax_withheld'] : null;
        $this->container['gross_payments'] = isset($data['gross_payments']) ? $data['gross_payments'] : null;
        $this->container['cdep_payments'] = isset($data['cdep_payments']) ? $data['cdep_payments'] : null;
        $this->container['fringe_benefits'] = isset($data['fringe_benefits']) ? $data['fringe_benefits'] : null;
        $this->container['is_exempt_from_fringe_benefits_tax'] = isset($data['is_exempt_from_fringe_benefits_tax']) ? $data['is_exempt_from_fringe_benefits_tax'] : null;
        $this->container['employer_super_contributions'] = isset($data['employer_super_contributions']) ? $data['employer_super_contributions'] : null;
        $this->container['total_allowances'] = isset($data['total_allowances']) ? $data['total_allowances'] : null;
        $this->container['lump_sum_a'] = isset($data['lump_sum_a']) ? $data['lump_sum_a'] : null;
        $this->container['lump_sum_b'] = isset($data['lump_sum_b']) ? $data['lump_sum_b'] : null;
        $this->container['lump_sum_d'] = isset($data['lump_sum_d']) ? $data['lump_sum_d'] : null;
        $this->container['lump_sum_e'] = isset($data['lump_sum_e']) ? $data['lump_sum_e'] : null;
        $this->container['lump_sum_a_type'] = isset($data['lump_sum_a_type']) ? $data['lump_sum_a_type'] : null;
        $this->container['not_reported_amount'] = isset($data['not_reported_amount']) ? $data['not_reported_amount'] : null;
        $this->container['allowances'] = isset($data['allowances']) ? $data['allowances'] : null;
        $this->container['union_fee_deductions'] = isset($data['union_fee_deductions']) ? $data['union_fee_deductions'] : null;
        $this->container['workplace_giving'] = isset($data['workplace_giving']) ? $data['workplace_giving'] : null;
        $this->container['exempt_foreign_employment_income'] = isset($data['exempt_foreign_employment_income']) ? $data['exempt_foreign_employment_income'] : null;
        $this->container['deductible_amount_of_undeducted_annuity_price'] = isset($data['deductible_amount_of_undeducted_annuity_price']) ? $data['deductible_amount_of_undeducted_annuity_price'] : null;
        $this->container['other_amounts'] = isset($data['other_amounts']) ? $data['other_amounts'] : null;
        $this->container['payer_abn'] = isset($data['payer_abn']) ? $data['payer_abn'] : null;
        $this->container['payer_name'] = isset($data['payer_name']) ? $data['payer_name'] : null;
        $this->container['payer_branch'] = isset($data['payer_branch']) ? $data['payer_branch'] : null;
        $this->container['payer_signatory'] = isset($data['payer_signatory']) ? $data['payer_signatory'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['is_transitional_termination_payment'] = isset($data['is_transitional_termination_payment']) ? $data['is_transitional_termination_payment'] : null;
        $this->container['is_part_of_earlier_payment'] = isset($data['is_part_of_earlier_payment']) ? $data['is_part_of_earlier_payment'] : null;
        $this->container['taxable_component'] = isset($data['taxable_component']) ? $data['taxable_component'] : null;
        $this->container['tax_free_component'] = isset($data['tax_free_component']) ? $data['tax_free_component'] : null;
        $this->container['payee_abn'] = isset($data['payee_abn']) ? $data['payee_abn'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['gross_payment_type'] = isset($data['gross_payment_type']) ? $data['gross_payment_type'] : null;
        $this->container['foreign_tax_paid'] = isset($data['foreign_tax_paid']) ? $data['foreign_tax_paid'] : null;
        $this->container['taxable_component_taxed_element'] = isset($data['taxable_component_taxed_element']) ? $data['taxable_component_taxed_element'] : null;
        $this->container['taxable_component_untaxed_element'] = isset($data['taxable_component_untaxed_element']) ? $data['taxable_component_untaxed_element'] : null;
        $this->container['taxable_component_tax_free_component'] = isset($data['taxable_component_tax_free_component']) ? $data['taxable_component_tax_free_component'] : null;
        $this->container['taxable_component_tax_offset_amount'] = isset($data['taxable_component_tax_offset_amount']) ? $data['taxable_component_tax_offset_amount'] : null;
        $this->container['lump_sum_in_arrears_taxed_element'] = isset($data['lump_sum_in_arrears_taxed_element']) ? $data['lump_sum_in_arrears_taxed_element'] : null;
        $this->container['lump_sum_in_arrears_untaxed_element'] = isset($data['lump_sum_in_arrears_untaxed_element']) ? $data['lump_sum_in_arrears_untaxed_element'] : null;
        $this->container['lump_sum_in_arrears_tax_free_component'] = isset($data['lump_sum_in_arrears_tax_free_component']) ? $data['lump_sum_in_arrears_tax_free_component'] : null;
        $this->container['is_death_benefit'] = isset($data['is_death_benefit']) ? $data['is_death_benefit'] : null;
        $this->container['death_benefit_type'] = isset($data['death_benefit_type']) ? $data['death_benefit_type'] : null;
        $this->container['input_gross_earnings'] = isset($data['input_gross_earnings']) ? $data['input_gross_earnings'] : null;
        $this->container['input_pre_tax_deduction_amount'] = isset($data['input_pre_tax_deduction_amount']) ? $data['input_pre_tax_deduction_amount'] : null;
        $this->container['total_deductions'] = isset($data['total_deductions']) ? $data['total_deductions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentSummaryTypeAllowableValues();
        if (!is_null($this->container['payment_summary_type']) && !in_array($this->container['payment_summary_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_summary_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employing_entity_id
     *
     * @return int
     */
    public function getEmployingEntityId()
    {
        return $this->container['employing_entity_id'];
    }

    /**
     * Sets employing_entity_id
     *
     * @param int $employing_entity_id 
     *
     * @return $this
     */
    public function setEmployingEntityId($employing_entity_id)
    {
        $this->container['employing_entity_id'] = $employing_entity_id;

        return $this;
    }

    /**
     * Gets date_generated
     *
     * @return \DateTime
     */
    public function getDateGenerated()
    {
        return $this->container['date_generated'];
    }

    /**
     * Sets date_generated
     *
     * @param \DateTime $date_generated 
     *
     * @return $this
     */
    public function setDateGenerated($date_generated)
    {
        $this->container['date_generated'] = $date_generated;

        return $this;
    }

    /**
     * Gets payment_summary_type
     *
     * @return string
     */
    public function getPaymentSummaryType()
    {
        return $this->container['payment_summary_type'];
    }

    /**
     * Sets payment_summary_type
     *
     * @param string $payment_summary_type 
     *
     * @return $this
     */
    public function setPaymentSummaryType($payment_summary_type)
    {
        $allowedValues = $this->getPaymentSummaryTypeAllowableValues();
        if (!is_null($payment_summary_type) && !in_array($payment_summary_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_summary_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_summary_type'] = $payment_summary_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets etp_code
     *
     * @return string
     */
    public function getEtpCode()
    {
        return $this->container['etp_code'];
    }

    /**
     * Sets etp_code
     *
     * @param string $etp_code 
     *
     * @return $this
     */
    public function setEtpCode($etp_code)
    {
        $this->container['etp_code'] = $etp_code;

        return $this;
    }

    /**
     * Gets is_amended
     *
     * @return bool
     */
    public function getIsAmended()
    {
        return $this->container['is_amended'];
    }

    /**
     * Sets is_amended
     *
     * @param bool $is_amended 
     *
     * @return $this
     */
    public function setIsAmended($is_amended)
    {
        $this->container['is_amended'] = $is_amended;

        return $this;
    }

    /**
     * Gets payee_name
     *
     * @return string
     */
    public function getPayeeName()
    {
        return $this->container['payee_name'];
    }

    /**
     * Sets payee_name
     *
     * @param string $payee_name 
     *
     * @return $this
     */
    public function setPayeeName($payee_name)
    {
        $this->container['payee_name'] = $payee_name;

        return $this;
    }

    /**
     * Gets payee_address
     *
     * @return string
     */
    public function getPayeeAddress()
    {
        return $this->container['payee_address'];
    }

    /**
     * Sets payee_address
     *
     * @param string $payee_address 
     *
     * @return $this
     */
    public function setPayeeAddress($payee_address)
    {
        $this->container['payee_address'] = $payee_address;

        return $this;
    }

    /**
     * Gets payee_address_line2
     *
     * @return string
     */
    public function getPayeeAddressLine2()
    {
        return $this->container['payee_address_line2'];
    }

    /**
     * Sets payee_address_line2
     *
     * @param string $payee_address_line2 
     *
     * @return $this
     */
    public function setPayeeAddressLine2($payee_address_line2)
    {
        $this->container['payee_address_line2'] = $payee_address_line2;

        return $this;
    }

    /**
     * Gets payee_suburb
     *
     * @return string
     */
    public function getPayeeSuburb()
    {
        return $this->container['payee_suburb'];
    }

    /**
     * Sets payee_suburb
     *
     * @param string $payee_suburb 
     *
     * @return $this
     */
    public function setPayeeSuburb($payee_suburb)
    {
        $this->container['payee_suburb'] = $payee_suburb;

        return $this;
    }

    /**
     * Gets payee_post_code
     *
     * @return string
     */
    public function getPayeePostCode()
    {
        return $this->container['payee_post_code'];
    }

    /**
     * Sets payee_post_code
     *
     * @param string $payee_post_code 
     *
     * @return $this
     */
    public function setPayeePostCode($payee_post_code)
    {
        $this->container['payee_post_code'] = $payee_post_code;

        return $this;
    }

    /**
     * Gets payee_state
     *
     * @return string
     */
    public function getPayeeState()
    {
        return $this->container['payee_state'];
    }

    /**
     * Sets payee_state
     *
     * @param string $payee_state 
     *
     * @return $this
     */
    public function setPayeeState($payee_state)
    {
        $this->container['payee_state'] = $payee_state;

        return $this;
    }

    /**
     * Gets payee_country
     *
     * @return string
     */
    public function getPayeeCountry()
    {
        return $this->container['payee_country'];
    }

    /**
     * Sets payee_country
     *
     * @param string $payee_country 
     *
     * @return $this
     */
    public function setPayeeCountry($payee_country)
    {
        $this->container['payee_country'] = $payee_country;

        return $this;
    }

    /**
     * Gets payment_period_start
     *
     * @return \DateTime
     */
    public function getPaymentPeriodStart()
    {
        return $this->container['payment_period_start'];
    }

    /**
     * Sets payment_period_start
     *
     * @param \DateTime $payment_period_start 
     *
     * @return $this
     */
    public function setPaymentPeriodStart($payment_period_start)
    {
        $this->container['payment_period_start'] = $payment_period_start;

        return $this;
    }

    /**
     * Gets payment_period_end
     *
     * @return \DateTime
     */
    public function getPaymentPeriodEnd()
    {
        return $this->container['payment_period_end'];
    }

    /**
     * Sets payment_period_end
     *
     * @param \DateTime $payment_period_end 
     *
     * @return $this
     */
    public function setPaymentPeriodEnd($payment_period_end)
    {
        $this->container['payment_period_end'] = $payment_period_end;

        return $this;
    }

    /**
     * Gets financial_year_start
     *
     * @return \DateTime
     */
    public function getFinancialYearStart()
    {
        return $this->container['financial_year_start'];
    }

    /**
     * Sets financial_year_start
     *
     * @param \DateTime $financial_year_start 
     *
     * @return $this
     */
    public function setFinancialYearStart($financial_year_start)
    {
        $this->container['financial_year_start'] = $financial_year_start;

        return $this;
    }

    /**
     * Gets financial_year_end
     *
     * @return \DateTime
     */
    public function getFinancialYearEnd()
    {
        return $this->container['financial_year_end'];
    }

    /**
     * Sets financial_year_end
     *
     * @param \DateTime $financial_year_end 
     *
     * @return $this
     */
    public function setFinancialYearEnd($financial_year_end)
    {
        $this->container['financial_year_end'] = $financial_year_end;

        return $this;
    }

    /**
     * Gets payee_tax_file_number
     *
     * @return string
     */
    public function getPayeeTaxFileNumber()
    {
        return $this->container['payee_tax_file_number'];
    }

    /**
     * Sets payee_tax_file_number
     *
     * @param string $payee_tax_file_number 
     *
     * @return $this
     */
    public function setPayeeTaxFileNumber($payee_tax_file_number)
    {
        $this->container['payee_tax_file_number'] = $payee_tax_file_number;

        return $this;
    }

    /**
     * Gets total_tax_withheld
     *
     * @return int
     */
    public function getTotalTaxWithheld()
    {
        return $this->container['total_tax_withheld'];
    }

    /**
     * Sets total_tax_withheld
     *
     * @param int $total_tax_withheld 
     *
     * @return $this
     */
    public function setTotalTaxWithheld($total_tax_withheld)
    {
        $this->container['total_tax_withheld'] = $total_tax_withheld;

        return $this;
    }

    /**
     * Gets gross_payments
     *
     * @return int
     */
    public function getGrossPayments()
    {
        return $this->container['gross_payments'];
    }

    /**
     * Sets gross_payments
     *
     * @param int $gross_payments 
     *
     * @return $this
     */
    public function setGrossPayments($gross_payments)
    {
        $this->container['gross_payments'] = $gross_payments;

        return $this;
    }

    /**
     * Gets cdep_payments
     *
     * @return int
     */
    public function getCdepPayments()
    {
        return $this->container['cdep_payments'];
    }

    /**
     * Sets cdep_payments
     *
     * @param int $cdep_payments 
     *
     * @return $this
     */
    public function setCdepPayments($cdep_payments)
    {
        $this->container['cdep_payments'] = $cdep_payments;

        return $this;
    }

    /**
     * Gets fringe_benefits
     *
     * @return int
     */
    public function getFringeBenefits()
    {
        return $this->container['fringe_benefits'];
    }

    /**
     * Sets fringe_benefits
     *
     * @param int $fringe_benefits 
     *
     * @return $this
     */
    public function setFringeBenefits($fringe_benefits)
    {
        $this->container['fringe_benefits'] = $fringe_benefits;

        return $this;
    }

    /**
     * Gets is_exempt_from_fringe_benefits_tax
     *
     * @return bool
     */
    public function getIsExemptFromFringeBenefitsTax()
    {
        return $this->container['is_exempt_from_fringe_benefits_tax'];
    }

    /**
     * Sets is_exempt_from_fringe_benefits_tax
     *
     * @param bool $is_exempt_from_fringe_benefits_tax 
     *
     * @return $this
     */
    public function setIsExemptFromFringeBenefitsTax($is_exempt_from_fringe_benefits_tax)
    {
        $this->container['is_exempt_from_fringe_benefits_tax'] = $is_exempt_from_fringe_benefits_tax;

        return $this;
    }

    /**
     * Gets employer_super_contributions
     *
     * @return int
     */
    public function getEmployerSuperContributions()
    {
        return $this->container['employer_super_contributions'];
    }

    /**
     * Sets employer_super_contributions
     *
     * @param int $employer_super_contributions 
     *
     * @return $this
     */
    public function setEmployerSuperContributions($employer_super_contributions)
    {
        $this->container['employer_super_contributions'] = $employer_super_contributions;

        return $this;
    }

    /**
     * Gets total_allowances
     *
     * @return int
     */
    public function getTotalAllowances()
    {
        return $this->container['total_allowances'];
    }

    /**
     * Sets total_allowances
     *
     * @param int $total_allowances 
     *
     * @return $this
     */
    public function setTotalAllowances($total_allowances)
    {
        $this->container['total_allowances'] = $total_allowances;

        return $this;
    }

    /**
     * Gets lump_sum_a
     *
     * @return int
     */
    public function getLumpSumA()
    {
        return $this->container['lump_sum_a'];
    }

    /**
     * Sets lump_sum_a
     *
     * @param int $lump_sum_a 
     *
     * @return $this
     */
    public function setLumpSumA($lump_sum_a)
    {
        $this->container['lump_sum_a'] = $lump_sum_a;

        return $this;
    }

    /**
     * Gets lump_sum_b
     *
     * @return int
     */
    public function getLumpSumB()
    {
        return $this->container['lump_sum_b'];
    }

    /**
     * Sets lump_sum_b
     *
     * @param int $lump_sum_b 
     *
     * @return $this
     */
    public function setLumpSumB($lump_sum_b)
    {
        $this->container['lump_sum_b'] = $lump_sum_b;

        return $this;
    }

    /**
     * Gets lump_sum_d
     *
     * @return int
     */
    public function getLumpSumD()
    {
        return $this->container['lump_sum_d'];
    }

    /**
     * Sets lump_sum_d
     *
     * @param int $lump_sum_d 
     *
     * @return $this
     */
    public function setLumpSumD($lump_sum_d)
    {
        $this->container['lump_sum_d'] = $lump_sum_d;

        return $this;
    }

    /**
     * Gets lump_sum_e
     *
     * @return int
     */
    public function getLumpSumE()
    {
        return $this->container['lump_sum_e'];
    }

    /**
     * Sets lump_sum_e
     *
     * @param int $lump_sum_e 
     *
     * @return $this
     */
    public function setLumpSumE($lump_sum_e)
    {
        $this->container['lump_sum_e'] = $lump_sum_e;

        return $this;
    }

    /**
     * Gets lump_sum_a_type
     *
     * @return string
     */
    public function getLumpSumAType()
    {
        return $this->container['lump_sum_a_type'];
    }

    /**
     * Sets lump_sum_a_type
     *
     * @param string $lump_sum_a_type 
     *
     * @return $this
     */
    public function setLumpSumAType($lump_sum_a_type)
    {
        $this->container['lump_sum_a_type'] = $lump_sum_a_type;

        return $this;
    }

    /**
     * Gets not_reported_amount
     *
     * @return int
     */
    public function getNotReportedAmount()
    {
        return $this->container['not_reported_amount'];
    }

    /**
     * Sets not_reported_amount
     *
     * @param int $not_reported_amount 
     *
     * @return $this
     */
    public function setNotReportedAmount($not_reported_amount)
    {
        $this->container['not_reported_amount'] = $not_reported_amount;

        return $this;
    }

    /**
     * Gets allowances
     *
     * @return map[string,int]
     */
    public function getAllowances()
    {
        return $this->container['allowances'];
    }

    /**
     * Sets allowances
     *
     * @param map[string,int] $allowances 
     *
     * @return $this
     */
    public function setAllowances($allowances)
    {
        $this->container['allowances'] = $allowances;

        return $this;
    }

    /**
     * Gets union_fee_deductions
     *
     * @return map[string,int]
     */
    public function getUnionFeeDeductions()
    {
        return $this->container['union_fee_deductions'];
    }

    /**
     * Sets union_fee_deductions
     *
     * @param map[string,int] $union_fee_deductions 
     *
     * @return $this
     */
    public function setUnionFeeDeductions($union_fee_deductions)
    {
        $this->container['union_fee_deductions'] = $union_fee_deductions;

        return $this;
    }

    /**
     * Gets workplace_giving
     *
     * @return int
     */
    public function getWorkplaceGiving()
    {
        return $this->container['workplace_giving'];
    }

    /**
     * Sets workplace_giving
     *
     * @param int $workplace_giving 
     *
     * @return $this
     */
    public function setWorkplaceGiving($workplace_giving)
    {
        $this->container['workplace_giving'] = $workplace_giving;

        return $this;
    }

    /**
     * Gets exempt_foreign_employment_income
     *
     * @return int
     */
    public function getExemptForeignEmploymentIncome()
    {
        return $this->container['exempt_foreign_employment_income'];
    }

    /**
     * Sets exempt_foreign_employment_income
     *
     * @param int $exempt_foreign_employment_income 
     *
     * @return $this
     */
    public function setExemptForeignEmploymentIncome($exempt_foreign_employment_income)
    {
        $this->container['exempt_foreign_employment_income'] = $exempt_foreign_employment_income;

        return $this;
    }

    /**
     * Gets deductible_amount_of_undeducted_annuity_price
     *
     * @return int
     */
    public function getDeductibleAmountOfUndeductedAnnuityPrice()
    {
        return $this->container['deductible_amount_of_undeducted_annuity_price'];
    }

    /**
     * Sets deductible_amount_of_undeducted_annuity_price
     *
     * @param int $deductible_amount_of_undeducted_annuity_price 
     *
     * @return $this
     */
    public function setDeductibleAmountOfUndeductedAnnuityPrice($deductible_amount_of_undeducted_annuity_price)
    {
        $this->container['deductible_amount_of_undeducted_annuity_price'] = $deductible_amount_of_undeducted_annuity_price;

        return $this;
    }

    /**
     * Gets other_amounts
     *
     * @return \Swagger\Client\Model\OtherAmounts[]
     */
    public function getOtherAmounts()
    {
        return $this->container['other_amounts'];
    }

    /**
     * Sets other_amounts
     *
     * @param \Swagger\Client\Model\OtherAmounts[] $other_amounts 
     *
     * @return $this
     */
    public function setOtherAmounts($other_amounts)
    {
        $this->container['other_amounts'] = $other_amounts;

        return $this;
    }

    /**
     * Gets payer_abn
     *
     * @return string
     */
    public function getPayerAbn()
    {
        return $this->container['payer_abn'];
    }

    /**
     * Sets payer_abn
     *
     * @param string $payer_abn 
     *
     * @return $this
     */
    public function setPayerAbn($payer_abn)
    {
        $this->container['payer_abn'] = $payer_abn;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string $payer_name 
     *
     * @return $this
     */
    public function setPayerName($payer_name)
    {
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets payer_branch
     *
     * @return string
     */
    public function getPayerBranch()
    {
        return $this->container['payer_branch'];
    }

    /**
     * Sets payer_branch
     *
     * @param string $payer_branch 
     *
     * @return $this
     */
    public function setPayerBranch($payer_branch)
    {
        $this->container['payer_branch'] = $payer_branch;

        return $this;
    }

    /**
     * Gets payer_signatory
     *
     * @return string
     */
    public function getPayerSignatory()
    {
        return $this->container['payer_signatory'];
    }

    /**
     * Sets payer_signatory
     *
     * @param string $payer_signatory 
     *
     * @return $this
     */
    public function setPayerSignatory($payer_signatory)
    {
        $this->container['payer_signatory'] = $payer_signatory;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date 
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets is_transitional_termination_payment
     *
     * @return bool
     */
    public function getIsTransitionalTerminationPayment()
    {
        return $this->container['is_transitional_termination_payment'];
    }

    /**
     * Sets is_transitional_termination_payment
     *
     * @param bool $is_transitional_termination_payment 
     *
     * @return $this
     */
    public function setIsTransitionalTerminationPayment($is_transitional_termination_payment)
    {
        $this->container['is_transitional_termination_payment'] = $is_transitional_termination_payment;

        return $this;
    }

    /**
     * Gets is_part_of_earlier_payment
     *
     * @return bool
     */
    public function getIsPartOfEarlierPayment()
    {
        return $this->container['is_part_of_earlier_payment'];
    }

    /**
     * Sets is_part_of_earlier_payment
     *
     * @param bool $is_part_of_earlier_payment 
     *
     * @return $this
     */
    public function setIsPartOfEarlierPayment($is_part_of_earlier_payment)
    {
        $this->container['is_part_of_earlier_payment'] = $is_part_of_earlier_payment;

        return $this;
    }

    /**
     * Gets taxable_component
     *
     * @return int
     */
    public function getTaxableComponent()
    {
        return $this->container['taxable_component'];
    }

    /**
     * Sets taxable_component
     *
     * @param int $taxable_component 
     *
     * @return $this
     */
    public function setTaxableComponent($taxable_component)
    {
        $this->container['taxable_component'] = $taxable_component;

        return $this;
    }

    /**
     * Gets tax_free_component
     *
     * @return int
     */
    public function getTaxFreeComponent()
    {
        return $this->container['tax_free_component'];
    }

    /**
     * Sets tax_free_component
     *
     * @param int $tax_free_component 
     *
     * @return $this
     */
    public function setTaxFreeComponent($tax_free_component)
    {
        $this->container['tax_free_component'] = $tax_free_component;

        return $this;
    }

    /**
     * Gets payee_abn
     *
     * @return string
     */
    public function getPayeeAbn()
    {
        return $this->container['payee_abn'];
    }

    /**
     * Sets payee_abn
     *
     * @param string $payee_abn 
     *
     * @return $this
     */
    public function setPayeeAbn($payee_abn)
    {
        $this->container['payee_abn'] = $payee_abn;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type 
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets gross_payment_type
     *
     * @return string
     */
    public function getGrossPaymentType()
    {
        return $this->container['gross_payment_type'];
    }

    /**
     * Sets gross_payment_type
     *
     * @param string $gross_payment_type 
     *
     * @return $this
     */
    public function setGrossPaymentType($gross_payment_type)
    {
        $this->container['gross_payment_type'] = $gross_payment_type;

        return $this;
    }

    /**
     * Gets foreign_tax_paid
     *
     * @return int
     */
    public function getForeignTaxPaid()
    {
        return $this->container['foreign_tax_paid'];
    }

    /**
     * Sets foreign_tax_paid
     *
     * @param int $foreign_tax_paid 
     *
     * @return $this
     */
    public function setForeignTaxPaid($foreign_tax_paid)
    {
        $this->container['foreign_tax_paid'] = $foreign_tax_paid;

        return $this;
    }

    /**
     * Gets taxable_component_taxed_element
     *
     * @return int
     */
    public function getTaxableComponentTaxedElement()
    {
        return $this->container['taxable_component_taxed_element'];
    }

    /**
     * Sets taxable_component_taxed_element
     *
     * @param int $taxable_component_taxed_element 
     *
     * @return $this
     */
    public function setTaxableComponentTaxedElement($taxable_component_taxed_element)
    {
        $this->container['taxable_component_taxed_element'] = $taxable_component_taxed_element;

        return $this;
    }

    /**
     * Gets taxable_component_untaxed_element
     *
     * @return int
     */
    public function getTaxableComponentUntaxedElement()
    {
        return $this->container['taxable_component_untaxed_element'];
    }

    /**
     * Sets taxable_component_untaxed_element
     *
     * @param int $taxable_component_untaxed_element 
     *
     * @return $this
     */
    public function setTaxableComponentUntaxedElement($taxable_component_untaxed_element)
    {
        $this->container['taxable_component_untaxed_element'] = $taxable_component_untaxed_element;

        return $this;
    }

    /**
     * Gets taxable_component_tax_free_component
     *
     * @return int
     */
    public function getTaxableComponentTaxFreeComponent()
    {
        return $this->container['taxable_component_tax_free_component'];
    }

    /**
     * Sets taxable_component_tax_free_component
     *
     * @param int $taxable_component_tax_free_component 
     *
     * @return $this
     */
    public function setTaxableComponentTaxFreeComponent($taxable_component_tax_free_component)
    {
        $this->container['taxable_component_tax_free_component'] = $taxable_component_tax_free_component;

        return $this;
    }

    /**
     * Gets taxable_component_tax_offset_amount
     *
     * @return int
     */
    public function getTaxableComponentTaxOffsetAmount()
    {
        return $this->container['taxable_component_tax_offset_amount'];
    }

    /**
     * Sets taxable_component_tax_offset_amount
     *
     * @param int $taxable_component_tax_offset_amount 
     *
     * @return $this
     */
    public function setTaxableComponentTaxOffsetAmount($taxable_component_tax_offset_amount)
    {
        $this->container['taxable_component_tax_offset_amount'] = $taxable_component_tax_offset_amount;

        return $this;
    }

    /**
     * Gets lump_sum_in_arrears_taxed_element
     *
     * @return int
     */
    public function getLumpSumInArrearsTaxedElement()
    {
        return $this->container['lump_sum_in_arrears_taxed_element'];
    }

    /**
     * Sets lump_sum_in_arrears_taxed_element
     *
     * @param int $lump_sum_in_arrears_taxed_element 
     *
     * @return $this
     */
    public function setLumpSumInArrearsTaxedElement($lump_sum_in_arrears_taxed_element)
    {
        $this->container['lump_sum_in_arrears_taxed_element'] = $lump_sum_in_arrears_taxed_element;

        return $this;
    }

    /**
     * Gets lump_sum_in_arrears_untaxed_element
     *
     * @return int
     */
    public function getLumpSumInArrearsUntaxedElement()
    {
        return $this->container['lump_sum_in_arrears_untaxed_element'];
    }

    /**
     * Sets lump_sum_in_arrears_untaxed_element
     *
     * @param int $lump_sum_in_arrears_untaxed_element 
     *
     * @return $this
     */
    public function setLumpSumInArrearsUntaxedElement($lump_sum_in_arrears_untaxed_element)
    {
        $this->container['lump_sum_in_arrears_untaxed_element'] = $lump_sum_in_arrears_untaxed_element;

        return $this;
    }

    /**
     * Gets lump_sum_in_arrears_tax_free_component
     *
     * @return int
     */
    public function getLumpSumInArrearsTaxFreeComponent()
    {
        return $this->container['lump_sum_in_arrears_tax_free_component'];
    }

    /**
     * Sets lump_sum_in_arrears_tax_free_component
     *
     * @param int $lump_sum_in_arrears_tax_free_component 
     *
     * @return $this
     */
    public function setLumpSumInArrearsTaxFreeComponent($lump_sum_in_arrears_tax_free_component)
    {
        $this->container['lump_sum_in_arrears_tax_free_component'] = $lump_sum_in_arrears_tax_free_component;

        return $this;
    }

    /**
     * Gets is_death_benefit
     *
     * @return bool
     */
    public function getIsDeathBenefit()
    {
        return $this->container['is_death_benefit'];
    }

    /**
     * Sets is_death_benefit
     *
     * @param bool $is_death_benefit 
     *
     * @return $this
     */
    public function setIsDeathBenefit($is_death_benefit)
    {
        $this->container['is_death_benefit'] = $is_death_benefit;

        return $this;
    }

    /**
     * Gets death_benefit_type
     *
     * @return string
     */
    public function getDeathBenefitType()
    {
        return $this->container['death_benefit_type'];
    }

    /**
     * Sets death_benefit_type
     *
     * @param string $death_benefit_type 
     *
     * @return $this
     */
    public function setDeathBenefitType($death_benefit_type)
    {
        $this->container['death_benefit_type'] = $death_benefit_type;

        return $this;
    }

    /**
     * Gets input_gross_earnings
     *
     * @return double
     */
    public function getInputGrossEarnings()
    {
        return $this->container['input_gross_earnings'];
    }

    /**
     * Sets input_gross_earnings
     *
     * @param double $input_gross_earnings 
     *
     * @return $this
     */
    public function setInputGrossEarnings($input_gross_earnings)
    {
        $this->container['input_gross_earnings'] = $input_gross_earnings;

        return $this;
    }

    /**
     * Gets input_pre_tax_deduction_amount
     *
     * @return double
     */
    public function getInputPreTaxDeductionAmount()
    {
        return $this->container['input_pre_tax_deduction_amount'];
    }

    /**
     * Sets input_pre_tax_deduction_amount
     *
     * @param double $input_pre_tax_deduction_amount 
     *
     * @return $this
     */
    public function setInputPreTaxDeductionAmount($input_pre_tax_deduction_amount)
    {
        $this->container['input_pre_tax_deduction_amount'] = $input_pre_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets total_deductions
     *
     * @return double
     */
    public function getTotalDeductions()
    {
        return $this->container['total_deductions'];
    }

    /**
     * Sets total_deductions
     *
     * @param double $total_deductions 
     *
     * @return $this
     */
    public function setTotalDeductions($total_deductions)
    {
        $this->container['total_deductions'] = $total_deductions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


