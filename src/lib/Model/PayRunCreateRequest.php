<?php
/**
 * PayRunCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PayRunCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRunCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRunCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pay_schedule_id' => 'int',
        'pay_period_ending' => '\DateTime',
        'date_paid' => '\DateTime',
        'timesheet_import_option' => 'string',
        'external_id' => 'string',
        'callback_url' => 'string',
        'create_with_empty_pays' => 'bool',
        'adhoc' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pay_schedule_id' => 'int32',
        'pay_period_ending' => 'date-time',
        'date_paid' => 'date-time',
        'timesheet_import_option' => null,
        'external_id' => null,
        'callback_url' => null,
        'create_with_empty_pays' => null,
        'adhoc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_schedule_id' => 'payScheduleId',
        'pay_period_ending' => 'payPeriodEnding',
        'date_paid' => 'datePaid',
        'timesheet_import_option' => 'timesheetImportOption',
        'external_id' => 'externalId',
        'callback_url' => 'callbackUrl',
        'create_with_empty_pays' => 'createWithEmptyPays',
        'adhoc' => 'adhoc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_schedule_id' => 'setPayScheduleId',
        'pay_period_ending' => 'setPayPeriodEnding',
        'date_paid' => 'setDatePaid',
        'timesheet_import_option' => 'setTimesheetImportOption',
        'external_id' => 'setExternalId',
        'callback_url' => 'setCallbackUrl',
        'create_with_empty_pays' => 'setCreateWithEmptyPays',
        'adhoc' => 'setAdhoc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_schedule_id' => 'getPayScheduleId',
        'pay_period_ending' => 'getPayPeriodEnding',
        'date_paid' => 'getDatePaid',
        'timesheet_import_option' => 'getTimesheetImportOption',
        'external_id' => 'getExternalId',
        'callback_url' => 'getCallbackUrl',
        'create_with_empty_pays' => 'getCreateWithEmptyPays',
        'adhoc' => 'getAdhoc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIMESHEET_IMPORT_OPTION_NONE = 'None';
    const TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD = 'ThisPayPeriod';
    const TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING = 'AllOutstanding';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetImportOptionAllowableValues()
    {
        return [
            self::TIMESHEET_IMPORT_OPTION_NONE,
            self::TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD,
            self::TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pay_schedule_id'] = isset($data['pay_schedule_id']) ? $data['pay_schedule_id'] : null;
        $this->container['pay_period_ending'] = isset($data['pay_period_ending']) ? $data['pay_period_ending'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['timesheet_import_option'] = isset($data['timesheet_import_option']) ? $data['timesheet_import_option'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['create_with_empty_pays'] = isset($data['create_with_empty_pays']) ? $data['create_with_empty_pays'] : null;
        $this->container['adhoc'] = isset($data['adhoc']) ? $data['adhoc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!is_null($this->container['timesheet_import_option']) && !in_array($this->container['timesheet_import_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'timesheet_import_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_schedule_id
     *
     * @return int
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int $pay_schedule_id 
     *
     * @return $this
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets pay_period_ending
     *
     * @return \DateTime
     */
    public function getPayPeriodEnding()
    {
        return $this->container['pay_period_ending'];
    }

    /**
     * Sets pay_period_ending
     *
     * @param \DateTime $pay_period_ending 
     *
     * @return $this
     */
    public function setPayPeriodEnding($pay_period_ending)
    {
        $this->container['pay_period_ending'] = $pay_period_ending;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime $date_paid 
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets timesheet_import_option
     *
     * @return string
     */
    public function getTimesheetImportOption()
    {
        return $this->container['timesheet_import_option'];
    }

    /**
     * Sets timesheet_import_option
     *
     * @param string $timesheet_import_option 
     *
     * @return $this
     */
    public function setTimesheetImportOption($timesheet_import_option)
    {
        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!is_null($timesheet_import_option) && !in_array($timesheet_import_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'timesheet_import_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_import_option'] = $timesheet_import_option;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url 
     *
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets create_with_empty_pays
     *
     * @return bool
     */
    public function getCreateWithEmptyPays()
    {
        return $this->container['create_with_empty_pays'];
    }

    /**
     * Sets create_with_empty_pays
     *
     * @param bool $create_with_empty_pays 
     *
     * @return $this
     */
    public function setCreateWithEmptyPays($create_with_empty_pays)
    {
        $this->container['create_with_empty_pays'] = $create_with_empty_pays;

        return $this;
    }

    /**
     * Gets adhoc
     *
     * @return bool
     */
    public function getAdhoc()
    {
        return $this->container['adhoc'];
    }

    /**
     * Sets adhoc
     *
     * @param bool $adhoc 
     *
     * @return $this
     */
    public function setAdhoc($adhoc)
    {
        $this->container['adhoc'] = $adhoc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


