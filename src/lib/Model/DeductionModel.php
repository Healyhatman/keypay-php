<?php
/**
 * DeductionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeductionModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeductionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeductionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deduction_category_id' => 'string',
        'deduction_category_name' => 'string',
        'amount' => 'float',
        'notes' => 'string',
        'payment_reference' => 'string',
        'note' => 'string',
        'associated_employee_deduction_category_id' => 'int',
        'pay_to_bank_account_bsb' => 'string',
        'pay_to_bank_account_swift' => 'string',
        'pay_to_bank_account_bank_code' => 'string',
        'pay_to_bank_account_number' => 'string',
        'pay_to_super_fund_name' => 'string',
        'pay_to_super_fund_member_number' => 'string',
        'pay_to' => 'string',
        'additional_data' => 'int',
        'id' => 'int',
        'external_id' => 'string',
        'location_id' => 'string',
        'location_name' => 'string',
        'employee_id' => 'string',
        'employee_name' => 'string',
        'employee_external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deduction_category_id' => null,
        'deduction_category_name' => null,
        'amount' => 'double',
        'notes' => null,
        'payment_reference' => null,
        'note' => null,
        'associated_employee_deduction_category_id' => 'int32',
        'pay_to_bank_account_bsb' => null,
        'pay_to_bank_account_swift' => null,
        'pay_to_bank_account_bank_code' => null,
        'pay_to_bank_account_number' => null,
        'pay_to_super_fund_name' => null,
        'pay_to_super_fund_member_number' => null,
        'pay_to' => null,
        'additional_data' => 'int32',
        'id' => 'int32',
        'external_id' => null,
        'location_id' => null,
        'location_name' => null,
        'employee_id' => null,
        'employee_name' => null,
        'employee_external_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deduction_category_id' => false,
		'deduction_category_name' => false,
		'amount' => false,
		'notes' => false,
		'payment_reference' => false,
		'note' => false,
		'associated_employee_deduction_category_id' => false,
		'pay_to_bank_account_bsb' => false,
		'pay_to_bank_account_swift' => false,
		'pay_to_bank_account_bank_code' => false,
		'pay_to_bank_account_number' => false,
		'pay_to_super_fund_name' => false,
		'pay_to_super_fund_member_number' => false,
		'pay_to' => false,
		'additional_data' => false,
		'id' => false,
		'external_id' => false,
		'location_id' => false,
		'location_name' => false,
		'employee_id' => false,
		'employee_name' => false,
		'employee_external_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deduction_category_id' => 'deductionCategoryId',
        'deduction_category_name' => 'deductionCategoryName',
        'amount' => 'amount',
        'notes' => 'notes',
        'payment_reference' => 'paymentReference',
        'note' => 'note',
        'associated_employee_deduction_category_id' => 'associatedEmployeeDeductionCategoryId',
        'pay_to_bank_account_bsb' => 'payToBankAccountBSB',
        'pay_to_bank_account_swift' => 'payToBankAccountSwift',
        'pay_to_bank_account_bank_code' => 'payToBankAccountBankCode',
        'pay_to_bank_account_number' => 'payToBankAccountNumber',
        'pay_to_super_fund_name' => 'payToSuperFundName',
        'pay_to_super_fund_member_number' => 'payToSuperFundMemberNumber',
        'pay_to' => 'payTo',
        'additional_data' => 'additionalData',
        'id' => 'id',
        'external_id' => 'externalId',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'employee_external_id' => 'employeeExternalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deduction_category_id' => 'setDeductionCategoryId',
        'deduction_category_name' => 'setDeductionCategoryName',
        'amount' => 'setAmount',
        'notes' => 'setNotes',
        'payment_reference' => 'setPaymentReference',
        'note' => 'setNote',
        'associated_employee_deduction_category_id' => 'setAssociatedEmployeeDeductionCategoryId',
        'pay_to_bank_account_bsb' => 'setPayToBankAccountBsb',
        'pay_to_bank_account_swift' => 'setPayToBankAccountSwift',
        'pay_to_bank_account_bank_code' => 'setPayToBankAccountBankCode',
        'pay_to_bank_account_number' => 'setPayToBankAccountNumber',
        'pay_to_super_fund_name' => 'setPayToSuperFundName',
        'pay_to_super_fund_member_number' => 'setPayToSuperFundMemberNumber',
        'pay_to' => 'setPayTo',
        'additional_data' => 'setAdditionalData',
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'employee_external_id' => 'setEmployeeExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deduction_category_id' => 'getDeductionCategoryId',
        'deduction_category_name' => 'getDeductionCategoryName',
        'amount' => 'getAmount',
        'notes' => 'getNotes',
        'payment_reference' => 'getPaymentReference',
        'note' => 'getNote',
        'associated_employee_deduction_category_id' => 'getAssociatedEmployeeDeductionCategoryId',
        'pay_to_bank_account_bsb' => 'getPayToBankAccountBsb',
        'pay_to_bank_account_swift' => 'getPayToBankAccountSwift',
        'pay_to_bank_account_bank_code' => 'getPayToBankAccountBankCode',
        'pay_to_bank_account_number' => 'getPayToBankAccountNumber',
        'pay_to_super_fund_name' => 'getPayToSuperFundName',
        'pay_to_super_fund_member_number' => 'getPayToSuperFundMemberNumber',
        'pay_to' => 'getPayTo',
        'additional_data' => 'getAdditionalData',
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'employee_external_id' => 'getEmployeeExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deduction_category_id', $data ?? [], null);
        $this->setIfExists('deduction_category_name', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('associated_employee_deduction_category_id', $data ?? [], null);
        $this->setIfExists('pay_to_bank_account_bsb', $data ?? [], null);
        $this->setIfExists('pay_to_bank_account_swift', $data ?? [], null);
        $this->setIfExists('pay_to_bank_account_bank_code', $data ?? [], null);
        $this->setIfExists('pay_to_bank_account_number', $data ?? [], null);
        $this->setIfExists('pay_to_super_fund_name', $data ?? [], null);
        $this->setIfExists('pay_to_super_fund_member_number', $data ?? [], null);
        $this->setIfExists('pay_to', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deduction_category_id
     *
     * @return string|null
     */
    public function getDeductionCategoryId()
    {
        return $this->container['deduction_category_id'];
    }

    /**
     * Sets deduction_category_id
     *
     * @param string|null $deduction_category_id 
     *
     * @return self
     */
    public function setDeductionCategoryId($deduction_category_id)
    {
        if (is_null($deduction_category_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_category_id cannot be null');
        }
        $this->container['deduction_category_id'] = $deduction_category_id;

        return $this;
    }

    /**
     * Gets deduction_category_name
     *
     * @return string|null
     */
    public function getDeductionCategoryName()
    {
        return $this->container['deduction_category_name'];
    }

    /**
     * Sets deduction_category_name
     *
     * @param string|null $deduction_category_name 
     *
     * @return self
     */
    public function setDeductionCategoryName($deduction_category_name)
    {
        if (is_null($deduction_category_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_category_name cannot be null');
        }
        $this->container['deduction_category_name'] = $deduction_category_name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference 
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_reference cannot be null');
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note 
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets associated_employee_deduction_category_id
     *
     * @return int|null
     */
    public function getAssociatedEmployeeDeductionCategoryId()
    {
        return $this->container['associated_employee_deduction_category_id'];
    }

    /**
     * Sets associated_employee_deduction_category_id
     *
     * @param int|null $associated_employee_deduction_category_id 
     *
     * @return self
     */
    public function setAssociatedEmployeeDeductionCategoryId($associated_employee_deduction_category_id)
    {
        if (is_null($associated_employee_deduction_category_id)) {
            throw new \InvalidArgumentException('non-nullable associated_employee_deduction_category_id cannot be null');
        }
        $this->container['associated_employee_deduction_category_id'] = $associated_employee_deduction_category_id;

        return $this;
    }

    /**
     * Gets pay_to_bank_account_bsb
     *
     * @return string|null
     */
    public function getPayToBankAccountBsb()
    {
        return $this->container['pay_to_bank_account_bsb'];
    }

    /**
     * Sets pay_to_bank_account_bsb
     *
     * @param string|null $pay_to_bank_account_bsb 
     *
     * @return self
     */
    public function setPayToBankAccountBsb($pay_to_bank_account_bsb)
    {
        if (is_null($pay_to_bank_account_bsb)) {
            throw new \InvalidArgumentException('non-nullable pay_to_bank_account_bsb cannot be null');
        }
        $this->container['pay_to_bank_account_bsb'] = $pay_to_bank_account_bsb;

        return $this;
    }

    /**
     * Gets pay_to_bank_account_swift
     *
     * @return string|null
     */
    public function getPayToBankAccountSwift()
    {
        return $this->container['pay_to_bank_account_swift'];
    }

    /**
     * Sets pay_to_bank_account_swift
     *
     * @param string|null $pay_to_bank_account_swift 
     *
     * @return self
     */
    public function setPayToBankAccountSwift($pay_to_bank_account_swift)
    {
        if (is_null($pay_to_bank_account_swift)) {
            throw new \InvalidArgumentException('non-nullable pay_to_bank_account_swift cannot be null');
        }
        $this->container['pay_to_bank_account_swift'] = $pay_to_bank_account_swift;

        return $this;
    }

    /**
     * Gets pay_to_bank_account_bank_code
     *
     * @return string|null
     */
    public function getPayToBankAccountBankCode()
    {
        return $this->container['pay_to_bank_account_bank_code'];
    }

    /**
     * Sets pay_to_bank_account_bank_code
     *
     * @param string|null $pay_to_bank_account_bank_code 
     *
     * @return self
     */
    public function setPayToBankAccountBankCode($pay_to_bank_account_bank_code)
    {
        if (is_null($pay_to_bank_account_bank_code)) {
            throw new \InvalidArgumentException('non-nullable pay_to_bank_account_bank_code cannot be null');
        }
        $this->container['pay_to_bank_account_bank_code'] = $pay_to_bank_account_bank_code;

        return $this;
    }

    /**
     * Gets pay_to_bank_account_number
     *
     * @return string|null
     */
    public function getPayToBankAccountNumber()
    {
        return $this->container['pay_to_bank_account_number'];
    }

    /**
     * Sets pay_to_bank_account_number
     *
     * @param string|null $pay_to_bank_account_number 
     *
     * @return self
     */
    public function setPayToBankAccountNumber($pay_to_bank_account_number)
    {
        if (is_null($pay_to_bank_account_number)) {
            throw new \InvalidArgumentException('non-nullable pay_to_bank_account_number cannot be null');
        }
        $this->container['pay_to_bank_account_number'] = $pay_to_bank_account_number;

        return $this;
    }

    /**
     * Gets pay_to_super_fund_name
     *
     * @return string|null
     */
    public function getPayToSuperFundName()
    {
        return $this->container['pay_to_super_fund_name'];
    }

    /**
     * Sets pay_to_super_fund_name
     *
     * @param string|null $pay_to_super_fund_name 
     *
     * @return self
     */
    public function setPayToSuperFundName($pay_to_super_fund_name)
    {
        if (is_null($pay_to_super_fund_name)) {
            throw new \InvalidArgumentException('non-nullable pay_to_super_fund_name cannot be null');
        }
        $this->container['pay_to_super_fund_name'] = $pay_to_super_fund_name;

        return $this;
    }

    /**
     * Gets pay_to_super_fund_member_number
     *
     * @return string|null
     */
    public function getPayToSuperFundMemberNumber()
    {
        return $this->container['pay_to_super_fund_member_number'];
    }

    /**
     * Sets pay_to_super_fund_member_number
     *
     * @param string|null $pay_to_super_fund_member_number 
     *
     * @return self
     */
    public function setPayToSuperFundMemberNumber($pay_to_super_fund_member_number)
    {
        if (is_null($pay_to_super_fund_member_number)) {
            throw new \InvalidArgumentException('non-nullable pay_to_super_fund_member_number cannot be null');
        }
        $this->container['pay_to_super_fund_member_number'] = $pay_to_super_fund_member_number;

        return $this;
    }

    /**
     * Gets pay_to
     *
     * @return string|null
     */
    public function getPayTo()
    {
        return $this->container['pay_to'];
    }

    /**
     * Sets pay_to
     *
     * @param string|null $pay_to 
     *
     * @return self
     */
    public function setPayTo($pay_to)
    {
        if (is_null($pay_to)) {
            throw new \InvalidArgumentException('non-nullable pay_to cannot be null');
        }
        $this->container['pay_to'] = $pay_to;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return int|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param int|null $additional_data 
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


