<?php
/**
 * AuTimeAndAttendanceKioskModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuTimeAndAttendanceKioskModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuTimeAndAttendanceKioskModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuTimeAndAttendanceKioskModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_higher_classification_selection' => 'bool',
        'id' => 'int',
        'external_id' => 'string',
        'location_id' => 'int',
        'name' => 'string',
        'time_zone' => 'string',
        'branding' => '\OpenAPI\Client\Model\WhiteLabelBrandingModel',
        'is_location_required' => 'bool',
        'is_work_type_required' => 'bool',
        'restrict_locations_for_employees' => 'bool',
        'allow_employee_shift_selection' => 'bool',
        'clock_on_window_minutes' => 'int',
        'clock_off_window_minutes' => 'int',
        'iana_time_zone' => 'string',
        'is_photo_required' => 'bool',
        'can_add_employees' => 'bool',
        'available_to_all_restricted_users_with_kiosk_access' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_higher_classification_selection' => null,
        'id' => 'int32',
        'external_id' => null,
        'location_id' => 'int32',
        'name' => null,
        'time_zone' => null,
        'branding' => null,
        'is_location_required' => null,
        'is_work_type_required' => null,
        'restrict_locations_for_employees' => null,
        'allow_employee_shift_selection' => null,
        'clock_on_window_minutes' => 'int32',
        'clock_off_window_minutes' => 'int32',
        'iana_time_zone' => null,
        'is_photo_required' => null,
        'can_add_employees' => null,
        'available_to_all_restricted_users_with_kiosk_access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_higher_classification_selection' => false,
		'id' => false,
		'external_id' => false,
		'location_id' => false,
		'name' => false,
		'time_zone' => false,
		'branding' => false,
		'is_location_required' => false,
		'is_work_type_required' => false,
		'restrict_locations_for_employees' => false,
		'allow_employee_shift_selection' => false,
		'clock_on_window_minutes' => false,
		'clock_off_window_minutes' => false,
		'iana_time_zone' => false,
		'is_photo_required' => false,
		'can_add_employees' => false,
		'available_to_all_restricted_users_with_kiosk_access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_higher_classification_selection' => 'allowHigherClassificationSelection',
        'id' => 'id',
        'external_id' => 'externalId',
        'location_id' => 'locationId',
        'name' => 'name',
        'time_zone' => 'timeZone',
        'branding' => 'branding',
        'is_location_required' => 'isLocationRequired',
        'is_work_type_required' => 'isWorkTypeRequired',
        'restrict_locations_for_employees' => 'restrictLocationsForEmployees',
        'allow_employee_shift_selection' => 'allowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'clockOnWindowMinutes',
        'clock_off_window_minutes' => 'clockOffWindowMinutes',
        'iana_time_zone' => 'ianaTimeZone',
        'is_photo_required' => 'isPhotoRequired',
        'can_add_employees' => 'canAddEmployees',
        'available_to_all_restricted_users_with_kiosk_access' => 'availableToAllRestrictedUsersWithKioskAccess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_higher_classification_selection' => 'setAllowHigherClassificationSelection',
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'location_id' => 'setLocationId',
        'name' => 'setName',
        'time_zone' => 'setTimeZone',
        'branding' => 'setBranding',
        'is_location_required' => 'setIsLocationRequired',
        'is_work_type_required' => 'setIsWorkTypeRequired',
        'restrict_locations_for_employees' => 'setRestrictLocationsForEmployees',
        'allow_employee_shift_selection' => 'setAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'setClockOnWindowMinutes',
        'clock_off_window_minutes' => 'setClockOffWindowMinutes',
        'iana_time_zone' => 'setIanaTimeZone',
        'is_photo_required' => 'setIsPhotoRequired',
        'can_add_employees' => 'setCanAddEmployees',
        'available_to_all_restricted_users_with_kiosk_access' => 'setAvailableToAllRestrictedUsersWithKioskAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_higher_classification_selection' => 'getAllowHigherClassificationSelection',
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'location_id' => 'getLocationId',
        'name' => 'getName',
        'time_zone' => 'getTimeZone',
        'branding' => 'getBranding',
        'is_location_required' => 'getIsLocationRequired',
        'is_work_type_required' => 'getIsWorkTypeRequired',
        'restrict_locations_for_employees' => 'getRestrictLocationsForEmployees',
        'allow_employee_shift_selection' => 'getAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'getClockOnWindowMinutes',
        'clock_off_window_minutes' => 'getClockOffWindowMinutes',
        'iana_time_zone' => 'getIanaTimeZone',
        'is_photo_required' => 'getIsPhotoRequired',
        'can_add_employees' => 'getCanAddEmployees',
        'available_to_all_restricted_users_with_kiosk_access' => 'getAvailableToAllRestrictedUsersWithKioskAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_higher_classification_selection', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('branding', $data ?? [], null);
        $this->setIfExists('is_location_required', $data ?? [], null);
        $this->setIfExists('is_work_type_required', $data ?? [], null);
        $this->setIfExists('restrict_locations_for_employees', $data ?? [], null);
        $this->setIfExists('allow_employee_shift_selection', $data ?? [], null);
        $this->setIfExists('clock_on_window_minutes', $data ?? [], null);
        $this->setIfExists('clock_off_window_minutes', $data ?? [], null);
        $this->setIfExists('iana_time_zone', $data ?? [], null);
        $this->setIfExists('is_photo_required', $data ?? [], null);
        $this->setIfExists('can_add_employees', $data ?? [], null);
        $this->setIfExists('available_to_all_restricted_users_with_kiosk_access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_higher_classification_selection
     *
     * @return bool|null
     */
    public function getAllowHigherClassificationSelection()
    {
        return $this->container['allow_higher_classification_selection'];
    }

    /**
     * Sets allow_higher_classification_selection
     *
     * @param bool|null $allow_higher_classification_selection 
     *
     * @return self
     */
    public function setAllowHigherClassificationSelection($allow_higher_classification_selection)
    {
        if (is_null($allow_higher_classification_selection)) {
            throw new \InvalidArgumentException('non-nullable allow_higher_classification_selection cannot be null');
        }
        $this->container['allow_higher_classification_selection'] = $allow_higher_classification_selection;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone 
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets branding
     *
     * @return \OpenAPI\Client\Model\WhiteLabelBrandingModel|null
     */
    public function getBranding()
    {
        return $this->container['branding'];
    }

    /**
     * Sets branding
     *
     * @param \OpenAPI\Client\Model\WhiteLabelBrandingModel|null $branding branding
     *
     * @return self
     */
    public function setBranding($branding)
    {
        if (is_null($branding)) {
            throw new \InvalidArgumentException('non-nullable branding cannot be null');
        }
        $this->container['branding'] = $branding;

        return $this;
    }

    /**
     * Gets is_location_required
     *
     * @return bool|null
     */
    public function getIsLocationRequired()
    {
        return $this->container['is_location_required'];
    }

    /**
     * Sets is_location_required
     *
     * @param bool|null $is_location_required 
     *
     * @return self
     */
    public function setIsLocationRequired($is_location_required)
    {
        if (is_null($is_location_required)) {
            throw new \InvalidArgumentException('non-nullable is_location_required cannot be null');
        }
        $this->container['is_location_required'] = $is_location_required;

        return $this;
    }

    /**
     * Gets is_work_type_required
     *
     * @return bool|null
     */
    public function getIsWorkTypeRequired()
    {
        return $this->container['is_work_type_required'];
    }

    /**
     * Sets is_work_type_required
     *
     * @param bool|null $is_work_type_required 
     *
     * @return self
     */
    public function setIsWorkTypeRequired($is_work_type_required)
    {
        if (is_null($is_work_type_required)) {
            throw new \InvalidArgumentException('non-nullable is_work_type_required cannot be null');
        }
        $this->container['is_work_type_required'] = $is_work_type_required;

        return $this;
    }

    /**
     * Gets restrict_locations_for_employees
     *
     * @return bool|null
     */
    public function getRestrictLocationsForEmployees()
    {
        return $this->container['restrict_locations_for_employees'];
    }

    /**
     * Sets restrict_locations_for_employees
     *
     * @param bool|null $restrict_locations_for_employees 
     *
     * @return self
     */
    public function setRestrictLocationsForEmployees($restrict_locations_for_employees)
    {
        if (is_null($restrict_locations_for_employees)) {
            throw new \InvalidArgumentException('non-nullable restrict_locations_for_employees cannot be null');
        }
        $this->container['restrict_locations_for_employees'] = $restrict_locations_for_employees;

        return $this;
    }

    /**
     * Gets allow_employee_shift_selection
     *
     * @return bool|null
     */
    public function getAllowEmployeeShiftSelection()
    {
        return $this->container['allow_employee_shift_selection'];
    }

    /**
     * Sets allow_employee_shift_selection
     *
     * @param bool|null $allow_employee_shift_selection 
     *
     * @return self
     */
    public function setAllowEmployeeShiftSelection($allow_employee_shift_selection)
    {
        if (is_null($allow_employee_shift_selection)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_shift_selection cannot be null');
        }
        $this->container['allow_employee_shift_selection'] = $allow_employee_shift_selection;

        return $this;
    }

    /**
     * Gets clock_on_window_minutes
     *
     * @return int|null
     */
    public function getClockOnWindowMinutes()
    {
        return $this->container['clock_on_window_minutes'];
    }

    /**
     * Sets clock_on_window_minutes
     *
     * @param int|null $clock_on_window_minutes 
     *
     * @return self
     */
    public function setClockOnWindowMinutes($clock_on_window_minutes)
    {
        if (is_null($clock_on_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_on_window_minutes cannot be null');
        }
        $this->container['clock_on_window_minutes'] = $clock_on_window_minutes;

        return $this;
    }

    /**
     * Gets clock_off_window_minutes
     *
     * @return int|null
     */
    public function getClockOffWindowMinutes()
    {
        return $this->container['clock_off_window_minutes'];
    }

    /**
     * Sets clock_off_window_minutes
     *
     * @param int|null $clock_off_window_minutes 
     *
     * @return self
     */
    public function setClockOffWindowMinutes($clock_off_window_minutes)
    {
        if (is_null($clock_off_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_off_window_minutes cannot be null');
        }
        $this->container['clock_off_window_minutes'] = $clock_off_window_minutes;

        return $this;
    }

    /**
     * Gets iana_time_zone
     *
     * @return string|null
     */
    public function getIanaTimeZone()
    {
        return $this->container['iana_time_zone'];
    }

    /**
     * Sets iana_time_zone
     *
     * @param string|null $iana_time_zone 
     *
     * @return self
     */
    public function setIanaTimeZone($iana_time_zone)
    {
        if (is_null($iana_time_zone)) {
            throw new \InvalidArgumentException('non-nullable iana_time_zone cannot be null');
        }
        $this->container['iana_time_zone'] = $iana_time_zone;

        return $this;
    }

    /**
     * Gets is_photo_required
     *
     * @return bool|null
     */
    public function getIsPhotoRequired()
    {
        return $this->container['is_photo_required'];
    }

    /**
     * Sets is_photo_required
     *
     * @param bool|null $is_photo_required 
     *
     * @return self
     */
    public function setIsPhotoRequired($is_photo_required)
    {
        if (is_null($is_photo_required)) {
            throw new \InvalidArgumentException('non-nullable is_photo_required cannot be null');
        }
        $this->container['is_photo_required'] = $is_photo_required;

        return $this;
    }

    /**
     * Gets can_add_employees
     *
     * @return bool|null
     */
    public function getCanAddEmployees()
    {
        return $this->container['can_add_employees'];
    }

    /**
     * Sets can_add_employees
     *
     * @param bool|null $can_add_employees 
     *
     * @return self
     */
    public function setCanAddEmployees($can_add_employees)
    {
        if (is_null($can_add_employees)) {
            throw new \InvalidArgumentException('non-nullable can_add_employees cannot be null');
        }
        $this->container['can_add_employees'] = $can_add_employees;

        return $this;
    }

    /**
     * Gets available_to_all_restricted_users_with_kiosk_access
     *
     * @return bool|null
     */
    public function getAvailableToAllRestrictedUsersWithKioskAccess()
    {
        return $this->container['available_to_all_restricted_users_with_kiosk_access'];
    }

    /**
     * Sets available_to_all_restricted_users_with_kiosk_access
     *
     * @param bool|null $available_to_all_restricted_users_with_kiosk_access 
     *
     * @return self
     */
    public function setAvailableToAllRestrictedUsersWithKioskAccess($available_to_all_restricted_users_with_kiosk_access)
    {
        if (is_null($available_to_all_restricted_users_with_kiosk_access)) {
            throw new \InvalidArgumentException('non-nullable available_to_all_restricted_users_with_kiosk_access cannot be null');
        }
        $this->container['available_to_all_restricted_users_with_kiosk_access'] = $available_to_all_restricted_users_with_kiosk_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


