<?php
/**
 * AuLeaveAllowanceModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuLeaveAllowanceModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuLeaveAllowanceModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuLeaveAllowanceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'leave_loading' => 'double',
        'leave_accrual_rule' => '\Swagger\Client\Model\AuLeaveAccrualRuleModel',
        'leave_category_id' => 'string',
        'leave_category_name' => 'string',
        'units' => 'double',
        'unit_type' => 'string',
        'leave_unit_type' => 'string',
        'hours_per_year' => 'double',
        'automatically_accrues' => 'bool',
        'can_apply_for_leave' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'leave_loading' => 'double',
        'leave_accrual_rule' => null,
        'leave_category_id' => null,
        'leave_category_name' => null,
        'units' => 'double',
        'unit_type' => null,
        'leave_unit_type' => null,
        'hours_per_year' => 'double',
        'automatically_accrues' => null,
        'can_apply_for_leave' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leave_loading' => 'leaveLoading',
        'leave_accrual_rule' => 'leaveAccrualRule',
        'leave_category_id' => 'leaveCategoryId',
        'leave_category_name' => 'leaveCategoryName',
        'units' => 'units',
        'unit_type' => 'unitType',
        'leave_unit_type' => 'leaveUnitType',
        'hours_per_year' => 'hoursPerYear',
        'automatically_accrues' => 'automaticallyAccrues',
        'can_apply_for_leave' => 'canApplyForLeave'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leave_loading' => 'setLeaveLoading',
        'leave_accrual_rule' => 'setLeaveAccrualRule',
        'leave_category_id' => 'setLeaveCategoryId',
        'leave_category_name' => 'setLeaveCategoryName',
        'units' => 'setUnits',
        'unit_type' => 'setUnitType',
        'leave_unit_type' => 'setLeaveUnitType',
        'hours_per_year' => 'setHoursPerYear',
        'automatically_accrues' => 'setAutomaticallyAccrues',
        'can_apply_for_leave' => 'setCanApplyForLeave'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leave_loading' => 'getLeaveLoading',
        'leave_accrual_rule' => 'getLeaveAccrualRule',
        'leave_category_id' => 'getLeaveCategoryId',
        'leave_category_name' => 'getLeaveCategoryName',
        'units' => 'getUnits',
        'unit_type' => 'getUnitType',
        'leave_unit_type' => 'getLeaveUnitType',
        'hours_per_year' => 'getHoursPerYear',
        'automatically_accrues' => 'getAutomaticallyAccrues',
        'can_apply_for_leave' => 'getCanApplyForLeave'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['leave_loading'] = isset($data['leave_loading']) ? $data['leave_loading'] : null;
        $this->container['leave_accrual_rule'] = isset($data['leave_accrual_rule']) ? $data['leave_accrual_rule'] : null;
        $this->container['leave_category_id'] = isset($data['leave_category_id']) ? $data['leave_category_id'] : null;
        $this->container['leave_category_name'] = isset($data['leave_category_name']) ? $data['leave_category_name'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['leave_unit_type'] = isset($data['leave_unit_type']) ? $data['leave_unit_type'] : null;
        $this->container['hours_per_year'] = isset($data['hours_per_year']) ? $data['hours_per_year'] : null;
        $this->container['automatically_accrues'] = isset($data['automatically_accrues']) ? $data['automatically_accrues'] : null;
        $this->container['can_apply_for_leave'] = isset($data['can_apply_for_leave']) ? $data['can_apply_for_leave'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leave_loading
     *
     * @return double
     */
    public function getLeaveLoading()
    {
        return $this->container['leave_loading'];
    }

    /**
     * Sets leave_loading
     *
     * @param double $leave_loading 
     *
     * @return $this
     */
    public function setLeaveLoading($leave_loading)
    {
        $this->container['leave_loading'] = $leave_loading;

        return $this;
    }

    /**
     * Gets leave_accrual_rule
     *
     * @return \Swagger\Client\Model\AuLeaveAccrualRuleModel
     */
    public function getLeaveAccrualRule()
    {
        return $this->container['leave_accrual_rule'];
    }

    /**
     * Sets leave_accrual_rule
     *
     * @param \Swagger\Client\Model\AuLeaveAccrualRuleModel $leave_accrual_rule 
     *
     * @return $this
     */
    public function setLeaveAccrualRule($leave_accrual_rule)
    {
        $this->container['leave_accrual_rule'] = $leave_accrual_rule;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return string
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param string $leave_category_id 
     *
     * @return $this
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets leave_category_name
     *
     * @return string
     */
    public function getLeaveCategoryName()
    {
        return $this->container['leave_category_name'];
    }

    /**
     * Sets leave_category_name
     *
     * @param string $leave_category_name 
     *
     * @return $this
     */
    public function setLeaveCategoryName($leave_category_name)
    {
        $this->container['leave_category_name'] = $leave_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units 
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type 
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets leave_unit_type
     *
     * @return string
     */
    public function getLeaveUnitType()
    {
        return $this->container['leave_unit_type'];
    }

    /**
     * Sets leave_unit_type
     *
     * @param string $leave_unit_type 
     *
     * @return $this
     */
    public function setLeaveUnitType($leave_unit_type)
    {
        $this->container['leave_unit_type'] = $leave_unit_type;

        return $this;
    }

    /**
     * Gets hours_per_year
     *
     * @return double
     */
    public function getHoursPerYear()
    {
        return $this->container['hours_per_year'];
    }

    /**
     * Sets hours_per_year
     *
     * @param double $hours_per_year 
     *
     * @return $this
     */
    public function setHoursPerYear($hours_per_year)
    {
        $this->container['hours_per_year'] = $hours_per_year;

        return $this;
    }

    /**
     * Gets automatically_accrues
     *
     * @return bool
     */
    public function getAutomaticallyAccrues()
    {
        return $this->container['automatically_accrues'];
    }

    /**
     * Sets automatically_accrues
     *
     * @param bool $automatically_accrues 
     *
     * @return $this
     */
    public function setAutomaticallyAccrues($automatically_accrues)
    {
        $this->container['automatically_accrues'] = $automatically_accrues;

        return $this;
    }

    /**
     * Gets can_apply_for_leave
     *
     * @return bool
     */
    public function getCanApplyForLeave()
    {
        return $this->container['can_apply_for_leave'];
    }

    /**
     * Sets can_apply_for_leave
     *
     * @param bool $can_apply_for_leave 
     *
     * @return $this
     */
    public function setCanApplyForLeave($can_apply_for_leave)
    {
        $this->container['can_apply_for_leave'] = $can_apply_for_leave;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


