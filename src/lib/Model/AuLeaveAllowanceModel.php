<?php
/**
 * AuLeaveAllowanceModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuLeaveAllowanceModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuLeaveAllowanceModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuLeaveAllowanceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'leave_loading' => 'float',
        'leave_accrual_rule' => '\OpenAPI\Client\Model\AuLeaveAccrualRuleModel',
        'leave_category_id' => 'string',
        'leave_category_name' => 'string',
        'units' => 'float',
        'unit_type' => 'string',
        'leave_unit_type' => 'string',
        'hours_per_year' => 'float',
        'automatically_accrues' => 'bool',
        'can_apply_for_leave' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'leave_loading' => 'double',
        'leave_accrual_rule' => null,
        'leave_category_id' => null,
        'leave_category_name' => null,
        'units' => 'double',
        'unit_type' => null,
        'leave_unit_type' => null,
        'hours_per_year' => 'double',
        'automatically_accrues' => null,
        'can_apply_for_leave' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'leave_loading' => false,
		'leave_accrual_rule' => false,
		'leave_category_id' => false,
		'leave_category_name' => false,
		'units' => false,
		'unit_type' => false,
		'leave_unit_type' => false,
		'hours_per_year' => false,
		'automatically_accrues' => false,
		'can_apply_for_leave' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leave_loading' => 'leaveLoading',
        'leave_accrual_rule' => 'leaveAccrualRule',
        'leave_category_id' => 'leaveCategoryId',
        'leave_category_name' => 'leaveCategoryName',
        'units' => 'units',
        'unit_type' => 'unitType',
        'leave_unit_type' => 'leaveUnitType',
        'hours_per_year' => 'hoursPerYear',
        'automatically_accrues' => 'automaticallyAccrues',
        'can_apply_for_leave' => 'canApplyForLeave'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leave_loading' => 'setLeaveLoading',
        'leave_accrual_rule' => 'setLeaveAccrualRule',
        'leave_category_id' => 'setLeaveCategoryId',
        'leave_category_name' => 'setLeaveCategoryName',
        'units' => 'setUnits',
        'unit_type' => 'setUnitType',
        'leave_unit_type' => 'setLeaveUnitType',
        'hours_per_year' => 'setHoursPerYear',
        'automatically_accrues' => 'setAutomaticallyAccrues',
        'can_apply_for_leave' => 'setCanApplyForLeave'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leave_loading' => 'getLeaveLoading',
        'leave_accrual_rule' => 'getLeaveAccrualRule',
        'leave_category_id' => 'getLeaveCategoryId',
        'leave_category_name' => 'getLeaveCategoryName',
        'units' => 'getUnits',
        'unit_type' => 'getUnitType',
        'leave_unit_type' => 'getLeaveUnitType',
        'hours_per_year' => 'getHoursPerYear',
        'automatically_accrues' => 'getAutomaticallyAccrues',
        'can_apply_for_leave' => 'getCanApplyForLeave'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('leave_loading', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule', $data ?? [], null);
        $this->setIfExists('leave_category_id', $data ?? [], null);
        $this->setIfExists('leave_category_name', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('leave_unit_type', $data ?? [], null);
        $this->setIfExists('hours_per_year', $data ?? [], null);
        $this->setIfExists('automatically_accrues', $data ?? [], null);
        $this->setIfExists('can_apply_for_leave', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leave_loading
     *
     * @return float|null
     */
    public function getLeaveLoading()
    {
        return $this->container['leave_loading'];
    }

    /**
     * Sets leave_loading
     *
     * @param float|null $leave_loading 
     *
     * @return self
     */
    public function setLeaveLoading($leave_loading)
    {
        if (is_null($leave_loading)) {
            throw new \InvalidArgumentException('non-nullable leave_loading cannot be null');
        }
        $this->container['leave_loading'] = $leave_loading;

        return $this;
    }

    /**
     * Gets leave_accrual_rule
     *
     * @return \OpenAPI\Client\Model\AuLeaveAccrualRuleModel|null
     */
    public function getLeaveAccrualRule()
    {
        return $this->container['leave_accrual_rule'];
    }

    /**
     * Sets leave_accrual_rule
     *
     * @param \OpenAPI\Client\Model\AuLeaveAccrualRuleModel|null $leave_accrual_rule leave_accrual_rule
     *
     * @return self
     */
    public function setLeaveAccrualRule($leave_accrual_rule)
    {
        if (is_null($leave_accrual_rule)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule cannot be null');
        }
        $this->container['leave_accrual_rule'] = $leave_accrual_rule;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return string|null
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param string|null $leave_category_id 
     *
     * @return self
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        if (is_null($leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable leave_category_id cannot be null');
        }
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets leave_category_name
     *
     * @return string|null
     */
    public function getLeaveCategoryName()
    {
        return $this->container['leave_category_name'];
    }

    /**
     * Sets leave_category_name
     *
     * @param string|null $leave_category_name 
     *
     * @return self
     */
    public function setLeaveCategoryName($leave_category_name)
    {
        if (is_null($leave_category_name)) {
            throw new \InvalidArgumentException('non-nullable leave_category_name cannot be null');
        }
        $this->container['leave_category_name'] = $leave_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets leave_unit_type
     *
     * @return string|null
     */
    public function getLeaveUnitType()
    {
        return $this->container['leave_unit_type'];
    }

    /**
     * Sets leave_unit_type
     *
     * @param string|null $leave_unit_type 
     *
     * @return self
     */
    public function setLeaveUnitType($leave_unit_type)
    {
        if (is_null($leave_unit_type)) {
            throw new \InvalidArgumentException('non-nullable leave_unit_type cannot be null');
        }
        $this->container['leave_unit_type'] = $leave_unit_type;

        return $this;
    }

    /**
     * Gets hours_per_year
     *
     * @return float|null
     */
    public function getHoursPerYear()
    {
        return $this->container['hours_per_year'];
    }

    /**
     * Sets hours_per_year
     *
     * @param float|null $hours_per_year 
     *
     * @return self
     */
    public function setHoursPerYear($hours_per_year)
    {
        if (is_null($hours_per_year)) {
            throw new \InvalidArgumentException('non-nullable hours_per_year cannot be null');
        }
        $this->container['hours_per_year'] = $hours_per_year;

        return $this;
    }

    /**
     * Gets automatically_accrues
     *
     * @return bool|null
     */
    public function getAutomaticallyAccrues()
    {
        return $this->container['automatically_accrues'];
    }

    /**
     * Sets automatically_accrues
     *
     * @param bool|null $automatically_accrues 
     *
     * @return self
     */
    public function setAutomaticallyAccrues($automatically_accrues)
    {
        if (is_null($automatically_accrues)) {
            throw new \InvalidArgumentException('non-nullable automatically_accrues cannot be null');
        }
        $this->container['automatically_accrues'] = $automatically_accrues;

        return $this;
    }

    /**
     * Gets can_apply_for_leave
     *
     * @return bool|null
     */
    public function getCanApplyForLeave()
    {
        return $this->container['can_apply_for_leave'];
    }

    /**
     * Sets can_apply_for_leave
     *
     * @param bool|null $can_apply_for_leave 
     *
     * @return self
     */
    public function setCanApplyForLeave($can_apply_for_leave)
    {
        if (is_null($can_apply_for_leave)) {
            throw new \InvalidArgumentException('non-nullable can_apply_for_leave cannot be null');
        }
        $this->container['can_apply_for_leave'] = $can_apply_for_leave;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


