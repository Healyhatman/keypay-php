<?php
/**
 * PayrollExport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayrollExport Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollExport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayrollExport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'employee_agreement_id' => 'int',
        'period_id' => 'int',
        'recommended_loadings' => 'bool',
        'timesheets' => 'int',
        'timesheets_time_approved' => 'int',
        'timesheets_pay_approved' => 'int',
        'paycycle_rules' => 'int',
        'paycycle_rules_approved' => 'int',
        'exported' => 'bool',
        'export_id' => 'int',
        'paid' => 'bool',
        'time_total' => 'float',
        'cost_total' => 'float',
        'employee_agreement_history_id' => 'int',
        'creator' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'employee_agreement' => '\OpenAPI\Client\Model\EmployeeAgreement',
        'paycycle_return_array' => '\OpenAPI\Client\Model\TimesheetPayReturnArray[]',
        'timesheet_array' => '\OpenAPI\Client\Model\TimesheetArray[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'employee_id' => 'int32',
        'employee_agreement_id' => 'int32',
        'period_id' => 'int32',
        'recommended_loadings' => null,
        'timesheets' => 'int32',
        'timesheets_time_approved' => 'int32',
        'timesheets_pay_approved' => 'int32',
        'paycycle_rules' => 'int32',
        'paycycle_rules_approved' => 'int32',
        'exported' => null,
        'export_id' => 'int32',
        'paid' => null,
        'time_total' => 'double',
        'cost_total' => 'double',
        'employee_agreement_history_id' => 'int32',
        'creator' => 'int32',
        'created' => 'date-time',
        'modified' => 'date-time',
        'employee_agreement' => null,
        'paycycle_return_array' => null,
        'timesheet_array' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'employee_id' => false,
		'employee_agreement_id' => false,
		'period_id' => false,
		'recommended_loadings' => false,
		'timesheets' => false,
		'timesheets_time_approved' => false,
		'timesheets_pay_approved' => false,
		'paycycle_rules' => false,
		'paycycle_rules_approved' => false,
		'exported' => false,
		'export_id' => false,
		'paid' => false,
		'time_total' => false,
		'cost_total' => false,
		'employee_agreement_history_id' => false,
		'creator' => false,
		'created' => false,
		'modified' => false,
		'employee_agreement' => false,
		'paycycle_return_array' => false,
		'timesheet_array' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'employee_agreement_id' => 'employeeAgreementId',
        'period_id' => 'periodId',
        'recommended_loadings' => 'recommendedLoadings',
        'timesheets' => 'timesheets',
        'timesheets_time_approved' => 'timesheetsTimeApproved',
        'timesheets_pay_approved' => 'timesheetsPayApproved',
        'paycycle_rules' => 'paycycleRules',
        'paycycle_rules_approved' => 'paycycleRulesApproved',
        'exported' => 'exported',
        'export_id' => 'exportId',
        'paid' => 'paid',
        'time_total' => 'timeTotal',
        'cost_total' => 'costTotal',
        'employee_agreement_history_id' => 'employeeAgreementHistoryId',
        'creator' => 'creator',
        'created' => 'created',
        'modified' => 'modified',
        'employee_agreement' => 'employeeAgreement',
        'paycycle_return_array' => 'paycycleReturnArray',
        'timesheet_array' => 'timesheetArray'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'employee_agreement_id' => 'setEmployeeAgreementId',
        'period_id' => 'setPeriodId',
        'recommended_loadings' => 'setRecommendedLoadings',
        'timesheets' => 'setTimesheets',
        'timesheets_time_approved' => 'setTimesheetsTimeApproved',
        'timesheets_pay_approved' => 'setTimesheetsPayApproved',
        'paycycle_rules' => 'setPaycycleRules',
        'paycycle_rules_approved' => 'setPaycycleRulesApproved',
        'exported' => 'setExported',
        'export_id' => 'setExportId',
        'paid' => 'setPaid',
        'time_total' => 'setTimeTotal',
        'cost_total' => 'setCostTotal',
        'employee_agreement_history_id' => 'setEmployeeAgreementHistoryId',
        'creator' => 'setCreator',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'employee_agreement' => 'setEmployeeAgreement',
        'paycycle_return_array' => 'setPaycycleReturnArray',
        'timesheet_array' => 'setTimesheetArray'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'employee_agreement_id' => 'getEmployeeAgreementId',
        'period_id' => 'getPeriodId',
        'recommended_loadings' => 'getRecommendedLoadings',
        'timesheets' => 'getTimesheets',
        'timesheets_time_approved' => 'getTimesheetsTimeApproved',
        'timesheets_pay_approved' => 'getTimesheetsPayApproved',
        'paycycle_rules' => 'getPaycycleRules',
        'paycycle_rules_approved' => 'getPaycycleRulesApproved',
        'exported' => 'getExported',
        'export_id' => 'getExportId',
        'paid' => 'getPaid',
        'time_total' => 'getTimeTotal',
        'cost_total' => 'getCostTotal',
        'employee_agreement_history_id' => 'getEmployeeAgreementHistoryId',
        'creator' => 'getCreator',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'employee_agreement' => 'getEmployeeAgreement',
        'paycycle_return_array' => 'getPaycycleReturnArray',
        'timesheet_array' => 'getTimesheetArray'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_agreement_id', $data ?? [], null);
        $this->setIfExists('period_id', $data ?? [], null);
        $this->setIfExists('recommended_loadings', $data ?? [], null);
        $this->setIfExists('timesheets', $data ?? [], null);
        $this->setIfExists('timesheets_time_approved', $data ?? [], null);
        $this->setIfExists('timesheets_pay_approved', $data ?? [], null);
        $this->setIfExists('paycycle_rules', $data ?? [], null);
        $this->setIfExists('paycycle_rules_approved', $data ?? [], null);
        $this->setIfExists('exported', $data ?? [], null);
        $this->setIfExists('export_id', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('time_total', $data ?? [], null);
        $this->setIfExists('cost_total', $data ?? [], null);
        $this->setIfExists('employee_agreement_history_id', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('employee_agreement', $data ?? [], null);
        $this->setIfExists('paycycle_return_array', $data ?? [], null);
        $this->setIfExists('timesheet_array', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_agreement_id
     *
     * @return int|null
     */
    public function getEmployeeAgreementId()
    {
        return $this->container['employee_agreement_id'];
    }

    /**
     * Sets employee_agreement_id
     *
     * @param int|null $employee_agreement_id 
     *
     * @return self
     */
    public function setEmployeeAgreementId($employee_agreement_id)
    {
        if (is_null($employee_agreement_id)) {
            throw new \InvalidArgumentException('non-nullable employee_agreement_id cannot be null');
        }
        $this->container['employee_agreement_id'] = $employee_agreement_id;

        return $this;
    }

    /**
     * Gets period_id
     *
     * @return int|null
     */
    public function getPeriodId()
    {
        return $this->container['period_id'];
    }

    /**
     * Sets period_id
     *
     * @param int|null $period_id 
     *
     * @return self
     */
    public function setPeriodId($period_id)
    {
        if (is_null($period_id)) {
            throw new \InvalidArgumentException('non-nullable period_id cannot be null');
        }
        $this->container['period_id'] = $period_id;

        return $this;
    }

    /**
     * Gets recommended_loadings
     *
     * @return bool|null
     */
    public function getRecommendedLoadings()
    {
        return $this->container['recommended_loadings'];
    }

    /**
     * Sets recommended_loadings
     *
     * @param bool|null $recommended_loadings 
     *
     * @return self
     */
    public function setRecommendedLoadings($recommended_loadings)
    {
        if (is_null($recommended_loadings)) {
            throw new \InvalidArgumentException('non-nullable recommended_loadings cannot be null');
        }
        $this->container['recommended_loadings'] = $recommended_loadings;

        return $this;
    }

    /**
     * Gets timesheets
     *
     * @return int|null
     */
    public function getTimesheets()
    {
        return $this->container['timesheets'];
    }

    /**
     * Sets timesheets
     *
     * @param int|null $timesheets 
     *
     * @return self
     */
    public function setTimesheets($timesheets)
    {
        if (is_null($timesheets)) {
            throw new \InvalidArgumentException('non-nullable timesheets cannot be null');
        }
        $this->container['timesheets'] = $timesheets;

        return $this;
    }

    /**
     * Gets timesheets_time_approved
     *
     * @return int|null
     */
    public function getTimesheetsTimeApproved()
    {
        return $this->container['timesheets_time_approved'];
    }

    /**
     * Sets timesheets_time_approved
     *
     * @param int|null $timesheets_time_approved 
     *
     * @return self
     */
    public function setTimesheetsTimeApproved($timesheets_time_approved)
    {
        if (is_null($timesheets_time_approved)) {
            throw new \InvalidArgumentException('non-nullable timesheets_time_approved cannot be null');
        }
        $this->container['timesheets_time_approved'] = $timesheets_time_approved;

        return $this;
    }

    /**
     * Gets timesheets_pay_approved
     *
     * @return int|null
     */
    public function getTimesheetsPayApproved()
    {
        return $this->container['timesheets_pay_approved'];
    }

    /**
     * Sets timesheets_pay_approved
     *
     * @param int|null $timesheets_pay_approved 
     *
     * @return self
     */
    public function setTimesheetsPayApproved($timesheets_pay_approved)
    {
        if (is_null($timesheets_pay_approved)) {
            throw new \InvalidArgumentException('non-nullable timesheets_pay_approved cannot be null');
        }
        $this->container['timesheets_pay_approved'] = $timesheets_pay_approved;

        return $this;
    }

    /**
     * Gets paycycle_rules
     *
     * @return int|null
     */
    public function getPaycycleRules()
    {
        return $this->container['paycycle_rules'];
    }

    /**
     * Sets paycycle_rules
     *
     * @param int|null $paycycle_rules 
     *
     * @return self
     */
    public function setPaycycleRules($paycycle_rules)
    {
        if (is_null($paycycle_rules)) {
            throw new \InvalidArgumentException('non-nullable paycycle_rules cannot be null');
        }
        $this->container['paycycle_rules'] = $paycycle_rules;

        return $this;
    }

    /**
     * Gets paycycle_rules_approved
     *
     * @return int|null
     */
    public function getPaycycleRulesApproved()
    {
        return $this->container['paycycle_rules_approved'];
    }

    /**
     * Sets paycycle_rules_approved
     *
     * @param int|null $paycycle_rules_approved 
     *
     * @return self
     */
    public function setPaycycleRulesApproved($paycycle_rules_approved)
    {
        if (is_null($paycycle_rules_approved)) {
            throw new \InvalidArgumentException('non-nullable paycycle_rules_approved cannot be null');
        }
        $this->container['paycycle_rules_approved'] = $paycycle_rules_approved;

        return $this;
    }

    /**
     * Gets exported
     *
     * @return bool|null
     */
    public function getExported()
    {
        return $this->container['exported'];
    }

    /**
     * Sets exported
     *
     * @param bool|null $exported 
     *
     * @return self
     */
    public function setExported($exported)
    {
        if (is_null($exported)) {
            throw new \InvalidArgumentException('non-nullable exported cannot be null');
        }
        $this->container['exported'] = $exported;

        return $this;
    }

    /**
     * Gets export_id
     *
     * @return int|null
     */
    public function getExportId()
    {
        return $this->container['export_id'];
    }

    /**
     * Sets export_id
     *
     * @param int|null $export_id 
     *
     * @return self
     */
    public function setExportId($export_id)
    {
        if (is_null($export_id)) {
            throw new \InvalidArgumentException('non-nullable export_id cannot be null');
        }
        $this->container['export_id'] = $export_id;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid 
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets time_total
     *
     * @return float|null
     */
    public function getTimeTotal()
    {
        return $this->container['time_total'];
    }

    /**
     * Sets time_total
     *
     * @param float|null $time_total 
     *
     * @return self
     */
    public function setTimeTotal($time_total)
    {
        if (is_null($time_total)) {
            throw new \InvalidArgumentException('non-nullable time_total cannot be null');
        }
        $this->container['time_total'] = $time_total;

        return $this;
    }

    /**
     * Gets cost_total
     *
     * @return float|null
     */
    public function getCostTotal()
    {
        return $this->container['cost_total'];
    }

    /**
     * Sets cost_total
     *
     * @param float|null $cost_total 
     *
     * @return self
     */
    public function setCostTotal($cost_total)
    {
        if (is_null($cost_total)) {
            throw new \InvalidArgumentException('non-nullable cost_total cannot be null');
        }
        $this->container['cost_total'] = $cost_total;

        return $this;
    }

    /**
     * Gets employee_agreement_history_id
     *
     * @return int|null
     */
    public function getEmployeeAgreementHistoryId()
    {
        return $this->container['employee_agreement_history_id'];
    }

    /**
     * Sets employee_agreement_history_id
     *
     * @param int|null $employee_agreement_history_id 
     *
     * @return self
     */
    public function setEmployeeAgreementHistoryId($employee_agreement_history_id)
    {
        if (is_null($employee_agreement_history_id)) {
            throw new \InvalidArgumentException('non-nullable employee_agreement_history_id cannot be null');
        }
        $this->container['employee_agreement_history_id'] = $employee_agreement_history_id;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return int|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param int|null $creator 
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException('non-nullable creator cannot be null');
        }
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created 
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified 
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets employee_agreement
     *
     * @return \OpenAPI\Client\Model\EmployeeAgreement|null
     */
    public function getEmployeeAgreement()
    {
        return $this->container['employee_agreement'];
    }

    /**
     * Sets employee_agreement
     *
     * @param \OpenAPI\Client\Model\EmployeeAgreement|null $employee_agreement employee_agreement
     *
     * @return self
     */
    public function setEmployeeAgreement($employee_agreement)
    {
        if (is_null($employee_agreement)) {
            throw new \InvalidArgumentException('non-nullable employee_agreement cannot be null');
        }
        $this->container['employee_agreement'] = $employee_agreement;

        return $this;
    }

    /**
     * Gets paycycle_return_array
     *
     * @return \OpenAPI\Client\Model\TimesheetPayReturnArray[]|null
     */
    public function getPaycycleReturnArray()
    {
        return $this->container['paycycle_return_array'];
    }

    /**
     * Sets paycycle_return_array
     *
     * @param \OpenAPI\Client\Model\TimesheetPayReturnArray[]|null $paycycle_return_array 
     *
     * @return self
     */
    public function setPaycycleReturnArray($paycycle_return_array)
    {
        if (is_null($paycycle_return_array)) {
            throw new \InvalidArgumentException('non-nullable paycycle_return_array cannot be null');
        }
        $this->container['paycycle_return_array'] = $paycycle_return_array;

        return $this;
    }

    /**
     * Gets timesheet_array
     *
     * @return \OpenAPI\Client\Model\TimesheetArray[]|null
     */
    public function getTimesheetArray()
    {
        return $this->container['timesheet_array'];
    }

    /**
     * Sets timesheet_array
     *
     * @param \OpenAPI\Client\Model\TimesheetArray[]|null $timesheet_array 
     *
     * @return self
     */
    public function setTimesheetArray($timesheet_array)
    {
        if (is_null($timesheet_array)) {
            throw new \InvalidArgumentException('non-nullable timesheet_array cannot be null');
        }
        $this->container['timesheet_array'] = $timesheet_array;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


