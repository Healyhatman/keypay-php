<?php
/**
 * ConsolidatedPayCategoryModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConsolidatedPayCategoryModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsolidatedPayCategoryModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsolidatedPayCategoryModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_summary_classification' => 'string',
        'allowance_description' => 'string',
        'default_super_rate' => 'float',
        'super_expense_mapping_code' => 'string',
        'super_liability_mapping_code' => 'string',
        'is_payroll_tax_exempt' => 'bool',
        'award_name' => 'string',
        'award_id' => 'int',
        'is_national_insurance_exempt' => 'bool',
        'is_employee_pensionable' => 'bool',
        'is_employer_pensionable' => 'bool',
        'minimum_wage_calculation_impact' => 'string',
        'is_class1_an_iable' => 'bool',
        'is_kiwi_saver_exempt' => 'bool',
        'exclude_from_average_earnings' => 'bool',
        'exclude_from_ordinary_earnings' => 'bool',
        'is_acc_levy_exempt' => 'bool',
        'is_superannuation_fund' => 'bool',
        'is_parental_leave' => 'bool',
        'cpf_classification' => 'string',
        'is_shg_exempt' => 'bool',
        'is_sdl_exempt' => 'bool',
        'is_gst_exempt' => 'bool',
        'is_net_payment' => 'bool',
        'cis_category' => 'bool',
        'is52_week_average_enabled' => 'bool',
        'apply_cis_deduction' => 'bool',
        'cis_type' => 'string',
        'id' => 'int',
        'parent_id' => 'int',
        'name' => 'string',
        'rate_unit' => 'string',
        'accrues_leave' => 'bool',
        'rate_loading_percent' => 'float',
        'penalty_loading_percent' => 'float',
        'is_tax_exempt' => 'bool',
        'external_id' => 'string',
        'source' => 'string',
        'general_ledger_mapping_code' => 'string',
        'is_system_pay_category' => 'bool',
        'number_of_decimal_places' => 'int',
        'rounding_method' => 'string',
        'hide_units_on_pay_slip' => 'bool',
        'is_primary' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_summary_classification' => null,
        'allowance_description' => null,
        'default_super_rate' => 'double',
        'super_expense_mapping_code' => null,
        'super_liability_mapping_code' => null,
        'is_payroll_tax_exempt' => null,
        'award_name' => null,
        'award_id' => 'int32',
        'is_national_insurance_exempt' => null,
        'is_employee_pensionable' => null,
        'is_employer_pensionable' => null,
        'minimum_wage_calculation_impact' => null,
        'is_class1_an_iable' => null,
        'is_kiwi_saver_exempt' => null,
        'exclude_from_average_earnings' => null,
        'exclude_from_ordinary_earnings' => null,
        'is_acc_levy_exempt' => null,
        'is_superannuation_fund' => null,
        'is_parental_leave' => null,
        'cpf_classification' => null,
        'is_shg_exempt' => null,
        'is_sdl_exempt' => null,
        'is_gst_exempt' => null,
        'is_net_payment' => null,
        'cis_category' => null,
        'is52_week_average_enabled' => null,
        'apply_cis_deduction' => null,
        'cis_type' => null,
        'id' => 'int32',
        'parent_id' => 'int32',
        'name' => null,
        'rate_unit' => null,
        'accrues_leave' => null,
        'rate_loading_percent' => 'double',
        'penalty_loading_percent' => 'double',
        'is_tax_exempt' => null,
        'external_id' => null,
        'source' => null,
        'general_ledger_mapping_code' => null,
        'is_system_pay_category' => null,
        'number_of_decimal_places' => 'int32',
        'rounding_method' => null,
        'hide_units_on_pay_slip' => null,
        'is_primary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payment_summary_classification' => false,
		'allowance_description' => false,
		'default_super_rate' => false,
		'super_expense_mapping_code' => false,
		'super_liability_mapping_code' => false,
		'is_payroll_tax_exempt' => false,
		'award_name' => false,
		'award_id' => false,
		'is_national_insurance_exempt' => false,
		'is_employee_pensionable' => false,
		'is_employer_pensionable' => false,
		'minimum_wage_calculation_impact' => false,
		'is_class1_an_iable' => false,
		'is_kiwi_saver_exempt' => false,
		'exclude_from_average_earnings' => false,
		'exclude_from_ordinary_earnings' => false,
		'is_acc_levy_exempt' => false,
		'is_superannuation_fund' => false,
		'is_parental_leave' => false,
		'cpf_classification' => false,
		'is_shg_exempt' => false,
		'is_sdl_exempt' => false,
		'is_gst_exempt' => false,
		'is_net_payment' => false,
		'cis_category' => false,
		'is52_week_average_enabled' => false,
		'apply_cis_deduction' => false,
		'cis_type' => false,
		'id' => false,
		'parent_id' => false,
		'name' => false,
		'rate_unit' => false,
		'accrues_leave' => false,
		'rate_loading_percent' => false,
		'penalty_loading_percent' => false,
		'is_tax_exempt' => false,
		'external_id' => false,
		'source' => false,
		'general_ledger_mapping_code' => false,
		'is_system_pay_category' => false,
		'number_of_decimal_places' => false,
		'rounding_method' => false,
		'hide_units_on_pay_slip' => false,
		'is_primary' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_summary_classification' => 'paymentSummaryClassification',
        'allowance_description' => 'allowanceDescription',
        'default_super_rate' => 'defaultSuperRate',
        'super_expense_mapping_code' => 'superExpenseMappingCode',
        'super_liability_mapping_code' => 'superLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'isPayrollTaxExempt',
        'award_name' => 'awardName',
        'award_id' => 'awardId',
        'is_national_insurance_exempt' => 'isNationalInsuranceExempt',
        'is_employee_pensionable' => 'isEmployeePensionable',
        'is_employer_pensionable' => 'isEmployerPensionable',
        'minimum_wage_calculation_impact' => 'minimumWageCalculationImpact',
        'is_class1_an_iable' => 'isClass1ANIable',
        'is_kiwi_saver_exempt' => 'isKiwiSaverExempt',
        'exclude_from_average_earnings' => 'excludeFromAverageEarnings',
        'exclude_from_ordinary_earnings' => 'excludeFromOrdinaryEarnings',
        'is_acc_levy_exempt' => 'isAccLevyExempt',
        'is_superannuation_fund' => 'isSuperannuationFund',
        'is_parental_leave' => 'isParentalLeave',
        'cpf_classification' => 'cpfClassification',
        'is_shg_exempt' => 'isShgExempt',
        'is_sdl_exempt' => 'isSdlExempt',
        'is_gst_exempt' => 'isGstExempt',
        'is_net_payment' => 'isNetPayment',
        'cis_category' => 'cisCategory',
        'is52_week_average_enabled' => 'is52WeekAverageEnabled',
        'apply_cis_deduction' => 'applyCisDeduction',
        'cis_type' => 'cisType',
        'id' => 'id',
        'parent_id' => 'parentId',
        'name' => 'name',
        'rate_unit' => 'rateUnit',
        'accrues_leave' => 'accruesLeave',
        'rate_loading_percent' => 'rateLoadingPercent',
        'penalty_loading_percent' => 'penaltyLoadingPercent',
        'is_tax_exempt' => 'isTaxExempt',
        'external_id' => 'externalId',
        'source' => 'source',
        'general_ledger_mapping_code' => 'generalLedgerMappingCode',
        'is_system_pay_category' => 'isSystemPayCategory',
        'number_of_decimal_places' => 'numberOfDecimalPlaces',
        'rounding_method' => 'roundingMethod',
        'hide_units_on_pay_slip' => 'hideUnitsOnPaySlip',
        'is_primary' => 'isPrimary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_summary_classification' => 'setPaymentSummaryClassification',
        'allowance_description' => 'setAllowanceDescription',
        'default_super_rate' => 'setDefaultSuperRate',
        'super_expense_mapping_code' => 'setSuperExpenseMappingCode',
        'super_liability_mapping_code' => 'setSuperLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'setIsPayrollTaxExempt',
        'award_name' => 'setAwardName',
        'award_id' => 'setAwardId',
        'is_national_insurance_exempt' => 'setIsNationalInsuranceExempt',
        'is_employee_pensionable' => 'setIsEmployeePensionable',
        'is_employer_pensionable' => 'setIsEmployerPensionable',
        'minimum_wage_calculation_impact' => 'setMinimumWageCalculationImpact',
        'is_class1_an_iable' => 'setIsClass1AnIable',
        'is_kiwi_saver_exempt' => 'setIsKiwiSaverExempt',
        'exclude_from_average_earnings' => 'setExcludeFromAverageEarnings',
        'exclude_from_ordinary_earnings' => 'setExcludeFromOrdinaryEarnings',
        'is_acc_levy_exempt' => 'setIsAccLevyExempt',
        'is_superannuation_fund' => 'setIsSuperannuationFund',
        'is_parental_leave' => 'setIsParentalLeave',
        'cpf_classification' => 'setCpfClassification',
        'is_shg_exempt' => 'setIsShgExempt',
        'is_sdl_exempt' => 'setIsSdlExempt',
        'is_gst_exempt' => 'setIsGstExempt',
        'is_net_payment' => 'setIsNetPayment',
        'cis_category' => 'setCisCategory',
        'is52_week_average_enabled' => 'setIs52WeekAverageEnabled',
        'apply_cis_deduction' => 'setApplyCisDeduction',
        'cis_type' => 'setCisType',
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'rate_unit' => 'setRateUnit',
        'accrues_leave' => 'setAccruesLeave',
        'rate_loading_percent' => 'setRateLoadingPercent',
        'penalty_loading_percent' => 'setPenaltyLoadingPercent',
        'is_tax_exempt' => 'setIsTaxExempt',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'general_ledger_mapping_code' => 'setGeneralLedgerMappingCode',
        'is_system_pay_category' => 'setIsSystemPayCategory',
        'number_of_decimal_places' => 'setNumberOfDecimalPlaces',
        'rounding_method' => 'setRoundingMethod',
        'hide_units_on_pay_slip' => 'setHideUnitsOnPaySlip',
        'is_primary' => 'setIsPrimary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_summary_classification' => 'getPaymentSummaryClassification',
        'allowance_description' => 'getAllowanceDescription',
        'default_super_rate' => 'getDefaultSuperRate',
        'super_expense_mapping_code' => 'getSuperExpenseMappingCode',
        'super_liability_mapping_code' => 'getSuperLiabilityMappingCode',
        'is_payroll_tax_exempt' => 'getIsPayrollTaxExempt',
        'award_name' => 'getAwardName',
        'award_id' => 'getAwardId',
        'is_national_insurance_exempt' => 'getIsNationalInsuranceExempt',
        'is_employee_pensionable' => 'getIsEmployeePensionable',
        'is_employer_pensionable' => 'getIsEmployerPensionable',
        'minimum_wage_calculation_impact' => 'getMinimumWageCalculationImpact',
        'is_class1_an_iable' => 'getIsClass1AnIable',
        'is_kiwi_saver_exempt' => 'getIsKiwiSaverExempt',
        'exclude_from_average_earnings' => 'getExcludeFromAverageEarnings',
        'exclude_from_ordinary_earnings' => 'getExcludeFromOrdinaryEarnings',
        'is_acc_levy_exempt' => 'getIsAccLevyExempt',
        'is_superannuation_fund' => 'getIsSuperannuationFund',
        'is_parental_leave' => 'getIsParentalLeave',
        'cpf_classification' => 'getCpfClassification',
        'is_shg_exempt' => 'getIsShgExempt',
        'is_sdl_exempt' => 'getIsSdlExempt',
        'is_gst_exempt' => 'getIsGstExempt',
        'is_net_payment' => 'getIsNetPayment',
        'cis_category' => 'getCisCategory',
        'is52_week_average_enabled' => 'getIs52WeekAverageEnabled',
        'apply_cis_deduction' => 'getApplyCisDeduction',
        'cis_type' => 'getCisType',
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'rate_unit' => 'getRateUnit',
        'accrues_leave' => 'getAccruesLeave',
        'rate_loading_percent' => 'getRateLoadingPercent',
        'penalty_loading_percent' => 'getPenaltyLoadingPercent',
        'is_tax_exempt' => 'getIsTaxExempt',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'general_ledger_mapping_code' => 'getGeneralLedgerMappingCode',
        'is_system_pay_category' => 'getIsSystemPayCategory',
        'number_of_decimal_places' => 'getNumberOfDecimalPlaces',
        'rounding_method' => 'getRoundingMethod',
        'hide_units_on_pay_slip' => 'getHideUnitsOnPaySlip',
        'is_primary' => 'getIsPrimary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_SUMMARY_CLASSIFICATION__DEFAULT = 'Default';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE = 'Allowance';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_R = 'LumpSumATypeR';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_T = 'LumpSumATypeT';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_B = 'LumpSumB';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_D = 'LumpSumD';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_E = 'LumpSumE';
    public const PAYMENT_SUMMARY_CLASSIFICATION_EXCLUDE = 'Exclude';
    public const PAYMENT_SUMMARY_CLASSIFICATION_CDEP = 'Cdep';
    public const PAYMENT_SUMMARY_CLASSIFICATION_EXEMPT_FOREIGN_EMPLOYMENT_INCOME = 'ExemptForeignEmploymentIncome';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_CAR = 'AllowanceCar';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRANSPORT = 'AllowanceTransport';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_LAUNDRY = 'AllowanceLaundry';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_MEALS = 'AllowanceMeals';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRAVEL = 'AllowanceTravel';
    public const PAYMENT_SUMMARY_CLASSIFICATION_GROSS_SALARY = 'GrossSalary';
    public const PAYMENT_SUMMARY_CLASSIFICATION_BONUS = 'Bonus';
    public const PAYMENT_SUMMARY_CLASSIFICATION_DIRECTORS_FEES = 'DirectorsFees';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_ENTERTAINMENT = 'AllowanceEntertainment';
    public const PAYMENT_SUMMARY_CLASSIFICATION_GROSS_COMMISSION = 'GrossCommission';
    public const PAYMENT_SUMMARY_CLASSIFICATION_PENSION = 'Pension';
    public const PAYMENT_SUMMARY_CLASSIFICATION_NOT_REPORTABLE = 'NotReportable';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_SALARY = 'MyGrossSalary';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_FEES = 'MyFees';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_TIPS = 'MyGrossTips';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ESOS_BENEFIT = 'MyEsosBenefit';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_GRATUITY = 'MyGratuity';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_BENEFITS_IN_KIND = 'MyBenefitsInKind';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_VALUE_OF_LIVING_ACCOMMODATIONS = 'MyValueOfLivingAccommodations';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_REFUND_PROVIDENT_PENSION_FUND = 'MyRefundProvidentPensionFund';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_COMPENSATION_FOR_LOSS_OF_EMPLOYMENT = 'MyCompensationForLossOfEmployment';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_PENSION = 'MyPension';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ANNUITIES = 'MyAnnuities';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_CP38_DEDUCTION = 'MyCp38Deduction';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_PAID_VIA_SALARY_DEDUCTION = 'MyZakatPaidViaSalaryDeduction';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_RELIEF_CLAIM_TP1 = 'MyReliefClaimTp1';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_RELIEF_CLAIM_TP1 = 'MyZakatReliefClaimTp1';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_TAX_EXEMPT_ALLOWANCES = 'MyTaxExemptAllowances';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_A = 'MyArrearsIncomeA';
    public const PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_B = 'MyArrearsIncomeB';
    public const PAYMENT_SUMMARY_CLASSIFICATION_NONE = 'None';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_CASH_OUT_OF_LEAVE_IN_SERVICE = 'LeaveCashOutOfLeaveInService';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_UNUSED_LEAVE_ON_TERMINATION = 'LeaveUnusedLeaveOnTermination';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_PAID_PARENTAL_LEAVE = 'LeavePaidParentalLeave';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_WORKERS_COMPENSATION = 'LeaveWorkersCompensation';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_ANCILLARY_AND_DEFENCE_LEAVE = 'LeaveAncillaryAndDefenceLeave';
    public const PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_OTHER_PAID_LEAVE = 'LeaveOtherPaidLeave';
    public const PAYMENT_SUMMARY_CLASSIFICATION_OVERTIME = 'Overtime';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TOOL = 'AllowanceTool';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TASKS = 'AllowanceTasks';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_QUALIFICATIONS_CERTIFICATES = 'AllowanceQualificationsCertificates';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_R = 'EtpLifeBenefitCodeR';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_O = 'EtpLifeBenefitCodeO';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_S = 'EtpMultiplePaymentsCodeS';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_P = 'EtpMultiplePaymentsCodeP';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_D = 'EtpDeathBenefitCodeD';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_N = 'EtpDeathBenefitCodeN';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_B = 'EtpDeathBenefitCodeB';
    public const PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_T = 'EtpDeathBenefitCodeT';
    public const PAYMENT_SUMMARY_CLASSIFICATION_RETURN_TO_WORK_PAYMENT = 'ReturnToWorkPayment';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_GRATUITY = 'SgGratuity';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_NOTICE_PAY = 'SgNoticePay';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_EX_GRATIA_PAYMENT = 'SgExGratiaPayment';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_OTHER_LUMP_SUM_PAYMENTS = 'SgOtherLumpSumPayments';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_COMPENSATION_LOSS_OF_OFFICE = 'SgCompensationLossOfOffice';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_PRE1993 = 'SgRetirementBenefitsPre1993';
    public const PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_FROM1993 = 'SgRetirementBenefitsFrom1993';
    public const MINIMUM_WAGE_CALCULATION_IMPACT__INCLUDE = 'Include';
    public const MINIMUM_WAGE_CALCULATION_IMPACT_INCLUDE_BASE_RATE = 'IncludeBaseRate';
    public const MINIMUM_WAGE_CALCULATION_IMPACT_EXCLUDE = 'Exclude';
    public const CPF_CLASSIFICATION_NONE = 'None';
    public const CPF_CLASSIFICATION_ORDINARY_WAGE = 'OrdinaryWage';
    public const CPF_CLASSIFICATION_ADDITIONAL_WAGE = 'AdditionalWage';
    public const CPF_CLASSIFICATION_EXCLUDE_FROM_CPF = 'ExcludeFromCpf';
    public const CIS_TYPE_OTHER = 'Other';
    public const CIS_TYPE_MATERIALS = 'Materials';
    public const CIS_TYPE_VAT = 'VAT';
    public const RATE_UNIT_HOURLY = 'Hourly';
    public const RATE_UNIT_ANNUALLY = 'Annually';
    public const RATE_UNIT_FIXED = 'Fixed';
    public const RATE_UNIT_DAILY = 'Daily';
    public const RATE_UNIT_MONTHLY = 'Monthly';
    public const ROUNDING_METHOD_TO_EVEN = 'ToEven';
    public const ROUNDING_METHOD_AWAY_FROM_ZERO = 'AwayFromZero';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentSummaryClassificationAllowableValues()
    {
        return [
            self::PAYMENT_SUMMARY_CLASSIFICATION__DEFAULT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_R,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_A_TYPE_T,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_D,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LUMP_SUM_E,
            self::PAYMENT_SUMMARY_CLASSIFICATION_EXCLUDE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_CDEP,
            self::PAYMENT_SUMMARY_CLASSIFICATION_EXEMPT_FOREIGN_EMPLOYMENT_INCOME,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_CAR,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRANSPORT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_LAUNDRY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_MEALS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TRAVEL,
            self::PAYMENT_SUMMARY_CLASSIFICATION_GROSS_SALARY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_BONUS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_DIRECTORS_FEES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_ENTERTAINMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_GROSS_COMMISSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_PENSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_NOT_REPORTABLE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_SALARY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_FEES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GROSS_TIPS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ESOS_BENEFIT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_GRATUITY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_BENEFITS_IN_KIND,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_VALUE_OF_LIVING_ACCOMMODATIONS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_REFUND_PROVIDENT_PENSION_FUND,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_COMPENSATION_FOR_LOSS_OF_EMPLOYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_PENSION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ANNUITIES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_CP38_DEDUCTION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_PAID_VIA_SALARY_DEDUCTION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_RELIEF_CLAIM_TP1,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ZAKAT_RELIEF_CLAIM_TP1,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_TAX_EXEMPT_ALLOWANCES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_A,
            self::PAYMENT_SUMMARY_CLASSIFICATION_MY_ARREARS_INCOME_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_NONE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_CASH_OUT_OF_LEAVE_IN_SERVICE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_UNUSED_LEAVE_ON_TERMINATION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_PAID_PARENTAL_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_WORKERS_COMPENSATION,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_ANCILLARY_AND_DEFENCE_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_LEAVE_OTHER_PAID_LEAVE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_OVERTIME,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TOOL,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_TASKS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ALLOWANCE_QUALIFICATIONS_CERTIFICATES,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_R,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_LIFE_BENEFIT_CODE_O,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_S,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_MULTIPLE_PAYMENTS_CODE_P,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_D,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_N,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_B,
            self::PAYMENT_SUMMARY_CLASSIFICATION_ETP_DEATH_BENEFIT_CODE_T,
            self::PAYMENT_SUMMARY_CLASSIFICATION_RETURN_TO_WORK_PAYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_GRATUITY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_NOTICE_PAY,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_EX_GRATIA_PAYMENT,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_OTHER_LUMP_SUM_PAYMENTS,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_COMPENSATION_LOSS_OF_OFFICE,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_PRE1993,
            self::PAYMENT_SUMMARY_CLASSIFICATION_SG_RETIREMENT_BENEFITS_FROM1993,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinimumWageCalculationImpactAllowableValues()
    {
        return [
            self::MINIMUM_WAGE_CALCULATION_IMPACT__INCLUDE,
            self::MINIMUM_WAGE_CALCULATION_IMPACT_INCLUDE_BASE_RATE,
            self::MINIMUM_WAGE_CALCULATION_IMPACT_EXCLUDE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCpfClassificationAllowableValues()
    {
        return [
            self::CPF_CLASSIFICATION_NONE,
            self::CPF_CLASSIFICATION_ORDINARY_WAGE,
            self::CPF_CLASSIFICATION_ADDITIONAL_WAGE,
            self::CPF_CLASSIFICATION_EXCLUDE_FROM_CPF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCisTypeAllowableValues()
    {
        return [
            self::CIS_TYPE_OTHER,
            self::CIS_TYPE_MATERIALS,
            self::CIS_TYPE_VAT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateUnitAllowableValues()
    {
        return [
            self::RATE_UNIT_HOURLY,
            self::RATE_UNIT_ANNUALLY,
            self::RATE_UNIT_FIXED,
            self::RATE_UNIT_DAILY,
            self::RATE_UNIT_MONTHLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoundingMethodAllowableValues()
    {
        return [
            self::ROUNDING_METHOD_TO_EVEN,
            self::ROUNDING_METHOD_AWAY_FROM_ZERO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payment_summary_classification', $data ?? [], null);
        $this->setIfExists('allowance_description', $data ?? [], null);
        $this->setIfExists('default_super_rate', $data ?? [], null);
        $this->setIfExists('super_expense_mapping_code', $data ?? [], null);
        $this->setIfExists('super_liability_mapping_code', $data ?? [], null);
        $this->setIfExists('is_payroll_tax_exempt', $data ?? [], null);
        $this->setIfExists('award_name', $data ?? [], null);
        $this->setIfExists('award_id', $data ?? [], null);
        $this->setIfExists('is_national_insurance_exempt', $data ?? [], null);
        $this->setIfExists('is_employee_pensionable', $data ?? [], null);
        $this->setIfExists('is_employer_pensionable', $data ?? [], null);
        $this->setIfExists('minimum_wage_calculation_impact', $data ?? [], null);
        $this->setIfExists('is_class1_an_iable', $data ?? [], null);
        $this->setIfExists('is_kiwi_saver_exempt', $data ?? [], null);
        $this->setIfExists('exclude_from_average_earnings', $data ?? [], null);
        $this->setIfExists('exclude_from_ordinary_earnings', $data ?? [], null);
        $this->setIfExists('is_acc_levy_exempt', $data ?? [], null);
        $this->setIfExists('is_superannuation_fund', $data ?? [], null);
        $this->setIfExists('is_parental_leave', $data ?? [], null);
        $this->setIfExists('cpf_classification', $data ?? [], null);
        $this->setIfExists('is_shg_exempt', $data ?? [], null);
        $this->setIfExists('is_sdl_exempt', $data ?? [], null);
        $this->setIfExists('is_gst_exempt', $data ?? [], null);
        $this->setIfExists('is_net_payment', $data ?? [], null);
        $this->setIfExists('cis_category', $data ?? [], null);
        $this->setIfExists('is52_week_average_enabled', $data ?? [], null);
        $this->setIfExists('apply_cis_deduction', $data ?? [], null);
        $this->setIfExists('cis_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('rate_unit', $data ?? [], null);
        $this->setIfExists('accrues_leave', $data ?? [], null);
        $this->setIfExists('rate_loading_percent', $data ?? [], null);
        $this->setIfExists('penalty_loading_percent', $data ?? [], null);
        $this->setIfExists('is_tax_exempt', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('general_ledger_mapping_code', $data ?? [], null);
        $this->setIfExists('is_system_pay_category', $data ?? [], null);
        $this->setIfExists('number_of_decimal_places', $data ?? [], null);
        $this->setIfExists('rounding_method', $data ?? [], null);
        $this->setIfExists('hide_units_on_pay_slip', $data ?? [], null);
        $this->setIfExists('is_primary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentSummaryClassificationAllowableValues();
        if (!is_null($this->container['payment_summary_classification']) && !in_array($this->container['payment_summary_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_summary_classification', must be one of '%s'",
                $this->container['payment_summary_classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMinimumWageCalculationImpactAllowableValues();
        if (!is_null($this->container['minimum_wage_calculation_impact']) && !in_array($this->container['minimum_wage_calculation_impact'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'minimum_wage_calculation_impact', must be one of '%s'",
                $this->container['minimum_wage_calculation_impact'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCpfClassificationAllowableValues();
        if (!is_null($this->container['cpf_classification']) && !in_array($this->container['cpf_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cpf_classification', must be one of '%s'",
                $this->container['cpf_classification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCisTypeAllowableValues();
        if (!is_null($this->container['cis_type']) && !in_array($this->container['cis_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cis_type', must be one of '%s'",
                $this->container['cis_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateUnitAllowableValues();
        if (!is_null($this->container['rate_unit']) && !in_array($this->container['rate_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_unit', must be one of '%s'",
                $this->container['rate_unit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoundingMethodAllowableValues();
        if (!is_null($this->container['rounding_method']) && !in_array($this->container['rounding_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rounding_method', must be one of '%s'",
                $this->container['rounding_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_summary_classification
     *
     * @return string|null
     */
    public function getPaymentSummaryClassification()
    {
        return $this->container['payment_summary_classification'];
    }

    /**
     * Sets payment_summary_classification
     *
     * @param string|null $payment_summary_classification 
     *
     * @return self
     */
    public function setPaymentSummaryClassification($payment_summary_classification)
    {
        if (is_null($payment_summary_classification)) {
            throw new \InvalidArgumentException('non-nullable payment_summary_classification cannot be null');
        }
        $allowedValues = $this->getPaymentSummaryClassificationAllowableValues();
        if (!in_array($payment_summary_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_summary_classification', must be one of '%s'",
                    $payment_summary_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_summary_classification'] = $payment_summary_classification;

        return $this;
    }

    /**
     * Gets allowance_description
     *
     * @return string|null
     */
    public function getAllowanceDescription()
    {
        return $this->container['allowance_description'];
    }

    /**
     * Sets allowance_description
     *
     * @param string|null $allowance_description 
     *
     * @return self
     */
    public function setAllowanceDescription($allowance_description)
    {
        if (is_null($allowance_description)) {
            throw new \InvalidArgumentException('non-nullable allowance_description cannot be null');
        }
        $this->container['allowance_description'] = $allowance_description;

        return $this;
    }

    /**
     * Gets default_super_rate
     *
     * @return float|null
     */
    public function getDefaultSuperRate()
    {
        return $this->container['default_super_rate'];
    }

    /**
     * Sets default_super_rate
     *
     * @param float|null $default_super_rate 
     *
     * @return self
     */
    public function setDefaultSuperRate($default_super_rate)
    {
        if (is_null($default_super_rate)) {
            throw new \InvalidArgumentException('non-nullable default_super_rate cannot be null');
        }
        $this->container['default_super_rate'] = $default_super_rate;

        return $this;
    }

    /**
     * Gets super_expense_mapping_code
     *
     * @return string|null
     */
    public function getSuperExpenseMappingCode()
    {
        return $this->container['super_expense_mapping_code'];
    }

    /**
     * Sets super_expense_mapping_code
     *
     * @param string|null $super_expense_mapping_code 
     *
     * @return self
     */
    public function setSuperExpenseMappingCode($super_expense_mapping_code)
    {
        if (is_null($super_expense_mapping_code)) {
            throw new \InvalidArgumentException('non-nullable super_expense_mapping_code cannot be null');
        }
        $this->container['super_expense_mapping_code'] = $super_expense_mapping_code;

        return $this;
    }

    /**
     * Gets super_liability_mapping_code
     *
     * @return string|null
     */
    public function getSuperLiabilityMappingCode()
    {
        return $this->container['super_liability_mapping_code'];
    }

    /**
     * Sets super_liability_mapping_code
     *
     * @param string|null $super_liability_mapping_code 
     *
     * @return self
     */
    public function setSuperLiabilityMappingCode($super_liability_mapping_code)
    {
        if (is_null($super_liability_mapping_code)) {
            throw new \InvalidArgumentException('non-nullable super_liability_mapping_code cannot be null');
        }
        $this->container['super_liability_mapping_code'] = $super_liability_mapping_code;

        return $this;
    }

    /**
     * Gets is_payroll_tax_exempt
     *
     * @return bool|null
     */
    public function getIsPayrollTaxExempt()
    {
        return $this->container['is_payroll_tax_exempt'];
    }

    /**
     * Sets is_payroll_tax_exempt
     *
     * @param bool|null $is_payroll_tax_exempt 
     *
     * @return self
     */
    public function setIsPayrollTaxExempt($is_payroll_tax_exempt)
    {
        if (is_null($is_payroll_tax_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_payroll_tax_exempt cannot be null');
        }
        $this->container['is_payroll_tax_exempt'] = $is_payroll_tax_exempt;

        return $this;
    }

    /**
     * Gets award_name
     *
     * @return string|null
     */
    public function getAwardName()
    {
        return $this->container['award_name'];
    }

    /**
     * Sets award_name
     *
     * @param string|null $award_name 
     *
     * @return self
     */
    public function setAwardName($award_name)
    {
        if (is_null($award_name)) {
            throw new \InvalidArgumentException('non-nullable award_name cannot be null');
        }
        $this->container['award_name'] = $award_name;

        return $this;
    }

    /**
     * Gets award_id
     *
     * @return int|null
     */
    public function getAwardId()
    {
        return $this->container['award_id'];
    }

    /**
     * Sets award_id
     *
     * @param int|null $award_id 
     *
     * @return self
     */
    public function setAwardId($award_id)
    {
        if (is_null($award_id)) {
            throw new \InvalidArgumentException('non-nullable award_id cannot be null');
        }
        $this->container['award_id'] = $award_id;

        return $this;
    }

    /**
     * Gets is_national_insurance_exempt
     *
     * @return bool|null
     */
    public function getIsNationalInsuranceExempt()
    {
        return $this->container['is_national_insurance_exempt'];
    }

    /**
     * Sets is_national_insurance_exempt
     *
     * @param bool|null $is_national_insurance_exempt 
     *
     * @return self
     */
    public function setIsNationalInsuranceExempt($is_national_insurance_exempt)
    {
        if (is_null($is_national_insurance_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_national_insurance_exempt cannot be null');
        }
        $this->container['is_national_insurance_exempt'] = $is_national_insurance_exempt;

        return $this;
    }

    /**
     * Gets is_employee_pensionable
     *
     * @return bool|null
     */
    public function getIsEmployeePensionable()
    {
        return $this->container['is_employee_pensionable'];
    }

    /**
     * Sets is_employee_pensionable
     *
     * @param bool|null $is_employee_pensionable 
     *
     * @return self
     */
    public function setIsEmployeePensionable($is_employee_pensionable)
    {
        if (is_null($is_employee_pensionable)) {
            throw new \InvalidArgumentException('non-nullable is_employee_pensionable cannot be null');
        }
        $this->container['is_employee_pensionable'] = $is_employee_pensionable;

        return $this;
    }

    /**
     * Gets is_employer_pensionable
     *
     * @return bool|null
     */
    public function getIsEmployerPensionable()
    {
        return $this->container['is_employer_pensionable'];
    }

    /**
     * Sets is_employer_pensionable
     *
     * @param bool|null $is_employer_pensionable 
     *
     * @return self
     */
    public function setIsEmployerPensionable($is_employer_pensionable)
    {
        if (is_null($is_employer_pensionable)) {
            throw new \InvalidArgumentException('non-nullable is_employer_pensionable cannot be null');
        }
        $this->container['is_employer_pensionable'] = $is_employer_pensionable;

        return $this;
    }

    /**
     * Gets minimum_wage_calculation_impact
     *
     * @return string|null
     */
    public function getMinimumWageCalculationImpact()
    {
        return $this->container['minimum_wage_calculation_impact'];
    }

    /**
     * Sets minimum_wage_calculation_impact
     *
     * @param string|null $minimum_wage_calculation_impact 
     *
     * @return self
     */
    public function setMinimumWageCalculationImpact($minimum_wage_calculation_impact)
    {
        if (is_null($minimum_wage_calculation_impact)) {
            throw new \InvalidArgumentException('non-nullable minimum_wage_calculation_impact cannot be null');
        }
        $allowedValues = $this->getMinimumWageCalculationImpactAllowableValues();
        if (!in_array($minimum_wage_calculation_impact, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'minimum_wage_calculation_impact', must be one of '%s'",
                    $minimum_wage_calculation_impact,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['minimum_wage_calculation_impact'] = $minimum_wage_calculation_impact;

        return $this;
    }

    /**
     * Gets is_class1_an_iable
     *
     * @return bool|null
     */
    public function getIsClass1AnIable()
    {
        return $this->container['is_class1_an_iable'];
    }

    /**
     * Sets is_class1_an_iable
     *
     * @param bool|null $is_class1_an_iable 
     *
     * @return self
     */
    public function setIsClass1AnIable($is_class1_an_iable)
    {
        if (is_null($is_class1_an_iable)) {
            throw new \InvalidArgumentException('non-nullable is_class1_an_iable cannot be null');
        }
        $this->container['is_class1_an_iable'] = $is_class1_an_iable;

        return $this;
    }

    /**
     * Gets is_kiwi_saver_exempt
     *
     * @return bool|null
     */
    public function getIsKiwiSaverExempt()
    {
        return $this->container['is_kiwi_saver_exempt'];
    }

    /**
     * Sets is_kiwi_saver_exempt
     *
     * @param bool|null $is_kiwi_saver_exempt 
     *
     * @return self
     */
    public function setIsKiwiSaverExempt($is_kiwi_saver_exempt)
    {
        if (is_null($is_kiwi_saver_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_kiwi_saver_exempt cannot be null');
        }
        $this->container['is_kiwi_saver_exempt'] = $is_kiwi_saver_exempt;

        return $this;
    }

    /**
     * Gets exclude_from_average_earnings
     *
     * @return bool|null
     */
    public function getExcludeFromAverageEarnings()
    {
        return $this->container['exclude_from_average_earnings'];
    }

    /**
     * Sets exclude_from_average_earnings
     *
     * @param bool|null $exclude_from_average_earnings 
     *
     * @return self
     */
    public function setExcludeFromAverageEarnings($exclude_from_average_earnings)
    {
        if (is_null($exclude_from_average_earnings)) {
            throw new \InvalidArgumentException('non-nullable exclude_from_average_earnings cannot be null');
        }
        $this->container['exclude_from_average_earnings'] = $exclude_from_average_earnings;

        return $this;
    }

    /**
     * Gets exclude_from_ordinary_earnings
     *
     * @return bool|null
     */
    public function getExcludeFromOrdinaryEarnings()
    {
        return $this->container['exclude_from_ordinary_earnings'];
    }

    /**
     * Sets exclude_from_ordinary_earnings
     *
     * @param bool|null $exclude_from_ordinary_earnings 
     *
     * @return self
     */
    public function setExcludeFromOrdinaryEarnings($exclude_from_ordinary_earnings)
    {
        if (is_null($exclude_from_ordinary_earnings)) {
            throw new \InvalidArgumentException('non-nullable exclude_from_ordinary_earnings cannot be null');
        }
        $this->container['exclude_from_ordinary_earnings'] = $exclude_from_ordinary_earnings;

        return $this;
    }

    /**
     * Gets is_acc_levy_exempt
     *
     * @return bool|null
     */
    public function getIsAccLevyExempt()
    {
        return $this->container['is_acc_levy_exempt'];
    }

    /**
     * Sets is_acc_levy_exempt
     *
     * @param bool|null $is_acc_levy_exempt 
     *
     * @return self
     */
    public function setIsAccLevyExempt($is_acc_levy_exempt)
    {
        if (is_null($is_acc_levy_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_acc_levy_exempt cannot be null');
        }
        $this->container['is_acc_levy_exempt'] = $is_acc_levy_exempt;

        return $this;
    }

    /**
     * Gets is_superannuation_fund
     *
     * @return bool|null
     */
    public function getIsSuperannuationFund()
    {
        return $this->container['is_superannuation_fund'];
    }

    /**
     * Sets is_superannuation_fund
     *
     * @param bool|null $is_superannuation_fund 
     *
     * @return self
     */
    public function setIsSuperannuationFund($is_superannuation_fund)
    {
        if (is_null($is_superannuation_fund)) {
            throw new \InvalidArgumentException('non-nullable is_superannuation_fund cannot be null');
        }
        $this->container['is_superannuation_fund'] = $is_superannuation_fund;

        return $this;
    }

    /**
     * Gets is_parental_leave
     *
     * @return bool|null
     */
    public function getIsParentalLeave()
    {
        return $this->container['is_parental_leave'];
    }

    /**
     * Sets is_parental_leave
     *
     * @param bool|null $is_parental_leave 
     *
     * @return self
     */
    public function setIsParentalLeave($is_parental_leave)
    {
        if (is_null($is_parental_leave)) {
            throw new \InvalidArgumentException('non-nullable is_parental_leave cannot be null');
        }
        $this->container['is_parental_leave'] = $is_parental_leave;

        return $this;
    }

    /**
     * Gets cpf_classification
     *
     * @return string|null
     */
    public function getCpfClassification()
    {
        return $this->container['cpf_classification'];
    }

    /**
     * Sets cpf_classification
     *
     * @param string|null $cpf_classification 
     *
     * @return self
     */
    public function setCpfClassification($cpf_classification)
    {
        if (is_null($cpf_classification)) {
            throw new \InvalidArgumentException('non-nullable cpf_classification cannot be null');
        }
        $allowedValues = $this->getCpfClassificationAllowableValues();
        if (!in_array($cpf_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cpf_classification', must be one of '%s'",
                    $cpf_classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cpf_classification'] = $cpf_classification;

        return $this;
    }

    /**
     * Gets is_shg_exempt
     *
     * @return bool|null
     */
    public function getIsShgExempt()
    {
        return $this->container['is_shg_exempt'];
    }

    /**
     * Sets is_shg_exempt
     *
     * @param bool|null $is_shg_exempt 
     *
     * @return self
     */
    public function setIsShgExempt($is_shg_exempt)
    {
        if (is_null($is_shg_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_shg_exempt cannot be null');
        }
        $this->container['is_shg_exempt'] = $is_shg_exempt;

        return $this;
    }

    /**
     * Gets is_sdl_exempt
     *
     * @return bool|null
     */
    public function getIsSdlExempt()
    {
        return $this->container['is_sdl_exempt'];
    }

    /**
     * Sets is_sdl_exempt
     *
     * @param bool|null $is_sdl_exempt 
     *
     * @return self
     */
    public function setIsSdlExempt($is_sdl_exempt)
    {
        if (is_null($is_sdl_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_sdl_exempt cannot be null');
        }
        $this->container['is_sdl_exempt'] = $is_sdl_exempt;

        return $this;
    }

    /**
     * Gets is_gst_exempt
     *
     * @return bool|null
     */
    public function getIsGstExempt()
    {
        return $this->container['is_gst_exempt'];
    }

    /**
     * Sets is_gst_exempt
     *
     * @param bool|null $is_gst_exempt 
     *
     * @return self
     */
    public function setIsGstExempt($is_gst_exempt)
    {
        if (is_null($is_gst_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_gst_exempt cannot be null');
        }
        $this->container['is_gst_exempt'] = $is_gst_exempt;

        return $this;
    }

    /**
     * Gets is_net_payment
     *
     * @return bool|null
     */
    public function getIsNetPayment()
    {
        return $this->container['is_net_payment'];
    }

    /**
     * Sets is_net_payment
     *
     * @param bool|null $is_net_payment 
     *
     * @return self
     */
    public function setIsNetPayment($is_net_payment)
    {
        if (is_null($is_net_payment)) {
            throw new \InvalidArgumentException('non-nullable is_net_payment cannot be null');
        }
        $this->container['is_net_payment'] = $is_net_payment;

        return $this;
    }

    /**
     * Gets cis_category
     *
     * @return bool|null
     */
    public function getCisCategory()
    {
        return $this->container['cis_category'];
    }

    /**
     * Sets cis_category
     *
     * @param bool|null $cis_category 
     *
     * @return self
     */
    public function setCisCategory($cis_category)
    {
        if (is_null($cis_category)) {
            throw new \InvalidArgumentException('non-nullable cis_category cannot be null');
        }
        $this->container['cis_category'] = $cis_category;

        return $this;
    }

    /**
     * Gets is52_week_average_enabled
     *
     * @return bool|null
     */
    public function getIs52WeekAverageEnabled()
    {
        return $this->container['is52_week_average_enabled'];
    }

    /**
     * Sets is52_week_average_enabled
     *
     * @param bool|null $is52_week_average_enabled 
     *
     * @return self
     */
    public function setIs52WeekAverageEnabled($is52_week_average_enabled)
    {
        if (is_null($is52_week_average_enabled)) {
            throw new \InvalidArgumentException('non-nullable is52_week_average_enabled cannot be null');
        }
        $this->container['is52_week_average_enabled'] = $is52_week_average_enabled;

        return $this;
    }

    /**
     * Gets apply_cis_deduction
     *
     * @return bool|null
     */
    public function getApplyCisDeduction()
    {
        return $this->container['apply_cis_deduction'];
    }

    /**
     * Sets apply_cis_deduction
     *
     * @param bool|null $apply_cis_deduction 
     *
     * @return self
     */
    public function setApplyCisDeduction($apply_cis_deduction)
    {
        if (is_null($apply_cis_deduction)) {
            throw new \InvalidArgumentException('non-nullable apply_cis_deduction cannot be null');
        }
        $this->container['apply_cis_deduction'] = $apply_cis_deduction;

        return $this;
    }

    /**
     * Gets cis_type
     *
     * @return string|null
     */
    public function getCisType()
    {
        return $this->container['cis_type'];
    }

    /**
     * Sets cis_type
     *
     * @param string|null $cis_type 
     *
     * @return self
     */
    public function setCisType($cis_type)
    {
        if (is_null($cis_type)) {
            throw new \InvalidArgumentException('non-nullable cis_type cannot be null');
        }
        $allowedValues = $this->getCisTypeAllowableValues();
        if (!in_array($cis_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cis_type', must be one of '%s'",
                    $cis_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cis_type'] = $cis_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id 
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rate_unit
     *
     * @return string|null
     */
    public function getRateUnit()
    {
        return $this->container['rate_unit'];
    }

    /**
     * Sets rate_unit
     *
     * @param string|null $rate_unit 
     *
     * @return self
     */
    public function setRateUnit($rate_unit)
    {
        if (is_null($rate_unit)) {
            throw new \InvalidArgumentException('non-nullable rate_unit cannot be null');
        }
        $allowedValues = $this->getRateUnitAllowableValues();
        if (!in_array($rate_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_unit', must be one of '%s'",
                    $rate_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_unit'] = $rate_unit;

        return $this;
    }

    /**
     * Gets accrues_leave
     *
     * @return bool|null
     */
    public function getAccruesLeave()
    {
        return $this->container['accrues_leave'];
    }

    /**
     * Sets accrues_leave
     *
     * @param bool|null $accrues_leave 
     *
     * @return self
     */
    public function setAccruesLeave($accrues_leave)
    {
        if (is_null($accrues_leave)) {
            throw new \InvalidArgumentException('non-nullable accrues_leave cannot be null');
        }
        $this->container['accrues_leave'] = $accrues_leave;

        return $this;
    }

    /**
     * Gets rate_loading_percent
     *
     * @return float|null
     */
    public function getRateLoadingPercent()
    {
        return $this->container['rate_loading_percent'];
    }

    /**
     * Sets rate_loading_percent
     *
     * @param float|null $rate_loading_percent 
     *
     * @return self
     */
    public function setRateLoadingPercent($rate_loading_percent)
    {
        if (is_null($rate_loading_percent)) {
            throw new \InvalidArgumentException('non-nullable rate_loading_percent cannot be null');
        }
        $this->container['rate_loading_percent'] = $rate_loading_percent;

        return $this;
    }

    /**
     * Gets penalty_loading_percent
     *
     * @return float|null
     */
    public function getPenaltyLoadingPercent()
    {
        return $this->container['penalty_loading_percent'];
    }

    /**
     * Sets penalty_loading_percent
     *
     * @param float|null $penalty_loading_percent 
     *
     * @return self
     */
    public function setPenaltyLoadingPercent($penalty_loading_percent)
    {
        if (is_null($penalty_loading_percent)) {
            throw new \InvalidArgumentException('non-nullable penalty_loading_percent cannot be null');
        }
        $this->container['penalty_loading_percent'] = $penalty_loading_percent;

        return $this;
    }

    /**
     * Gets is_tax_exempt
     *
     * @return bool|null
     */
    public function getIsTaxExempt()
    {
        return $this->container['is_tax_exempt'];
    }

    /**
     * Sets is_tax_exempt
     *
     * @param bool|null $is_tax_exempt 
     *
     * @return self
     */
    public function setIsTaxExempt($is_tax_exempt)
    {
        if (is_null($is_tax_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_tax_exempt cannot be null');
        }
        $this->container['is_tax_exempt'] = $is_tax_exempt;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets general_ledger_mapping_code
     *
     * @return string|null
     */
    public function getGeneralLedgerMappingCode()
    {
        return $this->container['general_ledger_mapping_code'];
    }

    /**
     * Sets general_ledger_mapping_code
     *
     * @param string|null $general_ledger_mapping_code 
     *
     * @return self
     */
    public function setGeneralLedgerMappingCode($general_ledger_mapping_code)
    {
        if (is_null($general_ledger_mapping_code)) {
            throw new \InvalidArgumentException('non-nullable general_ledger_mapping_code cannot be null');
        }
        $this->container['general_ledger_mapping_code'] = $general_ledger_mapping_code;

        return $this;
    }

    /**
     * Gets is_system_pay_category
     *
     * @return bool|null
     */
    public function getIsSystemPayCategory()
    {
        return $this->container['is_system_pay_category'];
    }

    /**
     * Sets is_system_pay_category
     *
     * @param bool|null $is_system_pay_category 
     *
     * @return self
     */
    public function setIsSystemPayCategory($is_system_pay_category)
    {
        if (is_null($is_system_pay_category)) {
            throw new \InvalidArgumentException('non-nullable is_system_pay_category cannot be null');
        }
        $this->container['is_system_pay_category'] = $is_system_pay_category;

        return $this;
    }

    /**
     * Gets number_of_decimal_places
     *
     * @return int|null
     */
    public function getNumberOfDecimalPlaces()
    {
        return $this->container['number_of_decimal_places'];
    }

    /**
     * Sets number_of_decimal_places
     *
     * @param int|null $number_of_decimal_places 
     *
     * @return self
     */
    public function setNumberOfDecimalPlaces($number_of_decimal_places)
    {
        if (is_null($number_of_decimal_places)) {
            throw new \InvalidArgumentException('non-nullable number_of_decimal_places cannot be null');
        }
        $this->container['number_of_decimal_places'] = $number_of_decimal_places;

        return $this;
    }

    /**
     * Gets rounding_method
     *
     * @return string|null
     */
    public function getRoundingMethod()
    {
        return $this->container['rounding_method'];
    }

    /**
     * Sets rounding_method
     *
     * @param string|null $rounding_method 
     *
     * @return self
     */
    public function setRoundingMethod($rounding_method)
    {
        if (is_null($rounding_method)) {
            throw new \InvalidArgumentException('non-nullable rounding_method cannot be null');
        }
        $allowedValues = $this->getRoundingMethodAllowableValues();
        if (!in_array($rounding_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rounding_method', must be one of '%s'",
                    $rounding_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rounding_method'] = $rounding_method;

        return $this;
    }

    /**
     * Gets hide_units_on_pay_slip
     *
     * @return bool|null
     */
    public function getHideUnitsOnPaySlip()
    {
        return $this->container['hide_units_on_pay_slip'];
    }

    /**
     * Sets hide_units_on_pay_slip
     *
     * @param bool|null $hide_units_on_pay_slip 
     *
     * @return self
     */
    public function setHideUnitsOnPaySlip($hide_units_on_pay_slip)
    {
        if (is_null($hide_units_on_pay_slip)) {
            throw new \InvalidArgumentException('non-nullable hide_units_on_pay_slip cannot be null');
        }
        $this->container['hide_units_on_pay_slip'] = $hide_units_on_pay_slip;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool|null
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool|null $is_primary 
     *
     * @return self
     */
    public function setIsPrimary($is_primary)
    {
        if (is_null($is_primary)) {
            throw new \InvalidArgumentException('non-nullable is_primary cannot be null');
        }
        $this->container['is_primary'] = $is_primary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


