<?php
/**
 * AuEditBusinessPaySlipApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEditBusinessPaySlipApiModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEditBusinessPaySlipApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEditBusinessPaySlipApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'super_contribution_processing_frequency_text_option' => 'string',
        'show_classification' => 'bool',
        'show_base_pay_rate' => 'bool',
        'show_employee_id' => 'bool',
        'show_rate_for_annual_earnings' => 'bool',
        'id' => 'int',
        'email_from' => 'string',
        'email_body_message' => 'string',
        'show_leave_accruals' => 'bool',
        'show_line_notes' => 'bool',
        'show_location_in_line_notes' => 'bool',
        'alphabetise_pay_categories' => 'bool',
        'show_employee_external_id' => 'bool',
        'employees_must_login_to_download_payslips' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'super_contribution_processing_frequency_text_option' => null,
        'show_classification' => null,
        'show_base_pay_rate' => null,
        'show_employee_id' => null,
        'show_rate_for_annual_earnings' => null,
        'id' => 'int32',
        'email_from' => null,
        'email_body_message' => null,
        'show_leave_accruals' => null,
        'show_line_notes' => null,
        'show_location_in_line_notes' => null,
        'alphabetise_pay_categories' => null,
        'show_employee_external_id' => null,
        'employees_must_login_to_download_payslips' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'super_contribution_processing_frequency_text_option' => false,
		'show_classification' => false,
		'show_base_pay_rate' => false,
		'show_employee_id' => false,
		'show_rate_for_annual_earnings' => false,
		'id' => false,
		'email_from' => false,
		'email_body_message' => false,
		'show_leave_accruals' => false,
		'show_line_notes' => false,
		'show_location_in_line_notes' => false,
		'alphabetise_pay_categories' => false,
		'show_employee_external_id' => false,
		'employees_must_login_to_download_payslips' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super_contribution_processing_frequency_text_option' => 'superContributionProcessingFrequencyTextOption',
        'show_classification' => 'showClassification',
        'show_base_pay_rate' => 'showBasePayRate',
        'show_employee_id' => 'showEmployeeId',
        'show_rate_for_annual_earnings' => 'showRateForAnnualEarnings',
        'id' => 'id',
        'email_from' => 'emailFrom',
        'email_body_message' => 'emailBodyMessage',
        'show_leave_accruals' => 'showLeaveAccruals',
        'show_line_notes' => 'showLineNotes',
        'show_location_in_line_notes' => 'showLocationInLineNotes',
        'alphabetise_pay_categories' => 'alphabetisePayCategories',
        'show_employee_external_id' => 'showEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'employeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super_contribution_processing_frequency_text_option' => 'setSuperContributionProcessingFrequencyTextOption',
        'show_classification' => 'setShowClassification',
        'show_base_pay_rate' => 'setShowBasePayRate',
        'show_employee_id' => 'setShowEmployeeId',
        'show_rate_for_annual_earnings' => 'setShowRateForAnnualEarnings',
        'id' => 'setId',
        'email_from' => 'setEmailFrom',
        'email_body_message' => 'setEmailBodyMessage',
        'show_leave_accruals' => 'setShowLeaveAccruals',
        'show_line_notes' => 'setShowLineNotes',
        'show_location_in_line_notes' => 'setShowLocationInLineNotes',
        'alphabetise_pay_categories' => 'setAlphabetisePayCategories',
        'show_employee_external_id' => 'setShowEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'setEmployeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super_contribution_processing_frequency_text_option' => 'getSuperContributionProcessingFrequencyTextOption',
        'show_classification' => 'getShowClassification',
        'show_base_pay_rate' => 'getShowBasePayRate',
        'show_employee_id' => 'getShowEmployeeId',
        'show_rate_for_annual_earnings' => 'getShowRateForAnnualEarnings',
        'id' => 'getId',
        'email_from' => 'getEmailFrom',
        'email_body_message' => 'getEmailBodyMessage',
        'show_leave_accruals' => 'getShowLeaveAccruals',
        'show_line_notes' => 'getShowLineNotes',
        'show_location_in_line_notes' => 'getShowLocationInLineNotes',
        'alphabetise_pay_categories' => 'getAlphabetisePayCategories',
        'show_employee_external_id' => 'getShowEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'getEmployeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_NONE = 'None';
    public const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_QUARTERLY = 'Quarterly';
    public const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_MONTHLY = 'Monthly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuperContributionProcessingFrequencyTextOptionAllowableValues()
    {
        return [
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_NONE,
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_QUARTERLY,
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_MONTHLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('super_contribution_processing_frequency_text_option', $data ?? [], null);
        $this->setIfExists('show_classification', $data ?? [], null);
        $this->setIfExists('show_base_pay_rate', $data ?? [], null);
        $this->setIfExists('show_employee_id', $data ?? [], null);
        $this->setIfExists('show_rate_for_annual_earnings', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('email_from', $data ?? [], null);
        $this->setIfExists('email_body_message', $data ?? [], null);
        $this->setIfExists('show_leave_accruals', $data ?? [], null);
        $this->setIfExists('show_line_notes', $data ?? [], null);
        $this->setIfExists('show_location_in_line_notes', $data ?? [], null);
        $this->setIfExists('alphabetise_pay_categories', $data ?? [], null);
        $this->setIfExists('show_employee_external_id', $data ?? [], null);
        $this->setIfExists('employees_must_login_to_download_payslips', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSuperContributionProcessingFrequencyTextOptionAllowableValues();
        if (!is_null($this->container['super_contribution_processing_frequency_text_option']) && !in_array($this->container['super_contribution_processing_frequency_text_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'super_contribution_processing_frequency_text_option', must be one of '%s'",
                $this->container['super_contribution_processing_frequency_text_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super_contribution_processing_frequency_text_option
     *
     * @return string|null
     */
    public function getSuperContributionProcessingFrequencyTextOption()
    {
        return $this->container['super_contribution_processing_frequency_text_option'];
    }

    /**
     * Sets super_contribution_processing_frequency_text_option
     *
     * @param string|null $super_contribution_processing_frequency_text_option 
     *
     * @return self
     */
    public function setSuperContributionProcessingFrequencyTextOption($super_contribution_processing_frequency_text_option)
    {
        if (is_null($super_contribution_processing_frequency_text_option)) {
            throw new \InvalidArgumentException('non-nullable super_contribution_processing_frequency_text_option cannot be null');
        }
        $allowedValues = $this->getSuperContributionProcessingFrequencyTextOptionAllowableValues();
        if (!in_array($super_contribution_processing_frequency_text_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'super_contribution_processing_frequency_text_option', must be one of '%s'",
                    $super_contribution_processing_frequency_text_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['super_contribution_processing_frequency_text_option'] = $super_contribution_processing_frequency_text_option;

        return $this;
    }

    /**
     * Gets show_classification
     *
     * @return bool|null
     */
    public function getShowClassification()
    {
        return $this->container['show_classification'];
    }

    /**
     * Sets show_classification
     *
     * @param bool|null $show_classification 
     *
     * @return self
     */
    public function setShowClassification($show_classification)
    {
        if (is_null($show_classification)) {
            throw new \InvalidArgumentException('non-nullable show_classification cannot be null');
        }
        $this->container['show_classification'] = $show_classification;

        return $this;
    }

    /**
     * Gets show_base_pay_rate
     *
     * @return bool|null
     */
    public function getShowBasePayRate()
    {
        return $this->container['show_base_pay_rate'];
    }

    /**
     * Sets show_base_pay_rate
     *
     * @param bool|null $show_base_pay_rate 
     *
     * @return self
     */
    public function setShowBasePayRate($show_base_pay_rate)
    {
        if (is_null($show_base_pay_rate)) {
            throw new \InvalidArgumentException('non-nullable show_base_pay_rate cannot be null');
        }
        $this->container['show_base_pay_rate'] = $show_base_pay_rate;

        return $this;
    }

    /**
     * Gets show_employee_id
     *
     * @return bool|null
     */
    public function getShowEmployeeId()
    {
        return $this->container['show_employee_id'];
    }

    /**
     * Sets show_employee_id
     *
     * @param bool|null $show_employee_id 
     *
     * @return self
     */
    public function setShowEmployeeId($show_employee_id)
    {
        if (is_null($show_employee_id)) {
            throw new \InvalidArgumentException('non-nullable show_employee_id cannot be null');
        }
        $this->container['show_employee_id'] = $show_employee_id;

        return $this;
    }

    /**
     * Gets show_rate_for_annual_earnings
     *
     * @return bool|null
     */
    public function getShowRateForAnnualEarnings()
    {
        return $this->container['show_rate_for_annual_earnings'];
    }

    /**
     * Sets show_rate_for_annual_earnings
     *
     * @param bool|null $show_rate_for_annual_earnings 
     *
     * @return self
     */
    public function setShowRateForAnnualEarnings($show_rate_for_annual_earnings)
    {
        if (is_null($show_rate_for_annual_earnings)) {
            throw new \InvalidArgumentException('non-nullable show_rate_for_annual_earnings cannot be null');
        }
        $this->container['show_rate_for_annual_earnings'] = $show_rate_for_annual_earnings;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email_from
     *
     * @return string|null
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string|null $email_from 
     *
     * @return self
     */
    public function setEmailFrom($email_from)
    {
        if (is_null($email_from)) {
            throw new \InvalidArgumentException('non-nullable email_from cannot be null');
        }
        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets email_body_message
     *
     * @return string|null
     */
    public function getEmailBodyMessage()
    {
        return $this->container['email_body_message'];
    }

    /**
     * Sets email_body_message
     *
     * @param string|null $email_body_message 
     *
     * @return self
     */
    public function setEmailBodyMessage($email_body_message)
    {
        if (is_null($email_body_message)) {
            throw new \InvalidArgumentException('non-nullable email_body_message cannot be null');
        }
        $this->container['email_body_message'] = $email_body_message;

        return $this;
    }

    /**
     * Gets show_leave_accruals
     *
     * @return bool|null
     */
    public function getShowLeaveAccruals()
    {
        return $this->container['show_leave_accruals'];
    }

    /**
     * Sets show_leave_accruals
     *
     * @param bool|null $show_leave_accruals 
     *
     * @return self
     */
    public function setShowLeaveAccruals($show_leave_accruals)
    {
        if (is_null($show_leave_accruals)) {
            throw new \InvalidArgumentException('non-nullable show_leave_accruals cannot be null');
        }
        $this->container['show_leave_accruals'] = $show_leave_accruals;

        return $this;
    }

    /**
     * Gets show_line_notes
     *
     * @return bool|null
     */
    public function getShowLineNotes()
    {
        return $this->container['show_line_notes'];
    }

    /**
     * Sets show_line_notes
     *
     * @param bool|null $show_line_notes 
     *
     * @return self
     */
    public function setShowLineNotes($show_line_notes)
    {
        if (is_null($show_line_notes)) {
            throw new \InvalidArgumentException('non-nullable show_line_notes cannot be null');
        }
        $this->container['show_line_notes'] = $show_line_notes;

        return $this;
    }

    /**
     * Gets show_location_in_line_notes
     *
     * @return bool|null
     */
    public function getShowLocationInLineNotes()
    {
        return $this->container['show_location_in_line_notes'];
    }

    /**
     * Sets show_location_in_line_notes
     *
     * @param bool|null $show_location_in_line_notes 
     *
     * @return self
     */
    public function setShowLocationInLineNotes($show_location_in_line_notes)
    {
        if (is_null($show_location_in_line_notes)) {
            throw new \InvalidArgumentException('non-nullable show_location_in_line_notes cannot be null');
        }
        $this->container['show_location_in_line_notes'] = $show_location_in_line_notes;

        return $this;
    }

    /**
     * Gets alphabetise_pay_categories
     *
     * @return bool|null
     */
    public function getAlphabetisePayCategories()
    {
        return $this->container['alphabetise_pay_categories'];
    }

    /**
     * Sets alphabetise_pay_categories
     *
     * @param bool|null $alphabetise_pay_categories 
     *
     * @return self
     */
    public function setAlphabetisePayCategories($alphabetise_pay_categories)
    {
        if (is_null($alphabetise_pay_categories)) {
            throw new \InvalidArgumentException('non-nullable alphabetise_pay_categories cannot be null');
        }
        $this->container['alphabetise_pay_categories'] = $alphabetise_pay_categories;

        return $this;
    }

    /**
     * Gets show_employee_external_id
     *
     * @return bool|null
     */
    public function getShowEmployeeExternalId()
    {
        return $this->container['show_employee_external_id'];
    }

    /**
     * Sets show_employee_external_id
     *
     * @param bool|null $show_employee_external_id 
     *
     * @return self
     */
    public function setShowEmployeeExternalId($show_employee_external_id)
    {
        if (is_null($show_employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable show_employee_external_id cannot be null');
        }
        $this->container['show_employee_external_id'] = $show_employee_external_id;

        return $this;
    }

    /**
     * Gets employees_must_login_to_download_payslips
     *
     * @return bool|null
     */
    public function getEmployeesMustLoginToDownloadPayslips()
    {
        return $this->container['employees_must_login_to_download_payslips'];
    }

    /**
     * Sets employees_must_login_to_download_payslips
     *
     * @param bool|null $employees_must_login_to_download_payslips 
     *
     * @return self
     */
    public function setEmployeesMustLoginToDownloadPayslips($employees_must_login_to_download_payslips)
    {
        if (is_null($employees_must_login_to_download_payslips)) {
            throw new \InvalidArgumentException('non-nullable employees_must_login_to_download_payslips cannot be null');
        }
        $this->container['employees_must_login_to_download_payslips'] = $employees_must_login_to_download_payslips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


