<?php
/**
 * AuEditBusinessPaySlipApiModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuEditBusinessPaySlipApiModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuEditBusinessPaySlipApiModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuEditBusinessPaySlipApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super_contribution_processing_frequency_text_option' => 'string',
        'show_classification' => 'bool',
        'show_base_pay_rate' => 'bool',
        'show_employee_id' => 'bool',
        'show_rate_for_annual_earnings' => 'bool',
        'id' => 'int',
        'email_from' => 'string',
        'email_body_message' => 'string',
        'show_leave_accruals' => 'bool',
        'show_line_notes' => 'bool',
        'show_location_in_line_notes' => 'bool',
        'alphabetise_pay_categories' => 'bool',
        'show_employee_external_id' => 'bool',
        'employees_must_login_to_download_payslips' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super_contribution_processing_frequency_text_option' => null,
        'show_classification' => null,
        'show_base_pay_rate' => null,
        'show_employee_id' => null,
        'show_rate_for_annual_earnings' => null,
        'id' => 'int32',
        'email_from' => null,
        'email_body_message' => null,
        'show_leave_accruals' => null,
        'show_line_notes' => null,
        'show_location_in_line_notes' => null,
        'alphabetise_pay_categories' => null,
        'show_employee_external_id' => null,
        'employees_must_login_to_download_payslips' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super_contribution_processing_frequency_text_option' => 'superContributionProcessingFrequencyTextOption',
        'show_classification' => 'showClassification',
        'show_base_pay_rate' => 'showBasePayRate',
        'show_employee_id' => 'showEmployeeId',
        'show_rate_for_annual_earnings' => 'showRateForAnnualEarnings',
        'id' => 'id',
        'email_from' => 'emailFrom',
        'email_body_message' => 'emailBodyMessage',
        'show_leave_accruals' => 'showLeaveAccruals',
        'show_line_notes' => 'showLineNotes',
        'show_location_in_line_notes' => 'showLocationInLineNotes',
        'alphabetise_pay_categories' => 'alphabetisePayCategories',
        'show_employee_external_id' => 'showEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'employeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super_contribution_processing_frequency_text_option' => 'setSuperContributionProcessingFrequencyTextOption',
        'show_classification' => 'setShowClassification',
        'show_base_pay_rate' => 'setShowBasePayRate',
        'show_employee_id' => 'setShowEmployeeId',
        'show_rate_for_annual_earnings' => 'setShowRateForAnnualEarnings',
        'id' => 'setId',
        'email_from' => 'setEmailFrom',
        'email_body_message' => 'setEmailBodyMessage',
        'show_leave_accruals' => 'setShowLeaveAccruals',
        'show_line_notes' => 'setShowLineNotes',
        'show_location_in_line_notes' => 'setShowLocationInLineNotes',
        'alphabetise_pay_categories' => 'setAlphabetisePayCategories',
        'show_employee_external_id' => 'setShowEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'setEmployeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super_contribution_processing_frequency_text_option' => 'getSuperContributionProcessingFrequencyTextOption',
        'show_classification' => 'getShowClassification',
        'show_base_pay_rate' => 'getShowBasePayRate',
        'show_employee_id' => 'getShowEmployeeId',
        'show_rate_for_annual_earnings' => 'getShowRateForAnnualEarnings',
        'id' => 'getId',
        'email_from' => 'getEmailFrom',
        'email_body_message' => 'getEmailBodyMessage',
        'show_leave_accruals' => 'getShowLeaveAccruals',
        'show_line_notes' => 'getShowLineNotes',
        'show_location_in_line_notes' => 'getShowLocationInLineNotes',
        'alphabetise_pay_categories' => 'getAlphabetisePayCategories',
        'show_employee_external_id' => 'getShowEmployeeExternalId',
        'employees_must_login_to_download_payslips' => 'getEmployeesMustLoginToDownloadPayslips'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_NONE = 'None';
    const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_QUARTERLY = 'Quarterly';
    const SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_MONTHLY = 'Monthly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuperContributionProcessingFrequencyTextOptionAllowableValues()
    {
        return [
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_NONE,
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_QUARTERLY,
            self::SUPER_CONTRIBUTION_PROCESSING_FREQUENCY_TEXT_OPTION_MONTHLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super_contribution_processing_frequency_text_option'] = isset($data['super_contribution_processing_frequency_text_option']) ? $data['super_contribution_processing_frequency_text_option'] : null;
        $this->container['show_classification'] = isset($data['show_classification']) ? $data['show_classification'] : null;
        $this->container['show_base_pay_rate'] = isset($data['show_base_pay_rate']) ? $data['show_base_pay_rate'] : null;
        $this->container['show_employee_id'] = isset($data['show_employee_id']) ? $data['show_employee_id'] : null;
        $this->container['show_rate_for_annual_earnings'] = isset($data['show_rate_for_annual_earnings']) ? $data['show_rate_for_annual_earnings'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : null;
        $this->container['email_body_message'] = isset($data['email_body_message']) ? $data['email_body_message'] : null;
        $this->container['show_leave_accruals'] = isset($data['show_leave_accruals']) ? $data['show_leave_accruals'] : null;
        $this->container['show_line_notes'] = isset($data['show_line_notes']) ? $data['show_line_notes'] : null;
        $this->container['show_location_in_line_notes'] = isset($data['show_location_in_line_notes']) ? $data['show_location_in_line_notes'] : null;
        $this->container['alphabetise_pay_categories'] = isset($data['alphabetise_pay_categories']) ? $data['alphabetise_pay_categories'] : null;
        $this->container['show_employee_external_id'] = isset($data['show_employee_external_id']) ? $data['show_employee_external_id'] : null;
        $this->container['employees_must_login_to_download_payslips'] = isset($data['employees_must_login_to_download_payslips']) ? $data['employees_must_login_to_download_payslips'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSuperContributionProcessingFrequencyTextOptionAllowableValues();
        if (!is_null($this->container['super_contribution_processing_frequency_text_option']) && !in_array($this->container['super_contribution_processing_frequency_text_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'super_contribution_processing_frequency_text_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super_contribution_processing_frequency_text_option
     *
     * @return string
     */
    public function getSuperContributionProcessingFrequencyTextOption()
    {
        return $this->container['super_contribution_processing_frequency_text_option'];
    }

    /**
     * Sets super_contribution_processing_frequency_text_option
     *
     * @param string $super_contribution_processing_frequency_text_option 
     *
     * @return $this
     */
    public function setSuperContributionProcessingFrequencyTextOption($super_contribution_processing_frequency_text_option)
    {
        $allowedValues = $this->getSuperContributionProcessingFrequencyTextOptionAllowableValues();
        if (!is_null($super_contribution_processing_frequency_text_option) && !in_array($super_contribution_processing_frequency_text_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'super_contribution_processing_frequency_text_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['super_contribution_processing_frequency_text_option'] = $super_contribution_processing_frequency_text_option;

        return $this;
    }

    /**
     * Gets show_classification
     *
     * @return bool
     */
    public function getShowClassification()
    {
        return $this->container['show_classification'];
    }

    /**
     * Sets show_classification
     *
     * @param bool $show_classification 
     *
     * @return $this
     */
    public function setShowClassification($show_classification)
    {
        $this->container['show_classification'] = $show_classification;

        return $this;
    }

    /**
     * Gets show_base_pay_rate
     *
     * @return bool
     */
    public function getShowBasePayRate()
    {
        return $this->container['show_base_pay_rate'];
    }

    /**
     * Sets show_base_pay_rate
     *
     * @param bool $show_base_pay_rate 
     *
     * @return $this
     */
    public function setShowBasePayRate($show_base_pay_rate)
    {
        $this->container['show_base_pay_rate'] = $show_base_pay_rate;

        return $this;
    }

    /**
     * Gets show_employee_id
     *
     * @return bool
     */
    public function getShowEmployeeId()
    {
        return $this->container['show_employee_id'];
    }

    /**
     * Sets show_employee_id
     *
     * @param bool $show_employee_id 
     *
     * @return $this
     */
    public function setShowEmployeeId($show_employee_id)
    {
        $this->container['show_employee_id'] = $show_employee_id;

        return $this;
    }

    /**
     * Gets show_rate_for_annual_earnings
     *
     * @return bool
     */
    public function getShowRateForAnnualEarnings()
    {
        return $this->container['show_rate_for_annual_earnings'];
    }

    /**
     * Sets show_rate_for_annual_earnings
     *
     * @param bool $show_rate_for_annual_earnings 
     *
     * @return $this
     */
    public function setShowRateForAnnualEarnings($show_rate_for_annual_earnings)
    {
        $this->container['show_rate_for_annual_earnings'] = $show_rate_for_annual_earnings;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email_from
     *
     * @return string
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string $email_from 
     *
     * @return $this
     */
    public function setEmailFrom($email_from)
    {
        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets email_body_message
     *
     * @return string
     */
    public function getEmailBodyMessage()
    {
        return $this->container['email_body_message'];
    }

    /**
     * Sets email_body_message
     *
     * @param string $email_body_message 
     *
     * @return $this
     */
    public function setEmailBodyMessage($email_body_message)
    {
        $this->container['email_body_message'] = $email_body_message;

        return $this;
    }

    /**
     * Gets show_leave_accruals
     *
     * @return bool
     */
    public function getShowLeaveAccruals()
    {
        return $this->container['show_leave_accruals'];
    }

    /**
     * Sets show_leave_accruals
     *
     * @param bool $show_leave_accruals 
     *
     * @return $this
     */
    public function setShowLeaveAccruals($show_leave_accruals)
    {
        $this->container['show_leave_accruals'] = $show_leave_accruals;

        return $this;
    }

    /**
     * Gets show_line_notes
     *
     * @return bool
     */
    public function getShowLineNotes()
    {
        return $this->container['show_line_notes'];
    }

    /**
     * Sets show_line_notes
     *
     * @param bool $show_line_notes 
     *
     * @return $this
     */
    public function setShowLineNotes($show_line_notes)
    {
        $this->container['show_line_notes'] = $show_line_notes;

        return $this;
    }

    /**
     * Gets show_location_in_line_notes
     *
     * @return bool
     */
    public function getShowLocationInLineNotes()
    {
        return $this->container['show_location_in_line_notes'];
    }

    /**
     * Sets show_location_in_line_notes
     *
     * @param bool $show_location_in_line_notes 
     *
     * @return $this
     */
    public function setShowLocationInLineNotes($show_location_in_line_notes)
    {
        $this->container['show_location_in_line_notes'] = $show_location_in_line_notes;

        return $this;
    }

    /**
     * Gets alphabetise_pay_categories
     *
     * @return bool
     */
    public function getAlphabetisePayCategories()
    {
        return $this->container['alphabetise_pay_categories'];
    }

    /**
     * Sets alphabetise_pay_categories
     *
     * @param bool $alphabetise_pay_categories 
     *
     * @return $this
     */
    public function setAlphabetisePayCategories($alphabetise_pay_categories)
    {
        $this->container['alphabetise_pay_categories'] = $alphabetise_pay_categories;

        return $this;
    }

    /**
     * Gets show_employee_external_id
     *
     * @return bool
     */
    public function getShowEmployeeExternalId()
    {
        return $this->container['show_employee_external_id'];
    }

    /**
     * Sets show_employee_external_id
     *
     * @param bool $show_employee_external_id 
     *
     * @return $this
     */
    public function setShowEmployeeExternalId($show_employee_external_id)
    {
        $this->container['show_employee_external_id'] = $show_employee_external_id;

        return $this;
    }

    /**
     * Gets employees_must_login_to_download_payslips
     *
     * @return bool
     */
    public function getEmployeesMustLoginToDownloadPayslips()
    {
        return $this->container['employees_must_login_to_download_payslips'];
    }

    /**
     * Sets employees_must_login_to_download_payslips
     *
     * @param bool $employees_must_login_to_download_payslips 
     *
     * @return $this
     */
    public function setEmployeesMustLoginToDownloadPayslips($employees_must_login_to_download_payslips)
    {
        $this->container['employees_must_login_to_download_payslips'] = $employees_must_login_to_download_payslips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


