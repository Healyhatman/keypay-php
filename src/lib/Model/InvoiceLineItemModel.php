<?php
/**
 * InvoiceLineItemModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceLineItemModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceLineItemModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceLineItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abn' => 'string',
        'business_number' => 'string',
        'business_id' => 'int',
        'billing_plan' => 'string',
        'description' => 'string',
        'unit_price_including_gst' => 'float',
        'quantity' => 'float',
        'total_including_gst' => 'float',
        'details' => '\OpenAPI\Client\Model\InvoiceLineItemDetailModel[]',
        'white_label_name' => 'string',
        'brand_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abn' => null,
        'business_number' => null,
        'business_id' => 'int32',
        'billing_plan' => null,
        'description' => null,
        'unit_price_including_gst' => 'double',
        'quantity' => 'double',
        'total_including_gst' => 'double',
        'details' => null,
        'white_label_name' => null,
        'brand_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abn' => false,
		'business_number' => false,
		'business_id' => false,
		'billing_plan' => false,
		'description' => false,
		'unit_price_including_gst' => false,
		'quantity' => false,
		'total_including_gst' => false,
		'details' => false,
		'white_label_name' => false,
		'brand_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abn' => 'abn',
        'business_number' => 'businessNumber',
        'business_id' => 'businessId',
        'billing_plan' => 'billingPlan',
        'description' => 'description',
        'unit_price_including_gst' => 'unitPriceIncludingGst',
        'quantity' => 'quantity',
        'total_including_gst' => 'totalIncludingGst',
        'details' => 'details',
        'white_label_name' => 'whiteLabelName',
        'brand_name' => 'brandName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abn' => 'setAbn',
        'business_number' => 'setBusinessNumber',
        'business_id' => 'setBusinessId',
        'billing_plan' => 'setBillingPlan',
        'description' => 'setDescription',
        'unit_price_including_gst' => 'setUnitPriceIncludingGst',
        'quantity' => 'setQuantity',
        'total_including_gst' => 'setTotalIncludingGst',
        'details' => 'setDetails',
        'white_label_name' => 'setWhiteLabelName',
        'brand_name' => 'setBrandName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abn' => 'getAbn',
        'business_number' => 'getBusinessNumber',
        'business_id' => 'getBusinessId',
        'billing_plan' => 'getBillingPlan',
        'description' => 'getDescription',
        'unit_price_including_gst' => 'getUnitPriceIncludingGst',
        'quantity' => 'getQuantity',
        'total_including_gst' => 'getTotalIncludingGst',
        'details' => 'getDetails',
        'white_label_name' => 'getWhiteLabelName',
        'brand_name' => 'getBrandName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abn', $data ?? [], null);
        $this->setIfExists('business_number', $data ?? [], null);
        $this->setIfExists('business_id', $data ?? [], null);
        $this->setIfExists('billing_plan', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit_price_including_gst', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_including_gst', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('white_label_name', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn 
     *
     * @return self
     */
    public function setAbn($abn)
    {
        if (is_null($abn)) {
            throw new \InvalidArgumentException('non-nullable abn cannot be null');
        }
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets business_number
     *
     * @return string|null
     */
    public function getBusinessNumber()
    {
        return $this->container['business_number'];
    }

    /**
     * Sets business_number
     *
     * @param string|null $business_number 
     *
     * @return self
     */
    public function setBusinessNumber($business_number)
    {
        if (is_null($business_number)) {
            throw new \InvalidArgumentException('non-nullable business_number cannot be null');
        }
        $this->container['business_number'] = $business_number;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return int|null
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param int|null $business_id 
     *
     * @return self
     */
    public function setBusinessId($business_id)
    {
        if (is_null($business_id)) {
            throw new \InvalidArgumentException('non-nullable business_id cannot be null');
        }
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string|null
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string|null $billing_plan 
     *
     * @return self
     */
    public function setBillingPlan($billing_plan)
    {
        if (is_null($billing_plan)) {
            throw new \InvalidArgumentException('non-nullable billing_plan cannot be null');
        }
        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_price_including_gst
     *
     * @return float|null
     */
    public function getUnitPriceIncludingGst()
    {
        return $this->container['unit_price_including_gst'];
    }

    /**
     * Sets unit_price_including_gst
     *
     * @param float|null $unit_price_including_gst 
     *
     * @return self
     */
    public function setUnitPriceIncludingGst($unit_price_including_gst)
    {
        if (is_null($unit_price_including_gst)) {
            throw new \InvalidArgumentException('non-nullable unit_price_including_gst cannot be null');
        }
        $this->container['unit_price_including_gst'] = $unit_price_including_gst;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity 
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_including_gst
     *
     * @return float|null
     */
    public function getTotalIncludingGst()
    {
        return $this->container['total_including_gst'];
    }

    /**
     * Sets total_including_gst
     *
     * @param float|null $total_including_gst 
     *
     * @return self
     */
    public function setTotalIncludingGst($total_including_gst)
    {
        if (is_null($total_including_gst)) {
            throw new \InvalidArgumentException('non-nullable total_including_gst cannot be null');
        }
        $this->container['total_including_gst'] = $total_including_gst;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\InvoiceLineItemDetailModel[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\InvoiceLineItemDetailModel[]|null $details 
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets white_label_name
     *
     * @return string|null
     */
    public function getWhiteLabelName()
    {
        return $this->container['white_label_name'];
    }

    /**
     * Sets white_label_name
     *
     * @param string|null $white_label_name 
     *
     * @return self
     */
    public function setWhiteLabelName($white_label_name)
    {
        if (is_null($white_label_name)) {
            throw new \InvalidArgumentException('non-nullable white_label_name cannot be null');
        }
        $this->container['white_label_name'] = $white_label_name;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name 
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            throw new \InvalidArgumentException('non-nullable brand_name cannot be null');
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


