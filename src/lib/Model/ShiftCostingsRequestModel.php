<?php
/**
 * ShiftCostingsRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShiftCostingsRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShiftCostingsRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShiftCostingsRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_external_id' => 'string',
        'location_id_type' => 'string',
        'work_type_id_type' => 'string',
        'include_evaluation_results' => 'bool',
        'employee' => '\Swagger\Client\Model\ShiftCostingsEmployeeModel',
        'shifts' => '\Swagger\Client\Model\ShiftCostingsRequestShiftModel[]',
        'override_rates' => '\Swagger\Client\Model\RateOverride[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_external_id' => null,
        'location_id_type' => null,
        'work_type_id_type' => null,
        'include_evaluation_results' => null,
        'employee' => null,
        'shifts' => null,
        'override_rates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_external_id' => 'transactionExternalId',
        'location_id_type' => 'locationIdType',
        'work_type_id_type' => 'workTypeIdType',
        'include_evaluation_results' => 'includeEvaluationResults',
        'employee' => 'employee',
        'shifts' => 'shifts',
        'override_rates' => 'overrideRates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_external_id' => 'setTransactionExternalId',
        'location_id_type' => 'setLocationIdType',
        'work_type_id_type' => 'setWorkTypeIdType',
        'include_evaluation_results' => 'setIncludeEvaluationResults',
        'employee' => 'setEmployee',
        'shifts' => 'setShifts',
        'override_rates' => 'setOverrideRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_external_id' => 'getTransactionExternalId',
        'location_id_type' => 'getLocationIdType',
        'work_type_id_type' => 'getWorkTypeIdType',
        'include_evaluation_results' => 'getIncludeEvaluationResults',
        'employee' => 'getEmployee',
        'shifts' => 'getShifts',
        'override_rates' => 'getOverrideRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCATION_ID_TYPE_STANDARD = 'Standard';
    const LOCATION_ID_TYPE_EXTERNAL = 'External';
    const WORK_TYPE_ID_TYPE_STANDARD = 'Standard';
    const WORK_TYPE_ID_TYPE_EXTERNAL = 'External';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationIdTypeAllowableValues()
    {
        return [
            self::LOCATION_ID_TYPE_STANDARD,
            self::LOCATION_ID_TYPE_EXTERNAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkTypeIdTypeAllowableValues()
    {
        return [
            self::WORK_TYPE_ID_TYPE_STANDARD,
            self::WORK_TYPE_ID_TYPE_EXTERNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_external_id'] = isset($data['transaction_external_id']) ? $data['transaction_external_id'] : null;
        $this->container['location_id_type'] = isset($data['location_id_type']) ? $data['location_id_type'] : null;
        $this->container['work_type_id_type'] = isset($data['work_type_id_type']) ? $data['work_type_id_type'] : null;
        $this->container['include_evaluation_results'] = isset($data['include_evaluation_results']) ? $data['include_evaluation_results'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['shifts'] = isset($data['shifts']) ? $data['shifts'] : null;
        $this->container['override_rates'] = isset($data['override_rates']) ? $data['override_rates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocationIdTypeAllowableValues();
        if (!is_null($this->container['location_id_type']) && !in_array($this->container['location_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'location_id_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWorkTypeIdTypeAllowableValues();
        if (!is_null($this->container['work_type_id_type']) && !in_array($this->container['work_type_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'work_type_id_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_external_id
     *
     * @return string
     */
    public function getTransactionExternalId()
    {
        return $this->container['transaction_external_id'];
    }

    /**
     * Sets transaction_external_id
     *
     * @param string $transaction_external_id 
     *
     * @return $this
     */
    public function setTransactionExternalId($transaction_external_id)
    {
        $this->container['transaction_external_id'] = $transaction_external_id;

        return $this;
    }

    /**
     * Gets location_id_type
     *
     * @return string
     */
    public function getLocationIdType()
    {
        return $this->container['location_id_type'];
    }

    /**
     * Sets location_id_type
     *
     * @param string $location_id_type 
     *
     * @return $this
     */
    public function setLocationIdType($location_id_type)
    {
        $allowedValues = $this->getLocationIdTypeAllowableValues();
        if (!is_null($location_id_type) && !in_array($location_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'location_id_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_id_type'] = $location_id_type;

        return $this;
    }

    /**
     * Gets work_type_id_type
     *
     * @return string
     */
    public function getWorkTypeIdType()
    {
        return $this->container['work_type_id_type'];
    }

    /**
     * Sets work_type_id_type
     *
     * @param string $work_type_id_type 
     *
     * @return $this
     */
    public function setWorkTypeIdType($work_type_id_type)
    {
        $allowedValues = $this->getWorkTypeIdTypeAllowableValues();
        if (!is_null($work_type_id_type) && !in_array($work_type_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'work_type_id_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['work_type_id_type'] = $work_type_id_type;

        return $this;
    }

    /**
     * Gets include_evaluation_results
     *
     * @return bool
     */
    public function getIncludeEvaluationResults()
    {
        return $this->container['include_evaluation_results'];
    }

    /**
     * Sets include_evaluation_results
     *
     * @param bool $include_evaluation_results 
     *
     * @return $this
     */
    public function setIncludeEvaluationResults($include_evaluation_results)
    {
        $this->container['include_evaluation_results'] = $include_evaluation_results;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\ShiftCostingsEmployeeModel
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\ShiftCostingsEmployeeModel $employee 
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets shifts
     *
     * @return \Swagger\Client\Model\ShiftCostingsRequestShiftModel[]
     */
    public function getShifts()
    {
        return $this->container['shifts'];
    }

    /**
     * Sets shifts
     *
     * @param \Swagger\Client\Model\ShiftCostingsRequestShiftModel[] $shifts 
     *
     * @return $this
     */
    public function setShifts($shifts)
    {
        $this->container['shifts'] = $shifts;

        return $this;
    }

    /**
     * Gets override_rates
     *
     * @return \Swagger\Client\Model\RateOverride[]
     */
    public function getOverrideRates()
    {
        return $this->container['override_rates'];
    }

    /**
     * Sets override_rates
     *
     * @param \Swagger\Client\Model\RateOverride[] $override_rates 
     *
     * @return $this
     */
    public function setOverrideRates($override_rates)
    {
        $this->container['override_rates'] = $override_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


