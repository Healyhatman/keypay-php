<?php
/**
 * ShiftCostingsRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShiftCostingsRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShiftCostingsRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShiftCostingsRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_external_id' => 'string',
        'location_id_type' => 'string',
        'work_type_id_type' => 'string',
        'include_evaluation_results' => 'bool',
        'employee' => '\OpenAPI\Client\Model\ShiftCostingsEmployeeModel',
        'shifts' => '\OpenAPI\Client\Model\ShiftCostingsRequestShiftModel[]',
        'override_rates' => '\OpenAPI\Client\Model\RateOverride[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_external_id' => null,
        'location_id_type' => null,
        'work_type_id_type' => null,
        'include_evaluation_results' => null,
        'employee' => null,
        'shifts' => null,
        'override_rates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_external_id' => false,
		'location_id_type' => false,
		'work_type_id_type' => false,
		'include_evaluation_results' => false,
		'employee' => false,
		'shifts' => false,
		'override_rates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_external_id' => 'transactionExternalId',
        'location_id_type' => 'locationIdType',
        'work_type_id_type' => 'workTypeIdType',
        'include_evaluation_results' => 'includeEvaluationResults',
        'employee' => 'employee',
        'shifts' => 'shifts',
        'override_rates' => 'overrideRates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_external_id' => 'setTransactionExternalId',
        'location_id_type' => 'setLocationIdType',
        'work_type_id_type' => 'setWorkTypeIdType',
        'include_evaluation_results' => 'setIncludeEvaluationResults',
        'employee' => 'setEmployee',
        'shifts' => 'setShifts',
        'override_rates' => 'setOverrideRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_external_id' => 'getTransactionExternalId',
        'location_id_type' => 'getLocationIdType',
        'work_type_id_type' => 'getWorkTypeIdType',
        'include_evaluation_results' => 'getIncludeEvaluationResults',
        'employee' => 'getEmployee',
        'shifts' => 'getShifts',
        'override_rates' => 'getOverrideRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LOCATION_ID_TYPE_STANDARD = 'Standard';
    public const LOCATION_ID_TYPE_EXTERNAL = 'External';
    public const WORK_TYPE_ID_TYPE_STANDARD = 'Standard';
    public const WORK_TYPE_ID_TYPE_EXTERNAL = 'External';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationIdTypeAllowableValues()
    {
        return [
            self::LOCATION_ID_TYPE_STANDARD,
            self::LOCATION_ID_TYPE_EXTERNAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkTypeIdTypeAllowableValues()
    {
        return [
            self::WORK_TYPE_ID_TYPE_STANDARD,
            self::WORK_TYPE_ID_TYPE_EXTERNAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('transaction_external_id', $data ?? [], null);
        $this->setIfExists('location_id_type', $data ?? [], null);
        $this->setIfExists('work_type_id_type', $data ?? [], null);
        $this->setIfExists('include_evaluation_results', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('shifts', $data ?? [], null);
        $this->setIfExists('override_rates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocationIdTypeAllowableValues();
        if (!is_null($this->container['location_id_type']) && !in_array($this->container['location_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'location_id_type', must be one of '%s'",
                $this->container['location_id_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWorkTypeIdTypeAllowableValues();
        if (!is_null($this->container['work_type_id_type']) && !in_array($this->container['work_type_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'work_type_id_type', must be one of '%s'",
                $this->container['work_type_id_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_external_id
     *
     * @return string|null
     */
    public function getTransactionExternalId()
    {
        return $this->container['transaction_external_id'];
    }

    /**
     * Sets transaction_external_id
     *
     * @param string|null $transaction_external_id 
     *
     * @return self
     */
    public function setTransactionExternalId($transaction_external_id)
    {
        if (is_null($transaction_external_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_external_id cannot be null');
        }
        $this->container['transaction_external_id'] = $transaction_external_id;

        return $this;
    }

    /**
     * Gets location_id_type
     *
     * @return string|null
     */
    public function getLocationIdType()
    {
        return $this->container['location_id_type'];
    }

    /**
     * Sets location_id_type
     *
     * @param string|null $location_id_type 
     *
     * @return self
     */
    public function setLocationIdType($location_id_type)
    {
        if (is_null($location_id_type)) {
            throw new \InvalidArgumentException('non-nullable location_id_type cannot be null');
        }
        $allowedValues = $this->getLocationIdTypeAllowableValues();
        if (!in_array($location_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'location_id_type', must be one of '%s'",
                    $location_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_id_type'] = $location_id_type;

        return $this;
    }

    /**
     * Gets work_type_id_type
     *
     * @return string|null
     */
    public function getWorkTypeIdType()
    {
        return $this->container['work_type_id_type'];
    }

    /**
     * Sets work_type_id_type
     *
     * @param string|null $work_type_id_type 
     *
     * @return self
     */
    public function setWorkTypeIdType($work_type_id_type)
    {
        if (is_null($work_type_id_type)) {
            throw new \InvalidArgumentException('non-nullable work_type_id_type cannot be null');
        }
        $allowedValues = $this->getWorkTypeIdTypeAllowableValues();
        if (!in_array($work_type_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'work_type_id_type', must be one of '%s'",
                    $work_type_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['work_type_id_type'] = $work_type_id_type;

        return $this;
    }

    /**
     * Gets include_evaluation_results
     *
     * @return bool|null
     */
    public function getIncludeEvaluationResults()
    {
        return $this->container['include_evaluation_results'];
    }

    /**
     * Sets include_evaluation_results
     *
     * @param bool|null $include_evaluation_results 
     *
     * @return self
     */
    public function setIncludeEvaluationResults($include_evaluation_results)
    {
        if (is_null($include_evaluation_results)) {
            throw new \InvalidArgumentException('non-nullable include_evaluation_results cannot be null');
        }
        $this->container['include_evaluation_results'] = $include_evaluation_results;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \OpenAPI\Client\Model\ShiftCostingsEmployeeModel|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \OpenAPI\Client\Model\ShiftCostingsEmployeeModel|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets shifts
     *
     * @return \OpenAPI\Client\Model\ShiftCostingsRequestShiftModel[]|null
     */
    public function getShifts()
    {
        return $this->container['shifts'];
    }

    /**
     * Sets shifts
     *
     * @param \OpenAPI\Client\Model\ShiftCostingsRequestShiftModel[]|null $shifts 
     *
     * @return self
     */
    public function setShifts($shifts)
    {
        if (is_null($shifts)) {
            throw new \InvalidArgumentException('non-nullable shifts cannot be null');
        }
        $this->container['shifts'] = $shifts;

        return $this;
    }

    /**
     * Gets override_rates
     *
     * @return \OpenAPI\Client\Model\RateOverride[]|null
     */
    public function getOverrideRates()
    {
        return $this->container['override_rates'];
    }

    /**
     * Sets override_rates
     *
     * @param \OpenAPI\Client\Model\RateOverride[]|null $override_rates 
     *
     * @return self
     */
    public function setOverrideRates($override_rates)
    {
        if (is_null($override_rates)) {
            throw new \InvalidArgumentException('non-nullable override_rates cannot be null');
        }
        $this->container['override_rates'] = $override_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


