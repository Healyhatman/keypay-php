<?php
/**
 * AuRosterTimesheetComparisonReportRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuRosterTimesheetComparisonReportRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuRosterTimesheetComparisonReportRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuRosterTimesheetComparisonReportRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employment_type_id' => 'int',
        'employee_id' => 'int',
        'include_costs' => 'bool',
        'timesheet_statuses' => 'string[]',
        'work_type_id' => 'int',
        'roster_location_id' => 'int',
        'timesheet_location_id' => 'int',
        'roster_statuses' => 'string[]',
        'pay_schedule_id' => 'int',
        'include_post_tax_deductions' => 'bool',
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'location_id' => 'int',
        'employing_entity_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employment_type_id' => 'int32',
        'employee_id' => 'int32',
        'include_costs' => null,
        'timesheet_statuses' => null,
        'work_type_id' => 'int32',
        'roster_location_id' => 'int32',
        'timesheet_location_id' => 'int32',
        'roster_statuses' => null,
        'pay_schedule_id' => 'int32',
        'include_post_tax_deductions' => null,
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'location_id' => 'int32',
        'employing_entity_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employment_type_id' => false,
		'employee_id' => false,
		'include_costs' => false,
		'timesheet_statuses' => false,
		'work_type_id' => false,
		'roster_location_id' => false,
		'timesheet_location_id' => false,
		'roster_statuses' => false,
		'pay_schedule_id' => false,
		'include_post_tax_deductions' => false,
		'from_date' => false,
		'to_date' => false,
		'location_id' => false,
		'employing_entity_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employment_type_id' => 'employmentTypeId',
        'employee_id' => 'employeeId',
        'include_costs' => 'includeCosts',
        'timesheet_statuses' => 'timesheetStatuses',
        'work_type_id' => 'workTypeId',
        'roster_location_id' => 'rosterLocationId',
        'timesheet_location_id' => 'timesheetLocationId',
        'roster_statuses' => 'rosterStatuses',
        'pay_schedule_id' => 'payScheduleId',
        'include_post_tax_deductions' => 'includePostTaxDeductions',
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'location_id' => 'locationId',
        'employing_entity_id' => 'employingEntityId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employment_type_id' => 'setEmploymentTypeId',
        'employee_id' => 'setEmployeeId',
        'include_costs' => 'setIncludeCosts',
        'timesheet_statuses' => 'setTimesheetStatuses',
        'work_type_id' => 'setWorkTypeId',
        'roster_location_id' => 'setRosterLocationId',
        'timesheet_location_id' => 'setTimesheetLocationId',
        'roster_statuses' => 'setRosterStatuses',
        'pay_schedule_id' => 'setPayScheduleId',
        'include_post_tax_deductions' => 'setIncludePostTaxDeductions',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'location_id' => 'setLocationId',
        'employing_entity_id' => 'setEmployingEntityId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employment_type_id' => 'getEmploymentTypeId',
        'employee_id' => 'getEmployeeId',
        'include_costs' => 'getIncludeCosts',
        'timesheet_statuses' => 'getTimesheetStatuses',
        'work_type_id' => 'getWorkTypeId',
        'roster_location_id' => 'getRosterLocationId',
        'timesheet_location_id' => 'getTimesheetLocationId',
        'roster_statuses' => 'getRosterStatuses',
        'pay_schedule_id' => 'getPayScheduleId',
        'include_post_tax_deductions' => 'getIncludePostTaxDeductions',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'location_id' => 'getLocationId',
        'employing_entity_id' => 'getEmployingEntityId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMESHEET_STATUSES_MISSING = 'Missing';
    public const TIMESHEET_STATUSES_SUBMITTED = 'Submitted';
    public const TIMESHEET_STATUSES_APPROVED = 'Approved';
    public const TIMESHEET_STATUSES_REJECTED = 'Rejected';
    public const TIMESHEET_STATUSES_PROCESSED = 'Processed';
    public const ROSTER_STATUSES_ALL = 'All';
    public const ROSTER_STATUSES_PUBLISHED = 'Published';
    public const ROSTER_STATUSES_UNPUBLISHED = 'Unpublished';
    public const ROSTER_STATUSES_ACCEPTED = 'Accepted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetStatusesAllowableValues()
    {
        return [
            self::TIMESHEET_STATUSES_MISSING,
            self::TIMESHEET_STATUSES_SUBMITTED,
            self::TIMESHEET_STATUSES_APPROVED,
            self::TIMESHEET_STATUSES_REJECTED,
            self::TIMESHEET_STATUSES_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRosterStatusesAllowableValues()
    {
        return [
            self::ROSTER_STATUSES_ALL,
            self::ROSTER_STATUSES_PUBLISHED,
            self::ROSTER_STATUSES_UNPUBLISHED,
            self::ROSTER_STATUSES_ACCEPTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employment_type_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('include_costs', $data ?? [], null);
        $this->setIfExists('timesheet_statuses', $data ?? [], null);
        $this->setIfExists('work_type_id', $data ?? [], null);
        $this->setIfExists('roster_location_id', $data ?? [], null);
        $this->setIfExists('timesheet_location_id', $data ?? [], null);
        $this->setIfExists('roster_statuses', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('include_post_tax_deductions', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('employing_entity_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employment_type_id
     *
     * @return int|null
     */
    public function getEmploymentTypeId()
    {
        return $this->container['employment_type_id'];
    }

    /**
     * Sets employment_type_id
     *
     * @param int|null $employment_type_id 
     *
     * @return self
     */
    public function setEmploymentTypeId($employment_type_id)
    {
        if (is_null($employment_type_id)) {
            throw new \InvalidArgumentException('non-nullable employment_type_id cannot be null');
        }
        $this->container['employment_type_id'] = $employment_type_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets include_costs
     *
     * @return bool|null
     */
    public function getIncludeCosts()
    {
        return $this->container['include_costs'];
    }

    /**
     * Sets include_costs
     *
     * @param bool|null $include_costs 
     *
     * @return self
     */
    public function setIncludeCosts($include_costs)
    {
        if (is_null($include_costs)) {
            throw new \InvalidArgumentException('non-nullable include_costs cannot be null');
        }
        $this->container['include_costs'] = $include_costs;

        return $this;
    }

    /**
     * Gets timesheet_statuses
     *
     * @return string[]|null
     */
    public function getTimesheetStatuses()
    {
        return $this->container['timesheet_statuses'];
    }

    /**
     * Sets timesheet_statuses
     *
     * @param string[]|null $timesheet_statuses 
     *
     * @return self
     */
    public function setTimesheetStatuses($timesheet_statuses)
    {
        if (is_null($timesheet_statuses)) {
            throw new \InvalidArgumentException('non-nullable timesheet_statuses cannot be null');
        }
        $allowedValues = $this->getTimesheetStatusesAllowableValues();
        if (array_diff($timesheet_statuses, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'timesheet_statuses', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_statuses'] = $timesheet_statuses;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int|null
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int|null $work_type_id 
     *
     * @return self
     */
    public function setWorkTypeId($work_type_id)
    {
        if (is_null($work_type_id)) {
            throw new \InvalidArgumentException('non-nullable work_type_id cannot be null');
        }
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets roster_location_id
     *
     * @return int|null
     */
    public function getRosterLocationId()
    {
        return $this->container['roster_location_id'];
    }

    /**
     * Sets roster_location_id
     *
     * @param int|null $roster_location_id 
     *
     * @return self
     */
    public function setRosterLocationId($roster_location_id)
    {
        if (is_null($roster_location_id)) {
            throw new \InvalidArgumentException('non-nullable roster_location_id cannot be null');
        }
        $this->container['roster_location_id'] = $roster_location_id;

        return $this;
    }

    /**
     * Gets timesheet_location_id
     *
     * @return int|null
     */
    public function getTimesheetLocationId()
    {
        return $this->container['timesheet_location_id'];
    }

    /**
     * Sets timesheet_location_id
     *
     * @param int|null $timesheet_location_id 
     *
     * @return self
     */
    public function setTimesheetLocationId($timesheet_location_id)
    {
        if (is_null($timesheet_location_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_location_id cannot be null');
        }
        $this->container['timesheet_location_id'] = $timesheet_location_id;

        return $this;
    }

    /**
     * Gets roster_statuses
     *
     * @return string[]|null
     */
    public function getRosterStatuses()
    {
        return $this->container['roster_statuses'];
    }

    /**
     * Sets roster_statuses
     *
     * @param string[]|null $roster_statuses 
     *
     * @return self
     */
    public function setRosterStatuses($roster_statuses)
    {
        if (is_null($roster_statuses)) {
            throw new \InvalidArgumentException('non-nullable roster_statuses cannot be null');
        }
        $allowedValues = $this->getRosterStatusesAllowableValues();
        if (array_diff($roster_statuses, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roster_statuses', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roster_statuses'] = $roster_statuses;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id 
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets include_post_tax_deductions
     *
     * @return bool|null
     */
    public function getIncludePostTaxDeductions()
    {
        return $this->container['include_post_tax_deductions'];
    }

    /**
     * Sets include_post_tax_deductions
     *
     * @param bool|null $include_post_tax_deductions 
     *
     * @return self
     */
    public function setIncludePostTaxDeductions($include_post_tax_deductions)
    {
        if (is_null($include_post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable include_post_tax_deductions cannot be null');
        }
        $this->container['include_post_tax_deductions'] = $include_post_tax_deductions;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date 
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date 
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets employing_entity_id
     *
     * @return int|null
     */
    public function getEmployingEntityId()
    {
        return $this->container['employing_entity_id'];
    }

    /**
     * Sets employing_entity_id
     *
     * @param int|null $employing_entity_id 
     *
     * @return self
     */
    public function setEmployingEntityId($employing_entity_id)
    {
        if (is_null($employing_entity_id)) {
            throw new \InvalidArgumentException('non-nullable employing_entity_id cannot be null');
        }
        $this->container['employing_entity_id'] = $employing_entity_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


