<?php
/**
 * AuBusinessExportModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuBusinessExportModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuBusinessExportModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuBusinessExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abn' => 'string',
        'suburb' => 'string',
        'state' => 'string',
        'management_software_id' => 'string',
        'sbr_software_provider' => 'string',
        'sbr_software_id' => 'string',
        'is_foreign_entity' => 'bool',
        'foreign_entity_country' => 'string',
        'default_super_rate' => 'double',
        'id' => 'int',
        'name' => 'string',
        'region' => 'string',
        'legal_name' => 'string',
        'contact_name' => 'string',
        'contact_email_address' => 'string',
        'contact_phone_number' => 'string',
        'contact_fax_number' => 'string',
        'external_id' => 'string',
        'standard_hours_per_day' => 'double',
        'journal_service' => 'string',
        'end_of_week' => 'string',
        'initial_financial_year_start' => 'int',
        'managers_can_edit_roster_budgets' => 'bool',
        'budget_warning_percent' => 'double',
        'budget_entry_method' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'post_code' => 'string',
        'white_label_name' => 'string',
        'white_label_id' => 'int',
        'promo_code' => 'string',
        'date_created' => '\DateTime',
        'leave_accrual_start_date_type' => 'string',
        'leave_year_start' => '\DateTime',
        'source' => 'string',
        'number_of_employees' => 'string',
        'industry_name' => 'string',
        'pay_cycle_frequency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abn' => null,
        'suburb' => null,
        'state' => null,
        'management_software_id' => null,
        'sbr_software_provider' => null,
        'sbr_software_id' => null,
        'is_foreign_entity' => null,
        'foreign_entity_country' => null,
        'default_super_rate' => 'double',
        'id' => 'int32',
        'name' => null,
        'region' => null,
        'legal_name' => null,
        'contact_name' => null,
        'contact_email_address' => null,
        'contact_phone_number' => null,
        'contact_fax_number' => null,
        'external_id' => null,
        'standard_hours_per_day' => 'double',
        'journal_service' => null,
        'end_of_week' => null,
        'initial_financial_year_start' => 'int32',
        'managers_can_edit_roster_budgets' => null,
        'budget_warning_percent' => 'double',
        'budget_entry_method' => null,
        'address_line1' => null,
        'address_line2' => null,
        'post_code' => null,
        'white_label_name' => null,
        'white_label_id' => 'int32',
        'promo_code' => null,
        'date_created' => 'date-time',
        'leave_accrual_start_date_type' => null,
        'leave_year_start' => 'date-time',
        'source' => null,
        'number_of_employees' => null,
        'industry_name' => null,
        'pay_cycle_frequency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abn' => 'abn',
        'suburb' => 'suburb',
        'state' => 'state',
        'management_software_id' => 'managementSoftwareId',
        'sbr_software_provider' => 'sbrSoftwareProvider',
        'sbr_software_id' => 'sbrSoftwareId',
        'is_foreign_entity' => 'isForeignEntity',
        'foreign_entity_country' => 'foreignEntityCountry',
        'default_super_rate' => 'defaultSuperRate',
        'id' => 'id',
        'name' => 'name',
        'region' => 'region',
        'legal_name' => 'legalName',
        'contact_name' => 'contactName',
        'contact_email_address' => 'contactEmailAddress',
        'contact_phone_number' => 'contactPhoneNumber',
        'contact_fax_number' => 'contactFaxNumber',
        'external_id' => 'externalId',
        'standard_hours_per_day' => 'standardHoursPerDay',
        'journal_service' => 'journalService',
        'end_of_week' => 'endOfWeek',
        'initial_financial_year_start' => 'initialFinancialYearStart',
        'managers_can_edit_roster_budgets' => 'managersCanEditRosterBudgets',
        'budget_warning_percent' => 'budgetWarningPercent',
        'budget_entry_method' => 'budgetEntryMethod',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'post_code' => 'postCode',
        'white_label_name' => 'whiteLabelName',
        'white_label_id' => 'whiteLabelId',
        'promo_code' => 'promoCode',
        'date_created' => 'dateCreated',
        'leave_accrual_start_date_type' => 'leaveAccrualStartDateType',
        'leave_year_start' => 'leaveYearStart',
        'source' => 'source',
        'number_of_employees' => 'numberOfEmployees',
        'industry_name' => 'industryName',
        'pay_cycle_frequency' => 'payCycleFrequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abn' => 'setAbn',
        'suburb' => 'setSuburb',
        'state' => 'setState',
        'management_software_id' => 'setManagementSoftwareId',
        'sbr_software_provider' => 'setSbrSoftwareProvider',
        'sbr_software_id' => 'setSbrSoftwareId',
        'is_foreign_entity' => 'setIsForeignEntity',
        'foreign_entity_country' => 'setForeignEntityCountry',
        'default_super_rate' => 'setDefaultSuperRate',
        'id' => 'setId',
        'name' => 'setName',
        'region' => 'setRegion',
        'legal_name' => 'setLegalName',
        'contact_name' => 'setContactName',
        'contact_email_address' => 'setContactEmailAddress',
        'contact_phone_number' => 'setContactPhoneNumber',
        'contact_fax_number' => 'setContactFaxNumber',
        'external_id' => 'setExternalId',
        'standard_hours_per_day' => 'setStandardHoursPerDay',
        'journal_service' => 'setJournalService',
        'end_of_week' => 'setEndOfWeek',
        'initial_financial_year_start' => 'setInitialFinancialYearStart',
        'managers_can_edit_roster_budgets' => 'setManagersCanEditRosterBudgets',
        'budget_warning_percent' => 'setBudgetWarningPercent',
        'budget_entry_method' => 'setBudgetEntryMethod',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'post_code' => 'setPostCode',
        'white_label_name' => 'setWhiteLabelName',
        'white_label_id' => 'setWhiteLabelId',
        'promo_code' => 'setPromoCode',
        'date_created' => 'setDateCreated',
        'leave_accrual_start_date_type' => 'setLeaveAccrualStartDateType',
        'leave_year_start' => 'setLeaveYearStart',
        'source' => 'setSource',
        'number_of_employees' => 'setNumberOfEmployees',
        'industry_name' => 'setIndustryName',
        'pay_cycle_frequency' => 'setPayCycleFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abn' => 'getAbn',
        'suburb' => 'getSuburb',
        'state' => 'getState',
        'management_software_id' => 'getManagementSoftwareId',
        'sbr_software_provider' => 'getSbrSoftwareProvider',
        'sbr_software_id' => 'getSbrSoftwareId',
        'is_foreign_entity' => 'getIsForeignEntity',
        'foreign_entity_country' => 'getForeignEntityCountry',
        'default_super_rate' => 'getDefaultSuperRate',
        'id' => 'getId',
        'name' => 'getName',
        'region' => 'getRegion',
        'legal_name' => 'getLegalName',
        'contact_name' => 'getContactName',
        'contact_email_address' => 'getContactEmailAddress',
        'contact_phone_number' => 'getContactPhoneNumber',
        'contact_fax_number' => 'getContactFaxNumber',
        'external_id' => 'getExternalId',
        'standard_hours_per_day' => 'getStandardHoursPerDay',
        'journal_service' => 'getJournalService',
        'end_of_week' => 'getEndOfWeek',
        'initial_financial_year_start' => 'getInitialFinancialYearStart',
        'managers_can_edit_roster_budgets' => 'getManagersCanEditRosterBudgets',
        'budget_warning_percent' => 'getBudgetWarningPercent',
        'budget_entry_method' => 'getBudgetEntryMethod',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'post_code' => 'getPostCode',
        'white_label_name' => 'getWhiteLabelName',
        'white_label_id' => 'getWhiteLabelId',
        'promo_code' => 'getPromoCode',
        'date_created' => 'getDateCreated',
        'leave_accrual_start_date_type' => 'getLeaveAccrualStartDateType',
        'leave_year_start' => 'getLeaveYearStart',
        'source' => 'getSource',
        'number_of_employees' => 'getNumberOfEmployees',
        'industry_name' => 'getIndustryName',
        'pay_cycle_frequency' => 'getPayCycleFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const END_OF_WEEK_SUNDAY = 'Sunday';
    const END_OF_WEEK_MONDAY = 'Monday';
    const END_OF_WEEK_TUESDAY = 'Tuesday';
    const END_OF_WEEK_WEDNESDAY = 'Wednesday';
    const END_OF_WEEK_THURSDAY = 'Thursday';
    const END_OF_WEEK_FRIDAY = 'Friday';
    const END_OF_WEEK_SATURDAY = 'Saturday';
    const BUDGET_ENTRY_METHOD_PERCENTAGE_OF_SALES = 'PercentageOfSales';
    const BUDGET_ENTRY_METHOD_DIRECT = 'Direct';
    const LEAVE_ACCRUAL_START_DATE_TYPE_EMPLOYEE_START_DATE = 'EmployeeStartDate';
    const LEAVE_ACCRUAL_START_DATE_TYPE_SPECIFIED_DATE = 'SpecifiedDate';
    const LEAVE_ACCRUAL_START_DATE_TYPE_CALENDAR_YEAR = 'CalendarYear';
    const LEAVE_ACCRUAL_START_DATE_TYPE_ROLLING_YEAR12_MONTH = 'RollingYear12Month';
    const LEAVE_ACCRUAL_START_DATE_TYPE_ROLLING_YEAR24_MONTH = 'RollingYear24Month';
    const SOURCE_NONE = 'None';
    const SOURCE_SAASU = 'Saasu';
    const SOURCE_XERO = 'Xero';
    const SOURCE_MYOB = 'MYOB';
    const SOURCE_DEPUTY = 'Deputy';
    const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    const SOURCE_CLICK_SUPER = 'ClickSuper';
    const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    const SOURCE_FILE_IMPORT = 'FileImport';
    const SOURCE_FILE_EXPORT = 'FileExport';
    const SOURCE_QUICK_BOOKS = 'QuickBooks';
    const SOURCE_HARMONY = 'Harmony';
    const SOURCE_AWARD_STORE = 'AwardStore';
    const SOURCE_ATTACHE = 'Attache';
    const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    const SOURCE_API = 'API';
    const SOURCE_MICRO_POWER = 'MicroPower';
    const SOURCE_ROSTER_LIVE = 'RosterLive';
    const SOURCE_NET_SUITE = 'NetSuite';
    const SOURCE_KOUNTA = 'Kounta';
    const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    const SOURCE_JONAS_PREMIER = 'JonasPremier';
    const SOURCE_WAGE_EASY = 'WageEasy';
    const SOURCE_MAESTRANO = 'Maestrano';
    const SOURCE_WORK_ZONE = 'WorkZone';
    const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    const SOURCE_ONBOARDING = 'Onboarding';
    const SOURCE_ADMIN = 'Admin';
    const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    const SOURCE_SAGE50 = 'Sage50';
    const SOURCE_PENSION_SYNC = 'PensionSync';
    const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    const SOURCE_PRONTO_XI = 'ProntoXI';
    const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    const SOURCE_BEAM = 'Beam';
    const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    const SOURCE_WIISE = 'Wiise';
    const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    const SOURCE_O_AUTH = 'OAuth';
    const SOURCE_FRESH_BOOKS = 'FreshBooks';
    const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    const SOURCE_TELLEROO = 'Telleroo';
    const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    const SOURCE_PAYTRON = 'Paytron';
    const SOURCE_ACCESS_FINANCIALS = 'AccessFinancials';
    const SOURCE_COMMA = 'Comma';
    const SOURCE_ZOHO = 'Zoho';
    const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    const SOURCE_TWINFIELD = 'Twinfield';
    const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    const SOURCE_SQUARE = 'Square';
    const SOURCE_QUICKFILE = 'Quickfile';
    const SOURCE_TIDE = 'Tide';
    const SOURCE_TIDE_SSO = 'TideSso';
    const SOURCE_FREE_AGENT = 'FreeAgent';
    const SOURCE_AKAHU = 'Akahu';
    const SOURCE_INSTA_PAY = 'InstaPay';
    const SOURCE_ZEPTO = 'Zepto';
    const SOURCE_SLACK = 'Slack';
    const NUMBER_OF_EMPLOYEES_ONE_TO_TEN = 'OneToTen';
    const NUMBER_OF_EMPLOYEES_ELEVEN_TO_FIFTY = 'ElevenToFifty';
    const NUMBER_OF_EMPLOYEES_FIFTY_ONE_TO_TWO_FIFTY = 'FiftyOneToTwoFifty';
    const NUMBER_OF_EMPLOYEES_TWO_FIFTY_ONE_AND_UP = 'TwoFiftyOneAndUp';
    const PAY_CYCLE_FREQUENCY_WEEKLY = 'Weekly';
    const PAY_CYCLE_FREQUENCY_FORTNIGHTLY = 'Fortnightly';
    const PAY_CYCLE_FREQUENCY_MONTHLY = 'Monthly';
    const PAY_CYCLE_FREQUENCY_FOUR_WEEKLY = 'FourWeekly';
    const PAY_CYCLE_FREQUENCY_QUARTERLY = 'Quarterly';
    const PAY_CYCLE_FREQUENCY_ANNUALLY = 'Annually';
    const PAY_CYCLE_FREQUENCY_HALF_MONTHLY = 'HalfMonthly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndOfWeekAllowableValues()
    {
        return [
            self::END_OF_WEEK_SUNDAY,
            self::END_OF_WEEK_MONDAY,
            self::END_OF_WEEK_TUESDAY,
            self::END_OF_WEEK_WEDNESDAY,
            self::END_OF_WEEK_THURSDAY,
            self::END_OF_WEEK_FRIDAY,
            self::END_OF_WEEK_SATURDAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBudgetEntryMethodAllowableValues()
    {
        return [
            self::BUDGET_ENTRY_METHOD_PERCENTAGE_OF_SALES,
            self::BUDGET_ENTRY_METHOD_DIRECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveAccrualStartDateTypeAllowableValues()
    {
        return [
            self::LEAVE_ACCRUAL_START_DATE_TYPE_EMPLOYEE_START_DATE,
            self::LEAVE_ACCRUAL_START_DATE_TYPE_SPECIFIED_DATE,
            self::LEAVE_ACCRUAL_START_DATE_TYPE_CALENDAR_YEAR,
            self::LEAVE_ACCRUAL_START_DATE_TYPE_ROLLING_YEAR12_MONTH,
            self::LEAVE_ACCRUAL_START_DATE_TYPE_ROLLING_YEAR24_MONTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ACCESS_FINANCIALS,
            self::SOURCE_COMMA,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
            self::SOURCE_SQUARE,
            self::SOURCE_QUICKFILE,
            self::SOURCE_TIDE,
            self::SOURCE_TIDE_SSO,
            self::SOURCE_FREE_AGENT,
            self::SOURCE_AKAHU,
            self::SOURCE_INSTA_PAY,
            self::SOURCE_ZEPTO,
            self::SOURCE_SLACK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberOfEmployeesAllowableValues()
    {
        return [
            self::NUMBER_OF_EMPLOYEES_ONE_TO_TEN,
            self::NUMBER_OF_EMPLOYEES_ELEVEN_TO_FIFTY,
            self::NUMBER_OF_EMPLOYEES_FIFTY_ONE_TO_TWO_FIFTY,
            self::NUMBER_OF_EMPLOYEES_TWO_FIFTY_ONE_AND_UP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCycleFrequencyAllowableValues()
    {
        return [
            self::PAY_CYCLE_FREQUENCY_WEEKLY,
            self::PAY_CYCLE_FREQUENCY_FORTNIGHTLY,
            self::PAY_CYCLE_FREQUENCY_MONTHLY,
            self::PAY_CYCLE_FREQUENCY_FOUR_WEEKLY,
            self::PAY_CYCLE_FREQUENCY_QUARTERLY,
            self::PAY_CYCLE_FREQUENCY_ANNUALLY,
            self::PAY_CYCLE_FREQUENCY_HALF_MONTHLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abn'] = isset($data['abn']) ? $data['abn'] : null;
        $this->container['suburb'] = isset($data['suburb']) ? $data['suburb'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['management_software_id'] = isset($data['management_software_id']) ? $data['management_software_id'] : null;
        $this->container['sbr_software_provider'] = isset($data['sbr_software_provider']) ? $data['sbr_software_provider'] : null;
        $this->container['sbr_software_id'] = isset($data['sbr_software_id']) ? $data['sbr_software_id'] : null;
        $this->container['is_foreign_entity'] = isset($data['is_foreign_entity']) ? $data['is_foreign_entity'] : null;
        $this->container['foreign_entity_country'] = isset($data['foreign_entity_country']) ? $data['foreign_entity_country'] : null;
        $this->container['default_super_rate'] = isset($data['default_super_rate']) ? $data['default_super_rate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['legal_name'] = isset($data['legal_name']) ? $data['legal_name'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_email_address'] = isset($data['contact_email_address']) ? $data['contact_email_address'] : null;
        $this->container['contact_phone_number'] = isset($data['contact_phone_number']) ? $data['contact_phone_number'] : null;
        $this->container['contact_fax_number'] = isset($data['contact_fax_number']) ? $data['contact_fax_number'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['standard_hours_per_day'] = isset($data['standard_hours_per_day']) ? $data['standard_hours_per_day'] : null;
        $this->container['journal_service'] = isset($data['journal_service']) ? $data['journal_service'] : null;
        $this->container['end_of_week'] = isset($data['end_of_week']) ? $data['end_of_week'] : null;
        $this->container['initial_financial_year_start'] = isset($data['initial_financial_year_start']) ? $data['initial_financial_year_start'] : null;
        $this->container['managers_can_edit_roster_budgets'] = isset($data['managers_can_edit_roster_budgets']) ? $data['managers_can_edit_roster_budgets'] : null;
        $this->container['budget_warning_percent'] = isset($data['budget_warning_percent']) ? $data['budget_warning_percent'] : null;
        $this->container['budget_entry_method'] = isset($data['budget_entry_method']) ? $data['budget_entry_method'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['white_label_name'] = isset($data['white_label_name']) ? $data['white_label_name'] : null;
        $this->container['white_label_id'] = isset($data['white_label_id']) ? $data['white_label_id'] : null;
        $this->container['promo_code'] = isset($data['promo_code']) ? $data['promo_code'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['leave_accrual_start_date_type'] = isset($data['leave_accrual_start_date_type']) ? $data['leave_accrual_start_date_type'] : null;
        $this->container['leave_year_start'] = isset($data['leave_year_start']) ? $data['leave_year_start'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['number_of_employees'] = isset($data['number_of_employees']) ? $data['number_of_employees'] : null;
        $this->container['industry_name'] = isset($data['industry_name']) ? $data['industry_name'] : null;
        $this->container['pay_cycle_frequency'] = isset($data['pay_cycle_frequency']) ? $data['pay_cycle_frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEndOfWeekAllowableValues();
        if (!is_null($this->container['end_of_week']) && !in_array($this->container['end_of_week'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'end_of_week', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBudgetEntryMethodAllowableValues();
        if (!is_null($this->container['budget_entry_method']) && !in_array($this->container['budget_entry_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'budget_entry_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveAccrualStartDateTypeAllowableValues();
        if (!is_null($this->container['leave_accrual_start_date_type']) && !in_array($this->container['leave_accrual_start_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'leave_accrual_start_date_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNumberOfEmployeesAllowableValues();
        if (!is_null($this->container['number_of_employees']) && !in_array($this->container['number_of_employees'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'number_of_employees', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayCycleFrequencyAllowableValues();
        if (!is_null($this->container['pay_cycle_frequency']) && !in_array($this->container['pay_cycle_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_cycle_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abn
     *
     * @return string
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string $abn 
     *
     * @return $this
     */
    public function setAbn($abn)
    {
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string $suburb 
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state 
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets management_software_id
     *
     * @return string
     */
    public function getManagementSoftwareId()
    {
        return $this->container['management_software_id'];
    }

    /**
     * Sets management_software_id
     *
     * @param string $management_software_id 
     *
     * @return $this
     */
    public function setManagementSoftwareId($management_software_id)
    {
        $this->container['management_software_id'] = $management_software_id;

        return $this;
    }

    /**
     * Gets sbr_software_provider
     *
     * @return string
     */
    public function getSbrSoftwareProvider()
    {
        return $this->container['sbr_software_provider'];
    }

    /**
     * Sets sbr_software_provider
     *
     * @param string $sbr_software_provider 
     *
     * @return $this
     */
    public function setSbrSoftwareProvider($sbr_software_provider)
    {
        $this->container['sbr_software_provider'] = $sbr_software_provider;

        return $this;
    }

    /**
     * Gets sbr_software_id
     *
     * @return string
     */
    public function getSbrSoftwareId()
    {
        return $this->container['sbr_software_id'];
    }

    /**
     * Sets sbr_software_id
     *
     * @param string $sbr_software_id 
     *
     * @return $this
     */
    public function setSbrSoftwareId($sbr_software_id)
    {
        $this->container['sbr_software_id'] = $sbr_software_id;

        return $this;
    }

    /**
     * Gets is_foreign_entity
     *
     * @return bool
     */
    public function getIsForeignEntity()
    {
        return $this->container['is_foreign_entity'];
    }

    /**
     * Sets is_foreign_entity
     *
     * @param bool $is_foreign_entity 
     *
     * @return $this
     */
    public function setIsForeignEntity($is_foreign_entity)
    {
        $this->container['is_foreign_entity'] = $is_foreign_entity;

        return $this;
    }

    /**
     * Gets foreign_entity_country
     *
     * @return string
     */
    public function getForeignEntityCountry()
    {
        return $this->container['foreign_entity_country'];
    }

    /**
     * Sets foreign_entity_country
     *
     * @param string $foreign_entity_country 
     *
     * @return $this
     */
    public function setForeignEntityCountry($foreign_entity_country)
    {
        $this->container['foreign_entity_country'] = $foreign_entity_country;

        return $this;
    }

    /**
     * Gets default_super_rate
     *
     * @return double
     */
    public function getDefaultSuperRate()
    {
        return $this->container['default_super_rate'];
    }

    /**
     * Sets default_super_rate
     *
     * @param double $default_super_rate 
     *
     * @return $this
     */
    public function setDefaultSuperRate($default_super_rate)
    {
        $this->container['default_super_rate'] = $default_super_rate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region 
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string $legal_name 
     *
     * @return $this
     */
    public function setLegalName($legal_name)
    {
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name 
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_email_address
     *
     * @return string
     */
    public function getContactEmailAddress()
    {
        return $this->container['contact_email_address'];
    }

    /**
     * Sets contact_email_address
     *
     * @param string $contact_email_address 
     *
     * @return $this
     */
    public function setContactEmailAddress($contact_email_address)
    {
        $this->container['contact_email_address'] = $contact_email_address;

        return $this;
    }

    /**
     * Gets contact_phone_number
     *
     * @return string
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     *
     * @param string $contact_phone_number 
     *
     * @return $this
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets contact_fax_number
     *
     * @return string
     */
    public function getContactFaxNumber()
    {
        return $this->container['contact_fax_number'];
    }

    /**
     * Sets contact_fax_number
     *
     * @param string $contact_fax_number 
     *
     * @return $this
     */
    public function setContactFaxNumber($contact_fax_number)
    {
        $this->container['contact_fax_number'] = $contact_fax_number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets standard_hours_per_day
     *
     * @return double
     */
    public function getStandardHoursPerDay()
    {
        return $this->container['standard_hours_per_day'];
    }

    /**
     * Sets standard_hours_per_day
     *
     * @param double $standard_hours_per_day 
     *
     * @return $this
     */
    public function setStandardHoursPerDay($standard_hours_per_day)
    {
        $this->container['standard_hours_per_day'] = $standard_hours_per_day;

        return $this;
    }

    /**
     * Gets journal_service
     *
     * @return string
     */
    public function getJournalService()
    {
        return $this->container['journal_service'];
    }

    /**
     * Sets journal_service
     *
     * @param string $journal_service 
     *
     * @return $this
     */
    public function setJournalService($journal_service)
    {
        $this->container['journal_service'] = $journal_service;

        return $this;
    }

    /**
     * Gets end_of_week
     *
     * @return string
     */
    public function getEndOfWeek()
    {
        return $this->container['end_of_week'];
    }

    /**
     * Sets end_of_week
     *
     * @param string $end_of_week 
     *
     * @return $this
     */
    public function setEndOfWeek($end_of_week)
    {
        $allowedValues = $this->getEndOfWeekAllowableValues();
        if (!is_null($end_of_week) && !in_array($end_of_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'end_of_week', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['end_of_week'] = $end_of_week;

        return $this;
    }

    /**
     * Gets initial_financial_year_start
     *
     * @return int
     */
    public function getInitialFinancialYearStart()
    {
        return $this->container['initial_financial_year_start'];
    }

    /**
     * Sets initial_financial_year_start
     *
     * @param int $initial_financial_year_start 
     *
     * @return $this
     */
    public function setInitialFinancialYearStart($initial_financial_year_start)
    {
        $this->container['initial_financial_year_start'] = $initial_financial_year_start;

        return $this;
    }

    /**
     * Gets managers_can_edit_roster_budgets
     *
     * @return bool
     */
    public function getManagersCanEditRosterBudgets()
    {
        return $this->container['managers_can_edit_roster_budgets'];
    }

    /**
     * Sets managers_can_edit_roster_budgets
     *
     * @param bool $managers_can_edit_roster_budgets 
     *
     * @return $this
     */
    public function setManagersCanEditRosterBudgets($managers_can_edit_roster_budgets)
    {
        $this->container['managers_can_edit_roster_budgets'] = $managers_can_edit_roster_budgets;

        return $this;
    }

    /**
     * Gets budget_warning_percent
     *
     * @return double
     */
    public function getBudgetWarningPercent()
    {
        return $this->container['budget_warning_percent'];
    }

    /**
     * Sets budget_warning_percent
     *
     * @param double $budget_warning_percent 
     *
     * @return $this
     */
    public function setBudgetWarningPercent($budget_warning_percent)
    {
        $this->container['budget_warning_percent'] = $budget_warning_percent;

        return $this;
    }

    /**
     * Gets budget_entry_method
     *
     * @return string
     */
    public function getBudgetEntryMethod()
    {
        return $this->container['budget_entry_method'];
    }

    /**
     * Sets budget_entry_method
     *
     * @param string $budget_entry_method 
     *
     * @return $this
     */
    public function setBudgetEntryMethod($budget_entry_method)
    {
        $allowedValues = $this->getBudgetEntryMethodAllowableValues();
        if (!is_null($budget_entry_method) && !in_array($budget_entry_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'budget_entry_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['budget_entry_method'] = $budget_entry_method;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code 
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets white_label_name
     *
     * @return string
     */
    public function getWhiteLabelName()
    {
        return $this->container['white_label_name'];
    }

    /**
     * Sets white_label_name
     *
     * @param string $white_label_name 
     *
     * @return $this
     */
    public function setWhiteLabelName($white_label_name)
    {
        $this->container['white_label_name'] = $white_label_name;

        return $this;
    }

    /**
     * Gets white_label_id
     *
     * @return int
     */
    public function getWhiteLabelId()
    {
        return $this->container['white_label_id'];
    }

    /**
     * Sets white_label_id
     *
     * @param int $white_label_id 
     *
     * @return $this
     */
    public function setWhiteLabelId($white_label_id)
    {
        $this->container['white_label_id'] = $white_label_id;

        return $this;
    }

    /**
     * Gets promo_code
     *
     * @return string
     */
    public function getPromoCode()
    {
        return $this->container['promo_code'];
    }

    /**
     * Sets promo_code
     *
     * @param string $promo_code 
     *
     * @return $this
     */
    public function setPromoCode($promo_code)
    {
        $this->container['promo_code'] = $promo_code;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created 
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets leave_accrual_start_date_type
     *
     * @return string
     */
    public function getLeaveAccrualStartDateType()
    {
        return $this->container['leave_accrual_start_date_type'];
    }

    /**
     * Sets leave_accrual_start_date_type
     *
     * @param string $leave_accrual_start_date_type 
     *
     * @return $this
     */
    public function setLeaveAccrualStartDateType($leave_accrual_start_date_type)
    {
        $allowedValues = $this->getLeaveAccrualStartDateTypeAllowableValues();
        if (!is_null($leave_accrual_start_date_type) && !in_array($leave_accrual_start_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'leave_accrual_start_date_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_accrual_start_date_type'] = $leave_accrual_start_date_type;

        return $this;
    }

    /**
     * Gets leave_year_start
     *
     * @return \DateTime
     */
    public function getLeaveYearStart()
    {
        return $this->container['leave_year_start'];
    }

    /**
     * Sets leave_year_start
     *
     * @param \DateTime $leave_year_start 
     *
     * @return $this
     */
    public function setLeaveYearStart($leave_year_start)
    {
        $this->container['leave_year_start'] = $leave_year_start;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source 
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets number_of_employees
     *
     * @return string
     */
    public function getNumberOfEmployees()
    {
        return $this->container['number_of_employees'];
    }

    /**
     * Sets number_of_employees
     *
     * @param string $number_of_employees 
     *
     * @return $this
     */
    public function setNumberOfEmployees($number_of_employees)
    {
        $allowedValues = $this->getNumberOfEmployeesAllowableValues();
        if (!is_null($number_of_employees) && !in_array($number_of_employees, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'number_of_employees', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['number_of_employees'] = $number_of_employees;

        return $this;
    }

    /**
     * Gets industry_name
     *
     * @return string
     */
    public function getIndustryName()
    {
        return $this->container['industry_name'];
    }

    /**
     * Sets industry_name
     *
     * @param string $industry_name 
     *
     * @return $this
     */
    public function setIndustryName($industry_name)
    {
        $this->container['industry_name'] = $industry_name;

        return $this;
    }

    /**
     * Gets pay_cycle_frequency
     *
     * @return string
     */
    public function getPayCycleFrequency()
    {
        return $this->container['pay_cycle_frequency'];
    }

    /**
     * Sets pay_cycle_frequency
     *
     * @param string $pay_cycle_frequency 
     *
     * @return $this
     */
    public function setPayCycleFrequency($pay_cycle_frequency)
    {
        $allowedValues = $this->getPayCycleFrequencyAllowableValues();
        if (!is_null($pay_cycle_frequency) && !in_array($pay_cycle_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_cycle_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_cycle_frequency'] = $pay_cycle_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


