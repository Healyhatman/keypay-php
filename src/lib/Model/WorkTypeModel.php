<?php
/**
 * WorkTypeModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WorkTypeModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WorkTypeModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkTypeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'pay_category_id' => 'int',
        'leave_category_id' => 'int',
        'external_id' => 'string',
        'source' => 'string',
        'accrues_leave' => 'bool',
        'employment_types' => 'string[]',
        'mapping_type' => 'string',
        'short_code' => 'string',
        'award_package_id' => 'int',
        'award_package_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'pay_category_id' => 'int32',
        'leave_category_id' => 'int32',
        'external_id' => null,
        'source' => null,
        'accrues_leave' => null,
        'employment_types' => null,
        'mapping_type' => null,
        'short_code' => null,
        'award_package_id' => 'int32',
        'award_package_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'pay_category_id' => false,
		'leave_category_id' => false,
		'external_id' => false,
		'source' => false,
		'accrues_leave' => false,
		'employment_types' => false,
		'mapping_type' => false,
		'short_code' => false,
		'award_package_id' => false,
		'award_package_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'pay_category_id' => 'payCategoryId',
        'leave_category_id' => 'leaveCategoryId',
        'external_id' => 'externalId',
        'source' => 'source',
        'accrues_leave' => 'accruesLeave',
        'employment_types' => 'employmentTypes',
        'mapping_type' => 'mappingType',
        'short_code' => 'shortCode',
        'award_package_id' => 'awardPackageId',
        'award_package_name' => 'awardPackageName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'pay_category_id' => 'setPayCategoryId',
        'leave_category_id' => 'setLeaveCategoryId',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'accrues_leave' => 'setAccruesLeave',
        'employment_types' => 'setEmploymentTypes',
        'mapping_type' => 'setMappingType',
        'short_code' => 'setShortCode',
        'award_package_id' => 'setAwardPackageId',
        'award_package_name' => 'setAwardPackageName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'pay_category_id' => 'getPayCategoryId',
        'leave_category_id' => 'getLeaveCategoryId',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'accrues_leave' => 'getAccruesLeave',
        'employment_types' => 'getEmploymentTypes',
        'mapping_type' => 'getMappingType',
        'short_code' => 'getShortCode',
        'award_package_id' => 'getAwardPackageId',
        'award_package_name' => 'getAwardPackageName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMPLOYMENT_TYPES_UNKNOWN = 'Unknown';
    public const EMPLOYMENT_TYPES_FULL_TIME = 'FullTime';
    public const EMPLOYMENT_TYPES_PART_TIME = 'PartTime';
    public const EMPLOYMENT_TYPES_LABOUR_HIRE = 'LabourHire';
    public const EMPLOYMENT_TYPES_SUPERANNUATION_INCOME_STREAM = 'SuperannuationIncomeStream';
    public const EMPLOYMENT_TYPES_CASUAL = 'Casual';
    public const EMPLOYMENT_TYPES_NOT_APPLICABLE = 'NotApplicable';
    public const EMPLOYMENT_TYPES_INDEPENDENT_CONTRACTOR = 'IndependentContractor';
    public const MAPPING_TYPE_PAY_CATEGORY = 'PayCategory';
    public const MAPPING_TYPE_LEAVE_CATEGORY = 'LeaveCategory';
    public const MAPPING_TYPE_PRIMARY_PAY_CATEGORY = 'PrimaryPayCategory';
    public const MAPPING_TYPE_SHIFT_CONDITION = 'ShiftCondition';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentTypesAllowableValues()
    {
        return [
            self::EMPLOYMENT_TYPES_UNKNOWN,
            self::EMPLOYMENT_TYPES_FULL_TIME,
            self::EMPLOYMENT_TYPES_PART_TIME,
            self::EMPLOYMENT_TYPES_LABOUR_HIRE,
            self::EMPLOYMENT_TYPES_SUPERANNUATION_INCOME_STREAM,
            self::EMPLOYMENT_TYPES_CASUAL,
            self::EMPLOYMENT_TYPES_NOT_APPLICABLE,
            self::EMPLOYMENT_TYPES_INDEPENDENT_CONTRACTOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMappingTypeAllowableValues()
    {
        return [
            self::MAPPING_TYPE_PAY_CATEGORY,
            self::MAPPING_TYPE_LEAVE_CATEGORY,
            self::MAPPING_TYPE_PRIMARY_PAY_CATEGORY,
            self::MAPPING_TYPE_SHIFT_CONDITION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('leave_category_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('accrues_leave', $data ?? [], null);
        $this->setIfExists('employment_types', $data ?? [], null);
        $this->setIfExists('mapping_type', $data ?? [], null);
        $this->setIfExists('short_code', $data ?? [], null);
        $this->setIfExists('award_package_id', $data ?? [], null);
        $this->setIfExists('award_package_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMappingTypeAllowableValues();
        if (!is_null($this->container['mapping_type']) && !in_array($this->container['mapping_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mapping_type', must be one of '%s'",
                $this->container['mapping_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int|null
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int|null $leave_category_id 
     *
     * @return self
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        if (is_null($leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable leave_category_id cannot be null');
        }
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets accrues_leave
     *
     * @return bool|null
     */
    public function getAccruesLeave()
    {
        return $this->container['accrues_leave'];
    }

    /**
     * Sets accrues_leave
     *
     * @param bool|null $accrues_leave 
     *
     * @return self
     */
    public function setAccruesLeave($accrues_leave)
    {
        if (is_null($accrues_leave)) {
            throw new \InvalidArgumentException('non-nullable accrues_leave cannot be null');
        }
        $this->container['accrues_leave'] = $accrues_leave;

        return $this;
    }

    /**
     * Gets employment_types
     *
     * @return string[]|null
     */
    public function getEmploymentTypes()
    {
        return $this->container['employment_types'];
    }

    /**
     * Sets employment_types
     *
     * @param string[]|null $employment_types 
     *
     * @return self
     */
    public function setEmploymentTypes($employment_types)
    {
        if (is_null($employment_types)) {
            throw new \InvalidArgumentException('non-nullable employment_types cannot be null');
        }
        $allowedValues = $this->getEmploymentTypesAllowableValues();
        if (array_diff($employment_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employment_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_types'] = $employment_types;

        return $this;
    }

    /**
     * Gets mapping_type
     *
     * @return string|null
     */
    public function getMappingType()
    {
        return $this->container['mapping_type'];
    }

    /**
     * Sets mapping_type
     *
     * @param string|null $mapping_type 
     *
     * @return self
     */
    public function setMappingType($mapping_type)
    {
        if (is_null($mapping_type)) {
            throw new \InvalidArgumentException('non-nullable mapping_type cannot be null');
        }
        $allowedValues = $this->getMappingTypeAllowableValues();
        if (!in_array($mapping_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mapping_type', must be one of '%s'",
                    $mapping_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mapping_type'] = $mapping_type;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string|null
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string|null $short_code 
     *
     * @return self
     */
    public function setShortCode($short_code)
    {
        if (is_null($short_code)) {
            throw new \InvalidArgumentException('non-nullable short_code cannot be null');
        }
        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets award_package_id
     *
     * @return int|null
     */
    public function getAwardPackageId()
    {
        return $this->container['award_package_id'];
    }

    /**
     * Sets award_package_id
     *
     * @param int|null $award_package_id 
     *
     * @return self
     */
    public function setAwardPackageId($award_package_id)
    {
        if (is_null($award_package_id)) {
            throw new \InvalidArgumentException('non-nullable award_package_id cannot be null');
        }
        $this->container['award_package_id'] = $award_package_id;

        return $this;
    }

    /**
     * Gets award_package_name
     *
     * @return string|null
     */
    public function getAwardPackageName()
    {
        return $this->container['award_package_name'];
    }

    /**
     * Sets award_package_name
     *
     * @param string|null $award_package_name 
     *
     * @return self
     */
    public function setAwardPackageName($award_package_name)
    {
        if (is_null($award_package_name)) {
            throw new \InvalidArgumentException('non-nullable award_package_name cannot be null');
        }
        $this->container['award_package_name'] = $award_package_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


