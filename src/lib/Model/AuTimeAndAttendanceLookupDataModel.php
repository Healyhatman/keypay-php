<?php
/**
 * AuTimeAndAttendanceLookupDataModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuTimeAndAttendanceLookupDataModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuTimeAndAttendanceLookupDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuTimeAndAttendanceLookupDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locations' => '\OpenAPI\Client\Model\LocationSelectModel[]',
        'work_types' => '\OpenAPI\Client\Model\WorkTypeSelectModel[]',
        'classifications' => '\OpenAPI\Client\Model\ClassificationLookupModel[]',
        'default_location' => '\OpenAPI\Client\Model\LocationSelectModel',
        'shift_conditions' => '\OpenAPI\Client\Model\ShiftConditionSelectModel[]',
        'location_shift_conditions' => '\OpenAPI\Client\Model\LocationShiftConditionsModel[]',
        'reporting_dimensions_enabled' => 'bool',
        'reporting_dimension_groups' => '\OpenAPI\Client\Model\NumericNullableSelectListItem[]',
        'reporting_dimension_values' => '\OpenAPI\Client\Model\ReportingDimensionValueSelectModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'locations' => null,
        'work_types' => null,
        'classifications' => null,
        'default_location' => null,
        'shift_conditions' => null,
        'location_shift_conditions' => null,
        'reporting_dimensions_enabled' => null,
        'reporting_dimension_groups' => null,
        'reporting_dimension_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'locations' => false,
		'work_types' => false,
		'classifications' => false,
		'default_location' => false,
		'shift_conditions' => false,
		'location_shift_conditions' => false,
		'reporting_dimensions_enabled' => false,
		'reporting_dimension_groups' => false,
		'reporting_dimension_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locations' => 'locations',
        'work_types' => 'workTypes',
        'classifications' => 'classifications',
        'default_location' => 'defaultLocation',
        'shift_conditions' => 'shiftConditions',
        'location_shift_conditions' => 'locationShiftConditions',
        'reporting_dimensions_enabled' => 'reportingDimensionsEnabled',
        'reporting_dimension_groups' => 'reportingDimensionGroups',
        'reporting_dimension_values' => 'reportingDimensionValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locations' => 'setLocations',
        'work_types' => 'setWorkTypes',
        'classifications' => 'setClassifications',
        'default_location' => 'setDefaultLocation',
        'shift_conditions' => 'setShiftConditions',
        'location_shift_conditions' => 'setLocationShiftConditions',
        'reporting_dimensions_enabled' => 'setReportingDimensionsEnabled',
        'reporting_dimension_groups' => 'setReportingDimensionGroups',
        'reporting_dimension_values' => 'setReportingDimensionValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locations' => 'getLocations',
        'work_types' => 'getWorkTypes',
        'classifications' => 'getClassifications',
        'default_location' => 'getDefaultLocation',
        'shift_conditions' => 'getShiftConditions',
        'location_shift_conditions' => 'getLocationShiftConditions',
        'reporting_dimensions_enabled' => 'getReportingDimensionsEnabled',
        'reporting_dimension_groups' => 'getReportingDimensionGroups',
        'reporting_dimension_values' => 'getReportingDimensionValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('work_types', $data ?? [], null);
        $this->setIfExists('classifications', $data ?? [], null);
        $this->setIfExists('default_location', $data ?? [], null);
        $this->setIfExists('shift_conditions', $data ?? [], null);
        $this->setIfExists('location_shift_conditions', $data ?? [], null);
        $this->setIfExists('reporting_dimensions_enabled', $data ?? [], null);
        $this->setIfExists('reporting_dimension_groups', $data ?? [], null);
        $this->setIfExists('reporting_dimension_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locations
     *
     * @return \OpenAPI\Client\Model\LocationSelectModel[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \OpenAPI\Client\Model\LocationSelectModel[]|null $locations 
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            throw new \InvalidArgumentException('non-nullable locations cannot be null');
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets work_types
     *
     * @return \OpenAPI\Client\Model\WorkTypeSelectModel[]|null
     */
    public function getWorkTypes()
    {
        return $this->container['work_types'];
    }

    /**
     * Sets work_types
     *
     * @param \OpenAPI\Client\Model\WorkTypeSelectModel[]|null $work_types 
     *
     * @return self
     */
    public function setWorkTypes($work_types)
    {
        if (is_null($work_types)) {
            throw new \InvalidArgumentException('non-nullable work_types cannot be null');
        }
        $this->container['work_types'] = $work_types;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \OpenAPI\Client\Model\ClassificationLookupModel[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \OpenAPI\Client\Model\ClassificationLookupModel[]|null $classifications 
     *
     * @return self
     */
    public function setClassifications($classifications)
    {
        if (is_null($classifications)) {
            throw new \InvalidArgumentException('non-nullable classifications cannot be null');
        }
        $this->container['classifications'] = $classifications;

        return $this;
    }

    /**
     * Gets default_location
     *
     * @return \OpenAPI\Client\Model\LocationSelectModel|null
     */
    public function getDefaultLocation()
    {
        return $this->container['default_location'];
    }

    /**
     * Sets default_location
     *
     * @param \OpenAPI\Client\Model\LocationSelectModel|null $default_location default_location
     *
     * @return self
     */
    public function setDefaultLocation($default_location)
    {
        if (is_null($default_location)) {
            throw new \InvalidArgumentException('non-nullable default_location cannot be null');
        }
        $this->container['default_location'] = $default_location;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \OpenAPI\Client\Model\ShiftConditionSelectModel[]|null
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \OpenAPI\Client\Model\ShiftConditionSelectModel[]|null $shift_conditions 
     *
     * @return self
     */
    public function setShiftConditions($shift_conditions)
    {
        if (is_null($shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable shift_conditions cannot be null');
        }
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets location_shift_conditions
     *
     * @return \OpenAPI\Client\Model\LocationShiftConditionsModel[]|null
     */
    public function getLocationShiftConditions()
    {
        return $this->container['location_shift_conditions'];
    }

    /**
     * Sets location_shift_conditions
     *
     * @param \OpenAPI\Client\Model\LocationShiftConditionsModel[]|null $location_shift_conditions 
     *
     * @return self
     */
    public function setLocationShiftConditions($location_shift_conditions)
    {
        if (is_null($location_shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable location_shift_conditions cannot be null');
        }
        $this->container['location_shift_conditions'] = $location_shift_conditions;

        return $this;
    }

    /**
     * Gets reporting_dimensions_enabled
     *
     * @return bool|null
     */
    public function getReportingDimensionsEnabled()
    {
        return $this->container['reporting_dimensions_enabled'];
    }

    /**
     * Sets reporting_dimensions_enabled
     *
     * @param bool|null $reporting_dimensions_enabled 
     *
     * @return self
     */
    public function setReportingDimensionsEnabled($reporting_dimensions_enabled)
    {
        if (is_null($reporting_dimensions_enabled)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimensions_enabled cannot be null');
        }
        $this->container['reporting_dimensions_enabled'] = $reporting_dimensions_enabled;

        return $this;
    }

    /**
     * Gets reporting_dimension_groups
     *
     * @return \OpenAPI\Client\Model\NumericNullableSelectListItem[]|null
     */
    public function getReportingDimensionGroups()
    {
        return $this->container['reporting_dimension_groups'];
    }

    /**
     * Sets reporting_dimension_groups
     *
     * @param \OpenAPI\Client\Model\NumericNullableSelectListItem[]|null $reporting_dimension_groups 
     *
     * @return self
     */
    public function setReportingDimensionGroups($reporting_dimension_groups)
    {
        if (is_null($reporting_dimension_groups)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_groups cannot be null');
        }
        $this->container['reporting_dimension_groups'] = $reporting_dimension_groups;

        return $this;
    }

    /**
     * Gets reporting_dimension_values
     *
     * @return \OpenAPI\Client\Model\ReportingDimensionValueSelectModel[]|null
     */
    public function getReportingDimensionValues()
    {
        return $this->container['reporting_dimension_values'];
    }

    /**
     * Sets reporting_dimension_values
     *
     * @param \OpenAPI\Client\Model\ReportingDimensionValueSelectModel[]|null $reporting_dimension_values 
     *
     * @return self
     */
    public function setReportingDimensionValues($reporting_dimension_values)
    {
        if (is_null($reporting_dimension_values)) {
            throw new \InvalidArgumentException('non-nullable reporting_dimension_values cannot be null');
        }
        $this->container['reporting_dimension_values'] = $reporting_dimension_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


