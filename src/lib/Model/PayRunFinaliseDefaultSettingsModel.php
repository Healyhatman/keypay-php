<?php
/**
 * PayRunFinaliseDefaultSettingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayRunFinaliseDefaultSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayRunFinaliseDefaultSettingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayRunFinaliseDefaultSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'export_journals' => 'string',
        'export_journals_timeline' => 'string',
        'export_journals_day' => 'int',
        'export_journals_time_of_day' => 'string',
        'lodge_pay_run' => 'string',
        'lodge_pay_run_day' => 'int',
        'lodge_pay_run_timeline' => 'string',
        'lodge_pay_run_time_of_day' => 'string',
        'publish_pay_slips_day' => 'int',
        'publish_pay_slips_timeline' => 'string',
        'publish_pay_slips' => 'string',
        'publish_pay_slips_time_of_day' => 'string',
        'suppress_notifications' => 'bool',
        'submit_to_pension_sync' => 'string',
        'submit_to_pension_sync_timeline' => 'string',
        'submit_to_pension_sync_day' => 'int',
        'submit_to_pension_sync_time_of_day' => 'string',
        'run_report_packs' => 'string',
        'run_report_packs_timeline' => 'string',
        'run_report_packs_day' => 'int',
        'run_report_packs_time_of_day' => 'string',
        'report_packs_to_run' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'export_journals' => null,
        'export_journals_timeline' => null,
        'export_journals_day' => 'int32',
        'export_journals_time_of_day' => null,
        'lodge_pay_run' => null,
        'lodge_pay_run_day' => 'int32',
        'lodge_pay_run_timeline' => null,
        'lodge_pay_run_time_of_day' => null,
        'publish_pay_slips_day' => 'int32',
        'publish_pay_slips_timeline' => null,
        'publish_pay_slips' => null,
        'publish_pay_slips_time_of_day' => null,
        'suppress_notifications' => null,
        'submit_to_pension_sync' => null,
        'submit_to_pension_sync_timeline' => null,
        'submit_to_pension_sync_day' => 'int32',
        'submit_to_pension_sync_time_of_day' => null,
        'run_report_packs' => null,
        'run_report_packs_timeline' => null,
        'run_report_packs_day' => 'int32',
        'run_report_packs_time_of_day' => null,
        'report_packs_to_run' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'export_journals' => false,
		'export_journals_timeline' => false,
		'export_journals_day' => false,
		'export_journals_time_of_day' => false,
		'lodge_pay_run' => false,
		'lodge_pay_run_day' => false,
		'lodge_pay_run_timeline' => false,
		'lodge_pay_run_time_of_day' => false,
		'publish_pay_slips_day' => false,
		'publish_pay_slips_timeline' => false,
		'publish_pay_slips' => false,
		'publish_pay_slips_time_of_day' => false,
		'suppress_notifications' => false,
		'submit_to_pension_sync' => false,
		'submit_to_pension_sync_timeline' => false,
		'submit_to_pension_sync_day' => false,
		'submit_to_pension_sync_time_of_day' => false,
		'run_report_packs' => false,
		'run_report_packs_timeline' => false,
		'run_report_packs_day' => false,
		'run_report_packs_time_of_day' => false,
		'report_packs_to_run' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'export_journals' => 'exportJournals',
        'export_journals_timeline' => 'exportJournalsTimeline',
        'export_journals_day' => 'exportJournalsDay',
        'export_journals_time_of_day' => 'exportJournalsTimeOfDay',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_day' => 'lodgePayRunDay',
        'lodge_pay_run_timeline' => 'lodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'lodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'publishPaySlipsDay',
        'publish_pay_slips_timeline' => 'publishPaySlipsTimeline',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_pay_slips_time_of_day' => 'publishPaySlipsTimeOfDay',
        'suppress_notifications' => 'suppressNotifications',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'submit_to_pension_sync_timeline' => 'submitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'submitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'submitToPensionSyncTimeOfDay',
        'run_report_packs' => 'runReportPacks',
        'run_report_packs_timeline' => 'runReportPacksTimeline',
        'run_report_packs_day' => 'runReportPacksDay',
        'run_report_packs_time_of_day' => 'runReportPacksTimeOfDay',
        'report_packs_to_run' => 'reportPacksToRun'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'export_journals' => 'setExportJournals',
        'export_journals_timeline' => 'setExportJournalsTimeline',
        'export_journals_day' => 'setExportJournalsDay',
        'export_journals_time_of_day' => 'setExportJournalsTimeOfDay',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_day' => 'setLodgePayRunDay',
        'lodge_pay_run_timeline' => 'setLodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'setLodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'setPublishPaySlipsDay',
        'publish_pay_slips_timeline' => 'setPublishPaySlipsTimeline',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_pay_slips_time_of_day' => 'setPublishPaySlipsTimeOfDay',
        'suppress_notifications' => 'setSuppressNotifications',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'submit_to_pension_sync_timeline' => 'setSubmitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'setSubmitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'setSubmitToPensionSyncTimeOfDay',
        'run_report_packs' => 'setRunReportPacks',
        'run_report_packs_timeline' => 'setRunReportPacksTimeline',
        'run_report_packs_day' => 'setRunReportPacksDay',
        'run_report_packs_time_of_day' => 'setRunReportPacksTimeOfDay',
        'report_packs_to_run' => 'setReportPacksToRun'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'export_journals' => 'getExportJournals',
        'export_journals_timeline' => 'getExportJournalsTimeline',
        'export_journals_day' => 'getExportJournalsDay',
        'export_journals_time_of_day' => 'getExportJournalsTimeOfDay',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_day' => 'getLodgePayRunDay',
        'lodge_pay_run_timeline' => 'getLodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'getLodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'getPublishPaySlipsDay',
        'publish_pay_slips_timeline' => 'getPublishPaySlipsTimeline',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_pay_slips_time_of_day' => 'getPublishPaySlipsTimeOfDay',
        'suppress_notifications' => 'getSuppressNotifications',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'submit_to_pension_sync_timeline' => 'getSubmitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'getSubmitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'getSubmitToPensionSyncTimeOfDay',
        'run_report_packs' => 'getRunReportPacks',
        'run_report_packs_timeline' => 'getRunReportPacksTimeline',
        'run_report_packs_day' => 'getRunReportPacksDay',
        'run_report_packs_time_of_day' => 'getRunReportPacksTimeOfDay',
        'report_packs_to_run' => 'getReportPacksToRun'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPORT_JOURNALS_MANUAL = 'Manual';
    public const EXPORT_JOURNALS_IMMEDIATE = 'Immediate';
    public const EXPORT_JOURNALS_SCHEDULED = 'Scheduled';
    public const EXPORT_JOURNALS_TIMELINE_BEFORE = 'Before';
    public const EXPORT_JOURNALS_TIMELINE_AFTER = 'After';
    public const EXPORT_JOURNALS_TIMELINE_ON = 'On';
    public const LODGE_PAY_RUN_MANUAL = 'Manual';
    public const LODGE_PAY_RUN_IMMEDIATE = 'Immediate';
    public const LODGE_PAY_RUN_SCHEDULED = 'Scheduled';
    public const LODGE_PAY_RUN_TIMELINE_BEFORE = 'Before';
    public const LODGE_PAY_RUN_TIMELINE_AFTER = 'After';
    public const LODGE_PAY_RUN_TIMELINE_ON = 'On';
    public const PUBLISH_PAY_SLIPS_TIMELINE_BEFORE = 'Before';
    public const PUBLISH_PAY_SLIPS_TIMELINE_AFTER = 'After';
    public const PUBLISH_PAY_SLIPS_TIMELINE_ON = 'On';
    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_MANUAL = 'Manual';
    public const SUBMIT_TO_PENSION_SYNC_IMMEDIATE = 'Immediate';
    public const SUBMIT_TO_PENSION_SYNC_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_BEFORE = 'Before';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_AFTER = 'After';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_ON = 'On';
    public const RUN_REPORT_PACKS_MANUAL = 'Manual';
    public const RUN_REPORT_PACKS_IMMEDIATE = 'Immediate';
    public const RUN_REPORT_PACKS_SCHEDULED = 'Scheduled';
    public const RUN_REPORT_PACKS_TIMELINE_BEFORE = 'Before';
    public const RUN_REPORT_PACKS_TIMELINE_AFTER = 'After';
    public const RUN_REPORT_PACKS_TIMELINE_ON = 'On';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_MANUAL,
            self::EXPORT_JOURNALS_IMMEDIATE,
            self::EXPORT_JOURNALS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsTimelineAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_TIMELINE_BEFORE,
            self::EXPORT_JOURNALS_TIMELINE_AFTER,
            self::EXPORT_JOURNALS_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_MANUAL,
            self::LODGE_PAY_RUN_IMMEDIATE,
            self::LODGE_PAY_RUN_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunTimelineAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_TIMELINE_BEFORE,
            self::LODGE_PAY_RUN_TIMELINE_AFTER,
            self::LODGE_PAY_RUN_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsTimelineAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_TIMELINE_BEFORE,
            self::PUBLISH_PAY_SLIPS_TIMELINE_AFTER,
            self::PUBLISH_PAY_SLIPS_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncTimelineAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_BEFORE,
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_AFTER,
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_MANUAL,
            self::RUN_REPORT_PACKS_IMMEDIATE,
            self::RUN_REPORT_PACKS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksTimelineAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_TIMELINE_BEFORE,
            self::RUN_REPORT_PACKS_TIMELINE_AFTER,
            self::RUN_REPORT_PACKS_TIMELINE_ON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('export_journals', $data ?? [], null);
        $this->setIfExists('export_journals_timeline', $data ?? [], null);
        $this->setIfExists('export_journals_day', $data ?? [], null);
        $this->setIfExists('export_journals_time_of_day', $data ?? [], null);
        $this->setIfExists('lodge_pay_run', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_day', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_timeline', $data ?? [], null);
        $this->setIfExists('lodge_pay_run_time_of_day', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_day', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_timeline', $data ?? [], null);
        $this->setIfExists('publish_pay_slips', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_time_of_day', $data ?? [], null);
        $this->setIfExists('suppress_notifications', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_timeline', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_day', $data ?? [], null);
        $this->setIfExists('submit_to_pension_sync_time_of_day', $data ?? [], null);
        $this->setIfExists('run_report_packs', $data ?? [], null);
        $this->setIfExists('run_report_packs_timeline', $data ?? [], null);
        $this->setIfExists('run_report_packs_day', $data ?? [], null);
        $this->setIfExists('run_report_packs_time_of_day', $data ?? [], null);
        $this->setIfExists('report_packs_to_run', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExportJournalsAllowableValues();
        if (!is_null($this->container['export_journals']) && !in_array($this->container['export_journals'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_journals', must be one of '%s'",
                $this->container['export_journals'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsTimelineAllowableValues();
        if (!is_null($this->container['export_journals_timeline']) && !in_array($this->container['export_journals_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_journals_timeline', must be one of '%s'",
                $this->container['export_journals_timeline'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (!is_null($this->container['lodge_pay_run']) && !in_array($this->container['lodge_pay_run'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lodge_pay_run', must be one of '%s'",
                $this->container['lodge_pay_run'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunTimelineAllowableValues();
        if (!is_null($this->container['lodge_pay_run_timeline']) && !in_array($this->container['lodge_pay_run_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lodge_pay_run_timeline', must be one of '%s'",
                $this->container['lodge_pay_run_timeline'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsTimelineAllowableValues();
        if (!is_null($this->container['publish_pay_slips_timeline']) && !in_array($this->container['publish_pay_slips_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips_timeline', must be one of '%s'",
                $this->container['publish_pay_slips_timeline'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($this->container['publish_pay_slips']) && !in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                $this->container['publish_pay_slips'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (!is_null($this->container['submit_to_pension_sync']) && !in_array($this->container['submit_to_pension_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'submit_to_pension_sync', must be one of '%s'",
                $this->container['submit_to_pension_sync'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncTimelineAllowableValues();
        if (!is_null($this->container['submit_to_pension_sync_timeline']) && !in_array($this->container['submit_to_pension_sync_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'submit_to_pension_sync_timeline', must be one of '%s'",
                $this->container['submit_to_pension_sync_timeline'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (!is_null($this->container['run_report_packs']) && !in_array($this->container['run_report_packs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'run_report_packs', must be one of '%s'",
                $this->container['run_report_packs'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksTimelineAllowableValues();
        if (!is_null($this->container['run_report_packs_timeline']) && !in_array($this->container['run_report_packs_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'run_report_packs_timeline', must be one of '%s'",
                $this->container['run_report_packs_timeline'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets export_journals
     *
     * @return string|null
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param string|null $export_journals 
     *
     * @return self
     */
    public function setExportJournals($export_journals)
    {
        if (is_null($export_journals)) {
            throw new \InvalidArgumentException('non-nullable export_journals cannot be null');
        }
        $allowedValues = $this->getExportJournalsAllowableValues();
        if (!in_array($export_journals, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_journals', must be one of '%s'",
                    $export_journals,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets export_journals_timeline
     *
     * @return string|null
     */
    public function getExportJournalsTimeline()
    {
        return $this->container['export_journals_timeline'];
    }

    /**
     * Sets export_journals_timeline
     *
     * @param string|null $export_journals_timeline 
     *
     * @return self
     */
    public function setExportJournalsTimeline($export_journals_timeline)
    {
        if (is_null($export_journals_timeline)) {
            throw new \InvalidArgumentException('non-nullable export_journals_timeline cannot be null');
        }
        $allowedValues = $this->getExportJournalsTimelineAllowableValues();
        if (!in_array($export_journals_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_journals_timeline', must be one of '%s'",
                    $export_journals_timeline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals_timeline'] = $export_journals_timeline;

        return $this;
    }

    /**
     * Gets export_journals_day
     *
     * @return int|null
     */
    public function getExportJournalsDay()
    {
        return $this->container['export_journals_day'];
    }

    /**
     * Sets export_journals_day
     *
     * @param int|null $export_journals_day 
     *
     * @return self
     */
    public function setExportJournalsDay($export_journals_day)
    {
        if (is_null($export_journals_day)) {
            throw new \InvalidArgumentException('non-nullable export_journals_day cannot be null');
        }
        $this->container['export_journals_day'] = $export_journals_day;

        return $this;
    }

    /**
     * Gets export_journals_time_of_day
     *
     * @return string|null
     */
    public function getExportJournalsTimeOfDay()
    {
        return $this->container['export_journals_time_of_day'];
    }

    /**
     * Sets export_journals_time_of_day
     *
     * @param string|null $export_journals_time_of_day 
     *
     * @return self
     */
    public function setExportJournalsTimeOfDay($export_journals_time_of_day)
    {
        if (is_null($export_journals_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable export_journals_time_of_day cannot be null');
        }
        $this->container['export_journals_time_of_day'] = $export_journals_time_of_day;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return string|null
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param string|null $lodge_pay_run 
     *
     * @return self
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        if (is_null($lodge_pay_run)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run cannot be null');
        }
        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (!in_array($lodge_pay_run, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lodge_pay_run', must be one of '%s'",
                    $lodge_pay_run,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_day
     *
     * @return int|null
     */
    public function getLodgePayRunDay()
    {
        return $this->container['lodge_pay_run_day'];
    }

    /**
     * Sets lodge_pay_run_day
     *
     * @param int|null $lodge_pay_run_day 
     *
     * @return self
     */
    public function setLodgePayRunDay($lodge_pay_run_day)
    {
        if (is_null($lodge_pay_run_day)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_day cannot be null');
        }
        $this->container['lodge_pay_run_day'] = $lodge_pay_run_day;

        return $this;
    }

    /**
     * Gets lodge_pay_run_timeline
     *
     * @return string|null
     */
    public function getLodgePayRunTimeline()
    {
        return $this->container['lodge_pay_run_timeline'];
    }

    /**
     * Sets lodge_pay_run_timeline
     *
     * @param string|null $lodge_pay_run_timeline 
     *
     * @return self
     */
    public function setLodgePayRunTimeline($lodge_pay_run_timeline)
    {
        if (is_null($lodge_pay_run_timeline)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_timeline cannot be null');
        }
        $allowedValues = $this->getLodgePayRunTimelineAllowableValues();
        if (!in_array($lodge_pay_run_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lodge_pay_run_timeline', must be one of '%s'",
                    $lodge_pay_run_timeline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run_timeline'] = $lodge_pay_run_timeline;

        return $this;
    }

    /**
     * Gets lodge_pay_run_time_of_day
     *
     * @return string|null
     */
    public function getLodgePayRunTimeOfDay()
    {
        return $this->container['lodge_pay_run_time_of_day'];
    }

    /**
     * Sets lodge_pay_run_time_of_day
     *
     * @param string|null $lodge_pay_run_time_of_day 
     *
     * @return self
     */
    public function setLodgePayRunTimeOfDay($lodge_pay_run_time_of_day)
    {
        if (is_null($lodge_pay_run_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run_time_of_day cannot be null');
        }
        $this->container['lodge_pay_run_time_of_day'] = $lodge_pay_run_time_of_day;

        return $this;
    }

    /**
     * Gets publish_pay_slips_day
     *
     * @return int|null
     */
    public function getPublishPaySlipsDay()
    {
        return $this->container['publish_pay_slips_day'];
    }

    /**
     * Sets publish_pay_slips_day
     *
     * @param int|null $publish_pay_slips_day 
     *
     * @return self
     */
    public function setPublishPaySlipsDay($publish_pay_slips_day)
    {
        if (is_null($publish_pay_slips_day)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_day cannot be null');
        }
        $this->container['publish_pay_slips_day'] = $publish_pay_slips_day;

        return $this;
    }

    /**
     * Gets publish_pay_slips_timeline
     *
     * @return string|null
     */
    public function getPublishPaySlipsTimeline()
    {
        return $this->container['publish_pay_slips_timeline'];
    }

    /**
     * Sets publish_pay_slips_timeline
     *
     * @param string|null $publish_pay_slips_timeline 
     *
     * @return self
     */
    public function setPublishPaySlipsTimeline($publish_pay_slips_timeline)
    {
        if (is_null($publish_pay_slips_timeline)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_timeline cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsTimelineAllowableValues();
        if (!in_array($publish_pay_slips_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips_timeline', must be one of '%s'",
                    $publish_pay_slips_timeline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips_timeline'] = $publish_pay_slips_timeline;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string|null
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string|null $publish_pay_slips 
     *
     * @return self
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        if (is_null($publish_pay_slips)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                    $publish_pay_slips,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_pay_slips_time_of_day
     *
     * @return string|null
     */
    public function getPublishPaySlipsTimeOfDay()
    {
        return $this->container['publish_pay_slips_time_of_day'];
    }

    /**
     * Sets publish_pay_slips_time_of_day
     *
     * @param string|null $publish_pay_slips_time_of_day 
     *
     * @return self
     */
    public function setPublishPaySlipsTimeOfDay($publish_pay_slips_time_of_day)
    {
        if (is_null($publish_pay_slips_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_time_of_day cannot be null');
        }
        $this->container['publish_pay_slips_time_of_day'] = $publish_pay_slips_time_of_day;

        return $this;
    }

    /**
     * Gets suppress_notifications
     *
     * @return bool|null
     */
    public function getSuppressNotifications()
    {
        return $this->container['suppress_notifications'];
    }

    /**
     * Sets suppress_notifications
     *
     * @param bool|null $suppress_notifications 
     *
     * @return self
     */
    public function setSuppressNotifications($suppress_notifications)
    {
        if (is_null($suppress_notifications)) {
            throw new \InvalidArgumentException('non-nullable suppress_notifications cannot be null');
        }
        $this->container['suppress_notifications'] = $suppress_notifications;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return string|null
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param string|null $submit_to_pension_sync 
     *
     * @return self
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        if (is_null($submit_to_pension_sync)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync cannot be null');
        }
        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (!in_array($submit_to_pension_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'submit_to_pension_sync', must be one of '%s'",
                    $submit_to_pension_sync,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_timeline
     *
     * @return string|null
     */
    public function getSubmitToPensionSyncTimeline()
    {
        return $this->container['submit_to_pension_sync_timeline'];
    }

    /**
     * Sets submit_to_pension_sync_timeline
     *
     * @param string|null $submit_to_pension_sync_timeline 
     *
     * @return self
     */
    public function setSubmitToPensionSyncTimeline($submit_to_pension_sync_timeline)
    {
        if (is_null($submit_to_pension_sync_timeline)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_timeline cannot be null');
        }
        $allowedValues = $this->getSubmitToPensionSyncTimelineAllowableValues();
        if (!in_array($submit_to_pension_sync_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'submit_to_pension_sync_timeline', must be one of '%s'",
                    $submit_to_pension_sync_timeline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync_timeline'] = $submit_to_pension_sync_timeline;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_day
     *
     * @return int|null
     */
    public function getSubmitToPensionSyncDay()
    {
        return $this->container['submit_to_pension_sync_day'];
    }

    /**
     * Sets submit_to_pension_sync_day
     *
     * @param int|null $submit_to_pension_sync_day 
     *
     * @return self
     */
    public function setSubmitToPensionSyncDay($submit_to_pension_sync_day)
    {
        if (is_null($submit_to_pension_sync_day)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_day cannot be null');
        }
        $this->container['submit_to_pension_sync_day'] = $submit_to_pension_sync_day;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_time_of_day
     *
     * @return string|null
     */
    public function getSubmitToPensionSyncTimeOfDay()
    {
        return $this->container['submit_to_pension_sync_time_of_day'];
    }

    /**
     * Sets submit_to_pension_sync_time_of_day
     *
     * @param string|null $submit_to_pension_sync_time_of_day 
     *
     * @return self
     */
    public function setSubmitToPensionSyncTimeOfDay($submit_to_pension_sync_time_of_day)
    {
        if (is_null($submit_to_pension_sync_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable submit_to_pension_sync_time_of_day cannot be null');
        }
        $this->container['submit_to_pension_sync_time_of_day'] = $submit_to_pension_sync_time_of_day;

        return $this;
    }

    /**
     * Gets run_report_packs
     *
     * @return string|null
     */
    public function getRunReportPacks()
    {
        return $this->container['run_report_packs'];
    }

    /**
     * Sets run_report_packs
     *
     * @param string|null $run_report_packs 
     *
     * @return self
     */
    public function setRunReportPacks($run_report_packs)
    {
        if (is_null($run_report_packs)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs cannot be null');
        }
        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (!in_array($run_report_packs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'run_report_packs', must be one of '%s'",
                    $run_report_packs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs'] = $run_report_packs;

        return $this;
    }

    /**
     * Gets run_report_packs_timeline
     *
     * @return string|null
     */
    public function getRunReportPacksTimeline()
    {
        return $this->container['run_report_packs_timeline'];
    }

    /**
     * Sets run_report_packs_timeline
     *
     * @param string|null $run_report_packs_timeline 
     *
     * @return self
     */
    public function setRunReportPacksTimeline($run_report_packs_timeline)
    {
        if (is_null($run_report_packs_timeline)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_timeline cannot be null');
        }
        $allowedValues = $this->getRunReportPacksTimelineAllowableValues();
        if (!in_array($run_report_packs_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'run_report_packs_timeline', must be one of '%s'",
                    $run_report_packs_timeline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs_timeline'] = $run_report_packs_timeline;

        return $this;
    }

    /**
     * Gets run_report_packs_day
     *
     * @return int|null
     */
    public function getRunReportPacksDay()
    {
        return $this->container['run_report_packs_day'];
    }

    /**
     * Sets run_report_packs_day
     *
     * @param int|null $run_report_packs_day 
     *
     * @return self
     */
    public function setRunReportPacksDay($run_report_packs_day)
    {
        if (is_null($run_report_packs_day)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_day cannot be null');
        }
        $this->container['run_report_packs_day'] = $run_report_packs_day;

        return $this;
    }

    /**
     * Gets run_report_packs_time_of_day
     *
     * @return string|null
     */
    public function getRunReportPacksTimeOfDay()
    {
        return $this->container['run_report_packs_time_of_day'];
    }

    /**
     * Sets run_report_packs_time_of_day
     *
     * @param string|null $run_report_packs_time_of_day 
     *
     * @return self
     */
    public function setRunReportPacksTimeOfDay($run_report_packs_time_of_day)
    {
        if (is_null($run_report_packs_time_of_day)) {
            throw new \InvalidArgumentException('non-nullable run_report_packs_time_of_day cannot be null');
        }
        $this->container['run_report_packs_time_of_day'] = $run_report_packs_time_of_day;

        return $this;
    }

    /**
     * Gets report_packs_to_run
     *
     * @return int[]|null
     */
    public function getReportPacksToRun()
    {
        return $this->container['report_packs_to_run'];
    }

    /**
     * Sets report_packs_to_run
     *
     * @param int[]|null $report_packs_to_run 
     *
     * @return self
     */
    public function setReportPacksToRun($report_packs_to_run)
    {
        if (is_null($report_packs_to_run)) {
            throw new \InvalidArgumentException('non-nullable report_packs_to_run cannot be null');
        }
        $this->container['report_packs_to_run'] = $report_packs_to_run;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


