<?php
/**
 * AuEmployeePayRateModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEmployeePayRateModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEmployeePayRateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEmployeePayRateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'has_super_rate_override' => 'bool',
        'super_rate' => 'float',
        'pay_category_id' => 'int',
        'pay_category_name' => 'string',
        'is_primary_pay_category' => 'bool',
        'accrues_leave' => 'bool',
        'rate_unit' => 'string',
        'rate' => 'float',
        'calculated_rate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'has_super_rate_override' => null,
        'super_rate' => 'double',
        'pay_category_id' => 'int32',
        'pay_category_name' => null,
        'is_primary_pay_category' => null,
        'accrues_leave' => null,
        'rate_unit' => null,
        'rate' => 'double',
        'calculated_rate' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'has_super_rate_override' => false,
		'super_rate' => false,
		'pay_category_id' => false,
		'pay_category_name' => false,
		'is_primary_pay_category' => false,
		'accrues_leave' => false,
		'rate_unit' => false,
		'rate' => false,
		'calculated_rate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_super_rate_override' => 'hasSuperRateOverride',
        'super_rate' => 'superRate',
        'pay_category_id' => 'payCategoryId',
        'pay_category_name' => 'payCategoryName',
        'is_primary_pay_category' => 'isPrimaryPayCategory',
        'accrues_leave' => 'accruesLeave',
        'rate_unit' => 'rateUnit',
        'rate' => 'rate',
        'calculated_rate' => 'calculatedRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_super_rate_override' => 'setHasSuperRateOverride',
        'super_rate' => 'setSuperRate',
        'pay_category_id' => 'setPayCategoryId',
        'pay_category_name' => 'setPayCategoryName',
        'is_primary_pay_category' => 'setIsPrimaryPayCategory',
        'accrues_leave' => 'setAccruesLeave',
        'rate_unit' => 'setRateUnit',
        'rate' => 'setRate',
        'calculated_rate' => 'setCalculatedRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_super_rate_override' => 'getHasSuperRateOverride',
        'super_rate' => 'getSuperRate',
        'pay_category_id' => 'getPayCategoryId',
        'pay_category_name' => 'getPayCategoryName',
        'is_primary_pay_category' => 'getIsPrimaryPayCategory',
        'accrues_leave' => 'getAccruesLeave',
        'rate_unit' => 'getRateUnit',
        'rate' => 'getRate',
        'calculated_rate' => 'getCalculatedRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('has_super_rate_override', $data ?? [], null);
        $this->setIfExists('super_rate', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('pay_category_name', $data ?? [], null);
        $this->setIfExists('is_primary_pay_category', $data ?? [], null);
        $this->setIfExists('accrues_leave', $data ?? [], null);
        $this->setIfExists('rate_unit', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('calculated_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_super_rate_override
     *
     * @return bool|null
     */
    public function getHasSuperRateOverride()
    {
        return $this->container['has_super_rate_override'];
    }

    /**
     * Sets has_super_rate_override
     *
     * @param bool|null $has_super_rate_override 
     *
     * @return self
     */
    public function setHasSuperRateOverride($has_super_rate_override)
    {
        if (is_null($has_super_rate_override)) {
            throw new \InvalidArgumentException('non-nullable has_super_rate_override cannot be null');
        }
        $this->container['has_super_rate_override'] = $has_super_rate_override;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return float|null
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param float|null $super_rate 
     *
     * @return self
     */
    public function setSuperRate($super_rate)
    {
        if (is_null($super_rate)) {
            throw new \InvalidArgumentException('non-nullable super_rate cannot be null');
        }
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets pay_category_name
     *
     * @return string|null
     */
    public function getPayCategoryName()
    {
        return $this->container['pay_category_name'];
    }

    /**
     * Sets pay_category_name
     *
     * @param string|null $pay_category_name 
     *
     * @return self
     */
    public function setPayCategoryName($pay_category_name)
    {
        if (is_null($pay_category_name)) {
            throw new \InvalidArgumentException('non-nullable pay_category_name cannot be null');
        }
        $this->container['pay_category_name'] = $pay_category_name;

        return $this;
    }

    /**
     * Gets is_primary_pay_category
     *
     * @return bool|null
     */
    public function getIsPrimaryPayCategory()
    {
        return $this->container['is_primary_pay_category'];
    }

    /**
     * Sets is_primary_pay_category
     *
     * @param bool|null $is_primary_pay_category 
     *
     * @return self
     */
    public function setIsPrimaryPayCategory($is_primary_pay_category)
    {
        if (is_null($is_primary_pay_category)) {
            throw new \InvalidArgumentException('non-nullable is_primary_pay_category cannot be null');
        }
        $this->container['is_primary_pay_category'] = $is_primary_pay_category;

        return $this;
    }

    /**
     * Gets accrues_leave
     *
     * @return bool|null
     */
    public function getAccruesLeave()
    {
        return $this->container['accrues_leave'];
    }

    /**
     * Sets accrues_leave
     *
     * @param bool|null $accrues_leave 
     *
     * @return self
     */
    public function setAccruesLeave($accrues_leave)
    {
        if (is_null($accrues_leave)) {
            throw new \InvalidArgumentException('non-nullable accrues_leave cannot be null');
        }
        $this->container['accrues_leave'] = $accrues_leave;

        return $this;
    }

    /**
     * Gets rate_unit
     *
     * @return string|null
     */
    public function getRateUnit()
    {
        return $this->container['rate_unit'];
    }

    /**
     * Sets rate_unit
     *
     * @param string|null $rate_unit 
     *
     * @return self
     */
    public function setRateUnit($rate_unit)
    {
        if (is_null($rate_unit)) {
            throw new \InvalidArgumentException('non-nullable rate_unit cannot be null');
        }
        $this->container['rate_unit'] = $rate_unit;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate 
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets calculated_rate
     *
     * @return float|null
     */
    public function getCalculatedRate()
    {
        return $this->container['calculated_rate'];
    }

    /**
     * Sets calculated_rate
     *
     * @param float|null $calculated_rate 
     *
     * @return self
     */
    public function setCalculatedRate($calculated_rate)
    {
        if (is_null($calculated_rate)) {
            throw new \InvalidArgumentException('non-nullable calculated_rate cannot be null');
        }
        $this->container['calculated_rate'] = $calculated_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


