<?php
/**
 * EssEmployeeDetailsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EssEmployeeDetailsModel Class Doc Comment
 *
 * @category Class
 * @description this exists to give it a separate name from the API EmployeeeDetailsModel. As an aside, we should have had an api specific model for this
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EssEmployeeDetailsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EssEmployeeDetailsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timesheets_read_only' => 'bool',
        'id' => 'int',
        'title_id' => 'int',
        'first_name' => 'string',
        'other_name' => 'string',
        'middle_name' => 'string',
        'surname' => 'string',
        'previous_surname' => 'string',
        'legal_name' => 'string',
        'gender' => 'string',
        'date_of_birth' => '\DateTime',
        'anniversary_date' => '\DateTime',
        'external_id' => 'string',
        'residential_street_address' => 'string',
        'residential_address_line2' => 'string',
        'residential_suburb_id' => 'int',
        'residential_suburb' => 'string',
        'residential_state' => 'string',
        'residential_postcode' => 'string',
        'residential_country' => 'string',
        'residential_country_id' => 'string',
        'is_overseas_residential_address' => 'bool',
        'postal_street_address' => 'string',
        'postal_address_line2' => 'string',
        'postal_suburb_id' => 'int',
        'postal_suburb' => 'string',
        'postal_state' => 'string',
        'postal_postcode' => 'string',
        'postal_country' => 'string',
        'postal_country_id' => 'string',
        'is_overseas_postal_address' => 'bool',
        'email' => 'string',
        'home_phone' => 'string',
        'work_phone' => 'string',
        'mobile_phone' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'is_terminated' => 'bool',
        'is_anonymised' => 'bool',
        'external_reference_id' => 'string',
        'source' => 'int',
        'is_postal_address_same_as_residential' => 'bool',
        'titles' => '\OpenAPI\Client\Model\TitleViewModel[]',
        'edit_mode' => 'string',
        'can_edit' => 'bool',
        'tags_string' => 'string',
        'all_tags' => 'string[]',
        'timesheet_setting' => 'string',
        'can_delete' => 'bool',
        'has_profile_image' => 'bool',
        'can_edit_profile_image' => 'bool',
        'bounced_email' => 'bool',
        'ird_details_current' => 'bool',
        'ird_settings_enabled' => 'bool',
        'has_connected_devices' => 'bool',
        'address_types' => '\OpenAPI\Client\Model\SelectListItem[]',
        'residential_address_type' => 'string',
        'postal_address_type' => 'string',
        'residential_block_number' => 'string',
        'postal_block_number' => 'string',
        'residential_level_number' => 'string',
        'postal_level_number' => 'string',
        'residential_unit_number' => 'string',
        'postal_unit_number' => 'string',
        'residential_street_name' => 'string',
        'postal_street_name' => 'string',
        'residential_address_line3' => 'string',
        'postal_address_line3' => 'string',
        'termination_reason' => 'string',
        'termination_description' => 'string',
        'termination_reasons' => '\OpenAPI\Client\Model\NumericSelectListItem[]',
        'has_sole_user' => 'bool',
        'fields' => '\OpenAPI\Client\Model\EmployeeDetailsFields',
        'pending_email_update' => 'bool',
        'new_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timesheets_read_only' => null,
        'id' => 'int32',
        'title_id' => 'int32',
        'first_name' => null,
        'other_name' => null,
        'middle_name' => null,
        'surname' => null,
        'previous_surname' => null,
        'legal_name' => null,
        'gender' => null,
        'date_of_birth' => 'date-time',
        'anniversary_date' => 'date-time',
        'external_id' => null,
        'residential_street_address' => null,
        'residential_address_line2' => null,
        'residential_suburb_id' => 'int32',
        'residential_suburb' => null,
        'residential_state' => null,
        'residential_postcode' => null,
        'residential_country' => null,
        'residential_country_id' => null,
        'is_overseas_residential_address' => null,
        'postal_street_address' => null,
        'postal_address_line2' => null,
        'postal_suburb_id' => 'int32',
        'postal_suburb' => null,
        'postal_state' => null,
        'postal_postcode' => null,
        'postal_country' => null,
        'postal_country_id' => null,
        'is_overseas_postal_address' => null,
        'email' => null,
        'home_phone' => null,
        'work_phone' => null,
        'mobile_phone' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'is_terminated' => null,
        'is_anonymised' => null,
        'external_reference_id' => null,
        'source' => 'int32',
        'is_postal_address_same_as_residential' => null,
        'titles' => null,
        'edit_mode' => null,
        'can_edit' => null,
        'tags_string' => null,
        'all_tags' => null,
        'timesheet_setting' => null,
        'can_delete' => null,
        'has_profile_image' => null,
        'can_edit_profile_image' => null,
        'bounced_email' => null,
        'ird_details_current' => null,
        'ird_settings_enabled' => null,
        'has_connected_devices' => null,
        'address_types' => null,
        'residential_address_type' => null,
        'postal_address_type' => null,
        'residential_block_number' => null,
        'postal_block_number' => null,
        'residential_level_number' => null,
        'postal_level_number' => null,
        'residential_unit_number' => null,
        'postal_unit_number' => null,
        'residential_street_name' => null,
        'postal_street_name' => null,
        'residential_address_line3' => null,
        'postal_address_line3' => null,
        'termination_reason' => null,
        'termination_description' => null,
        'termination_reasons' => null,
        'has_sole_user' => null,
        'fields' => null,
        'pending_email_update' => null,
        'new_email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timesheets_read_only' => false,
		'id' => false,
		'title_id' => false,
		'first_name' => false,
		'other_name' => false,
		'middle_name' => false,
		'surname' => false,
		'previous_surname' => false,
		'legal_name' => false,
		'gender' => false,
		'date_of_birth' => false,
		'anniversary_date' => false,
		'external_id' => false,
		'residential_street_address' => false,
		'residential_address_line2' => false,
		'residential_suburb_id' => false,
		'residential_suburb' => false,
		'residential_state' => false,
		'residential_postcode' => false,
		'residential_country' => false,
		'residential_country_id' => false,
		'is_overseas_residential_address' => false,
		'postal_street_address' => false,
		'postal_address_line2' => false,
		'postal_suburb_id' => false,
		'postal_suburb' => false,
		'postal_state' => false,
		'postal_postcode' => false,
		'postal_country' => false,
		'postal_country_id' => false,
		'is_overseas_postal_address' => false,
		'email' => false,
		'home_phone' => false,
		'work_phone' => false,
		'mobile_phone' => false,
		'start_date' => false,
		'end_date' => false,
		'is_terminated' => false,
		'is_anonymised' => false,
		'external_reference_id' => false,
		'source' => false,
		'is_postal_address_same_as_residential' => false,
		'titles' => false,
		'edit_mode' => false,
		'can_edit' => false,
		'tags_string' => false,
		'all_tags' => false,
		'timesheet_setting' => false,
		'can_delete' => false,
		'has_profile_image' => false,
		'can_edit_profile_image' => false,
		'bounced_email' => false,
		'ird_details_current' => false,
		'ird_settings_enabled' => false,
		'has_connected_devices' => false,
		'address_types' => false,
		'residential_address_type' => false,
		'postal_address_type' => false,
		'residential_block_number' => false,
		'postal_block_number' => false,
		'residential_level_number' => false,
		'postal_level_number' => false,
		'residential_unit_number' => false,
		'postal_unit_number' => false,
		'residential_street_name' => false,
		'postal_street_name' => false,
		'residential_address_line3' => false,
		'postal_address_line3' => false,
		'termination_reason' => false,
		'termination_description' => false,
		'termination_reasons' => false,
		'has_sole_user' => false,
		'fields' => false,
		'pending_email_update' => false,
		'new_email' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timesheets_read_only' => 'timesheetsReadOnly',
        'id' => 'id',
        'title_id' => 'titleId',
        'first_name' => 'firstName',
        'other_name' => 'otherName',
        'middle_name' => 'middleName',
        'surname' => 'surname',
        'previous_surname' => 'previousSurname',
        'legal_name' => 'legalName',
        'gender' => 'gender',
        'date_of_birth' => 'dateOfBirth',
        'anniversary_date' => 'anniversaryDate',
        'external_id' => 'externalId',
        'residential_street_address' => 'residentialStreetAddress',
        'residential_address_line2' => 'residentialAddressLine2',
        'residential_suburb_id' => 'residentialSuburbId',
        'residential_suburb' => 'residentialSuburb',
        'residential_state' => 'residentialState',
        'residential_postcode' => 'residentialPostcode',
        'residential_country' => 'residentialCountry',
        'residential_country_id' => 'residentialCountryId',
        'is_overseas_residential_address' => 'isOverseasResidentialAddress',
        'postal_street_address' => 'postalStreetAddress',
        'postal_address_line2' => 'postalAddressLine2',
        'postal_suburb_id' => 'postalSuburbId',
        'postal_suburb' => 'postalSuburb',
        'postal_state' => 'postalState',
        'postal_postcode' => 'postalPostcode',
        'postal_country' => 'postalCountry',
        'postal_country_id' => 'postalCountryId',
        'is_overseas_postal_address' => 'isOverseasPostalAddress',
        'email' => 'email',
        'home_phone' => 'homePhone',
        'work_phone' => 'workPhone',
        'mobile_phone' => 'mobilePhone',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'is_terminated' => 'isTerminated',
        'is_anonymised' => 'isAnonymised',
        'external_reference_id' => 'externalReferenceId',
        'source' => 'source',
        'is_postal_address_same_as_residential' => 'isPostalAddressSameAsResidential',
        'titles' => 'titles',
        'edit_mode' => 'editMode',
        'can_edit' => 'canEdit',
        'tags_string' => 'tagsString',
        'all_tags' => 'allTags',
        'timesheet_setting' => 'timesheetSetting',
        'can_delete' => 'canDelete',
        'has_profile_image' => 'hasProfileImage',
        'can_edit_profile_image' => 'canEditProfileImage',
        'bounced_email' => 'bouncedEmail',
        'ird_details_current' => 'irdDetailsCurrent',
        'ird_settings_enabled' => 'irdSettingsEnabled',
        'has_connected_devices' => 'hasConnectedDevices',
        'address_types' => 'addressTypes',
        'residential_address_type' => 'residentialAddressType',
        'postal_address_type' => 'postalAddressType',
        'residential_block_number' => 'residentialBlockNumber',
        'postal_block_number' => 'postalBlockNumber',
        'residential_level_number' => 'residentialLevelNumber',
        'postal_level_number' => 'postalLevelNumber',
        'residential_unit_number' => 'residentialUnitNumber',
        'postal_unit_number' => 'postalUnitNumber',
        'residential_street_name' => 'residentialStreetName',
        'postal_street_name' => 'postalStreetName',
        'residential_address_line3' => 'residentialAddressLine3',
        'postal_address_line3' => 'postalAddressLine3',
        'termination_reason' => 'terminationReason',
        'termination_description' => 'terminationDescription',
        'termination_reasons' => 'terminationReasons',
        'has_sole_user' => 'hasSoleUser',
        'fields' => 'fields',
        'pending_email_update' => 'pendingEmailUpdate',
        'new_email' => 'newEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timesheets_read_only' => 'setTimesheetsReadOnly',
        'id' => 'setId',
        'title_id' => 'setTitleId',
        'first_name' => 'setFirstName',
        'other_name' => 'setOtherName',
        'middle_name' => 'setMiddleName',
        'surname' => 'setSurname',
        'previous_surname' => 'setPreviousSurname',
        'legal_name' => 'setLegalName',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'anniversary_date' => 'setAnniversaryDate',
        'external_id' => 'setExternalId',
        'residential_street_address' => 'setResidentialStreetAddress',
        'residential_address_line2' => 'setResidentialAddressLine2',
        'residential_suburb_id' => 'setResidentialSuburbId',
        'residential_suburb' => 'setResidentialSuburb',
        'residential_state' => 'setResidentialState',
        'residential_postcode' => 'setResidentialPostcode',
        'residential_country' => 'setResidentialCountry',
        'residential_country_id' => 'setResidentialCountryId',
        'is_overseas_residential_address' => 'setIsOverseasResidentialAddress',
        'postal_street_address' => 'setPostalStreetAddress',
        'postal_address_line2' => 'setPostalAddressLine2',
        'postal_suburb_id' => 'setPostalSuburbId',
        'postal_suburb' => 'setPostalSuburb',
        'postal_state' => 'setPostalState',
        'postal_postcode' => 'setPostalPostcode',
        'postal_country' => 'setPostalCountry',
        'postal_country_id' => 'setPostalCountryId',
        'is_overseas_postal_address' => 'setIsOverseasPostalAddress',
        'email' => 'setEmail',
        'home_phone' => 'setHomePhone',
        'work_phone' => 'setWorkPhone',
        'mobile_phone' => 'setMobilePhone',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'is_terminated' => 'setIsTerminated',
        'is_anonymised' => 'setIsAnonymised',
        'external_reference_id' => 'setExternalReferenceId',
        'source' => 'setSource',
        'is_postal_address_same_as_residential' => 'setIsPostalAddressSameAsResidential',
        'titles' => 'setTitles',
        'edit_mode' => 'setEditMode',
        'can_edit' => 'setCanEdit',
        'tags_string' => 'setTagsString',
        'all_tags' => 'setAllTags',
        'timesheet_setting' => 'setTimesheetSetting',
        'can_delete' => 'setCanDelete',
        'has_profile_image' => 'setHasProfileImage',
        'can_edit_profile_image' => 'setCanEditProfileImage',
        'bounced_email' => 'setBouncedEmail',
        'ird_details_current' => 'setIrdDetailsCurrent',
        'ird_settings_enabled' => 'setIrdSettingsEnabled',
        'has_connected_devices' => 'setHasConnectedDevices',
        'address_types' => 'setAddressTypes',
        'residential_address_type' => 'setResidentialAddressType',
        'postal_address_type' => 'setPostalAddressType',
        'residential_block_number' => 'setResidentialBlockNumber',
        'postal_block_number' => 'setPostalBlockNumber',
        'residential_level_number' => 'setResidentialLevelNumber',
        'postal_level_number' => 'setPostalLevelNumber',
        'residential_unit_number' => 'setResidentialUnitNumber',
        'postal_unit_number' => 'setPostalUnitNumber',
        'residential_street_name' => 'setResidentialStreetName',
        'postal_street_name' => 'setPostalStreetName',
        'residential_address_line3' => 'setResidentialAddressLine3',
        'postal_address_line3' => 'setPostalAddressLine3',
        'termination_reason' => 'setTerminationReason',
        'termination_description' => 'setTerminationDescription',
        'termination_reasons' => 'setTerminationReasons',
        'has_sole_user' => 'setHasSoleUser',
        'fields' => 'setFields',
        'pending_email_update' => 'setPendingEmailUpdate',
        'new_email' => 'setNewEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timesheets_read_only' => 'getTimesheetsReadOnly',
        'id' => 'getId',
        'title_id' => 'getTitleId',
        'first_name' => 'getFirstName',
        'other_name' => 'getOtherName',
        'middle_name' => 'getMiddleName',
        'surname' => 'getSurname',
        'previous_surname' => 'getPreviousSurname',
        'legal_name' => 'getLegalName',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'anniversary_date' => 'getAnniversaryDate',
        'external_id' => 'getExternalId',
        'residential_street_address' => 'getResidentialStreetAddress',
        'residential_address_line2' => 'getResidentialAddressLine2',
        'residential_suburb_id' => 'getResidentialSuburbId',
        'residential_suburb' => 'getResidentialSuburb',
        'residential_state' => 'getResidentialState',
        'residential_postcode' => 'getResidentialPostcode',
        'residential_country' => 'getResidentialCountry',
        'residential_country_id' => 'getResidentialCountryId',
        'is_overseas_residential_address' => 'getIsOverseasResidentialAddress',
        'postal_street_address' => 'getPostalStreetAddress',
        'postal_address_line2' => 'getPostalAddressLine2',
        'postal_suburb_id' => 'getPostalSuburbId',
        'postal_suburb' => 'getPostalSuburb',
        'postal_state' => 'getPostalState',
        'postal_postcode' => 'getPostalPostcode',
        'postal_country' => 'getPostalCountry',
        'postal_country_id' => 'getPostalCountryId',
        'is_overseas_postal_address' => 'getIsOverseasPostalAddress',
        'email' => 'getEmail',
        'home_phone' => 'getHomePhone',
        'work_phone' => 'getWorkPhone',
        'mobile_phone' => 'getMobilePhone',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'is_terminated' => 'getIsTerminated',
        'is_anonymised' => 'getIsAnonymised',
        'external_reference_id' => 'getExternalReferenceId',
        'source' => 'getSource',
        'is_postal_address_same_as_residential' => 'getIsPostalAddressSameAsResidential',
        'titles' => 'getTitles',
        'edit_mode' => 'getEditMode',
        'can_edit' => 'getCanEdit',
        'tags_string' => 'getTagsString',
        'all_tags' => 'getAllTags',
        'timesheet_setting' => 'getTimesheetSetting',
        'can_delete' => 'getCanDelete',
        'has_profile_image' => 'getHasProfileImage',
        'can_edit_profile_image' => 'getCanEditProfileImage',
        'bounced_email' => 'getBouncedEmail',
        'ird_details_current' => 'getIrdDetailsCurrent',
        'ird_settings_enabled' => 'getIrdSettingsEnabled',
        'has_connected_devices' => 'getHasConnectedDevices',
        'address_types' => 'getAddressTypes',
        'residential_address_type' => 'getResidentialAddressType',
        'postal_address_type' => 'getPostalAddressType',
        'residential_block_number' => 'getResidentialBlockNumber',
        'postal_block_number' => 'getPostalBlockNumber',
        'residential_level_number' => 'getResidentialLevelNumber',
        'postal_level_number' => 'getPostalLevelNumber',
        'residential_unit_number' => 'getResidentialUnitNumber',
        'postal_unit_number' => 'getPostalUnitNumber',
        'residential_street_name' => 'getResidentialStreetName',
        'postal_street_name' => 'getPostalStreetName',
        'residential_address_line3' => 'getResidentialAddressLine3',
        'postal_address_line3' => 'getPostalAddressLine3',
        'termination_reason' => 'getTerminationReason',
        'termination_description' => 'getTerminationDescription',
        'termination_reasons' => 'getTerminationReasons',
        'has_sole_user' => 'getHasSoleUser',
        'fields' => 'getFields',
        'pending_email_update' => 'getPendingEmailUpdate',
        'new_email' => 'getNewEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EDIT_MODE_EMPLOYEE_PORTAL = 'EmployeePortal';
    public const EDIT_MODE_EMPLOYEE_PORTAL_READ_ONLY = 'EmployeePortalReadOnly';
    public const EDIT_MODE_BUSINESS_PORTAL = 'BusinessPortal';
    public const TIMESHEET_SETTING_DISABLED = 'Disabled';
    public const TIMESHEET_SETTING_ENABLED = 'Enabled';
    public const TIMESHEET_SETTING_ENABLED_FOR_EXCEPTIONS = 'EnabledForExceptions';
    public const RESIDENTIAL_ADDRESS_TYPE_LOCAL_ADDRESS = 'LocalAddress';
    public const RESIDENTIAL_ADDRESS_TYPE_FOREIGN_ADDRESS = 'ForeignAddress';
    public const RESIDENTIAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS = 'LocalCareOfAddress';
    public const POSTAL_ADDRESS_TYPE_LOCAL_ADDRESS = 'LocalAddress';
    public const POSTAL_ADDRESS_TYPE_FOREIGN_ADDRESS = 'ForeignAddress';
    public const POSTAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS = 'LocalCareOfAddress';
    public const TERMINATION_REASON_VOLUNTARY_CESSATION = 'VoluntaryCessation';
    public const TERMINATION_REASON_ILL_HEALTH = 'IllHealth';
    public const TERMINATION_REASON_DECEASED = 'Deceased';
    public const TERMINATION_REASON_REDUNDANCY = 'Redundancy';
    public const TERMINATION_REASON_DISMISSAL = 'Dismissal';
    public const TERMINATION_REASON_CONTRACT_CESSATION = 'ContractCessation';
    public const TERMINATION_REASON_TRANSFER = 'Transfer';
    public const TERMINATION_REASON_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEditModeAllowableValues()
    {
        return [
            self::EDIT_MODE_EMPLOYEE_PORTAL,
            self::EDIT_MODE_EMPLOYEE_PORTAL_READ_ONLY,
            self::EDIT_MODE_BUSINESS_PORTAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetSettingAllowableValues()
    {
        return [
            self::TIMESHEET_SETTING_DISABLED,
            self::TIMESHEET_SETTING_ENABLED,
            self::TIMESHEET_SETTING_ENABLED_FOR_EXCEPTIONS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidentialAddressTypeAllowableValues()
    {
        return [
            self::RESIDENTIAL_ADDRESS_TYPE_LOCAL_ADDRESS,
            self::RESIDENTIAL_ADDRESS_TYPE_FOREIGN_ADDRESS,
            self::RESIDENTIAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostalAddressTypeAllowableValues()
    {
        return [
            self::POSTAL_ADDRESS_TYPE_LOCAL_ADDRESS,
            self::POSTAL_ADDRESS_TYPE_FOREIGN_ADDRESS,
            self::POSTAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminationReasonAllowableValues()
    {
        return [
            self::TERMINATION_REASON_VOLUNTARY_CESSATION,
            self::TERMINATION_REASON_ILL_HEALTH,
            self::TERMINATION_REASON_DECEASED,
            self::TERMINATION_REASON_REDUNDANCY,
            self::TERMINATION_REASON_DISMISSAL,
            self::TERMINATION_REASON_CONTRACT_CESSATION,
            self::TERMINATION_REASON_TRANSFER,
            self::TERMINATION_REASON_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timesheets_read_only', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('other_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('previous_surname', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('anniversary_date', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('residential_street_address', $data ?? [], null);
        $this->setIfExists('residential_address_line2', $data ?? [], null);
        $this->setIfExists('residential_suburb_id', $data ?? [], null);
        $this->setIfExists('residential_suburb', $data ?? [], null);
        $this->setIfExists('residential_state', $data ?? [], null);
        $this->setIfExists('residential_postcode', $data ?? [], null);
        $this->setIfExists('residential_country', $data ?? [], null);
        $this->setIfExists('residential_country_id', $data ?? [], null);
        $this->setIfExists('is_overseas_residential_address', $data ?? [], null);
        $this->setIfExists('postal_street_address', $data ?? [], null);
        $this->setIfExists('postal_address_line2', $data ?? [], null);
        $this->setIfExists('postal_suburb_id', $data ?? [], null);
        $this->setIfExists('postal_suburb', $data ?? [], null);
        $this->setIfExists('postal_state', $data ?? [], null);
        $this->setIfExists('postal_postcode', $data ?? [], null);
        $this->setIfExists('postal_country', $data ?? [], null);
        $this->setIfExists('postal_country_id', $data ?? [], null);
        $this->setIfExists('is_overseas_postal_address', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('is_terminated', $data ?? [], null);
        $this->setIfExists('is_anonymised', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('is_postal_address_same_as_residential', $data ?? [], null);
        $this->setIfExists('titles', $data ?? [], null);
        $this->setIfExists('edit_mode', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('tags_string', $data ?? [], null);
        $this->setIfExists('all_tags', $data ?? [], null);
        $this->setIfExists('timesheet_setting', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('has_profile_image', $data ?? [], null);
        $this->setIfExists('can_edit_profile_image', $data ?? [], null);
        $this->setIfExists('bounced_email', $data ?? [], null);
        $this->setIfExists('ird_details_current', $data ?? [], null);
        $this->setIfExists('ird_settings_enabled', $data ?? [], null);
        $this->setIfExists('has_connected_devices', $data ?? [], null);
        $this->setIfExists('address_types', $data ?? [], null);
        $this->setIfExists('residential_address_type', $data ?? [], null);
        $this->setIfExists('postal_address_type', $data ?? [], null);
        $this->setIfExists('residential_block_number', $data ?? [], null);
        $this->setIfExists('postal_block_number', $data ?? [], null);
        $this->setIfExists('residential_level_number', $data ?? [], null);
        $this->setIfExists('postal_level_number', $data ?? [], null);
        $this->setIfExists('residential_unit_number', $data ?? [], null);
        $this->setIfExists('postal_unit_number', $data ?? [], null);
        $this->setIfExists('residential_street_name', $data ?? [], null);
        $this->setIfExists('postal_street_name', $data ?? [], null);
        $this->setIfExists('residential_address_line3', $data ?? [], null);
        $this->setIfExists('postal_address_line3', $data ?? [], null);
        $this->setIfExists('termination_reason', $data ?? [], null);
        $this->setIfExists('termination_description', $data ?? [], null);
        $this->setIfExists('termination_reasons', $data ?? [], null);
        $this->setIfExists('has_sole_user', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('pending_email_update', $data ?? [], null);
        $this->setIfExists('new_email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEditModeAllowableValues();
        if (!is_null($this->container['edit_mode']) && !in_array($this->container['edit_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'edit_mode', must be one of '%s'",
                $this->container['edit_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!is_null($this->container['timesheet_setting']) && !in_array($this->container['timesheet_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                $this->container['timesheet_setting'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResidentialAddressTypeAllowableValues();
        if (!is_null($this->container['residential_address_type']) && !in_array($this->container['residential_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'residential_address_type', must be one of '%s'",
                $this->container['residential_address_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostalAddressTypeAllowableValues();
        if (!is_null($this->container['postal_address_type']) && !in_array($this->container['postal_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'postal_address_type', must be one of '%s'",
                $this->container['postal_address_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTerminationReasonAllowableValues();
        if (!is_null($this->container['termination_reason']) && !in_array($this->container['termination_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'termination_reason', must be one of '%s'",
                $this->container['termination_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timesheets_read_only
     *
     * @return bool|null
     */
    public function getTimesheetsReadOnly()
    {
        return $this->container['timesheets_read_only'];
    }

    /**
     * Sets timesheets_read_only
     *
     * @param bool|null $timesheets_read_only 
     *
     * @return self
     */
    public function setTimesheetsReadOnly($timesheets_read_only)
    {
        if (is_null($timesheets_read_only)) {
            throw new \InvalidArgumentException('non-nullable timesheets_read_only cannot be null');
        }
        $this->container['timesheets_read_only'] = $timesheets_read_only;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return int|null
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param int|null $title_id 
     *
     * @return self
     */
    public function setTitleId($title_id)
    {
        if (is_null($title_id)) {
            throw new \InvalidArgumentException('non-nullable title_id cannot be null');
        }
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets other_name
     *
     * @return string|null
     */
    public function getOtherName()
    {
        return $this->container['other_name'];
    }

    /**
     * Sets other_name
     *
     * @param string|null $other_name 
     *
     * @return self
     */
    public function setOtherName($other_name)
    {
        if (is_null($other_name)) {
            throw new \InvalidArgumentException('non-nullable other_name cannot be null');
        }
        $this->container['other_name'] = $other_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name 
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets previous_surname
     *
     * @return string|null
     */
    public function getPreviousSurname()
    {
        return $this->container['previous_surname'];
    }

    /**
     * Sets previous_surname
     *
     * @param string|null $previous_surname 
     *
     * @return self
     */
    public function setPreviousSurname($previous_surname)
    {
        if (is_null($previous_surname)) {
            throw new \InvalidArgumentException('non-nullable previous_surname cannot be null');
        }
        $this->container['previous_surname'] = $previous_surname;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name 
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender 
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth 
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets anniversary_date
     *
     * @return \DateTime|null
     */
    public function getAnniversaryDate()
    {
        return $this->container['anniversary_date'];
    }

    /**
     * Sets anniversary_date
     *
     * @param \DateTime|null $anniversary_date 
     *
     * @return self
     */
    public function setAnniversaryDate($anniversary_date)
    {
        if (is_null($anniversary_date)) {
            throw new \InvalidArgumentException('non-nullable anniversary_date cannot be null');
        }
        $this->container['anniversary_date'] = $anniversary_date;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets residential_street_address
     *
     * @return string|null
     */
    public function getResidentialStreetAddress()
    {
        return $this->container['residential_street_address'];
    }

    /**
     * Sets residential_street_address
     *
     * @param string|null $residential_street_address 
     *
     * @return self
     */
    public function setResidentialStreetAddress($residential_street_address)
    {
        if (is_null($residential_street_address)) {
            throw new \InvalidArgumentException('non-nullable residential_street_address cannot be null');
        }
        $this->container['residential_street_address'] = $residential_street_address;

        return $this;
    }

    /**
     * Gets residential_address_line2
     *
     * @return string|null
     */
    public function getResidentialAddressLine2()
    {
        return $this->container['residential_address_line2'];
    }

    /**
     * Sets residential_address_line2
     *
     * @param string|null $residential_address_line2 
     *
     * @return self
     */
    public function setResidentialAddressLine2($residential_address_line2)
    {
        if (is_null($residential_address_line2)) {
            throw new \InvalidArgumentException('non-nullable residential_address_line2 cannot be null');
        }
        $this->container['residential_address_line2'] = $residential_address_line2;

        return $this;
    }

    /**
     * Gets residential_suburb_id
     *
     * @return int|null
     */
    public function getResidentialSuburbId()
    {
        return $this->container['residential_suburb_id'];
    }

    /**
     * Sets residential_suburb_id
     *
     * @param int|null $residential_suburb_id 
     *
     * @return self
     */
    public function setResidentialSuburbId($residential_suburb_id)
    {
        if (is_null($residential_suburb_id)) {
            throw new \InvalidArgumentException('non-nullable residential_suburb_id cannot be null');
        }
        $this->container['residential_suburb_id'] = $residential_suburb_id;

        return $this;
    }

    /**
     * Gets residential_suburb
     *
     * @return string|null
     */
    public function getResidentialSuburb()
    {
        return $this->container['residential_suburb'];
    }

    /**
     * Sets residential_suburb
     *
     * @param string|null $residential_suburb 
     *
     * @return self
     */
    public function setResidentialSuburb($residential_suburb)
    {
        if (is_null($residential_suburb)) {
            throw new \InvalidArgumentException('non-nullable residential_suburb cannot be null');
        }
        $this->container['residential_suburb'] = $residential_suburb;

        return $this;
    }

    /**
     * Gets residential_state
     *
     * @return string|null
     */
    public function getResidentialState()
    {
        return $this->container['residential_state'];
    }

    /**
     * Sets residential_state
     *
     * @param string|null $residential_state 
     *
     * @return self
     */
    public function setResidentialState($residential_state)
    {
        if (is_null($residential_state)) {
            throw new \InvalidArgumentException('non-nullable residential_state cannot be null');
        }
        $this->container['residential_state'] = $residential_state;

        return $this;
    }

    /**
     * Gets residential_postcode
     *
     * @return string|null
     */
    public function getResidentialPostcode()
    {
        return $this->container['residential_postcode'];
    }

    /**
     * Sets residential_postcode
     *
     * @param string|null $residential_postcode 
     *
     * @return self
     */
    public function setResidentialPostcode($residential_postcode)
    {
        if (is_null($residential_postcode)) {
            throw new \InvalidArgumentException('non-nullable residential_postcode cannot be null');
        }
        $this->container['residential_postcode'] = $residential_postcode;

        return $this;
    }

    /**
     * Gets residential_country
     *
     * @return string|null
     */
    public function getResidentialCountry()
    {
        return $this->container['residential_country'];
    }

    /**
     * Sets residential_country
     *
     * @param string|null $residential_country 
     *
     * @return self
     */
    public function setResidentialCountry($residential_country)
    {
        if (is_null($residential_country)) {
            throw new \InvalidArgumentException('non-nullable residential_country cannot be null');
        }
        $this->container['residential_country'] = $residential_country;

        return $this;
    }

    /**
     * Gets residential_country_id
     *
     * @return string|null
     */
    public function getResidentialCountryId()
    {
        return $this->container['residential_country_id'];
    }

    /**
     * Sets residential_country_id
     *
     * @param string|null $residential_country_id 
     *
     * @return self
     */
    public function setResidentialCountryId($residential_country_id)
    {
        if (is_null($residential_country_id)) {
            throw new \InvalidArgumentException('non-nullable residential_country_id cannot be null');
        }
        $this->container['residential_country_id'] = $residential_country_id;

        return $this;
    }

    /**
     * Gets is_overseas_residential_address
     *
     * @return bool|null
     */
    public function getIsOverseasResidentialAddress()
    {
        return $this->container['is_overseas_residential_address'];
    }

    /**
     * Sets is_overseas_residential_address
     *
     * @param bool|null $is_overseas_residential_address 
     *
     * @return self
     */
    public function setIsOverseasResidentialAddress($is_overseas_residential_address)
    {
        if (is_null($is_overseas_residential_address)) {
            throw new \InvalidArgumentException('non-nullable is_overseas_residential_address cannot be null');
        }
        $this->container['is_overseas_residential_address'] = $is_overseas_residential_address;

        return $this;
    }

    /**
     * Gets postal_street_address
     *
     * @return string|null
     */
    public function getPostalStreetAddress()
    {
        return $this->container['postal_street_address'];
    }

    /**
     * Sets postal_street_address
     *
     * @param string|null $postal_street_address 
     *
     * @return self
     */
    public function setPostalStreetAddress($postal_street_address)
    {
        if (is_null($postal_street_address)) {
            throw new \InvalidArgumentException('non-nullable postal_street_address cannot be null');
        }
        $this->container['postal_street_address'] = $postal_street_address;

        return $this;
    }

    /**
     * Gets postal_address_line2
     *
     * @return string|null
     */
    public function getPostalAddressLine2()
    {
        return $this->container['postal_address_line2'];
    }

    /**
     * Sets postal_address_line2
     *
     * @param string|null $postal_address_line2 
     *
     * @return self
     */
    public function setPostalAddressLine2($postal_address_line2)
    {
        if (is_null($postal_address_line2)) {
            throw new \InvalidArgumentException('non-nullable postal_address_line2 cannot be null');
        }
        $this->container['postal_address_line2'] = $postal_address_line2;

        return $this;
    }

    /**
     * Gets postal_suburb_id
     *
     * @return int|null
     */
    public function getPostalSuburbId()
    {
        return $this->container['postal_suburb_id'];
    }

    /**
     * Sets postal_suburb_id
     *
     * @param int|null $postal_suburb_id 
     *
     * @return self
     */
    public function setPostalSuburbId($postal_suburb_id)
    {
        if (is_null($postal_suburb_id)) {
            throw new \InvalidArgumentException('non-nullable postal_suburb_id cannot be null');
        }
        $this->container['postal_suburb_id'] = $postal_suburb_id;

        return $this;
    }

    /**
     * Gets postal_suburb
     *
     * @return string|null
     */
    public function getPostalSuburb()
    {
        return $this->container['postal_suburb'];
    }

    /**
     * Sets postal_suburb
     *
     * @param string|null $postal_suburb 
     *
     * @return self
     */
    public function setPostalSuburb($postal_suburb)
    {
        if (is_null($postal_suburb)) {
            throw new \InvalidArgumentException('non-nullable postal_suburb cannot be null');
        }
        $this->container['postal_suburb'] = $postal_suburb;

        return $this;
    }

    /**
     * Gets postal_state
     *
     * @return string|null
     */
    public function getPostalState()
    {
        return $this->container['postal_state'];
    }

    /**
     * Sets postal_state
     *
     * @param string|null $postal_state 
     *
     * @return self
     */
    public function setPostalState($postal_state)
    {
        if (is_null($postal_state)) {
            throw new \InvalidArgumentException('non-nullable postal_state cannot be null');
        }
        $this->container['postal_state'] = $postal_state;

        return $this;
    }

    /**
     * Gets postal_postcode
     *
     * @return string|null
     */
    public function getPostalPostcode()
    {
        return $this->container['postal_postcode'];
    }

    /**
     * Sets postal_postcode
     *
     * @param string|null $postal_postcode 
     *
     * @return self
     */
    public function setPostalPostcode($postal_postcode)
    {
        if (is_null($postal_postcode)) {
            throw new \InvalidArgumentException('non-nullable postal_postcode cannot be null');
        }
        $this->container['postal_postcode'] = $postal_postcode;

        return $this;
    }

    /**
     * Gets postal_country
     *
     * @return string|null
     */
    public function getPostalCountry()
    {
        return $this->container['postal_country'];
    }

    /**
     * Sets postal_country
     *
     * @param string|null $postal_country 
     *
     * @return self
     */
    public function setPostalCountry($postal_country)
    {
        if (is_null($postal_country)) {
            throw new \InvalidArgumentException('non-nullable postal_country cannot be null');
        }
        $this->container['postal_country'] = $postal_country;

        return $this;
    }

    /**
     * Gets postal_country_id
     *
     * @return string|null
     */
    public function getPostalCountryId()
    {
        return $this->container['postal_country_id'];
    }

    /**
     * Sets postal_country_id
     *
     * @param string|null $postal_country_id 
     *
     * @return self
     */
    public function setPostalCountryId($postal_country_id)
    {
        if (is_null($postal_country_id)) {
            throw new \InvalidArgumentException('non-nullable postal_country_id cannot be null');
        }
        $this->container['postal_country_id'] = $postal_country_id;

        return $this;
    }

    /**
     * Gets is_overseas_postal_address
     *
     * @return bool|null
     */
    public function getIsOverseasPostalAddress()
    {
        return $this->container['is_overseas_postal_address'];
    }

    /**
     * Sets is_overseas_postal_address
     *
     * @param bool|null $is_overseas_postal_address 
     *
     * @return self
     */
    public function setIsOverseasPostalAddress($is_overseas_postal_address)
    {
        if (is_null($is_overseas_postal_address)) {
            throw new \InvalidArgumentException('non-nullable is_overseas_postal_address cannot be null');
        }
        $this->container['is_overseas_postal_address'] = $is_overseas_postal_address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone 
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone 
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone 
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date 
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date 
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets is_terminated
     *
     * @return bool|null
     */
    public function getIsTerminated()
    {
        return $this->container['is_terminated'];
    }

    /**
     * Sets is_terminated
     *
     * @param bool|null $is_terminated 
     *
     * @return self
     */
    public function setIsTerminated($is_terminated)
    {
        if (is_null($is_terminated)) {
            throw new \InvalidArgumentException('non-nullable is_terminated cannot be null');
        }
        $this->container['is_terminated'] = $is_terminated;

        return $this;
    }

    /**
     * Gets is_anonymised
     *
     * @return bool|null
     */
    public function getIsAnonymised()
    {
        return $this->container['is_anonymised'];
    }

    /**
     * Sets is_anonymised
     *
     * @param bool|null $is_anonymised 
     *
     * @return self
     */
    public function setIsAnonymised($is_anonymised)
    {
        if (is_null($is_anonymised)) {
            throw new \InvalidArgumentException('non-nullable is_anonymised cannot be null');
        }
        $this->container['is_anonymised'] = $is_anonymised;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return int|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param int|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets is_postal_address_same_as_residential
     *
     * @return bool|null
     */
    public function getIsPostalAddressSameAsResidential()
    {
        return $this->container['is_postal_address_same_as_residential'];
    }

    /**
     * Sets is_postal_address_same_as_residential
     *
     * @param bool|null $is_postal_address_same_as_residential 
     *
     * @return self
     */
    public function setIsPostalAddressSameAsResidential($is_postal_address_same_as_residential)
    {
        if (is_null($is_postal_address_same_as_residential)) {
            throw new \InvalidArgumentException('non-nullable is_postal_address_same_as_residential cannot be null');
        }
        $this->container['is_postal_address_same_as_residential'] = $is_postal_address_same_as_residential;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return \OpenAPI\Client\Model\TitleViewModel[]|null
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param \OpenAPI\Client\Model\TitleViewModel[]|null $titles 
     *
     * @return self
     */
    public function setTitles($titles)
    {
        if (is_null($titles)) {
            throw new \InvalidArgumentException('non-nullable titles cannot be null');
        }
        $this->container['titles'] = $titles;

        return $this;
    }

    /**
     * Gets edit_mode
     *
     * @return string|null
     */
    public function getEditMode()
    {
        return $this->container['edit_mode'];
    }

    /**
     * Sets edit_mode
     *
     * @param string|null $edit_mode 
     *
     * @return self
     */
    public function setEditMode($edit_mode)
    {
        if (is_null($edit_mode)) {
            throw new \InvalidArgumentException('non-nullable edit_mode cannot be null');
        }
        $allowedValues = $this->getEditModeAllowableValues();
        if (!in_array($edit_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'edit_mode', must be one of '%s'",
                    $edit_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edit_mode'] = $edit_mode;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit 
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets tags_string
     *
     * @return string|null
     */
    public function getTagsString()
    {
        return $this->container['tags_string'];
    }

    /**
     * Sets tags_string
     *
     * @param string|null $tags_string 
     *
     * @return self
     */
    public function setTagsString($tags_string)
    {
        if (is_null($tags_string)) {
            throw new \InvalidArgumentException('non-nullable tags_string cannot be null');
        }
        $this->container['tags_string'] = $tags_string;

        return $this;
    }

    /**
     * Gets all_tags
     *
     * @return string[]|null
     */
    public function getAllTags()
    {
        return $this->container['all_tags'];
    }

    /**
     * Sets all_tags
     *
     * @param string[]|null $all_tags 
     *
     * @return self
     */
    public function setAllTags($all_tags)
    {
        if (is_null($all_tags)) {
            throw new \InvalidArgumentException('non-nullable all_tags cannot be null');
        }
        $this->container['all_tags'] = $all_tags;

        return $this;
    }

    /**
     * Gets timesheet_setting
     *
     * @return string|null
     */
    public function getTimesheetSetting()
    {
        return $this->container['timesheet_setting'];
    }

    /**
     * Sets timesheet_setting
     *
     * @param string|null $timesheet_setting 
     *
     * @return self
     */
    public function setTimesheetSetting($timesheet_setting)
    {
        if (is_null($timesheet_setting)) {
            throw new \InvalidArgumentException('non-nullable timesheet_setting cannot be null');
        }
        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!in_array($timesheet_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                    $timesheet_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_setting'] = $timesheet_setting;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete 
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets has_profile_image
     *
     * @return bool|null
     */
    public function getHasProfileImage()
    {
        return $this->container['has_profile_image'];
    }

    /**
     * Sets has_profile_image
     *
     * @param bool|null $has_profile_image 
     *
     * @return self
     */
    public function setHasProfileImage($has_profile_image)
    {
        if (is_null($has_profile_image)) {
            throw new \InvalidArgumentException('non-nullable has_profile_image cannot be null');
        }
        $this->container['has_profile_image'] = $has_profile_image;

        return $this;
    }

    /**
     * Gets can_edit_profile_image
     *
     * @return bool|null
     */
    public function getCanEditProfileImage()
    {
        return $this->container['can_edit_profile_image'];
    }

    /**
     * Sets can_edit_profile_image
     *
     * @param bool|null $can_edit_profile_image 
     *
     * @return self
     */
    public function setCanEditProfileImage($can_edit_profile_image)
    {
        if (is_null($can_edit_profile_image)) {
            throw new \InvalidArgumentException('non-nullable can_edit_profile_image cannot be null');
        }
        $this->container['can_edit_profile_image'] = $can_edit_profile_image;

        return $this;
    }

    /**
     * Gets bounced_email
     *
     * @return bool|null
     */
    public function getBouncedEmail()
    {
        return $this->container['bounced_email'];
    }

    /**
     * Sets bounced_email
     *
     * @param bool|null $bounced_email 
     *
     * @return self
     */
    public function setBouncedEmail($bounced_email)
    {
        if (is_null($bounced_email)) {
            throw new \InvalidArgumentException('non-nullable bounced_email cannot be null');
        }
        $this->container['bounced_email'] = $bounced_email;

        return $this;
    }

    /**
     * Gets ird_details_current
     *
     * @return bool|null
     */
    public function getIrdDetailsCurrent()
    {
        return $this->container['ird_details_current'];
    }

    /**
     * Sets ird_details_current
     *
     * @param bool|null $ird_details_current 
     *
     * @return self
     */
    public function setIrdDetailsCurrent($ird_details_current)
    {
        if (is_null($ird_details_current)) {
            throw new \InvalidArgumentException('non-nullable ird_details_current cannot be null');
        }
        $this->container['ird_details_current'] = $ird_details_current;

        return $this;
    }

    /**
     * Gets ird_settings_enabled
     *
     * @return bool|null
     */
    public function getIrdSettingsEnabled()
    {
        return $this->container['ird_settings_enabled'];
    }

    /**
     * Sets ird_settings_enabled
     *
     * @param bool|null $ird_settings_enabled 
     *
     * @return self
     */
    public function setIrdSettingsEnabled($ird_settings_enabled)
    {
        if (is_null($ird_settings_enabled)) {
            throw new \InvalidArgumentException('non-nullable ird_settings_enabled cannot be null');
        }
        $this->container['ird_settings_enabled'] = $ird_settings_enabled;

        return $this;
    }

    /**
     * Gets has_connected_devices
     *
     * @return bool|null
     */
    public function getHasConnectedDevices()
    {
        return $this->container['has_connected_devices'];
    }

    /**
     * Sets has_connected_devices
     *
     * @param bool|null $has_connected_devices 
     *
     * @return self
     */
    public function setHasConnectedDevices($has_connected_devices)
    {
        if (is_null($has_connected_devices)) {
            throw new \InvalidArgumentException('non-nullable has_connected_devices cannot be null');
        }
        $this->container['has_connected_devices'] = $has_connected_devices;

        return $this;
    }

    /**
     * Gets address_types
     *
     * @return \OpenAPI\Client\Model\SelectListItem[]|null
     */
    public function getAddressTypes()
    {
        return $this->container['address_types'];
    }

    /**
     * Sets address_types
     *
     * @param \OpenAPI\Client\Model\SelectListItem[]|null $address_types 
     *
     * @return self
     */
    public function setAddressTypes($address_types)
    {
        if (is_null($address_types)) {
            throw new \InvalidArgumentException('non-nullable address_types cannot be null');
        }
        $this->container['address_types'] = $address_types;

        return $this;
    }

    /**
     * Gets residential_address_type
     *
     * @return string|null
     */
    public function getResidentialAddressType()
    {
        return $this->container['residential_address_type'];
    }

    /**
     * Sets residential_address_type
     *
     * @param string|null $residential_address_type 
     *
     * @return self
     */
    public function setResidentialAddressType($residential_address_type)
    {
        if (is_null($residential_address_type)) {
            throw new \InvalidArgumentException('non-nullable residential_address_type cannot be null');
        }
        $allowedValues = $this->getResidentialAddressTypeAllowableValues();
        if (!in_array($residential_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'residential_address_type', must be one of '%s'",
                    $residential_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['residential_address_type'] = $residential_address_type;

        return $this;
    }

    /**
     * Gets postal_address_type
     *
     * @return string|null
     */
    public function getPostalAddressType()
    {
        return $this->container['postal_address_type'];
    }

    /**
     * Sets postal_address_type
     *
     * @param string|null $postal_address_type 
     *
     * @return self
     */
    public function setPostalAddressType($postal_address_type)
    {
        if (is_null($postal_address_type)) {
            throw new \InvalidArgumentException('non-nullable postal_address_type cannot be null');
        }
        $allowedValues = $this->getPostalAddressTypeAllowableValues();
        if (!in_array($postal_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'postal_address_type', must be one of '%s'",
                    $postal_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['postal_address_type'] = $postal_address_type;

        return $this;
    }

    /**
     * Gets residential_block_number
     *
     * @return string|null
     */
    public function getResidentialBlockNumber()
    {
        return $this->container['residential_block_number'];
    }

    /**
     * Sets residential_block_number
     *
     * @param string|null $residential_block_number 
     *
     * @return self
     */
    public function setResidentialBlockNumber($residential_block_number)
    {
        if (is_null($residential_block_number)) {
            throw new \InvalidArgumentException('non-nullable residential_block_number cannot be null');
        }
        $this->container['residential_block_number'] = $residential_block_number;

        return $this;
    }

    /**
     * Gets postal_block_number
     *
     * @return string|null
     */
    public function getPostalBlockNumber()
    {
        return $this->container['postal_block_number'];
    }

    /**
     * Sets postal_block_number
     *
     * @param string|null $postal_block_number 
     *
     * @return self
     */
    public function setPostalBlockNumber($postal_block_number)
    {
        if (is_null($postal_block_number)) {
            throw new \InvalidArgumentException('non-nullable postal_block_number cannot be null');
        }
        $this->container['postal_block_number'] = $postal_block_number;

        return $this;
    }

    /**
     * Gets residential_level_number
     *
     * @return string|null
     */
    public function getResidentialLevelNumber()
    {
        return $this->container['residential_level_number'];
    }

    /**
     * Sets residential_level_number
     *
     * @param string|null $residential_level_number 
     *
     * @return self
     */
    public function setResidentialLevelNumber($residential_level_number)
    {
        if (is_null($residential_level_number)) {
            throw new \InvalidArgumentException('non-nullable residential_level_number cannot be null');
        }
        $this->container['residential_level_number'] = $residential_level_number;

        return $this;
    }

    /**
     * Gets postal_level_number
     *
     * @return string|null
     */
    public function getPostalLevelNumber()
    {
        return $this->container['postal_level_number'];
    }

    /**
     * Sets postal_level_number
     *
     * @param string|null $postal_level_number 
     *
     * @return self
     */
    public function setPostalLevelNumber($postal_level_number)
    {
        if (is_null($postal_level_number)) {
            throw new \InvalidArgumentException('non-nullable postal_level_number cannot be null');
        }
        $this->container['postal_level_number'] = $postal_level_number;

        return $this;
    }

    /**
     * Gets residential_unit_number
     *
     * @return string|null
     */
    public function getResidentialUnitNumber()
    {
        return $this->container['residential_unit_number'];
    }

    /**
     * Sets residential_unit_number
     *
     * @param string|null $residential_unit_number 
     *
     * @return self
     */
    public function setResidentialUnitNumber($residential_unit_number)
    {
        if (is_null($residential_unit_number)) {
            throw new \InvalidArgumentException('non-nullable residential_unit_number cannot be null');
        }
        $this->container['residential_unit_number'] = $residential_unit_number;

        return $this;
    }

    /**
     * Gets postal_unit_number
     *
     * @return string|null
     */
    public function getPostalUnitNumber()
    {
        return $this->container['postal_unit_number'];
    }

    /**
     * Sets postal_unit_number
     *
     * @param string|null $postal_unit_number 
     *
     * @return self
     */
    public function setPostalUnitNumber($postal_unit_number)
    {
        if (is_null($postal_unit_number)) {
            throw new \InvalidArgumentException('non-nullable postal_unit_number cannot be null');
        }
        $this->container['postal_unit_number'] = $postal_unit_number;

        return $this;
    }

    /**
     * Gets residential_street_name
     *
     * @return string|null
     */
    public function getResidentialStreetName()
    {
        return $this->container['residential_street_name'];
    }

    /**
     * Sets residential_street_name
     *
     * @param string|null $residential_street_name 
     *
     * @return self
     */
    public function setResidentialStreetName($residential_street_name)
    {
        if (is_null($residential_street_name)) {
            throw new \InvalidArgumentException('non-nullable residential_street_name cannot be null');
        }
        $this->container['residential_street_name'] = $residential_street_name;

        return $this;
    }

    /**
     * Gets postal_street_name
     *
     * @return string|null
     */
    public function getPostalStreetName()
    {
        return $this->container['postal_street_name'];
    }

    /**
     * Sets postal_street_name
     *
     * @param string|null $postal_street_name 
     *
     * @return self
     */
    public function setPostalStreetName($postal_street_name)
    {
        if (is_null($postal_street_name)) {
            throw new \InvalidArgumentException('non-nullable postal_street_name cannot be null');
        }
        $this->container['postal_street_name'] = $postal_street_name;

        return $this;
    }

    /**
     * Gets residential_address_line3
     *
     * @return string|null
     */
    public function getResidentialAddressLine3()
    {
        return $this->container['residential_address_line3'];
    }

    /**
     * Sets residential_address_line3
     *
     * @param string|null $residential_address_line3 
     *
     * @return self
     */
    public function setResidentialAddressLine3($residential_address_line3)
    {
        if (is_null($residential_address_line3)) {
            throw new \InvalidArgumentException('non-nullable residential_address_line3 cannot be null');
        }
        $this->container['residential_address_line3'] = $residential_address_line3;

        return $this;
    }

    /**
     * Gets postal_address_line3
     *
     * @return string|null
     */
    public function getPostalAddressLine3()
    {
        return $this->container['postal_address_line3'];
    }

    /**
     * Sets postal_address_line3
     *
     * @param string|null $postal_address_line3 
     *
     * @return self
     */
    public function setPostalAddressLine3($postal_address_line3)
    {
        if (is_null($postal_address_line3)) {
            throw new \InvalidArgumentException('non-nullable postal_address_line3 cannot be null');
        }
        $this->container['postal_address_line3'] = $postal_address_line3;

        return $this;
    }

    /**
     * Gets termination_reason
     *
     * @return string|null
     */
    public function getTerminationReason()
    {
        return $this->container['termination_reason'];
    }

    /**
     * Sets termination_reason
     *
     * @param string|null $termination_reason 
     *
     * @return self
     */
    public function setTerminationReason($termination_reason)
    {
        if (is_null($termination_reason)) {
            throw new \InvalidArgumentException('non-nullable termination_reason cannot be null');
        }
        $allowedValues = $this->getTerminationReasonAllowableValues();
        if (!in_array($termination_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'termination_reason', must be one of '%s'",
                    $termination_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['termination_reason'] = $termination_reason;

        return $this;
    }

    /**
     * Gets termination_description
     *
     * @return string|null
     */
    public function getTerminationDescription()
    {
        return $this->container['termination_description'];
    }

    /**
     * Sets termination_description
     *
     * @param string|null $termination_description 
     *
     * @return self
     */
    public function setTerminationDescription($termination_description)
    {
        if (is_null($termination_description)) {
            throw new \InvalidArgumentException('non-nullable termination_description cannot be null');
        }
        $this->container['termination_description'] = $termination_description;

        return $this;
    }

    /**
     * Gets termination_reasons
     *
     * @return \OpenAPI\Client\Model\NumericSelectListItem[]|null
     */
    public function getTerminationReasons()
    {
        return $this->container['termination_reasons'];
    }

    /**
     * Sets termination_reasons
     *
     * @param \OpenAPI\Client\Model\NumericSelectListItem[]|null $termination_reasons 
     *
     * @return self
     */
    public function setTerminationReasons($termination_reasons)
    {
        if (is_null($termination_reasons)) {
            throw new \InvalidArgumentException('non-nullable termination_reasons cannot be null');
        }
        $this->container['termination_reasons'] = $termination_reasons;

        return $this;
    }

    /**
     * Gets has_sole_user
     *
     * @return bool|null
     */
    public function getHasSoleUser()
    {
        return $this->container['has_sole_user'];
    }

    /**
     * Sets has_sole_user
     *
     * @param bool|null $has_sole_user 
     *
     * @return self
     */
    public function setHasSoleUser($has_sole_user)
    {
        if (is_null($has_sole_user)) {
            throw new \InvalidArgumentException('non-nullable has_sole_user cannot be null');
        }
        $this->container['has_sole_user'] = $has_sole_user;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \OpenAPI\Client\Model\EmployeeDetailsFields|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \OpenAPI\Client\Model\EmployeeDetailsFields|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets pending_email_update
     *
     * @return bool|null
     */
    public function getPendingEmailUpdate()
    {
        return $this->container['pending_email_update'];
    }

    /**
     * Sets pending_email_update
     *
     * @param bool|null $pending_email_update 
     *
     * @return self
     */
    public function setPendingEmailUpdate($pending_email_update)
    {
        if (is_null($pending_email_update)) {
            throw new \InvalidArgumentException('non-nullable pending_email_update cannot be null');
        }
        $this->container['pending_email_update'] = $pending_email_update;

        return $this;
    }

    /**
     * Gets new_email
     *
     * @return string|null
     */
    public function getNewEmail()
    {
        return $this->container['new_email'];
    }

    /**
     * Sets new_email
     *
     * @param string|null $new_email 
     *
     * @return self
     */
    public function setNewEmail($new_email)
    {
        if (is_null($new_email)) {
            throw new \InvalidArgumentException('non-nullable new_email cannot be null');
        }
        $this->container['new_email'] = $new_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


