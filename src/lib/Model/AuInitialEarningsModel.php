<?php
/**
 * AuInitialEarningsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuInitialEarningsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuInitialEarningsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuInitialEarningsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_category_type' => 'string',
        'pay_category_id' => 'int',
        'is_standard_pay_category' => 'bool',
        'name' => 'string',
        'amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_category_type' => null,
        'pay_category_id' => 'int32',
        'is_standard_pay_category' => null,
        'name' => null,
        'amount' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_category_type' => false,
		'pay_category_id' => false,
		'is_standard_pay_category' => false,
		'name' => false,
		'amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_category_type' => 'payCategoryType',
        'pay_category_id' => 'payCategoryId',
        'is_standard_pay_category' => 'isStandardPayCategory',
        'name' => 'name',
        'amount' => 'amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_category_type' => 'setPayCategoryType',
        'pay_category_id' => 'setPayCategoryId',
        'is_standard_pay_category' => 'setIsStandardPayCategory',
        'name' => 'setName',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_category_type' => 'getPayCategoryType',
        'pay_category_id' => 'getPayCategoryId',
        'is_standard_pay_category' => 'getIsStandardPayCategory',
        'name' => 'getName',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAY_CATEGORY_TYPE_STANDARD = 'Standard';
    public const PAY_CATEGORY_TYPE_LEAVE_LOADING = 'LeaveLoading';
    public const PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_PAYMENT = 'GenuineRedundancyLeavePayment';
    public const PAY_CATEGORY_TYPE_OPENING_BALANCE_ALLOWANCES = 'OpeningBalanceAllowances';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_R_TAXABLE = 'EtpTypeRTaxable';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_R_TAX_FREE = 'EtpTypeRTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_O_TAXABLE = 'EtpTypeOTaxable';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_O_TAX_FREE = 'EtpTypeOTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_LUMP_SUM_D = 'EtpLumpSumD';
    public const PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_LOADING = 'GenuineRedundancyLeaveLoading';
    public const PAY_CATEGORY_TYPE_METHOD_B2_ADDITIONAL_PAYMENTS_OPENING_BALANCE = 'MethodB2AdditionalPaymentsOpeningBalance';
    public const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAXABLE = 'EtpSuperableTypeOTaxable';
    public const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAX_FREE = 'EtpSuperableTypeOTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_O_UNUSED_LEAVE_PAYMENT = 'EtpTypeOUnusedLeavePayment';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_S_TAXABLE = 'EtpTypeSTaxable';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_S_TAX_FREE = 'EtpTypeSTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_P_TAXABLE = 'EtpTypePTaxable';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_P_TAX_FREE = 'EtpTypePTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAXABLE = 'EtpSuperableTypePTaxable';
    public const PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAX_FREE = 'EtpSuperableTypePTaxFree';
    public const PAY_CATEGORY_TYPE_ETP_TYPE_P_UNUSED_LEAVE_PAYMENT = 'EtpTypePUnusedLeavePayment';
    public const PAY_CATEGORY_TYPE_JOB_KEEPER_TIER = 'JobKeeperTier';
    public const PAY_CATEGORY_TYPE_JOB_KEEPER_CANCEL_TIER = 'JobKeeperCancelTier';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_NOMINATION = 'JobMakerNomination';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_RENOMINATION = 'JobMakerRenomination';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_PERIOD = 'JobMakerPeriod';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_NOMINATION = 'JobMakerCancelNomination';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_RENOMINATION = 'JobMakerCancelRenomination';
    public const PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_PERIOD = 'JobMakerCancelPeriod';
    public const PAY_CATEGORY_TYPE_NORMAL_TERMINATION_LEAVE_LOADING = 'NormalTerminationLeaveLoading';
    public const PAY_CATEGORY_TYPE_PUBLIC_HOLIDAY_WORKED = 'PublicHolidayWorked';
    public const PAY_CATEGORY_TYPE_PUBLIC_HOLIDAY_NOT_WORKED = 'PublicHolidayNotWorked';
    public const PAY_CATEGORY_TYPE_UNUSED_LEAVE_PAYMENT_NORMAL_TERMINATION = 'UnusedLeavePaymentNormalTermination';
    public const PAY_CATEGORY_TYPE_BACK_PAYMENT = 'BackPayment';
    public const PAY_CATEGORY_TYPE_PAID_FAMILY_AND_DOMESTIC_VIOLENCE_LEAVE = 'PaidFamilyAndDomesticViolenceLeave';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCategoryTypeAllowableValues()
    {
        return [
            self::PAY_CATEGORY_TYPE_STANDARD,
            self::PAY_CATEGORY_TYPE_LEAVE_LOADING,
            self::PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_OPENING_BALANCE_ALLOWANCES,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_R_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_R_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_LUMP_SUM_D,
            self::PAY_CATEGORY_TYPE_GENUINE_REDUNDANCY_LEAVE_LOADING,
            self::PAY_CATEGORY_TYPE_METHOD_B2_ADDITIONAL_PAYMENTS_OPENING_BALANCE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_O_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_O_UNUSED_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_S_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_S_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAXABLE,
            self::PAY_CATEGORY_TYPE_ETP_SUPERABLE_TYPE_P_TAX_FREE,
            self::PAY_CATEGORY_TYPE_ETP_TYPE_P_UNUSED_LEAVE_PAYMENT,
            self::PAY_CATEGORY_TYPE_JOB_KEEPER_TIER,
            self::PAY_CATEGORY_TYPE_JOB_KEEPER_CANCEL_TIER,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_NOMINATION,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_RENOMINATION,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_PERIOD,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_NOMINATION,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_RENOMINATION,
            self::PAY_CATEGORY_TYPE_JOB_MAKER_CANCEL_PERIOD,
            self::PAY_CATEGORY_TYPE_NORMAL_TERMINATION_LEAVE_LOADING,
            self::PAY_CATEGORY_TYPE_PUBLIC_HOLIDAY_WORKED,
            self::PAY_CATEGORY_TYPE_PUBLIC_HOLIDAY_NOT_WORKED,
            self::PAY_CATEGORY_TYPE_UNUSED_LEAVE_PAYMENT_NORMAL_TERMINATION,
            self::PAY_CATEGORY_TYPE_BACK_PAYMENT,
            self::PAY_CATEGORY_TYPE_PAID_FAMILY_AND_DOMESTIC_VIOLENCE_LEAVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pay_category_type', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('is_standard_pay_category', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPayCategoryTypeAllowableValues();
        if (!is_null($this->container['pay_category_type']) && !in_array($this->container['pay_category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_category_type', must be one of '%s'",
                $this->container['pay_category_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_category_type
     *
     * @return string|null
     */
    public function getPayCategoryType()
    {
        return $this->container['pay_category_type'];
    }

    /**
     * Sets pay_category_type
     *
     * @param string|null $pay_category_type <p><i>Note:</i> The amounts specified for any ETP-related pay categories (with the exception of Lump Sum D) must represent the total of the corresponding amounts supplied in the etps collection
     *
     * @return self
     */
    public function setPayCategoryType($pay_category_type)
    {
        if (is_null($pay_category_type)) {
            throw new \InvalidArgumentException('non-nullable pay_category_type cannot be null');
        }
        $allowedValues = $this->getPayCategoryTypeAllowableValues();
        if (!in_array($pay_category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_category_type', must be one of '%s'",
                    $pay_category_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_category_type'] = $pay_category_type;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets is_standard_pay_category
     *
     * @return bool|null
     */
    public function getIsStandardPayCategory()
    {
        return $this->container['is_standard_pay_category'];
    }

    /**
     * Sets is_standard_pay_category
     *
     * @param bool|null $is_standard_pay_category 
     *
     * @return self
     */
    public function setIsStandardPayCategory($is_standard_pay_category)
    {
        if (is_null($is_standard_pay_category)) {
            throw new \InvalidArgumentException('non-nullable is_standard_pay_category cannot be null');
        }
        $this->container['is_standard_pay_category'] = $is_standard_pay_category;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


