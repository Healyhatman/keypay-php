<?php
/**
 * RosterShiftFilterModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RosterShiftFilterModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RosterShiftFilterModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RosterShiftFilterModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'shift_status' => 'string',
        'shift_statuses' => 'string[]',
        'selected_locations' => 'string[]',
        'selected_employees' => 'string[]',
        'selected_roles' => 'string[]',
        'employee_id' => 'int',
        'location_id' => 'int',
        'employee_group_id' => 'int',
        'unassigned_shifts_only' => 'bool',
        'select_all_roles' => 'bool',
        'exclude_shifts_overlapping_from_date' => 'bool',
        'page_size' => 'int',
        'current_page' => 'int',
        'include_warnings' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'shift_status' => null,
        'shift_statuses' => null,
        'selected_locations' => null,
        'selected_employees' => null,
        'selected_roles' => null,
        'employee_id' => 'int32',
        'location_id' => 'int32',
        'employee_group_id' => 'int32',
        'unassigned_shifts_only' => null,
        'select_all_roles' => null,
        'exclude_shifts_overlapping_from_date' => null,
        'page_size' => 'int32',
        'current_page' => 'int32',
        'include_warnings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'shift_status' => 'shiftStatus',
        'shift_statuses' => 'shiftStatuses',
        'selected_locations' => 'selectedLocations',
        'selected_employees' => 'selectedEmployees',
        'selected_roles' => 'selectedRoles',
        'employee_id' => 'employeeId',
        'location_id' => 'locationId',
        'employee_group_id' => 'employeeGroupId',
        'unassigned_shifts_only' => 'unassignedShiftsOnly',
        'select_all_roles' => 'selectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'excludeShiftsOverlappingFromDate',
        'page_size' => 'pageSize',
        'current_page' => 'currentPage',
        'include_warnings' => 'includeWarnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'shift_status' => 'setShiftStatus',
        'shift_statuses' => 'setShiftStatuses',
        'selected_locations' => 'setSelectedLocations',
        'selected_employees' => 'setSelectedEmployees',
        'selected_roles' => 'setSelectedRoles',
        'employee_id' => 'setEmployeeId',
        'location_id' => 'setLocationId',
        'employee_group_id' => 'setEmployeeGroupId',
        'unassigned_shifts_only' => 'setUnassignedShiftsOnly',
        'select_all_roles' => 'setSelectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'setExcludeShiftsOverlappingFromDate',
        'page_size' => 'setPageSize',
        'current_page' => 'setCurrentPage',
        'include_warnings' => 'setIncludeWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'shift_status' => 'getShiftStatus',
        'shift_statuses' => 'getShiftStatuses',
        'selected_locations' => 'getSelectedLocations',
        'selected_employees' => 'getSelectedEmployees',
        'selected_roles' => 'getSelectedRoles',
        'employee_id' => 'getEmployeeId',
        'location_id' => 'getLocationId',
        'employee_group_id' => 'getEmployeeGroupId',
        'unassigned_shifts_only' => 'getUnassignedShiftsOnly',
        'select_all_roles' => 'getSelectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'getExcludeShiftsOverlappingFromDate',
        'page_size' => 'getPageSize',
        'current_page' => 'getCurrentPage',
        'include_warnings' => 'getIncludeWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIFT_STATUS_ALL = 'All';
    const SHIFT_STATUS_PUBLISHED = 'Published';
    const SHIFT_STATUS_UNPUBLISHED = 'Unpublished';
    const SHIFT_STATUS_ACCEPTED = 'Accepted';
    const SHIFT_STATUSES_ALL = 'All';
    const SHIFT_STATUSES_PUBLISHED = 'Published';
    const SHIFT_STATUSES_UNPUBLISHED = 'Unpublished';
    const SHIFT_STATUSES_ACCEPTED = 'Accepted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftStatusAllowableValues()
    {
        return [
            self::SHIFT_STATUS_ALL,
            self::SHIFT_STATUS_PUBLISHED,
            self::SHIFT_STATUS_UNPUBLISHED,
            self::SHIFT_STATUS_ACCEPTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftStatusesAllowableValues()
    {
        return [
            self::SHIFT_STATUSES_ALL,
            self::SHIFT_STATUSES_PUBLISHED,
            self::SHIFT_STATUSES_UNPUBLISHED,
            self::SHIFT_STATUSES_ACCEPTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_date'] = isset($data['from_date']) ? $data['from_date'] : null;
        $this->container['to_date'] = isset($data['to_date']) ? $data['to_date'] : null;
        $this->container['shift_status'] = isset($data['shift_status']) ? $data['shift_status'] : null;
        $this->container['shift_statuses'] = isset($data['shift_statuses']) ? $data['shift_statuses'] : null;
        $this->container['selected_locations'] = isset($data['selected_locations']) ? $data['selected_locations'] : null;
        $this->container['selected_employees'] = isset($data['selected_employees']) ? $data['selected_employees'] : null;
        $this->container['selected_roles'] = isset($data['selected_roles']) ? $data['selected_roles'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['employee_group_id'] = isset($data['employee_group_id']) ? $data['employee_group_id'] : null;
        $this->container['unassigned_shifts_only'] = isset($data['unassigned_shifts_only']) ? $data['unassigned_shifts_only'] : null;
        $this->container['select_all_roles'] = isset($data['select_all_roles']) ? $data['select_all_roles'] : null;
        $this->container['exclude_shifts_overlapping_from_date'] = isset($data['exclude_shifts_overlapping_from_date']) ? $data['exclude_shifts_overlapping_from_date'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['current_page'] = isset($data['current_page']) ? $data['current_page'] : null;
        $this->container['include_warnings'] = isset($data['include_warnings']) ? $data['include_warnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShiftStatusAllowableValues();
        if (!is_null($this->container['shift_status']) && !in_array($this->container['shift_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shift_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_date
     *
     * @return \DateTime
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime $from_date 
     *
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime $to_date 
     *
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets shift_status
     *
     * @return string
     */
    public function getShiftStatus()
    {
        return $this->container['shift_status'];
    }

    /**
     * Sets shift_status
     *
     * @param string $shift_status 
     *
     * @return $this
     */
    public function setShiftStatus($shift_status)
    {
        $allowedValues = $this->getShiftStatusAllowableValues();
        if (!is_null($shift_status) && !in_array($shift_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shift_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_status'] = $shift_status;

        return $this;
    }

    /**
     * Gets shift_statuses
     *
     * @return string[]
     */
    public function getShiftStatuses()
    {
        return $this->container['shift_statuses'];
    }

    /**
     * Sets shift_statuses
     *
     * @param string[] $shift_statuses 
     *
     * @return $this
     */
    public function setShiftStatuses($shift_statuses)
    {
        $allowedValues = $this->getShiftStatusesAllowableValues();
        if (!is_null($shift_statuses) && array_diff($shift_statuses, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shift_statuses', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_statuses'] = $shift_statuses;

        return $this;
    }

    /**
     * Gets selected_locations
     *
     * @return string[]
     */
    public function getSelectedLocations()
    {
        return $this->container['selected_locations'];
    }

    /**
     * Sets selected_locations
     *
     * @param string[] $selected_locations 
     *
     * @return $this
     */
    public function setSelectedLocations($selected_locations)
    {
        $this->container['selected_locations'] = $selected_locations;

        return $this;
    }

    /**
     * Gets selected_employees
     *
     * @return string[]
     */
    public function getSelectedEmployees()
    {
        return $this->container['selected_employees'];
    }

    /**
     * Sets selected_employees
     *
     * @param string[] $selected_employees 
     *
     * @return $this
     */
    public function setSelectedEmployees($selected_employees)
    {
        $this->container['selected_employees'] = $selected_employees;

        return $this;
    }

    /**
     * Gets selected_roles
     *
     * @return string[]
     */
    public function getSelectedRoles()
    {
        return $this->container['selected_roles'];
    }

    /**
     * Sets selected_roles
     *
     * @param string[] $selected_roles 
     *
     * @return $this
     */
    public function setSelectedRoles($selected_roles)
    {
        $this->container['selected_roles'] = $selected_roles;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id 
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets employee_group_id
     *
     * @return int
     */
    public function getEmployeeGroupId()
    {
        return $this->container['employee_group_id'];
    }

    /**
     * Sets employee_group_id
     *
     * @param int $employee_group_id 
     *
     * @return $this
     */
    public function setEmployeeGroupId($employee_group_id)
    {
        $this->container['employee_group_id'] = $employee_group_id;

        return $this;
    }

    /**
     * Gets unassigned_shifts_only
     *
     * @return bool
     */
    public function getUnassignedShiftsOnly()
    {
        return $this->container['unassigned_shifts_only'];
    }

    /**
     * Sets unassigned_shifts_only
     *
     * @param bool $unassigned_shifts_only 
     *
     * @return $this
     */
    public function setUnassignedShiftsOnly($unassigned_shifts_only)
    {
        $this->container['unassigned_shifts_only'] = $unassigned_shifts_only;

        return $this;
    }

    /**
     * Gets select_all_roles
     *
     * @return bool
     */
    public function getSelectAllRoles()
    {
        return $this->container['select_all_roles'];
    }

    /**
     * Sets select_all_roles
     *
     * @param bool $select_all_roles 
     *
     * @return $this
     */
    public function setSelectAllRoles($select_all_roles)
    {
        $this->container['select_all_roles'] = $select_all_roles;

        return $this;
    }

    /**
     * Gets exclude_shifts_overlapping_from_date
     *
     * @return bool
     */
    public function getExcludeShiftsOverlappingFromDate()
    {
        return $this->container['exclude_shifts_overlapping_from_date'];
    }

    /**
     * Sets exclude_shifts_overlapping_from_date
     *
     * @param bool $exclude_shifts_overlapping_from_date 
     *
     * @return $this
     */
    public function setExcludeShiftsOverlappingFromDate($exclude_shifts_overlapping_from_date)
    {
        $this->container['exclude_shifts_overlapping_from_date'] = $exclude_shifts_overlapping_from_date;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size 
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int $current_page 
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets include_warnings
     *
     * @return bool
     */
    public function getIncludeWarnings()
    {
        return $this->container['include_warnings'];
    }

    /**
     * Sets include_warnings
     *
     * @param bool $include_warnings 
     *
     * @return $this
     */
    public function setIncludeWarnings($include_warnings)
    {
        $this->container['include_warnings'] = $include_warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


