<?php
/**
 * RosterShiftFilterModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RosterShiftFilterModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RosterShiftFilterModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RosterShiftFilterModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'shift_status' => 'string',
        'shift_statuses' => 'string[]',
        'selected_locations' => 'string[]',
        'selected_employees' => 'string[]',
        'selected_roles' => 'string[]',
        'employee_id' => 'int',
        'location_id' => 'int',
        'employee_group_id' => 'int',
        'unassigned_shifts_only' => 'bool',
        'select_all_roles' => 'bool',
        'exclude_shifts_overlapping_from_date' => 'bool',
        'page_size' => 'int',
        'current_page' => 'int',
        'include_warnings' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'shift_status' => null,
        'shift_statuses' => null,
        'selected_locations' => null,
        'selected_employees' => null,
        'selected_roles' => null,
        'employee_id' => 'int32',
        'location_id' => 'int32',
        'employee_group_id' => 'int32',
        'unassigned_shifts_only' => null,
        'select_all_roles' => null,
        'exclude_shifts_overlapping_from_date' => null,
        'page_size' => 'int32',
        'current_page' => 'int32',
        'include_warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from_date' => false,
		'to_date' => false,
		'shift_status' => false,
		'shift_statuses' => false,
		'selected_locations' => false,
		'selected_employees' => false,
		'selected_roles' => false,
		'employee_id' => false,
		'location_id' => false,
		'employee_group_id' => false,
		'unassigned_shifts_only' => false,
		'select_all_roles' => false,
		'exclude_shifts_overlapping_from_date' => false,
		'page_size' => false,
		'current_page' => false,
		'include_warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'shift_status' => 'shiftStatus',
        'shift_statuses' => 'shiftStatuses',
        'selected_locations' => 'selectedLocations',
        'selected_employees' => 'selectedEmployees',
        'selected_roles' => 'selectedRoles',
        'employee_id' => 'employeeId',
        'location_id' => 'locationId',
        'employee_group_id' => 'employeeGroupId',
        'unassigned_shifts_only' => 'unassignedShiftsOnly',
        'select_all_roles' => 'selectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'excludeShiftsOverlappingFromDate',
        'page_size' => 'pageSize',
        'current_page' => 'currentPage',
        'include_warnings' => 'includeWarnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'shift_status' => 'setShiftStatus',
        'shift_statuses' => 'setShiftStatuses',
        'selected_locations' => 'setSelectedLocations',
        'selected_employees' => 'setSelectedEmployees',
        'selected_roles' => 'setSelectedRoles',
        'employee_id' => 'setEmployeeId',
        'location_id' => 'setLocationId',
        'employee_group_id' => 'setEmployeeGroupId',
        'unassigned_shifts_only' => 'setUnassignedShiftsOnly',
        'select_all_roles' => 'setSelectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'setExcludeShiftsOverlappingFromDate',
        'page_size' => 'setPageSize',
        'current_page' => 'setCurrentPage',
        'include_warnings' => 'setIncludeWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'shift_status' => 'getShiftStatus',
        'shift_statuses' => 'getShiftStatuses',
        'selected_locations' => 'getSelectedLocations',
        'selected_employees' => 'getSelectedEmployees',
        'selected_roles' => 'getSelectedRoles',
        'employee_id' => 'getEmployeeId',
        'location_id' => 'getLocationId',
        'employee_group_id' => 'getEmployeeGroupId',
        'unassigned_shifts_only' => 'getUnassignedShiftsOnly',
        'select_all_roles' => 'getSelectAllRoles',
        'exclude_shifts_overlapping_from_date' => 'getExcludeShiftsOverlappingFromDate',
        'page_size' => 'getPageSize',
        'current_page' => 'getCurrentPage',
        'include_warnings' => 'getIncludeWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIFT_STATUS_ALL = 'All';
    public const SHIFT_STATUS_PUBLISHED = 'Published';
    public const SHIFT_STATUS_UNPUBLISHED = 'Unpublished';
    public const SHIFT_STATUS_ACCEPTED = 'Accepted';
    public const SHIFT_STATUSES_ALL = 'All';
    public const SHIFT_STATUSES_PUBLISHED = 'Published';
    public const SHIFT_STATUSES_UNPUBLISHED = 'Unpublished';
    public const SHIFT_STATUSES_ACCEPTED = 'Accepted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftStatusAllowableValues()
    {
        return [
            self::SHIFT_STATUS_ALL,
            self::SHIFT_STATUS_PUBLISHED,
            self::SHIFT_STATUS_UNPUBLISHED,
            self::SHIFT_STATUS_ACCEPTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftStatusesAllowableValues()
    {
        return [
            self::SHIFT_STATUSES_ALL,
            self::SHIFT_STATUSES_PUBLISHED,
            self::SHIFT_STATUSES_UNPUBLISHED,
            self::SHIFT_STATUSES_ACCEPTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('shift_status', $data ?? [], null);
        $this->setIfExists('shift_statuses', $data ?? [], null);
        $this->setIfExists('selected_locations', $data ?? [], null);
        $this->setIfExists('selected_employees', $data ?? [], null);
        $this->setIfExists('selected_roles', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('employee_group_id', $data ?? [], null);
        $this->setIfExists('unassigned_shifts_only', $data ?? [], null);
        $this->setIfExists('select_all_roles', $data ?? [], null);
        $this->setIfExists('exclude_shifts_overlapping_from_date', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('current_page', $data ?? [], null);
        $this->setIfExists('include_warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShiftStatusAllowableValues();
        if (!is_null($this->container['shift_status']) && !in_array($this->container['shift_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shift_status', must be one of '%s'",
                $this->container['shift_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date 
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date 
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            throw new \InvalidArgumentException('non-nullable to_date cannot be null');
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets shift_status
     *
     * @return string|null
     */
    public function getShiftStatus()
    {
        return $this->container['shift_status'];
    }

    /**
     * Sets shift_status
     *
     * @param string|null $shift_status 
     *
     * @return self
     */
    public function setShiftStatus($shift_status)
    {
        if (is_null($shift_status)) {
            throw new \InvalidArgumentException('non-nullable shift_status cannot be null');
        }
        $allowedValues = $this->getShiftStatusAllowableValues();
        if (!in_array($shift_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shift_status', must be one of '%s'",
                    $shift_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_status'] = $shift_status;

        return $this;
    }

    /**
     * Gets shift_statuses
     *
     * @return string[]|null
     */
    public function getShiftStatuses()
    {
        return $this->container['shift_statuses'];
    }

    /**
     * Sets shift_statuses
     *
     * @param string[]|null $shift_statuses 
     *
     * @return self
     */
    public function setShiftStatuses($shift_statuses)
    {
        if (is_null($shift_statuses)) {
            throw new \InvalidArgumentException('non-nullable shift_statuses cannot be null');
        }
        $allowedValues = $this->getShiftStatusesAllowableValues();
        if (array_diff($shift_statuses, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shift_statuses', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_statuses'] = $shift_statuses;

        return $this;
    }

    /**
     * Gets selected_locations
     *
     * @return string[]|null
     */
    public function getSelectedLocations()
    {
        return $this->container['selected_locations'];
    }

    /**
     * Sets selected_locations
     *
     * @param string[]|null $selected_locations 
     *
     * @return self
     */
    public function setSelectedLocations($selected_locations)
    {
        if (is_null($selected_locations)) {
            throw new \InvalidArgumentException('non-nullable selected_locations cannot be null');
        }
        $this->container['selected_locations'] = $selected_locations;

        return $this;
    }

    /**
     * Gets selected_employees
     *
     * @return string[]|null
     */
    public function getSelectedEmployees()
    {
        return $this->container['selected_employees'];
    }

    /**
     * Sets selected_employees
     *
     * @param string[]|null $selected_employees 
     *
     * @return self
     */
    public function setSelectedEmployees($selected_employees)
    {
        if (is_null($selected_employees)) {
            throw new \InvalidArgumentException('non-nullable selected_employees cannot be null');
        }
        $this->container['selected_employees'] = $selected_employees;

        return $this;
    }

    /**
     * Gets selected_roles
     *
     * @return string[]|null
     */
    public function getSelectedRoles()
    {
        return $this->container['selected_roles'];
    }

    /**
     * Sets selected_roles
     *
     * @param string[]|null $selected_roles 
     *
     * @return self
     */
    public function setSelectedRoles($selected_roles)
    {
        if (is_null($selected_roles)) {
            throw new \InvalidArgumentException('non-nullable selected_roles cannot be null');
        }
        $this->container['selected_roles'] = $selected_roles;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets employee_group_id
     *
     * @return int|null
     */
    public function getEmployeeGroupId()
    {
        return $this->container['employee_group_id'];
    }

    /**
     * Sets employee_group_id
     *
     * @param int|null $employee_group_id 
     *
     * @return self
     */
    public function setEmployeeGroupId($employee_group_id)
    {
        if (is_null($employee_group_id)) {
            throw new \InvalidArgumentException('non-nullable employee_group_id cannot be null');
        }
        $this->container['employee_group_id'] = $employee_group_id;

        return $this;
    }

    /**
     * Gets unassigned_shifts_only
     *
     * @return bool|null
     */
    public function getUnassignedShiftsOnly()
    {
        return $this->container['unassigned_shifts_only'];
    }

    /**
     * Sets unassigned_shifts_only
     *
     * @param bool|null $unassigned_shifts_only 
     *
     * @return self
     */
    public function setUnassignedShiftsOnly($unassigned_shifts_only)
    {
        if (is_null($unassigned_shifts_only)) {
            throw new \InvalidArgumentException('non-nullable unassigned_shifts_only cannot be null');
        }
        $this->container['unassigned_shifts_only'] = $unassigned_shifts_only;

        return $this;
    }

    /**
     * Gets select_all_roles
     *
     * @return bool|null
     */
    public function getSelectAllRoles()
    {
        return $this->container['select_all_roles'];
    }

    /**
     * Sets select_all_roles
     *
     * @param bool|null $select_all_roles 
     *
     * @return self
     */
    public function setSelectAllRoles($select_all_roles)
    {
        if (is_null($select_all_roles)) {
            throw new \InvalidArgumentException('non-nullable select_all_roles cannot be null');
        }
        $this->container['select_all_roles'] = $select_all_roles;

        return $this;
    }

    /**
     * Gets exclude_shifts_overlapping_from_date
     *
     * @return bool|null
     */
    public function getExcludeShiftsOverlappingFromDate()
    {
        return $this->container['exclude_shifts_overlapping_from_date'];
    }

    /**
     * Sets exclude_shifts_overlapping_from_date
     *
     * @param bool|null $exclude_shifts_overlapping_from_date 
     *
     * @return self
     */
    public function setExcludeShiftsOverlappingFromDate($exclude_shifts_overlapping_from_date)
    {
        if (is_null($exclude_shifts_overlapping_from_date)) {
            throw new \InvalidArgumentException('non-nullable exclude_shifts_overlapping_from_date cannot be null');
        }
        $this->container['exclude_shifts_overlapping_from_date'] = $exclude_shifts_overlapping_from_date;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size 
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int|null
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int|null $current_page 
     *
     * @return self
     */
    public function setCurrentPage($current_page)
    {
        if (is_null($current_page)) {
            throw new \InvalidArgumentException('non-nullable current_page cannot be null');
        }
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets include_warnings
     *
     * @return bool|null
     */
    public function getIncludeWarnings()
    {
        return $this->container['include_warnings'];
    }

    /**
     * Sets include_warnings
     *
     * @param bool|null $include_warnings 
     *
     * @return self
     */
    public function setIncludeWarnings($include_warnings)
    {
        if (is_null($include_warnings)) {
            throw new \InvalidArgumentException('non-nullable include_warnings cannot be null');
        }
        $this->container['include_warnings'] = $include_warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


