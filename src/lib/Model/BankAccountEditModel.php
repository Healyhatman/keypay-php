<?php
/**
 * BankAccountEditModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BankAccountEditModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAccountEditModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankAccountEditModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'bsb' => 'string',
        'account_name' => 'string',
        'account_number' => 'string',
        'allocated_percentage' => 'float',
        'fixed_amount' => 'float',
        'external_reference_id' => 'string',
        'source' => 'string',
        'allocate_balance' => 'bool',
        'is_employee_editable' => 'bool',
        'can_be_deleted' => 'bool',
        'account_type' => 'string',
        'roll_number' => 'string',
        'bank_swift' => 'string',
        'branch_code' => 'string',
        'my_bank_code' => 'string',
        'my_other_bank_name' => 'string',
        'mdm_id' => 'string',
        'mdm_version' => 'int',
        'mdm_schema_version' => 'string',
        'triggered_from_mdm' => 'bool',
        'send_to_mdm' => 'bool',
        'ignore_fields' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'bsb' => null,
        'account_name' => null,
        'account_number' => null,
        'allocated_percentage' => 'double',
        'fixed_amount' => 'double',
        'external_reference_id' => null,
        'source' => null,
        'allocate_balance' => null,
        'is_employee_editable' => null,
        'can_be_deleted' => null,
        'account_type' => null,
        'roll_number' => null,
        'bank_swift' => null,
        'branch_code' => null,
        'my_bank_code' => null,
        'my_other_bank_name' => null,
        'mdm_id' => null,
        'mdm_version' => 'int64',
        'mdm_schema_version' => null,
        'triggered_from_mdm' => null,
        'send_to_mdm' => null,
        'ignore_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'bsb' => false,
		'account_name' => false,
		'account_number' => false,
		'allocated_percentage' => false,
		'fixed_amount' => false,
		'external_reference_id' => false,
		'source' => false,
		'allocate_balance' => false,
		'is_employee_editable' => false,
		'can_be_deleted' => false,
		'account_type' => false,
		'roll_number' => false,
		'bank_swift' => false,
		'branch_code' => false,
		'my_bank_code' => false,
		'my_other_bank_name' => false,
		'mdm_id' => false,
		'mdm_version' => false,
		'mdm_schema_version' => false,
		'triggered_from_mdm' => false,
		'send_to_mdm' => false,
		'ignore_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bsb' => 'bsb',
        'account_name' => 'accountName',
        'account_number' => 'accountNumber',
        'allocated_percentage' => 'allocatedPercentage',
        'fixed_amount' => 'fixedAmount',
        'external_reference_id' => 'externalReferenceId',
        'source' => 'source',
        'allocate_balance' => 'allocateBalance',
        'is_employee_editable' => 'isEmployeeEditable',
        'can_be_deleted' => 'canBeDeleted',
        'account_type' => 'accountType',
        'roll_number' => 'rollNumber',
        'bank_swift' => 'bankSwift',
        'branch_code' => 'branchCode',
        'my_bank_code' => 'myBankCode',
        'my_other_bank_name' => 'myOtherBankName',
        'mdm_id' => 'mdmId',
        'mdm_version' => 'mdmVersion',
        'mdm_schema_version' => 'mdmSchemaVersion',
        'triggered_from_mdm' => 'triggeredFromMdm',
        'send_to_mdm' => 'sendToMdm',
        'ignore_fields' => 'ignoreFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bsb' => 'setBsb',
        'account_name' => 'setAccountName',
        'account_number' => 'setAccountNumber',
        'allocated_percentage' => 'setAllocatedPercentage',
        'fixed_amount' => 'setFixedAmount',
        'external_reference_id' => 'setExternalReferenceId',
        'source' => 'setSource',
        'allocate_balance' => 'setAllocateBalance',
        'is_employee_editable' => 'setIsEmployeeEditable',
        'can_be_deleted' => 'setCanBeDeleted',
        'account_type' => 'setAccountType',
        'roll_number' => 'setRollNumber',
        'bank_swift' => 'setBankSwift',
        'branch_code' => 'setBranchCode',
        'my_bank_code' => 'setMyBankCode',
        'my_other_bank_name' => 'setMyOtherBankName',
        'mdm_id' => 'setMdmId',
        'mdm_version' => 'setMdmVersion',
        'mdm_schema_version' => 'setMdmSchemaVersion',
        'triggered_from_mdm' => 'setTriggeredFromMdm',
        'send_to_mdm' => 'setSendToMdm',
        'ignore_fields' => 'setIgnoreFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bsb' => 'getBsb',
        'account_name' => 'getAccountName',
        'account_number' => 'getAccountNumber',
        'allocated_percentage' => 'getAllocatedPercentage',
        'fixed_amount' => 'getFixedAmount',
        'external_reference_id' => 'getExternalReferenceId',
        'source' => 'getSource',
        'allocate_balance' => 'getAllocateBalance',
        'is_employee_editable' => 'getIsEmployeeEditable',
        'can_be_deleted' => 'getCanBeDeleted',
        'account_type' => 'getAccountType',
        'roll_number' => 'getRollNumber',
        'bank_swift' => 'getBankSwift',
        'branch_code' => 'getBranchCode',
        'my_bank_code' => 'getMyBankCode',
        'my_other_bank_name' => 'getMyOtherBankName',
        'mdm_id' => 'getMdmId',
        'mdm_version' => 'getMdmVersion',
        'mdm_schema_version' => 'getMdmSchemaVersion',
        'triggered_from_mdm' => 'getTriggeredFromMdm',
        'send_to_mdm' => 'getSendToMdm',
        'ignore_fields' => 'getIgnoreFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SOURCE_NONE = 'None';
    public const SOURCE_SAASU = 'Saasu';
    public const SOURCE_XERO = 'Xero';
    public const SOURCE_MYOB = 'MYOB';
    public const SOURCE_DEPUTY = 'Deputy';
    public const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    public const SOURCE_CLICK_SUPER = 'ClickSuper';
    public const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    public const SOURCE_FILE_IMPORT = 'FileImport';
    public const SOURCE_FILE_EXPORT = 'FileExport';
    public const SOURCE_QUICK_BOOKS = 'QuickBooks';
    public const SOURCE_HARMONY = 'Harmony';
    public const SOURCE_AWARD_STORE = 'AwardStore';
    public const SOURCE_ATTACHE = 'Attache';
    public const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    public const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    public const SOURCE_API = 'API';
    public const SOURCE_MICRO_POWER = 'MicroPower';
    public const SOURCE_ROSTER_LIVE = 'RosterLive';
    public const SOURCE_NET_SUITE = 'NetSuite';
    public const SOURCE_KOUNTA = 'Kounta';
    public const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    public const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    public const SOURCE_JONAS_PREMIER = 'JonasPremier';
    public const SOURCE_WAGE_EASY = 'WageEasy';
    public const SOURCE_MAESTRANO = 'Maestrano';
    public const SOURCE_WORK_ZONE = 'WorkZone';
    public const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    public const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    public const SOURCE_ONBOARDING = 'Onboarding';
    public const SOURCE_ADMIN = 'Admin';
    public const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    public const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    public const SOURCE_SAGE50 = 'Sage50';
    public const SOURCE_PENSION_SYNC = 'PensionSync';
    public const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    public const SOURCE_PRONTO_XI = 'ProntoXI';
    public const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    public const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    public const SOURCE_BEAM = 'Beam';
    public const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    public const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    public const SOURCE_WIISE = 'Wiise';
    public const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    public const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    public const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    public const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    public const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    public const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    public const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    public const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    public const SOURCE_O_AUTH = 'OAuth';
    public const SOURCE_FRESH_BOOKS = 'FreshBooks';
    public const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    public const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    public const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    public const SOURCE_TELLEROO = 'Telleroo';
    public const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    public const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    public const SOURCE_PAYTRON = 'Paytron';
    public const SOURCE_ACCESS_FINANCIALS = 'AccessFinancials';
    public const SOURCE_COMMA = 'Comma';
    public const SOURCE_ZOHO = 'Zoho';
    public const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    public const SOURCE_TWINFIELD = 'Twinfield';
    public const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    public const SOURCE_SQUARE = 'Square';
    public const SOURCE_QUICKFILE = 'Quickfile';
    public const SOURCE_TIDE = 'Tide';
    public const SOURCE_TIDE_SSO = 'TideSso';
    public const SOURCE_FREE_AGENT = 'FreeAgent';
    public const SOURCE_AKAHU = 'Akahu';
    public const SOURCE_INSTA_PAY = 'InstaPay';
    public const SOURCE_ZEPTO = 'Zepto';
    public const SOURCE_SLACK = 'Slack';
    public const SOURCE_CAXTON = 'Caxton';
    public const SOURCE_QUICKBOOKS_STANDALONE_PAYROLL = 'QuickbooksStandalonePayroll';
    public const SOURCE_IMPORT_EMPLOYEE_SELF_SETUP = 'ImportEmployeeSelfSetup';
    public const SOURCE_XERO_IDENTITY_PAYROLL_SIGN_UP = 'XeroIdentityPayrollSignUp';
    public const SOURCE_XERO_IDENTITY_HR_SIGN_UP = 'XeroIdentityHrSignUp';
    public const SOURCE_SAGE_INTACCT = 'SageIntacct';
    public const SOURCE_DAILY_PAY = 'DailyPay';
    public const ACCOUNT_TYPE_ELECTRONIC = 'Electronic';
    public const ACCOUNT_TYPE_MANUAL_DEPOSIT = 'ManualDeposit';
    public const ACCOUNT_TYPE_CASH_OR_CHEQUE = 'CashOrCheque';
    public const ACCOUNT_TYPE_BPAY = 'Bpay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ACCESS_FINANCIALS,
            self::SOURCE_COMMA,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
            self::SOURCE_SQUARE,
            self::SOURCE_QUICKFILE,
            self::SOURCE_TIDE,
            self::SOURCE_TIDE_SSO,
            self::SOURCE_FREE_AGENT,
            self::SOURCE_AKAHU,
            self::SOURCE_INSTA_PAY,
            self::SOURCE_ZEPTO,
            self::SOURCE_SLACK,
            self::SOURCE_CAXTON,
            self::SOURCE_QUICKBOOKS_STANDALONE_PAYROLL,
            self::SOURCE_IMPORT_EMPLOYEE_SELF_SETUP,
            self::SOURCE_XERO_IDENTITY_PAYROLL_SIGN_UP,
            self::SOURCE_XERO_IDENTITY_HR_SIGN_UP,
            self::SOURCE_SAGE_INTACCT,
            self::SOURCE_DAILY_PAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_ELECTRONIC,
            self::ACCOUNT_TYPE_MANUAL_DEPOSIT,
            self::ACCOUNT_TYPE_CASH_OR_CHEQUE,
            self::ACCOUNT_TYPE_BPAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bsb', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('allocated_percentage', $data ?? [], null);
        $this->setIfExists('fixed_amount', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('allocate_balance', $data ?? [], null);
        $this->setIfExists('is_employee_editable', $data ?? [], null);
        $this->setIfExists('can_be_deleted', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('roll_number', $data ?? [], null);
        $this->setIfExists('bank_swift', $data ?? [], null);
        $this->setIfExists('branch_code', $data ?? [], null);
        $this->setIfExists('my_bank_code', $data ?? [], null);
        $this->setIfExists('my_other_bank_name', $data ?? [], null);
        $this->setIfExists('mdm_id', $data ?? [], null);
        $this->setIfExists('mdm_version', $data ?? [], null);
        $this->setIfExists('mdm_schema_version', $data ?? [], null);
        $this->setIfExists('triggered_from_mdm', $data ?? [], null);
        $this->setIfExists('send_to_mdm', $data ?? [], null);
        $this->setIfExists('ignore_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bsb
     *
     * @return string|null
     */
    public function getBsb()
    {
        return $this->container['bsb'];
    }

    /**
     * Sets bsb
     *
     * @param string|null $bsb 
     *
     * @return self
     */
    public function setBsb($bsb)
    {
        if (is_null($bsb)) {
            throw new \InvalidArgumentException('non-nullable bsb cannot be null');
        }
        $this->container['bsb'] = $bsb;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name 
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number 
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets allocated_percentage
     *
     * @return float|null
     */
    public function getAllocatedPercentage()
    {
        return $this->container['allocated_percentage'];
    }

    /**
     * Sets allocated_percentage
     *
     * @param float|null $allocated_percentage 
     *
     * @return self
     */
    public function setAllocatedPercentage($allocated_percentage)
    {
        if (is_null($allocated_percentage)) {
            throw new \InvalidArgumentException('non-nullable allocated_percentage cannot be null');
        }
        $this->container['allocated_percentage'] = $allocated_percentage;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return float|null
     */
    public function getFixedAmount()
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param float|null $fixed_amount 
     *
     * @return self
     */
    public function setFixedAmount($fixed_amount)
    {
        if (is_null($fixed_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_amount cannot be null');
        }
        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets allocate_balance
     *
     * @return bool|null
     */
    public function getAllocateBalance()
    {
        return $this->container['allocate_balance'];
    }

    /**
     * Sets allocate_balance
     *
     * @param bool|null $allocate_balance 
     *
     * @return self
     */
    public function setAllocateBalance($allocate_balance)
    {
        if (is_null($allocate_balance)) {
            throw new \InvalidArgumentException('non-nullable allocate_balance cannot be null');
        }
        $this->container['allocate_balance'] = $allocate_balance;

        return $this;
    }

    /**
     * Gets is_employee_editable
     *
     * @return bool|null
     */
    public function getIsEmployeeEditable()
    {
        return $this->container['is_employee_editable'];
    }

    /**
     * Sets is_employee_editable
     *
     * @param bool|null $is_employee_editable 
     *
     * @return self
     */
    public function setIsEmployeeEditable($is_employee_editable)
    {
        if (is_null($is_employee_editable)) {
            throw new \InvalidArgumentException('non-nullable is_employee_editable cannot be null');
        }
        $this->container['is_employee_editable'] = $is_employee_editable;

        return $this;
    }

    /**
     * Gets can_be_deleted
     *
     * @return bool|null
     */
    public function getCanBeDeleted()
    {
        return $this->container['can_be_deleted'];
    }

    /**
     * Sets can_be_deleted
     *
     * @param bool|null $can_be_deleted 
     *
     * @return self
     */
    public function setCanBeDeleted($can_be_deleted)
    {
        if (is_null($can_be_deleted)) {
            throw new \InvalidArgumentException('non-nullable can_be_deleted cannot be null');
        }
        $this->container['can_be_deleted'] = $can_be_deleted;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type 
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets roll_number
     *
     * @return string|null
     */
    public function getRollNumber()
    {
        return $this->container['roll_number'];
    }

    /**
     * Sets roll_number
     *
     * @param string|null $roll_number 
     *
     * @return self
     */
    public function setRollNumber($roll_number)
    {
        if (is_null($roll_number)) {
            throw new \InvalidArgumentException('non-nullable roll_number cannot be null');
        }
        $this->container['roll_number'] = $roll_number;

        return $this;
    }

    /**
     * Gets bank_swift
     *
     * @return string|null
     */
    public function getBankSwift()
    {
        return $this->container['bank_swift'];
    }

    /**
     * Sets bank_swift
     *
     * @param string|null $bank_swift 
     *
     * @return self
     */
    public function setBankSwift($bank_swift)
    {
        if (is_null($bank_swift)) {
            throw new \InvalidArgumentException('non-nullable bank_swift cannot be null');
        }
        $this->container['bank_swift'] = $bank_swift;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return string|null
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param string|null $branch_code 
     *
     * @return self
     */
    public function setBranchCode($branch_code)
    {
        if (is_null($branch_code)) {
            throw new \InvalidArgumentException('non-nullable branch_code cannot be null');
        }
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets my_bank_code
     *
     * @return string|null
     */
    public function getMyBankCode()
    {
        return $this->container['my_bank_code'];
    }

    /**
     * Sets my_bank_code
     *
     * @param string|null $my_bank_code 
     *
     * @return self
     */
    public function setMyBankCode($my_bank_code)
    {
        if (is_null($my_bank_code)) {
            throw new \InvalidArgumentException('non-nullable my_bank_code cannot be null');
        }
        $this->container['my_bank_code'] = $my_bank_code;

        return $this;
    }

    /**
     * Gets my_other_bank_name
     *
     * @return string|null
     */
    public function getMyOtherBankName()
    {
        return $this->container['my_other_bank_name'];
    }

    /**
     * Sets my_other_bank_name
     *
     * @param string|null $my_other_bank_name 
     *
     * @return self
     */
    public function setMyOtherBankName($my_other_bank_name)
    {
        if (is_null($my_other_bank_name)) {
            throw new \InvalidArgumentException('non-nullable my_other_bank_name cannot be null');
        }
        $this->container['my_other_bank_name'] = $my_other_bank_name;

        return $this;
    }

    /**
     * Gets mdm_id
     *
     * @return string|null
     */
    public function getMdmId()
    {
        return $this->container['mdm_id'];
    }

    /**
     * Sets mdm_id
     *
     * @param string|null $mdm_id 
     *
     * @return self
     */
    public function setMdmId($mdm_id)
    {
        if (is_null($mdm_id)) {
            throw new \InvalidArgumentException('non-nullable mdm_id cannot be null');
        }
        $this->container['mdm_id'] = $mdm_id;

        return $this;
    }

    /**
     * Gets mdm_version
     *
     * @return int|null
     */
    public function getMdmVersion()
    {
        return $this->container['mdm_version'];
    }

    /**
     * Sets mdm_version
     *
     * @param int|null $mdm_version 
     *
     * @return self
     */
    public function setMdmVersion($mdm_version)
    {
        if (is_null($mdm_version)) {
            throw new \InvalidArgumentException('non-nullable mdm_version cannot be null');
        }
        $this->container['mdm_version'] = $mdm_version;

        return $this;
    }

    /**
     * Gets mdm_schema_version
     *
     * @return string|null
     */
    public function getMdmSchemaVersion()
    {
        return $this->container['mdm_schema_version'];
    }

    /**
     * Sets mdm_schema_version
     *
     * @param string|null $mdm_schema_version 
     *
     * @return self
     */
    public function setMdmSchemaVersion($mdm_schema_version)
    {
        if (is_null($mdm_schema_version)) {
            throw new \InvalidArgumentException('non-nullable mdm_schema_version cannot be null');
        }
        $this->container['mdm_schema_version'] = $mdm_schema_version;

        return $this;
    }

    /**
     * Gets triggered_from_mdm
     *
     * @return bool|null
     */
    public function getTriggeredFromMdm()
    {
        return $this->container['triggered_from_mdm'];
    }

    /**
     * Sets triggered_from_mdm
     *
     * @param bool|null $triggered_from_mdm 
     *
     * @return self
     */
    public function setTriggeredFromMdm($triggered_from_mdm)
    {
        if (is_null($triggered_from_mdm)) {
            throw new \InvalidArgumentException('non-nullable triggered_from_mdm cannot be null');
        }
        $this->container['triggered_from_mdm'] = $triggered_from_mdm;

        return $this;
    }

    /**
     * Gets send_to_mdm
     *
     * @return bool|null
     */
    public function getSendToMdm()
    {
        return $this->container['send_to_mdm'];
    }

    /**
     * Sets send_to_mdm
     *
     * @param bool|null $send_to_mdm 
     *
     * @return self
     */
    public function setSendToMdm($send_to_mdm)
    {
        if (is_null($send_to_mdm)) {
            throw new \InvalidArgumentException('non-nullable send_to_mdm cannot be null');
        }
        $this->container['send_to_mdm'] = $send_to_mdm;

        return $this;
    }

    /**
     * Gets ignore_fields
     *
     * @return array<string,string>|null
     */
    public function getIgnoreFields()
    {
        return $this->container['ignore_fields'];
    }

    /**
     * Sets ignore_fields
     *
     * @param array<string,string>|null $ignore_fields 
     *
     * @return self
     */
    public function setIgnoreFields($ignore_fields)
    {
        if (is_null($ignore_fields)) {
            throw new \InvalidArgumentException('non-nullable ignore_fields cannot be null');
        }
        $this->container['ignore_fields'] = $ignore_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


