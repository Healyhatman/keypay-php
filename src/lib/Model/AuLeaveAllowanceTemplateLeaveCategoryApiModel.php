<?php
/**
 * AuLeaveAllowanceTemplateLeaveCategoryApiModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuLeaveAllowanceTemplateLeaveCategoryApiModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuLeaveAllowanceTemplateLeaveCategoryApiModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuLeaveAllowanceTemplateLeaveCategoryApiModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'leave_loading' => 'float',
        'contingent_period' => 'float',
        'entitlement_period' => 'float',
        'unit_type' => 'string',
        'leave_unit_type' => 'string',
        'accrual_rule_leave_year_offset_amount' => 'int',
        'leave_category_id' => 'int',
        'leave_category_name' => 'string',
        'units' => 'float',
        'can_apply_for_leave' => 'bool',
        'leave_accrual_rule_accrual_type' => 'string',
        'leave_accrual_rule_cap_type' => 'string',
        'leave_accrual_rule_unit_cap' => 'float',
        'leave_accrual_rule_carry_over_behaviour' => 'string',
        'leave_accrual_rule_carry_over_amount' => 'float',
        'leave_accrual_rule_accrue_in_advance' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'leave_loading' => 'double',
        'contingent_period' => 'double',
        'entitlement_period' => 'double',
        'unit_type' => null,
        'leave_unit_type' => null,
        'accrual_rule_leave_year_offset_amount' => 'int32',
        'leave_category_id' => 'int32',
        'leave_category_name' => null,
        'units' => 'double',
        'can_apply_for_leave' => null,
        'leave_accrual_rule_accrual_type' => null,
        'leave_accrual_rule_cap_type' => null,
        'leave_accrual_rule_unit_cap' => 'double',
        'leave_accrual_rule_carry_over_behaviour' => null,
        'leave_accrual_rule_carry_over_amount' => 'double',
        'leave_accrual_rule_accrue_in_advance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'leave_loading' => false,
		'contingent_period' => false,
		'entitlement_period' => false,
		'unit_type' => false,
		'leave_unit_type' => false,
		'accrual_rule_leave_year_offset_amount' => false,
		'leave_category_id' => false,
		'leave_category_name' => false,
		'units' => false,
		'can_apply_for_leave' => false,
		'leave_accrual_rule_accrual_type' => false,
		'leave_accrual_rule_cap_type' => false,
		'leave_accrual_rule_unit_cap' => false,
		'leave_accrual_rule_carry_over_behaviour' => false,
		'leave_accrual_rule_carry_over_amount' => false,
		'leave_accrual_rule_accrue_in_advance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leave_loading' => 'leaveLoading',
        'contingent_period' => 'contingentPeriod',
        'entitlement_period' => 'entitlementPeriod',
        'unit_type' => 'unitType',
        'leave_unit_type' => 'leaveUnitType',
        'accrual_rule_leave_year_offset_amount' => 'accrualRuleLeaveYearOffsetAmount',
        'leave_category_id' => 'leaveCategoryId',
        'leave_category_name' => 'leaveCategoryName',
        'units' => 'units',
        'can_apply_for_leave' => 'canApplyForLeave',
        'leave_accrual_rule_accrual_type' => 'leaveAccrualRuleAccrualType',
        'leave_accrual_rule_cap_type' => 'leaveAccrualRuleCapType',
        'leave_accrual_rule_unit_cap' => 'leaveAccrualRuleUnitCap',
        'leave_accrual_rule_carry_over_behaviour' => 'leaveAccrualRuleCarryOverBehaviour',
        'leave_accrual_rule_carry_over_amount' => 'leaveAccrualRuleCarryOverAmount',
        'leave_accrual_rule_accrue_in_advance' => 'leaveAccrualRuleAccrueInAdvance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leave_loading' => 'setLeaveLoading',
        'contingent_period' => 'setContingentPeriod',
        'entitlement_period' => 'setEntitlementPeriod',
        'unit_type' => 'setUnitType',
        'leave_unit_type' => 'setLeaveUnitType',
        'accrual_rule_leave_year_offset_amount' => 'setAccrualRuleLeaveYearOffsetAmount',
        'leave_category_id' => 'setLeaveCategoryId',
        'leave_category_name' => 'setLeaveCategoryName',
        'units' => 'setUnits',
        'can_apply_for_leave' => 'setCanApplyForLeave',
        'leave_accrual_rule_accrual_type' => 'setLeaveAccrualRuleAccrualType',
        'leave_accrual_rule_cap_type' => 'setLeaveAccrualRuleCapType',
        'leave_accrual_rule_unit_cap' => 'setLeaveAccrualRuleUnitCap',
        'leave_accrual_rule_carry_over_behaviour' => 'setLeaveAccrualRuleCarryOverBehaviour',
        'leave_accrual_rule_carry_over_amount' => 'setLeaveAccrualRuleCarryOverAmount',
        'leave_accrual_rule_accrue_in_advance' => 'setLeaveAccrualRuleAccrueInAdvance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leave_loading' => 'getLeaveLoading',
        'contingent_period' => 'getContingentPeriod',
        'entitlement_period' => 'getEntitlementPeriod',
        'unit_type' => 'getUnitType',
        'leave_unit_type' => 'getLeaveUnitType',
        'accrual_rule_leave_year_offset_amount' => 'getAccrualRuleLeaveYearOffsetAmount',
        'leave_category_id' => 'getLeaveCategoryId',
        'leave_category_name' => 'getLeaveCategoryName',
        'units' => 'getUnits',
        'can_apply_for_leave' => 'getCanApplyForLeave',
        'leave_accrual_rule_accrual_type' => 'getLeaveAccrualRuleAccrualType',
        'leave_accrual_rule_cap_type' => 'getLeaveAccrualRuleCapType',
        'leave_accrual_rule_unit_cap' => 'getLeaveAccrualRuleUnitCap',
        'leave_accrual_rule_carry_over_behaviour' => 'getLeaveAccrualRuleCarryOverBehaviour',
        'leave_accrual_rule_carry_over_amount' => 'getLeaveAccrualRuleCarryOverAmount',
        'leave_accrual_rule_accrue_in_advance' => 'getLeaveAccrualRuleAccrueInAdvance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_TYPE_DAYS = 'Days';
    public const UNIT_TYPE_WEEKS = 'Weeks';
    public const UNIT_TYPE_HOURS_PER_HOUR_WORKED = 'HoursPerHourWorked';
    public const UNIT_TYPE_HOURS_PER_PAY_RUN = 'HoursPerPayRun';
    public const UNIT_TYPE_STANDARD_DAYS = 'StandardDays';
    public const UNIT_TYPE_STANDARD_WEEKS = 'StandardWeeks';
    public const UNIT_TYPE_DAY_PER_CALENDAR_DAY = 'DayPerCalendarDay';
    public const UNIT_TYPE_DAY_PER_MONTH = 'DayPerMonth';
    public const LEAVE_UNIT_TYPE_HOURS = 'Hours';
    public const LEAVE_UNIT_TYPE_DAYS = 'Days';
    public const LEAVE_UNIT_TYPE_WEEKS = 'Weeks';
    public const LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_ONGOING = 'Ongoing';
    public const LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_YEARLY = 'Yearly';
    public const LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_BASED_ON_LENGTH_OF_SERVICE = 'BasedOnLengthOfService';
    public const LEAVE_ACCRUAL_RULE_CAP_TYPE_NOT_LIMITED = 'NotLimited';
    public const LEAVE_ACCRUAL_RULE_CAP_TYPE_LIMITED = 'Limited';
    public const LEAVE_ACCRUAL_RULE_CARRY_OVER_BEHAVIOUR_CARRY_ENTIRE_AMOUNT = 'CarryEntireAmount';
    public const LEAVE_ACCRUAL_RULE_CARRY_OVER_BEHAVIOUR_CARRY_HOURS = 'CarryHours';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitTypeAllowableValues()
    {
        return [
            self::UNIT_TYPE_DAYS,
            self::UNIT_TYPE_WEEKS,
            self::UNIT_TYPE_HOURS_PER_HOUR_WORKED,
            self::UNIT_TYPE_HOURS_PER_PAY_RUN,
            self::UNIT_TYPE_STANDARD_DAYS,
            self::UNIT_TYPE_STANDARD_WEEKS,
            self::UNIT_TYPE_DAY_PER_CALENDAR_DAY,
            self::UNIT_TYPE_DAY_PER_MONTH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveUnitTypeAllowableValues()
    {
        return [
            self::LEAVE_UNIT_TYPE_HOURS,
            self::LEAVE_UNIT_TYPE_DAYS,
            self::LEAVE_UNIT_TYPE_WEEKS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveAccrualRuleAccrualTypeAllowableValues()
    {
        return [
            self::LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_ONGOING,
            self::LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_YEARLY,
            self::LEAVE_ACCRUAL_RULE_ACCRUAL_TYPE_BASED_ON_LENGTH_OF_SERVICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveAccrualRuleCapTypeAllowableValues()
    {
        return [
            self::LEAVE_ACCRUAL_RULE_CAP_TYPE_NOT_LIMITED,
            self::LEAVE_ACCRUAL_RULE_CAP_TYPE_LIMITED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLeaveAccrualRuleCarryOverBehaviourAllowableValues()
    {
        return [
            self::LEAVE_ACCRUAL_RULE_CARRY_OVER_BEHAVIOUR_CARRY_ENTIRE_AMOUNT,
            self::LEAVE_ACCRUAL_RULE_CARRY_OVER_BEHAVIOUR_CARRY_HOURS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('leave_loading', $data ?? [], null);
        $this->setIfExists('contingent_period', $data ?? [], null);
        $this->setIfExists('entitlement_period', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('leave_unit_type', $data ?? [], null);
        $this->setIfExists('accrual_rule_leave_year_offset_amount', $data ?? [], null);
        $this->setIfExists('leave_category_id', $data ?? [], null);
        $this->setIfExists('leave_category_name', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('can_apply_for_leave', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_accrual_type', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_cap_type', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_unit_cap', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_carry_over_behaviour', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_carry_over_amount', $data ?? [], null);
        $this->setIfExists('leave_accrual_rule_accrue_in_advance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!is_null($this->container['unit_type']) && !in_array($this->container['unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_type', must be one of '%s'",
                $this->container['unit_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveUnitTypeAllowableValues();
        if (!is_null($this->container['leave_unit_type']) && !in_array($this->container['leave_unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_unit_type', must be one of '%s'",
                $this->container['leave_unit_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveAccrualRuleAccrualTypeAllowableValues();
        if (!is_null($this->container['leave_accrual_rule_accrual_type']) && !in_array($this->container['leave_accrual_rule_accrual_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_accrual_rule_accrual_type', must be one of '%s'",
                $this->container['leave_accrual_rule_accrual_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveAccrualRuleCapTypeAllowableValues();
        if (!is_null($this->container['leave_accrual_rule_cap_type']) && !in_array($this->container['leave_accrual_rule_cap_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_accrual_rule_cap_type', must be one of '%s'",
                $this->container['leave_accrual_rule_cap_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLeaveAccrualRuleCarryOverBehaviourAllowableValues();
        if (!is_null($this->container['leave_accrual_rule_carry_over_behaviour']) && !in_array($this->container['leave_accrual_rule_carry_over_behaviour'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'leave_accrual_rule_carry_over_behaviour', must be one of '%s'",
                $this->container['leave_accrual_rule_carry_over_behaviour'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leave_loading
     *
     * @return float|null
     */
    public function getLeaveLoading()
    {
        return $this->container['leave_loading'];
    }

    /**
     * Sets leave_loading
     *
     * @param float|null $leave_loading 
     *
     * @return self
     */
    public function setLeaveLoading($leave_loading)
    {
        if (is_null($leave_loading)) {
            throw new \InvalidArgumentException('non-nullable leave_loading cannot be null');
        }
        $this->container['leave_loading'] = $leave_loading;

        return $this;
    }

    /**
     * Gets contingent_period
     *
     * @return float|null
     */
    public function getContingentPeriod()
    {
        return $this->container['contingent_period'];
    }

    /**
     * Sets contingent_period
     *
     * @param float|null $contingent_period 
     *
     * @return self
     */
    public function setContingentPeriod($contingent_period)
    {
        if (is_null($contingent_period)) {
            throw new \InvalidArgumentException('non-nullable contingent_period cannot be null');
        }
        $this->container['contingent_period'] = $contingent_period;

        return $this;
    }

    /**
     * Gets entitlement_period
     *
     * @return float|null
     */
    public function getEntitlementPeriod()
    {
        return $this->container['entitlement_period'];
    }

    /**
     * Sets entitlement_period
     *
     * @param float|null $entitlement_period 
     *
     * @return self
     */
    public function setEntitlementPeriod($entitlement_period)
    {
        if (is_null($entitlement_period)) {
            throw new \InvalidArgumentException('non-nullable entitlement_period cannot be null');
        }
        $this->container['entitlement_period'] = $entitlement_period;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!in_array($unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_type', must be one of '%s'",
                    $unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets leave_unit_type
     *
     * @return string|null
     */
    public function getLeaveUnitType()
    {
        return $this->container['leave_unit_type'];
    }

    /**
     * Sets leave_unit_type
     *
     * @param string|null $leave_unit_type 
     *
     * @return self
     */
    public function setLeaveUnitType($leave_unit_type)
    {
        if (is_null($leave_unit_type)) {
            throw new \InvalidArgumentException('non-nullable leave_unit_type cannot be null');
        }
        $allowedValues = $this->getLeaveUnitTypeAllowableValues();
        if (!in_array($leave_unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_unit_type', must be one of '%s'",
                    $leave_unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_unit_type'] = $leave_unit_type;

        return $this;
    }

    /**
     * Gets accrual_rule_leave_year_offset_amount
     *
     * @return int|null
     */
    public function getAccrualRuleLeaveYearOffsetAmount()
    {
        return $this->container['accrual_rule_leave_year_offset_amount'];
    }

    /**
     * Sets accrual_rule_leave_year_offset_amount
     *
     * @param int|null $accrual_rule_leave_year_offset_amount 
     *
     * @return self
     */
    public function setAccrualRuleLeaveYearOffsetAmount($accrual_rule_leave_year_offset_amount)
    {
        if (is_null($accrual_rule_leave_year_offset_amount)) {
            throw new \InvalidArgumentException('non-nullable accrual_rule_leave_year_offset_amount cannot be null');
        }
        $this->container['accrual_rule_leave_year_offset_amount'] = $accrual_rule_leave_year_offset_amount;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int|null
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int|null $leave_category_id 
     *
     * @return self
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        if (is_null($leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable leave_category_id cannot be null');
        }
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets leave_category_name
     *
     * @return string|null
     */
    public function getLeaveCategoryName()
    {
        return $this->container['leave_category_name'];
    }

    /**
     * Sets leave_category_name
     *
     * @param string|null $leave_category_name 
     *
     * @return self
     */
    public function setLeaveCategoryName($leave_category_name)
    {
        if (is_null($leave_category_name)) {
            throw new \InvalidArgumentException('non-nullable leave_category_name cannot be null');
        }
        $this->container['leave_category_name'] = $leave_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets can_apply_for_leave
     *
     * @return bool|null
     */
    public function getCanApplyForLeave()
    {
        return $this->container['can_apply_for_leave'];
    }

    /**
     * Sets can_apply_for_leave
     *
     * @param bool|null $can_apply_for_leave 
     *
     * @return self
     */
    public function setCanApplyForLeave($can_apply_for_leave)
    {
        if (is_null($can_apply_for_leave)) {
            throw new \InvalidArgumentException('non-nullable can_apply_for_leave cannot be null');
        }
        $this->container['can_apply_for_leave'] = $can_apply_for_leave;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_accrual_type
     *
     * @return string|null
     */
    public function getLeaveAccrualRuleAccrualType()
    {
        return $this->container['leave_accrual_rule_accrual_type'];
    }

    /**
     * Sets leave_accrual_rule_accrual_type
     *
     * @param string|null $leave_accrual_rule_accrual_type 
     *
     * @return self
     */
    public function setLeaveAccrualRuleAccrualType($leave_accrual_rule_accrual_type)
    {
        if (is_null($leave_accrual_rule_accrual_type)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_accrual_type cannot be null');
        }
        $allowedValues = $this->getLeaveAccrualRuleAccrualTypeAllowableValues();
        if (!in_array($leave_accrual_rule_accrual_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_accrual_rule_accrual_type', must be one of '%s'",
                    $leave_accrual_rule_accrual_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_accrual_rule_accrual_type'] = $leave_accrual_rule_accrual_type;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_cap_type
     *
     * @return string|null
     */
    public function getLeaveAccrualRuleCapType()
    {
        return $this->container['leave_accrual_rule_cap_type'];
    }

    /**
     * Sets leave_accrual_rule_cap_type
     *
     * @param string|null $leave_accrual_rule_cap_type 
     *
     * @return self
     */
    public function setLeaveAccrualRuleCapType($leave_accrual_rule_cap_type)
    {
        if (is_null($leave_accrual_rule_cap_type)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_cap_type cannot be null');
        }
        $allowedValues = $this->getLeaveAccrualRuleCapTypeAllowableValues();
        if (!in_array($leave_accrual_rule_cap_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_accrual_rule_cap_type', must be one of '%s'",
                    $leave_accrual_rule_cap_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_accrual_rule_cap_type'] = $leave_accrual_rule_cap_type;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_unit_cap
     *
     * @return float|null
     */
    public function getLeaveAccrualRuleUnitCap()
    {
        return $this->container['leave_accrual_rule_unit_cap'];
    }

    /**
     * Sets leave_accrual_rule_unit_cap
     *
     * @param float|null $leave_accrual_rule_unit_cap 
     *
     * @return self
     */
    public function setLeaveAccrualRuleUnitCap($leave_accrual_rule_unit_cap)
    {
        if (is_null($leave_accrual_rule_unit_cap)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_unit_cap cannot be null');
        }
        $this->container['leave_accrual_rule_unit_cap'] = $leave_accrual_rule_unit_cap;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_carry_over_behaviour
     *
     * @return string|null
     */
    public function getLeaveAccrualRuleCarryOverBehaviour()
    {
        return $this->container['leave_accrual_rule_carry_over_behaviour'];
    }

    /**
     * Sets leave_accrual_rule_carry_over_behaviour
     *
     * @param string|null $leave_accrual_rule_carry_over_behaviour 
     *
     * @return self
     */
    public function setLeaveAccrualRuleCarryOverBehaviour($leave_accrual_rule_carry_over_behaviour)
    {
        if (is_null($leave_accrual_rule_carry_over_behaviour)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_carry_over_behaviour cannot be null');
        }
        $allowedValues = $this->getLeaveAccrualRuleCarryOverBehaviourAllowableValues();
        if (!in_array($leave_accrual_rule_carry_over_behaviour, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'leave_accrual_rule_carry_over_behaviour', must be one of '%s'",
                    $leave_accrual_rule_carry_over_behaviour,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['leave_accrual_rule_carry_over_behaviour'] = $leave_accrual_rule_carry_over_behaviour;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_carry_over_amount
     *
     * @return float|null
     */
    public function getLeaveAccrualRuleCarryOverAmount()
    {
        return $this->container['leave_accrual_rule_carry_over_amount'];
    }

    /**
     * Sets leave_accrual_rule_carry_over_amount
     *
     * @param float|null $leave_accrual_rule_carry_over_amount 
     *
     * @return self
     */
    public function setLeaveAccrualRuleCarryOverAmount($leave_accrual_rule_carry_over_amount)
    {
        if (is_null($leave_accrual_rule_carry_over_amount)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_carry_over_amount cannot be null');
        }
        $this->container['leave_accrual_rule_carry_over_amount'] = $leave_accrual_rule_carry_over_amount;

        return $this;
    }

    /**
     * Gets leave_accrual_rule_accrue_in_advance
     *
     * @return bool|null
     */
    public function getLeaveAccrualRuleAccrueInAdvance()
    {
        return $this->container['leave_accrual_rule_accrue_in_advance'];
    }

    /**
     * Sets leave_accrual_rule_accrue_in_advance
     *
     * @param bool|null $leave_accrual_rule_accrue_in_advance 
     *
     * @return self
     */
    public function setLeaveAccrualRuleAccrueInAdvance($leave_accrual_rule_accrue_in_advance)
    {
        if (is_null($leave_accrual_rule_accrue_in_advance)) {
            throw new \InvalidArgumentException('non-nullable leave_accrual_rule_accrue_in_advance cannot be null');
        }
        $this->container['leave_accrual_rule_accrue_in_advance'] = $leave_accrual_rule_accrue_in_advance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


