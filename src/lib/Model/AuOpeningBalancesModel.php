<?php
/**
 * AuOpeningBalancesModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuOpeningBalancesModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuOpeningBalancesModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuOpeningBalancesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deductions' => '\OpenAPI\Client\Model\AuInitialDeductionModel[]',
        'payg_withholding_amount' => 'float',
        'method_b2_payg_withholding_amount' => 'float',
        'sfss_amount' => 'float',
        'help_amount' => 'float',
        'super_contribution' => 'float',
        'employer_contribution' => 'float',
        'non_resc_employer_contribution' => 'float',
        'earnings_lines' => '\OpenAPI\Client\Model\AuInitialEarningsModel[]',
        'etps' => '\OpenAPI\Client\Model\OpeningBalancesEtpModel[]',
        'employee_id' => 'int',
        'total_hours' => 'float',
        'gross_earnings' => 'float',
        'leave_balances' => '\OpenAPI\Client\Model\InitialLeaveBalanceModel[]',
        'employer_liabilities' => '\OpenAPI\Client\Model\InitialEmployerLiabilityModel[]',
        'financial_year_starting_year' => 'int',
        'location_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deductions' => null,
        'payg_withholding_amount' => 'double',
        'method_b2_payg_withholding_amount' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'non_resc_employer_contribution' => 'double',
        'earnings_lines' => null,
        'etps' => null,
        'employee_id' => 'int32',
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'leave_balances' => null,
        'employer_liabilities' => null,
        'financial_year_starting_year' => 'int32',
        'location_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deductions' => false,
		'payg_withholding_amount' => false,
		'method_b2_payg_withholding_amount' => false,
		'sfss_amount' => false,
		'help_amount' => false,
		'super_contribution' => false,
		'employer_contribution' => false,
		'non_resc_employer_contribution' => false,
		'earnings_lines' => false,
		'etps' => false,
		'employee_id' => false,
		'total_hours' => false,
		'gross_earnings' => false,
		'leave_balances' => false,
		'employer_liabilities' => false,
		'financial_year_starting_year' => false,
		'location_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deductions' => 'deductions',
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'methodB2PaygWithholdingAmount',
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'employer_contribution' => 'employerContribution',
        'non_resc_employer_contribution' => 'nonRescEmployerContribution',
        'earnings_lines' => 'earningsLines',
        'etps' => 'etps',
        'employee_id' => 'employeeId',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'leave_balances' => 'leaveBalances',
        'employer_liabilities' => 'employerLiabilities',
        'financial_year_starting_year' => 'financialYearStartingYear',
        'location_name' => 'locationName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deductions' => 'setDeductions',
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'setMethodB2PaygWithholdingAmount',
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'employer_contribution' => 'setEmployerContribution',
        'non_resc_employer_contribution' => 'setNonRescEmployerContribution',
        'earnings_lines' => 'setEarningsLines',
        'etps' => 'setEtps',
        'employee_id' => 'setEmployeeId',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'leave_balances' => 'setLeaveBalances',
        'employer_liabilities' => 'setEmployerLiabilities',
        'financial_year_starting_year' => 'setFinancialYearStartingYear',
        'location_name' => 'setLocationName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deductions' => 'getDeductions',
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'getMethodB2PaygWithholdingAmount',
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'employer_contribution' => 'getEmployerContribution',
        'non_resc_employer_contribution' => 'getNonRescEmployerContribution',
        'earnings_lines' => 'getEarningsLines',
        'etps' => 'getEtps',
        'employee_id' => 'getEmployeeId',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'leave_balances' => 'getLeaveBalances',
        'employer_liabilities' => 'getEmployerLiabilities',
        'financial_year_starting_year' => 'getFinancialYearStartingYear',
        'location_name' => 'getLocationName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('payg_withholding_amount', $data ?? [], null);
        $this->setIfExists('method_b2_payg_withholding_amount', $data ?? [], null);
        $this->setIfExists('sfss_amount', $data ?? [], null);
        $this->setIfExists('help_amount', $data ?? [], null);
        $this->setIfExists('super_contribution', $data ?? [], null);
        $this->setIfExists('employer_contribution', $data ?? [], null);
        $this->setIfExists('non_resc_employer_contribution', $data ?? [], null);
        $this->setIfExists('earnings_lines', $data ?? [], null);
        $this->setIfExists('etps', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('leave_balances', $data ?? [], null);
        $this->setIfExists('employer_liabilities', $data ?? [], null);
        $this->setIfExists('financial_year_starting_year', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deductions
     *
     * @return \OpenAPI\Client\Model\AuInitialDeductionModel[]|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param \OpenAPI\Client\Model\AuInitialDeductionModel[]|null $deductions 
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets payg_withholding_amount
     *
     * @return float|null
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param float|null $payg_withholding_amount 
     *
     * @return self
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        if (is_null($payg_withholding_amount)) {
            throw new \InvalidArgumentException('non-nullable payg_withholding_amount cannot be null');
        }
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets method_b2_payg_withholding_amount
     *
     * @return float|null
     */
    public function getMethodB2PaygWithholdingAmount()
    {
        return $this->container['method_b2_payg_withholding_amount'];
    }

    /**
     * Sets method_b2_payg_withholding_amount
     *
     * @param float|null $method_b2_payg_withholding_amount 
     *
     * @return self
     */
    public function setMethodB2PaygWithholdingAmount($method_b2_payg_withholding_amount)
    {
        if (is_null($method_b2_payg_withholding_amount)) {
            throw new \InvalidArgumentException('non-nullable method_b2_payg_withholding_amount cannot be null');
        }
        $this->container['method_b2_payg_withholding_amount'] = $method_b2_payg_withholding_amount;

        return $this;
    }

    /**
     * Gets sfss_amount
     *
     * @return float|null
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param float|null $sfss_amount 
     *
     * @return self
     */
    public function setSfssAmount($sfss_amount)
    {
        if (is_null($sfss_amount)) {
            throw new \InvalidArgumentException('non-nullable sfss_amount cannot be null');
        }
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return float|null
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param float|null $help_amount 
     *
     * @return self
     */
    public function setHelpAmount($help_amount)
    {
        if (is_null($help_amount)) {
            throw new \InvalidArgumentException('non-nullable help_amount cannot be null');
        }
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return float|null
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float|null $super_contribution 
     *
     * @return self
     */
    public function setSuperContribution($super_contribution)
    {
        if (is_null($super_contribution)) {
            throw new \InvalidArgumentException('non-nullable super_contribution cannot be null');
        }
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return float|null
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param float|null $employer_contribution 
     *
     * @return self
     */
    public function setEmployerContribution($employer_contribution)
    {
        if (is_null($employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_contribution cannot be null');
        }
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets non_resc_employer_contribution
     *
     * @return float|null
     */
    public function getNonRescEmployerContribution()
    {
        return $this->container['non_resc_employer_contribution'];
    }

    /**
     * Sets non_resc_employer_contribution
     *
     * @param float|null $non_resc_employer_contribution 
     *
     * @return self
     */
    public function setNonRescEmployerContribution($non_resc_employer_contribution)
    {
        if (is_null($non_resc_employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable non_resc_employer_contribution cannot be null');
        }
        $this->container['non_resc_employer_contribution'] = $non_resc_employer_contribution;

        return $this;
    }

    /**
     * Gets earnings_lines
     *
     * @return \OpenAPI\Client\Model\AuInitialEarningsModel[]|null
     */
    public function getEarningsLines()
    {
        return $this->container['earnings_lines'];
    }

    /**
     * Sets earnings_lines
     *
     * @param \OpenAPI\Client\Model\AuInitialEarningsModel[]|null $earnings_lines 
     *
     * @return self
     */
    public function setEarningsLines($earnings_lines)
    {
        if (is_null($earnings_lines)) {
            throw new \InvalidArgumentException('non-nullable earnings_lines cannot be null');
        }
        $this->container['earnings_lines'] = $earnings_lines;

        return $this;
    }

    /**
     * Gets etps
     *
     * @return \OpenAPI\Client\Model\OpeningBalancesEtpModel[]|null
     */
    public function getEtps()
    {
        return $this->container['etps'];
    }

    /**
     * Sets etps
     *
     * @param \OpenAPI\Client\Model\OpeningBalancesEtpModel[]|null $etps 
     *
     * @return self
     */
    public function setEtps($etps)
    {
        if (is_null($etps)) {
            throw new \InvalidArgumentException('non-nullable etps cannot be null');
        }
        $this->container['etps'] = $etps;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets leave_balances
     *
     * @return \OpenAPI\Client\Model\InitialLeaveBalanceModel[]|null
     */
    public function getLeaveBalances()
    {
        return $this->container['leave_balances'];
    }

    /**
     * Sets leave_balances
     *
     * @param \OpenAPI\Client\Model\InitialLeaveBalanceModel[]|null $leave_balances 
     *
     * @return self
     */
    public function setLeaveBalances($leave_balances)
    {
        if (is_null($leave_balances)) {
            throw new \InvalidArgumentException('non-nullable leave_balances cannot be null');
        }
        $this->container['leave_balances'] = $leave_balances;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return \OpenAPI\Client\Model\InitialEmployerLiabilityModel[]|null
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param \OpenAPI\Client\Model\InitialEmployerLiabilityModel[]|null $employer_liabilities 
     *
     * @return self
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        if (is_null($employer_liabilities)) {
            throw new \InvalidArgumentException('non-nullable employer_liabilities cannot be null');
        }
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }

    /**
     * Gets financial_year_starting_year
     *
     * @return int|null
     */
    public function getFinancialYearStartingYear()
    {
        return $this->container['financial_year_starting_year'];
    }

    /**
     * Sets financial_year_starting_year
     *
     * @param int|null $financial_year_starting_year 
     *
     * @return self
     */
    public function setFinancialYearStartingYear($financial_year_starting_year)
    {
        if (is_null($financial_year_starting_year)) {
            throw new \InvalidArgumentException('non-nullable financial_year_starting_year cannot be null');
        }
        $this->container['financial_year_starting_year'] = $financial_year_starting_year;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


