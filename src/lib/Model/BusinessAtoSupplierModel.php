<?php
/**
 * BusinessAtoSupplierModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BusinessAtoSupplierModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BusinessAtoSupplierModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BusinessAtoSupplierModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'abn' => 'string',
        'name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'suburb' => 'string',
        'state' => 'string',
        'post_code' => 'string',
        'contact_name' => 'string',
        'signatory_name' => 'string',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'country' => 'string',
        'branch' => 'string',
        'role' => 'string',
        'tax_agent_number' => 'string',
        'intermediary_abn' => 'string',
        'intermediary_contact_name' => 'string',
        'intermediary_contact_email' => 'string',
        'intermediary_contact_phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'abn' => null,
        'name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'suburb' => null,
        'state' => null,
        'post_code' => null,
        'contact_name' => null,
        'signatory_name' => null,
        'phone_number' => null,
        'fax_number' => null,
        'country' => null,
        'branch' => null,
        'role' => null,
        'tax_agent_number' => null,
        'intermediary_abn' => null,
        'intermediary_contact_name' => null,
        'intermediary_contact_email' => null,
        'intermediary_contact_phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'abn' => false,
		'name' => false,
		'address_line1' => false,
		'address_line2' => false,
		'suburb' => false,
		'state' => false,
		'post_code' => false,
		'contact_name' => false,
		'signatory_name' => false,
		'phone_number' => false,
		'fax_number' => false,
		'country' => false,
		'branch' => false,
		'role' => false,
		'tax_agent_number' => false,
		'intermediary_abn' => false,
		'intermediary_contact_name' => false,
		'intermediary_contact_email' => false,
		'intermediary_contact_phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'abn' => 'abn',
        'name' => 'name',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'suburb' => 'suburb',
        'state' => 'state',
        'post_code' => 'postCode',
        'contact_name' => 'contactName',
        'signatory_name' => 'signatoryName',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'country' => 'country',
        'branch' => 'branch',
        'role' => 'role',
        'tax_agent_number' => 'taxAgentNumber',
        'intermediary_abn' => 'intermediaryAbn',
        'intermediary_contact_name' => 'intermediaryContactName',
        'intermediary_contact_email' => 'intermediaryContactEmail',
        'intermediary_contact_phone' => 'intermediaryContactPhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'abn' => 'setAbn',
        'name' => 'setName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'suburb' => 'setSuburb',
        'state' => 'setState',
        'post_code' => 'setPostCode',
        'contact_name' => 'setContactName',
        'signatory_name' => 'setSignatoryName',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'country' => 'setCountry',
        'branch' => 'setBranch',
        'role' => 'setRole',
        'tax_agent_number' => 'setTaxAgentNumber',
        'intermediary_abn' => 'setIntermediaryAbn',
        'intermediary_contact_name' => 'setIntermediaryContactName',
        'intermediary_contact_email' => 'setIntermediaryContactEmail',
        'intermediary_contact_phone' => 'setIntermediaryContactPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'abn' => 'getAbn',
        'name' => 'getName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'suburb' => 'getSuburb',
        'state' => 'getState',
        'post_code' => 'getPostCode',
        'contact_name' => 'getContactName',
        'signatory_name' => 'getSignatoryName',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'country' => 'getCountry',
        'branch' => 'getBranch',
        'role' => 'getRole',
        'tax_agent_number' => 'getTaxAgentNumber',
        'intermediary_abn' => 'getIntermediaryAbn',
        'intermediary_contact_name' => 'getIntermediaryContactName',
        'intermediary_contact_email' => 'getIntermediaryContactEmail',
        'intermediary_contact_phone' => 'getIntermediaryContactPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROLE_EMPLOYER = 'Employer';
    public const ROLE_REGISTERED_TAX_AGENT = 'RegisteredTaxAgent';
    public const ROLE_INTERMEDIARY = 'Intermediary';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_EMPLOYER,
            self::ROLE_REGISTERED_TAX_AGENT,
            self::ROLE_INTERMEDIARY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('abn', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('suburb', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('signatory_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('branch', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('tax_agent_number', $data ?? [], null);
        $this->setIfExists('intermediary_abn', $data ?? [], null);
        $this->setIfExists('intermediary_contact_name', $data ?? [], null);
        $this->setIfExists('intermediary_contact_email', $data ?? [], null);
        $this->setIfExists('intermediary_contact_phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn 
     *
     * @return self
     */
    public function setAbn($abn)
    {
        if (is_null($abn)) {
            throw new \InvalidArgumentException('non-nullable abn cannot be null');
        }
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            throw new \InvalidArgumentException('non-nullable address_line2 cannot be null');
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string|null
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string|null $suburb 
     *
     * @return self
     */
    public function setSuburb($suburb)
    {
        if (is_null($suburb)) {
            throw new \InvalidArgumentException('non-nullable suburb cannot be null');
        }
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state 
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code 
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name 
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets signatory_name
     *
     * @return string|null
     */
    public function getSignatoryName()
    {
        return $this->container['signatory_name'];
    }

    /**
     * Sets signatory_name
     *
     * @param string|null $signatory_name 
     *
     * @return self
     */
    public function setSignatoryName($signatory_name)
    {
        if (is_null($signatory_name)) {
            throw new \InvalidArgumentException('non-nullable signatory_name cannot be null');
        }
        $this->container['signatory_name'] = $signatory_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number 
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number 
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            throw new \InvalidArgumentException('non-nullable fax_number cannot be null');
        }
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country 
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch 
     *
     * @return self
     */
    public function setBranch($branch)
    {
        if (is_null($branch)) {
            throw new \InvalidArgumentException('non-nullable branch cannot be null');
        }
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role 
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets tax_agent_number
     *
     * @return string|null
     */
    public function getTaxAgentNumber()
    {
        return $this->container['tax_agent_number'];
    }

    /**
     * Sets tax_agent_number
     *
     * @param string|null $tax_agent_number 
     *
     * @return self
     */
    public function setTaxAgentNumber($tax_agent_number)
    {
        if (is_null($tax_agent_number)) {
            throw new \InvalidArgumentException('non-nullable tax_agent_number cannot be null');
        }
        $this->container['tax_agent_number'] = $tax_agent_number;

        return $this;
    }

    /**
     * Gets intermediary_abn
     *
     * @return string|null
     */
    public function getIntermediaryAbn()
    {
        return $this->container['intermediary_abn'];
    }

    /**
     * Sets intermediary_abn
     *
     * @param string|null $intermediary_abn 
     *
     * @return self
     */
    public function setIntermediaryAbn($intermediary_abn)
    {
        if (is_null($intermediary_abn)) {
            throw new \InvalidArgumentException('non-nullable intermediary_abn cannot be null');
        }
        $this->container['intermediary_abn'] = $intermediary_abn;

        return $this;
    }

    /**
     * Gets intermediary_contact_name
     *
     * @return string|null
     */
    public function getIntermediaryContactName()
    {
        return $this->container['intermediary_contact_name'];
    }

    /**
     * Sets intermediary_contact_name
     *
     * @param string|null $intermediary_contact_name 
     *
     * @return self
     */
    public function setIntermediaryContactName($intermediary_contact_name)
    {
        if (is_null($intermediary_contact_name)) {
            throw new \InvalidArgumentException('non-nullable intermediary_contact_name cannot be null');
        }
        $this->container['intermediary_contact_name'] = $intermediary_contact_name;

        return $this;
    }

    /**
     * Gets intermediary_contact_email
     *
     * @return string|null
     */
    public function getIntermediaryContactEmail()
    {
        return $this->container['intermediary_contact_email'];
    }

    /**
     * Sets intermediary_contact_email
     *
     * @param string|null $intermediary_contact_email 
     *
     * @return self
     */
    public function setIntermediaryContactEmail($intermediary_contact_email)
    {
        if (is_null($intermediary_contact_email)) {
            throw new \InvalidArgumentException('non-nullable intermediary_contact_email cannot be null');
        }
        $this->container['intermediary_contact_email'] = $intermediary_contact_email;

        return $this;
    }

    /**
     * Gets intermediary_contact_phone
     *
     * @return string|null
     */
    public function getIntermediaryContactPhone()
    {
        return $this->container['intermediary_contact_phone'];
    }

    /**
     * Sets intermediary_contact_phone
     *
     * @param string|null $intermediary_contact_phone 
     *
     * @return self
     */
    public function setIntermediaryContactPhone($intermediary_contact_phone)
    {
        if (is_null($intermediary_contact_phone)) {
            throw new \InvalidArgumentException('non-nullable intermediary_contact_phone cannot be null');
        }
        $this->container['intermediary_contact_phone'] = $intermediary_contact_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


