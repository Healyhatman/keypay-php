<?php
/**
 * AuApiPaySlipEarningsLineModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuApiPaySlipEarningsLineModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuApiPaySlipEarningsLineModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuApiPaySlipEarningsLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super_contribution' => 'double',
        'pay_category_name' => 'string',
        'units' => 'double',
        'is_fixed' => 'bool',
        'is_tax_exempt' => 'bool',
        'rate' => 'double',
        'notes' => 'string',
        'gross_earnings' => 'double',
        'taxable_earnings' => 'double',
        'location_name' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super_contribution' => 'double',
        'pay_category_name' => null,
        'units' => 'double',
        'is_fixed' => null,
        'is_tax_exempt' => null,
        'rate' => 'double',
        'notes' => null,
        'gross_earnings' => 'double',
        'taxable_earnings' => 'double',
        'location_name' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super_contribution' => 'superContribution',
        'pay_category_name' => 'payCategoryName',
        'units' => 'units',
        'is_fixed' => 'isFixed',
        'is_tax_exempt' => 'isTaxExempt',
        'rate' => 'rate',
        'notes' => 'notes',
        'gross_earnings' => 'grossEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'location_name' => 'locationName',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super_contribution' => 'setSuperContribution',
        'pay_category_name' => 'setPayCategoryName',
        'units' => 'setUnits',
        'is_fixed' => 'setIsFixed',
        'is_tax_exempt' => 'setIsTaxExempt',
        'rate' => 'setRate',
        'notes' => 'setNotes',
        'gross_earnings' => 'setGrossEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'location_name' => 'setLocationName',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super_contribution' => 'getSuperContribution',
        'pay_category_name' => 'getPayCategoryName',
        'units' => 'getUnits',
        'is_fixed' => 'getIsFixed',
        'is_tax_exempt' => 'getIsTaxExempt',
        'rate' => 'getRate',
        'notes' => 'getNotes',
        'gross_earnings' => 'getGrossEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'location_name' => 'getLocationName',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super_contribution'] = isset($data['super_contribution']) ? $data['super_contribution'] : null;
        $this->container['pay_category_name'] = isset($data['pay_category_name']) ? $data['pay_category_name'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['is_fixed'] = isset($data['is_fixed']) ? $data['is_fixed'] : null;
        $this->container['is_tax_exempt'] = isset($data['is_tax_exempt']) ? $data['is_tax_exempt'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['gross_earnings'] = isset($data['gross_earnings']) ? $data['gross_earnings'] : null;
        $this->container['taxable_earnings'] = isset($data['taxable_earnings']) ? $data['taxable_earnings'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets super_contribution
     *
     * @return float
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float $super_contribution
     *
     * @return $this
     */
    public function setSuperContribution($super_contribution)
    {
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets pay_category_name
     *
     * @return string
     */
    public function getPayCategoryName()
    {
        return $this->container['pay_category_name'];
    }

    /**
     * Sets pay_category_name
     *
     * @param string $pay_category_name
     *
     * @return $this
     */
    public function setPayCategoryName($pay_category_name)
    {
        $this->container['pay_category_name'] = $pay_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float $units
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets is_fixed
     *
     * @return bool
     */
    public function getIsFixed()
    {
        return $this->container['is_fixed'];
    }

    /**
     * Sets is_fixed
     *
     * @param bool $is_fixed
     *
     * @return $this
     */
    public function setIsFixed($is_fixed)
    {
        $this->container['is_fixed'] = $is_fixed;

        return $this;
    }

    /**
     * Gets is_tax_exempt
     *
     * @return bool
     */
    public function getIsTaxExempt()
    {
        return $this->container['is_tax_exempt'];
    }

    /**
     * Sets is_tax_exempt
     *
     * @param bool $is_tax_exempt
     *
     * @return $this
     */
    public function setIsTaxExempt($is_tax_exempt)
    {
        $this->container['is_tax_exempt'] = $is_tax_exempt;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float $rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float $gross_earnings
     *
     * @return $this
     */
    public function setGrossEarnings($gross_earnings)
    {
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float $taxable_earnings
     *
     * @return $this
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
