<?php
/**
 * ShiftPartModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShiftPartModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShiftPartModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShiftPartModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_break' => 'bool',
        'is_paid_break' => 'bool',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'effective_duration' => 'string',
        'actual_duration' => 'string',
        'pay_category' => 'string',
        'pay_category_id' => 'int',
        'cost' => 'float',
        'rate_multiplier' => 'float',
        'base_rate' => 'float',
        'calculated_rate' => 'float',
        'display_duration' => 'string',
        'work_type' => '\OpenAPI\Client\Model\NominalWorkType',
        'classification' => '\OpenAPI\Client\Model\NominalClassification',
        'leave_category' => '\OpenAPI\Client\Model\NominalLeaveCategory',
        'location' => '\OpenAPI\Client\Model\NominalLocation',
        'is_allowance_or_unit_based' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_break' => null,
        'is_paid_break' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'effective_duration' => null,
        'actual_duration' => null,
        'pay_category' => null,
        'pay_category_id' => 'int32',
        'cost' => 'double',
        'rate_multiplier' => 'double',
        'base_rate' => 'double',
        'calculated_rate' => 'double',
        'display_duration' => null,
        'work_type' => null,
        'classification' => null,
        'leave_category' => null,
        'location' => null,
        'is_allowance_or_unit_based' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_break' => false,
		'is_paid_break' => false,
		'start_time' => false,
		'end_time' => false,
		'effective_duration' => false,
		'actual_duration' => false,
		'pay_category' => false,
		'pay_category_id' => false,
		'cost' => false,
		'rate_multiplier' => false,
		'base_rate' => false,
		'calculated_rate' => false,
		'display_duration' => false,
		'work_type' => false,
		'classification' => false,
		'leave_category' => false,
		'location' => false,
		'is_allowance_or_unit_based' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_break' => 'isBreak',
        'is_paid_break' => 'isPaidBreak',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'effective_duration' => 'effectiveDuration',
        'actual_duration' => 'actualDuration',
        'pay_category' => 'payCategory',
        'pay_category_id' => 'payCategoryId',
        'cost' => 'cost',
        'rate_multiplier' => 'rateMultiplier',
        'base_rate' => 'baseRate',
        'calculated_rate' => 'calculatedRate',
        'display_duration' => 'displayDuration',
        'work_type' => 'workType',
        'classification' => 'classification',
        'leave_category' => 'leaveCategory',
        'location' => 'location',
        'is_allowance_or_unit_based' => 'isAllowanceOrUnitBased'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_break' => 'setIsBreak',
        'is_paid_break' => 'setIsPaidBreak',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'effective_duration' => 'setEffectiveDuration',
        'actual_duration' => 'setActualDuration',
        'pay_category' => 'setPayCategory',
        'pay_category_id' => 'setPayCategoryId',
        'cost' => 'setCost',
        'rate_multiplier' => 'setRateMultiplier',
        'base_rate' => 'setBaseRate',
        'calculated_rate' => 'setCalculatedRate',
        'display_duration' => 'setDisplayDuration',
        'work_type' => 'setWorkType',
        'classification' => 'setClassification',
        'leave_category' => 'setLeaveCategory',
        'location' => 'setLocation',
        'is_allowance_or_unit_based' => 'setIsAllowanceOrUnitBased'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_break' => 'getIsBreak',
        'is_paid_break' => 'getIsPaidBreak',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'effective_duration' => 'getEffectiveDuration',
        'actual_duration' => 'getActualDuration',
        'pay_category' => 'getPayCategory',
        'pay_category_id' => 'getPayCategoryId',
        'cost' => 'getCost',
        'rate_multiplier' => 'getRateMultiplier',
        'base_rate' => 'getBaseRate',
        'calculated_rate' => 'getCalculatedRate',
        'display_duration' => 'getDisplayDuration',
        'work_type' => 'getWorkType',
        'classification' => 'getClassification',
        'leave_category' => 'getLeaveCategory',
        'location' => 'getLocation',
        'is_allowance_or_unit_based' => 'getIsAllowanceOrUnitBased'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_break', $data ?? [], null);
        $this->setIfExists('is_paid_break', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('effective_duration', $data ?? [], null);
        $this->setIfExists('actual_duration', $data ?? [], null);
        $this->setIfExists('pay_category', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('rate_multiplier', $data ?? [], null);
        $this->setIfExists('base_rate', $data ?? [], null);
        $this->setIfExists('calculated_rate', $data ?? [], null);
        $this->setIfExists('display_duration', $data ?? [], null);
        $this->setIfExists('work_type', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('leave_category', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('is_allowance_or_unit_based', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_break
     *
     * @return bool|null
     */
    public function getIsBreak()
    {
        return $this->container['is_break'];
    }

    /**
     * Sets is_break
     *
     * @param bool|null $is_break 
     *
     * @return self
     */
    public function setIsBreak($is_break)
    {
        if (is_null($is_break)) {
            throw new \InvalidArgumentException('non-nullable is_break cannot be null');
        }
        $this->container['is_break'] = $is_break;

        return $this;
    }

    /**
     * Gets is_paid_break
     *
     * @return bool|null
     */
    public function getIsPaidBreak()
    {
        return $this->container['is_paid_break'];
    }

    /**
     * Sets is_paid_break
     *
     * @param bool|null $is_paid_break 
     *
     * @return self
     */
    public function setIsPaidBreak($is_paid_break)
    {
        if (is_null($is_paid_break)) {
            throw new \InvalidArgumentException('non-nullable is_paid_break cannot be null');
        }
        $this->container['is_paid_break'] = $is_paid_break;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time 
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time 
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets effective_duration
     *
     * @return string|null
     */
    public function getEffectiveDuration()
    {
        return $this->container['effective_duration'];
    }

    /**
     * Sets effective_duration
     *
     * @param string|null $effective_duration 
     *
     * @return self
     */
    public function setEffectiveDuration($effective_duration)
    {
        if (is_null($effective_duration)) {
            throw new \InvalidArgumentException('non-nullable effective_duration cannot be null');
        }
        $this->container['effective_duration'] = $effective_duration;

        return $this;
    }

    /**
     * Gets actual_duration
     *
     * @return string|null
     */
    public function getActualDuration()
    {
        return $this->container['actual_duration'];
    }

    /**
     * Sets actual_duration
     *
     * @param string|null $actual_duration 
     *
     * @return self
     */
    public function setActualDuration($actual_duration)
    {
        if (is_null($actual_duration)) {
            throw new \InvalidArgumentException('non-nullable actual_duration cannot be null');
        }
        $this->container['actual_duration'] = $actual_duration;

        return $this;
    }

    /**
     * Gets pay_category
     *
     * @return string|null
     */
    public function getPayCategory()
    {
        return $this->container['pay_category'];
    }

    /**
     * Sets pay_category
     *
     * @param string|null $pay_category 
     *
     * @return self
     */
    public function setPayCategory($pay_category)
    {
        if (is_null($pay_category)) {
            throw new \InvalidArgumentException('non-nullable pay_category cannot be null');
        }
        $this->container['pay_category'] = $pay_category;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost 
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets rate_multiplier
     *
     * @return float|null
     */
    public function getRateMultiplier()
    {
        return $this->container['rate_multiplier'];
    }

    /**
     * Sets rate_multiplier
     *
     * @param float|null $rate_multiplier 
     *
     * @return self
     */
    public function setRateMultiplier($rate_multiplier)
    {
        if (is_null($rate_multiplier)) {
            throw new \InvalidArgumentException('non-nullable rate_multiplier cannot be null');
        }
        $this->container['rate_multiplier'] = $rate_multiplier;

        return $this;
    }

    /**
     * Gets base_rate
     *
     * @return float|null
     */
    public function getBaseRate()
    {
        return $this->container['base_rate'];
    }

    /**
     * Sets base_rate
     *
     * @param float|null $base_rate 
     *
     * @return self
     */
    public function setBaseRate($base_rate)
    {
        if (is_null($base_rate)) {
            throw new \InvalidArgumentException('non-nullable base_rate cannot be null');
        }
        $this->container['base_rate'] = $base_rate;

        return $this;
    }

    /**
     * Gets calculated_rate
     *
     * @return float|null
     */
    public function getCalculatedRate()
    {
        return $this->container['calculated_rate'];
    }

    /**
     * Sets calculated_rate
     *
     * @param float|null $calculated_rate 
     *
     * @return self
     */
    public function setCalculatedRate($calculated_rate)
    {
        if (is_null($calculated_rate)) {
            throw new \InvalidArgumentException('non-nullable calculated_rate cannot be null');
        }
        $this->container['calculated_rate'] = $calculated_rate;

        return $this;
    }

    /**
     * Gets display_duration
     *
     * @return string|null
     */
    public function getDisplayDuration()
    {
        return $this->container['display_duration'];
    }

    /**
     * Sets display_duration
     *
     * @param string|null $display_duration 
     *
     * @return self
     */
    public function setDisplayDuration($display_duration)
    {
        if (is_null($display_duration)) {
            throw new \InvalidArgumentException('non-nullable display_duration cannot be null');
        }
        $this->container['display_duration'] = $display_duration;

        return $this;
    }

    /**
     * Gets work_type
     *
     * @return \OpenAPI\Client\Model\NominalWorkType|null
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     *
     * @param \OpenAPI\Client\Model\NominalWorkType|null $work_type work_type
     *
     * @return self
     */
    public function setWorkType($work_type)
    {
        if (is_null($work_type)) {
            throw new \InvalidArgumentException('non-nullable work_type cannot be null');
        }
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return \OpenAPI\Client\Model\NominalClassification|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param \OpenAPI\Client\Model\NominalClassification|null $classification classification
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets leave_category
     *
     * @return \OpenAPI\Client\Model\NominalLeaveCategory|null
     */
    public function getLeaveCategory()
    {
        return $this->container['leave_category'];
    }

    /**
     * Sets leave_category
     *
     * @param \OpenAPI\Client\Model\NominalLeaveCategory|null $leave_category leave_category
     *
     * @return self
     */
    public function setLeaveCategory($leave_category)
    {
        if (is_null($leave_category)) {
            throw new \InvalidArgumentException('non-nullable leave_category cannot be null');
        }
        $this->container['leave_category'] = $leave_category;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\NominalLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\NominalLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets is_allowance_or_unit_based
     *
     * @return bool|null
     */
    public function getIsAllowanceOrUnitBased()
    {
        return $this->container['is_allowance_or_unit_based'];
    }

    /**
     * Sets is_allowance_or_unit_based
     *
     * @param bool|null $is_allowance_or_unit_based 
     *
     * @return self
     */
    public function setIsAllowanceOrUnitBased($is_allowance_or_unit_based)
    {
        if (is_null($is_allowance_or_unit_based)) {
            throw new \InvalidArgumentException('non-nullable is_allowance_or_unit_based cannot be null');
        }
        $this->container['is_allowance_or_unit_based'] = $is_allowance_or_unit_based;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


