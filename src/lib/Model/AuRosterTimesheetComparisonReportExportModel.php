<?php
/**
 * AuRosterTimesheetComparisonReportExportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuRosterTimesheetComparisonReportExportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuRosterTimesheetComparisonReportExportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuRosterTimesheetComparisonReportExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employment_type' => 'string',
        'employee_id' => 'int',
        'employee_first_name' => 'string',
        'employee_surname' => 'string',
        'employee_external_id' => 'string',
        'employee_default_location' => 'string',
        'pay_schedule_name' => 'string',
        'rostered_id' => 'int',
        'rostered_status' => 'string',
        'rostered_location' => 'string',
        'rostered_work_type' => 'string',
        'rostered_start' => '\DateTime',
        'rostered_start_time' => 'string',
        'rostered_end' => '\DateTime',
        'rostered_end_time' => 'string',
        'rostered_duration' => 'string',
        'rostered_breaks' => 'string',
        'rostered_cost' => 'float',
        'timesheet_id' => 'int',
        'timesheet_status' => 'string',
        'timesheet_location' => 'string',
        'timesheet_work_type' => 'string',
        'timesheet_start' => '\DateTime',
        'timesheet_start_time' => 'string',
        'timesheet_end' => '\DateTime',
        'timesheet_end_time' => 'string',
        'timesheet_duration' => 'string',
        'timesheet_breaks' => 'string',
        'timesheet_units' => 'float',
        'timesheet_unit_type' => 'string',
        'timesheet_cost' => 'float',
        'time_variance' => 'string',
        'cost_variance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employment_type' => null,
        'employee_id' => 'int32',
        'employee_first_name' => null,
        'employee_surname' => null,
        'employee_external_id' => null,
        'employee_default_location' => null,
        'pay_schedule_name' => null,
        'rostered_id' => 'int32',
        'rostered_status' => null,
        'rostered_location' => null,
        'rostered_work_type' => null,
        'rostered_start' => 'date-time',
        'rostered_start_time' => null,
        'rostered_end' => 'date-time',
        'rostered_end_time' => null,
        'rostered_duration' => null,
        'rostered_breaks' => null,
        'rostered_cost' => 'double',
        'timesheet_id' => 'int32',
        'timesheet_status' => null,
        'timesheet_location' => null,
        'timesheet_work_type' => null,
        'timesheet_start' => 'date-time',
        'timesheet_start_time' => null,
        'timesheet_end' => 'date-time',
        'timesheet_end_time' => null,
        'timesheet_duration' => null,
        'timesheet_breaks' => null,
        'timesheet_units' => 'double',
        'timesheet_unit_type' => null,
        'timesheet_cost' => 'double',
        'time_variance' => null,
        'cost_variance' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employment_type' => false,
		'employee_id' => false,
		'employee_first_name' => false,
		'employee_surname' => false,
		'employee_external_id' => false,
		'employee_default_location' => false,
		'pay_schedule_name' => false,
		'rostered_id' => false,
		'rostered_status' => false,
		'rostered_location' => false,
		'rostered_work_type' => false,
		'rostered_start' => false,
		'rostered_start_time' => false,
		'rostered_end' => false,
		'rostered_end_time' => false,
		'rostered_duration' => false,
		'rostered_breaks' => false,
		'rostered_cost' => false,
		'timesheet_id' => false,
		'timesheet_status' => false,
		'timesheet_location' => false,
		'timesheet_work_type' => false,
		'timesheet_start' => false,
		'timesheet_start_time' => false,
		'timesheet_end' => false,
		'timesheet_end_time' => false,
		'timesheet_duration' => false,
		'timesheet_breaks' => false,
		'timesheet_units' => false,
		'timesheet_unit_type' => false,
		'timesheet_cost' => false,
		'time_variance' => false,
		'cost_variance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employment_type' => 'employmentType',
        'employee_id' => 'employeeId',
        'employee_first_name' => 'employeeFirstName',
        'employee_surname' => 'employeeSurname',
        'employee_external_id' => 'employeeExternalId',
        'employee_default_location' => 'employeeDefaultLocation',
        'pay_schedule_name' => 'payScheduleName',
        'rostered_id' => 'rosteredId',
        'rostered_status' => 'rosteredStatus',
        'rostered_location' => 'rosteredLocation',
        'rostered_work_type' => 'rosteredWorkType',
        'rostered_start' => 'rosteredStart',
        'rostered_start_time' => 'rosteredStartTime',
        'rostered_end' => 'rosteredEnd',
        'rostered_end_time' => 'rosteredEndTime',
        'rostered_duration' => 'rosteredDuration',
        'rostered_breaks' => 'rosteredBreaks',
        'rostered_cost' => 'rosteredCost',
        'timesheet_id' => 'timesheetId',
        'timesheet_status' => 'timesheetStatus',
        'timesheet_location' => 'timesheetLocation',
        'timesheet_work_type' => 'timesheetWorkType',
        'timesheet_start' => 'timesheetStart',
        'timesheet_start_time' => 'timesheetStartTime',
        'timesheet_end' => 'timesheetEnd',
        'timesheet_end_time' => 'timesheetEndTime',
        'timesheet_duration' => 'timesheetDuration',
        'timesheet_breaks' => 'timesheetBreaks',
        'timesheet_units' => 'timesheetUnits',
        'timesheet_unit_type' => 'timesheetUnitType',
        'timesheet_cost' => 'timesheetCost',
        'time_variance' => 'timeVariance',
        'cost_variance' => 'costVariance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employment_type' => 'setEmploymentType',
        'employee_id' => 'setEmployeeId',
        'employee_first_name' => 'setEmployeeFirstName',
        'employee_surname' => 'setEmployeeSurname',
        'employee_external_id' => 'setEmployeeExternalId',
        'employee_default_location' => 'setEmployeeDefaultLocation',
        'pay_schedule_name' => 'setPayScheduleName',
        'rostered_id' => 'setRosteredId',
        'rostered_status' => 'setRosteredStatus',
        'rostered_location' => 'setRosteredLocation',
        'rostered_work_type' => 'setRosteredWorkType',
        'rostered_start' => 'setRosteredStart',
        'rostered_start_time' => 'setRosteredStartTime',
        'rostered_end' => 'setRosteredEnd',
        'rostered_end_time' => 'setRosteredEndTime',
        'rostered_duration' => 'setRosteredDuration',
        'rostered_breaks' => 'setRosteredBreaks',
        'rostered_cost' => 'setRosteredCost',
        'timesheet_id' => 'setTimesheetId',
        'timesheet_status' => 'setTimesheetStatus',
        'timesheet_location' => 'setTimesheetLocation',
        'timesheet_work_type' => 'setTimesheetWorkType',
        'timesheet_start' => 'setTimesheetStart',
        'timesheet_start_time' => 'setTimesheetStartTime',
        'timesheet_end' => 'setTimesheetEnd',
        'timesheet_end_time' => 'setTimesheetEndTime',
        'timesheet_duration' => 'setTimesheetDuration',
        'timesheet_breaks' => 'setTimesheetBreaks',
        'timesheet_units' => 'setTimesheetUnits',
        'timesheet_unit_type' => 'setTimesheetUnitType',
        'timesheet_cost' => 'setTimesheetCost',
        'time_variance' => 'setTimeVariance',
        'cost_variance' => 'setCostVariance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employment_type' => 'getEmploymentType',
        'employee_id' => 'getEmployeeId',
        'employee_first_name' => 'getEmployeeFirstName',
        'employee_surname' => 'getEmployeeSurname',
        'employee_external_id' => 'getEmployeeExternalId',
        'employee_default_location' => 'getEmployeeDefaultLocation',
        'pay_schedule_name' => 'getPayScheduleName',
        'rostered_id' => 'getRosteredId',
        'rostered_status' => 'getRosteredStatus',
        'rostered_location' => 'getRosteredLocation',
        'rostered_work_type' => 'getRosteredWorkType',
        'rostered_start' => 'getRosteredStart',
        'rostered_start_time' => 'getRosteredStartTime',
        'rostered_end' => 'getRosteredEnd',
        'rostered_end_time' => 'getRosteredEndTime',
        'rostered_duration' => 'getRosteredDuration',
        'rostered_breaks' => 'getRosteredBreaks',
        'rostered_cost' => 'getRosteredCost',
        'timesheet_id' => 'getTimesheetId',
        'timesheet_status' => 'getTimesheetStatus',
        'timesheet_location' => 'getTimesheetLocation',
        'timesheet_work_type' => 'getTimesheetWorkType',
        'timesheet_start' => 'getTimesheetStart',
        'timesheet_start_time' => 'getTimesheetStartTime',
        'timesheet_end' => 'getTimesheetEnd',
        'timesheet_end_time' => 'getTimesheetEndTime',
        'timesheet_duration' => 'getTimesheetDuration',
        'timesheet_breaks' => 'getTimesheetBreaks',
        'timesheet_units' => 'getTimesheetUnits',
        'timesheet_unit_type' => 'getTimesheetUnitType',
        'timesheet_cost' => 'getTimesheetCost',
        'time_variance' => 'getTimeVariance',
        'cost_variance' => 'getCostVariance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employment_type', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_first_name', $data ?? [], null);
        $this->setIfExists('employee_surname', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
        $this->setIfExists('employee_default_location', $data ?? [], null);
        $this->setIfExists('pay_schedule_name', $data ?? [], null);
        $this->setIfExists('rostered_id', $data ?? [], null);
        $this->setIfExists('rostered_status', $data ?? [], null);
        $this->setIfExists('rostered_location', $data ?? [], null);
        $this->setIfExists('rostered_work_type', $data ?? [], null);
        $this->setIfExists('rostered_start', $data ?? [], null);
        $this->setIfExists('rostered_start_time', $data ?? [], null);
        $this->setIfExists('rostered_end', $data ?? [], null);
        $this->setIfExists('rostered_end_time', $data ?? [], null);
        $this->setIfExists('rostered_duration', $data ?? [], null);
        $this->setIfExists('rostered_breaks', $data ?? [], null);
        $this->setIfExists('rostered_cost', $data ?? [], null);
        $this->setIfExists('timesheet_id', $data ?? [], null);
        $this->setIfExists('timesheet_status', $data ?? [], null);
        $this->setIfExists('timesheet_location', $data ?? [], null);
        $this->setIfExists('timesheet_work_type', $data ?? [], null);
        $this->setIfExists('timesheet_start', $data ?? [], null);
        $this->setIfExists('timesheet_start_time', $data ?? [], null);
        $this->setIfExists('timesheet_end', $data ?? [], null);
        $this->setIfExists('timesheet_end_time', $data ?? [], null);
        $this->setIfExists('timesheet_duration', $data ?? [], null);
        $this->setIfExists('timesheet_breaks', $data ?? [], null);
        $this->setIfExists('timesheet_units', $data ?? [], null);
        $this->setIfExists('timesheet_unit_type', $data ?? [], null);
        $this->setIfExists('timesheet_cost', $data ?? [], null);
        $this->setIfExists('time_variance', $data ?? [], null);
        $this->setIfExists('cost_variance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employment_type
     *
     * @return string|null
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string|null $employment_type 
     *
     * @return self
     */
    public function setEmploymentType($employment_type)
    {
        if (is_null($employment_type)) {
            throw new \InvalidArgumentException('non-nullable employment_type cannot be null');
        }
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_first_name
     *
     * @return string|null
     */
    public function getEmployeeFirstName()
    {
        return $this->container['employee_first_name'];
    }

    /**
     * Sets employee_first_name
     *
     * @param string|null $employee_first_name 
     *
     * @return self
     */
    public function setEmployeeFirstName($employee_first_name)
    {
        if (is_null($employee_first_name)) {
            throw new \InvalidArgumentException('non-nullable employee_first_name cannot be null');
        }
        $this->container['employee_first_name'] = $employee_first_name;

        return $this;
    }

    /**
     * Gets employee_surname
     *
     * @return string|null
     */
    public function getEmployeeSurname()
    {
        return $this->container['employee_surname'];
    }

    /**
     * Sets employee_surname
     *
     * @param string|null $employee_surname 
     *
     * @return self
     */
    public function setEmployeeSurname($employee_surname)
    {
        if (is_null($employee_surname)) {
            throw new \InvalidArgumentException('non-nullable employee_surname cannot be null');
        }
        $this->container['employee_surname'] = $employee_surname;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets employee_default_location
     *
     * @return string|null
     */
    public function getEmployeeDefaultLocation()
    {
        return $this->container['employee_default_location'];
    }

    /**
     * Sets employee_default_location
     *
     * @param string|null $employee_default_location 
     *
     * @return self
     */
    public function setEmployeeDefaultLocation($employee_default_location)
    {
        if (is_null($employee_default_location)) {
            throw new \InvalidArgumentException('non-nullable employee_default_location cannot be null');
        }
        $this->container['employee_default_location'] = $employee_default_location;

        return $this;
    }

    /**
     * Gets pay_schedule_name
     *
     * @return string|null
     */
    public function getPayScheduleName()
    {
        return $this->container['pay_schedule_name'];
    }

    /**
     * Sets pay_schedule_name
     *
     * @param string|null $pay_schedule_name 
     *
     * @return self
     */
    public function setPayScheduleName($pay_schedule_name)
    {
        if (is_null($pay_schedule_name)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_name cannot be null');
        }
        $this->container['pay_schedule_name'] = $pay_schedule_name;

        return $this;
    }

    /**
     * Gets rostered_id
     *
     * @return int|null
     */
    public function getRosteredId()
    {
        return $this->container['rostered_id'];
    }

    /**
     * Sets rostered_id
     *
     * @param int|null $rostered_id 
     *
     * @return self
     */
    public function setRosteredId($rostered_id)
    {
        if (is_null($rostered_id)) {
            throw new \InvalidArgumentException('non-nullable rostered_id cannot be null');
        }
        $this->container['rostered_id'] = $rostered_id;

        return $this;
    }

    /**
     * Gets rostered_status
     *
     * @return string|null
     */
    public function getRosteredStatus()
    {
        return $this->container['rostered_status'];
    }

    /**
     * Sets rostered_status
     *
     * @param string|null $rostered_status 
     *
     * @return self
     */
    public function setRosteredStatus($rostered_status)
    {
        if (is_null($rostered_status)) {
            throw new \InvalidArgumentException('non-nullable rostered_status cannot be null');
        }
        $this->container['rostered_status'] = $rostered_status;

        return $this;
    }

    /**
     * Gets rostered_location
     *
     * @return string|null
     */
    public function getRosteredLocation()
    {
        return $this->container['rostered_location'];
    }

    /**
     * Sets rostered_location
     *
     * @param string|null $rostered_location 
     *
     * @return self
     */
    public function setRosteredLocation($rostered_location)
    {
        if (is_null($rostered_location)) {
            throw new \InvalidArgumentException('non-nullable rostered_location cannot be null');
        }
        $this->container['rostered_location'] = $rostered_location;

        return $this;
    }

    /**
     * Gets rostered_work_type
     *
     * @return string|null
     */
    public function getRosteredWorkType()
    {
        return $this->container['rostered_work_type'];
    }

    /**
     * Sets rostered_work_type
     *
     * @param string|null $rostered_work_type 
     *
     * @return self
     */
    public function setRosteredWorkType($rostered_work_type)
    {
        if (is_null($rostered_work_type)) {
            throw new \InvalidArgumentException('non-nullable rostered_work_type cannot be null');
        }
        $this->container['rostered_work_type'] = $rostered_work_type;

        return $this;
    }

    /**
     * Gets rostered_start
     *
     * @return \DateTime|null
     */
    public function getRosteredStart()
    {
        return $this->container['rostered_start'];
    }

    /**
     * Sets rostered_start
     *
     * @param \DateTime|null $rostered_start 
     *
     * @return self
     */
    public function setRosteredStart($rostered_start)
    {
        if (is_null($rostered_start)) {
            throw new \InvalidArgumentException('non-nullable rostered_start cannot be null');
        }
        $this->container['rostered_start'] = $rostered_start;

        return $this;
    }

    /**
     * Gets rostered_start_time
     *
     * @return string|null
     */
    public function getRosteredStartTime()
    {
        return $this->container['rostered_start_time'];
    }

    /**
     * Sets rostered_start_time
     *
     * @param string|null $rostered_start_time 
     *
     * @return self
     */
    public function setRosteredStartTime($rostered_start_time)
    {
        if (is_null($rostered_start_time)) {
            throw new \InvalidArgumentException('non-nullable rostered_start_time cannot be null');
        }
        $this->container['rostered_start_time'] = $rostered_start_time;

        return $this;
    }

    /**
     * Gets rostered_end
     *
     * @return \DateTime|null
     */
    public function getRosteredEnd()
    {
        return $this->container['rostered_end'];
    }

    /**
     * Sets rostered_end
     *
     * @param \DateTime|null $rostered_end 
     *
     * @return self
     */
    public function setRosteredEnd($rostered_end)
    {
        if (is_null($rostered_end)) {
            throw new \InvalidArgumentException('non-nullable rostered_end cannot be null');
        }
        $this->container['rostered_end'] = $rostered_end;

        return $this;
    }

    /**
     * Gets rostered_end_time
     *
     * @return string|null
     */
    public function getRosteredEndTime()
    {
        return $this->container['rostered_end_time'];
    }

    /**
     * Sets rostered_end_time
     *
     * @param string|null $rostered_end_time 
     *
     * @return self
     */
    public function setRosteredEndTime($rostered_end_time)
    {
        if (is_null($rostered_end_time)) {
            throw new \InvalidArgumentException('non-nullable rostered_end_time cannot be null');
        }
        $this->container['rostered_end_time'] = $rostered_end_time;

        return $this;
    }

    /**
     * Gets rostered_duration
     *
     * @return string|null
     */
    public function getRosteredDuration()
    {
        return $this->container['rostered_duration'];
    }

    /**
     * Sets rostered_duration
     *
     * @param string|null $rostered_duration 
     *
     * @return self
     */
    public function setRosteredDuration($rostered_duration)
    {
        if (is_null($rostered_duration)) {
            throw new \InvalidArgumentException('non-nullable rostered_duration cannot be null');
        }
        $this->container['rostered_duration'] = $rostered_duration;

        return $this;
    }

    /**
     * Gets rostered_breaks
     *
     * @return string|null
     */
    public function getRosteredBreaks()
    {
        return $this->container['rostered_breaks'];
    }

    /**
     * Sets rostered_breaks
     *
     * @param string|null $rostered_breaks 
     *
     * @return self
     */
    public function setRosteredBreaks($rostered_breaks)
    {
        if (is_null($rostered_breaks)) {
            throw new \InvalidArgumentException('non-nullable rostered_breaks cannot be null');
        }
        $this->container['rostered_breaks'] = $rostered_breaks;

        return $this;
    }

    /**
     * Gets rostered_cost
     *
     * @return float|null
     */
    public function getRosteredCost()
    {
        return $this->container['rostered_cost'];
    }

    /**
     * Sets rostered_cost
     *
     * @param float|null $rostered_cost 
     *
     * @return self
     */
    public function setRosteredCost($rostered_cost)
    {
        if (is_null($rostered_cost)) {
            throw new \InvalidArgumentException('non-nullable rostered_cost cannot be null');
        }
        $this->container['rostered_cost'] = $rostered_cost;

        return $this;
    }

    /**
     * Gets timesheet_id
     *
     * @return int|null
     */
    public function getTimesheetId()
    {
        return $this->container['timesheet_id'];
    }

    /**
     * Sets timesheet_id
     *
     * @param int|null $timesheet_id 
     *
     * @return self
     */
    public function setTimesheetId($timesheet_id)
    {
        if (is_null($timesheet_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_id cannot be null');
        }
        $this->container['timesheet_id'] = $timesheet_id;

        return $this;
    }

    /**
     * Gets timesheet_status
     *
     * @return string|null
     */
    public function getTimesheetStatus()
    {
        return $this->container['timesheet_status'];
    }

    /**
     * Sets timesheet_status
     *
     * @param string|null $timesheet_status 
     *
     * @return self
     */
    public function setTimesheetStatus($timesheet_status)
    {
        if (is_null($timesheet_status)) {
            throw new \InvalidArgumentException('non-nullable timesheet_status cannot be null');
        }
        $this->container['timesheet_status'] = $timesheet_status;

        return $this;
    }

    /**
     * Gets timesheet_location
     *
     * @return string|null
     */
    public function getTimesheetLocation()
    {
        return $this->container['timesheet_location'];
    }

    /**
     * Sets timesheet_location
     *
     * @param string|null $timesheet_location 
     *
     * @return self
     */
    public function setTimesheetLocation($timesheet_location)
    {
        if (is_null($timesheet_location)) {
            throw new \InvalidArgumentException('non-nullable timesheet_location cannot be null');
        }
        $this->container['timesheet_location'] = $timesheet_location;

        return $this;
    }

    /**
     * Gets timesheet_work_type
     *
     * @return string|null
     */
    public function getTimesheetWorkType()
    {
        return $this->container['timesheet_work_type'];
    }

    /**
     * Sets timesheet_work_type
     *
     * @param string|null $timesheet_work_type 
     *
     * @return self
     */
    public function setTimesheetWorkType($timesheet_work_type)
    {
        if (is_null($timesheet_work_type)) {
            throw new \InvalidArgumentException('non-nullable timesheet_work_type cannot be null');
        }
        $this->container['timesheet_work_type'] = $timesheet_work_type;

        return $this;
    }

    /**
     * Gets timesheet_start
     *
     * @return \DateTime|null
     */
    public function getTimesheetStart()
    {
        return $this->container['timesheet_start'];
    }

    /**
     * Sets timesheet_start
     *
     * @param \DateTime|null $timesheet_start 
     *
     * @return self
     */
    public function setTimesheetStart($timesheet_start)
    {
        if (is_null($timesheet_start)) {
            throw new \InvalidArgumentException('non-nullable timesheet_start cannot be null');
        }
        $this->container['timesheet_start'] = $timesheet_start;

        return $this;
    }

    /**
     * Gets timesheet_start_time
     *
     * @return string|null
     */
    public function getTimesheetStartTime()
    {
        return $this->container['timesheet_start_time'];
    }

    /**
     * Sets timesheet_start_time
     *
     * @param string|null $timesheet_start_time 
     *
     * @return self
     */
    public function setTimesheetStartTime($timesheet_start_time)
    {
        if (is_null($timesheet_start_time)) {
            throw new \InvalidArgumentException('non-nullable timesheet_start_time cannot be null');
        }
        $this->container['timesheet_start_time'] = $timesheet_start_time;

        return $this;
    }

    /**
     * Gets timesheet_end
     *
     * @return \DateTime|null
     */
    public function getTimesheetEnd()
    {
        return $this->container['timesheet_end'];
    }

    /**
     * Sets timesheet_end
     *
     * @param \DateTime|null $timesheet_end 
     *
     * @return self
     */
    public function setTimesheetEnd($timesheet_end)
    {
        if (is_null($timesheet_end)) {
            throw new \InvalidArgumentException('non-nullable timesheet_end cannot be null');
        }
        $this->container['timesheet_end'] = $timesheet_end;

        return $this;
    }

    /**
     * Gets timesheet_end_time
     *
     * @return string|null
     */
    public function getTimesheetEndTime()
    {
        return $this->container['timesheet_end_time'];
    }

    /**
     * Sets timesheet_end_time
     *
     * @param string|null $timesheet_end_time 
     *
     * @return self
     */
    public function setTimesheetEndTime($timesheet_end_time)
    {
        if (is_null($timesheet_end_time)) {
            throw new \InvalidArgumentException('non-nullable timesheet_end_time cannot be null');
        }
        $this->container['timesheet_end_time'] = $timesheet_end_time;

        return $this;
    }

    /**
     * Gets timesheet_duration
     *
     * @return string|null
     */
    public function getTimesheetDuration()
    {
        return $this->container['timesheet_duration'];
    }

    /**
     * Sets timesheet_duration
     *
     * @param string|null $timesheet_duration 
     *
     * @return self
     */
    public function setTimesheetDuration($timesheet_duration)
    {
        if (is_null($timesheet_duration)) {
            throw new \InvalidArgumentException('non-nullable timesheet_duration cannot be null');
        }
        $this->container['timesheet_duration'] = $timesheet_duration;

        return $this;
    }

    /**
     * Gets timesheet_breaks
     *
     * @return string|null
     */
    public function getTimesheetBreaks()
    {
        return $this->container['timesheet_breaks'];
    }

    /**
     * Sets timesheet_breaks
     *
     * @param string|null $timesheet_breaks 
     *
     * @return self
     */
    public function setTimesheetBreaks($timesheet_breaks)
    {
        if (is_null($timesheet_breaks)) {
            throw new \InvalidArgumentException('non-nullable timesheet_breaks cannot be null');
        }
        $this->container['timesheet_breaks'] = $timesheet_breaks;

        return $this;
    }

    /**
     * Gets timesheet_units
     *
     * @return float|null
     */
    public function getTimesheetUnits()
    {
        return $this->container['timesheet_units'];
    }

    /**
     * Sets timesheet_units
     *
     * @param float|null $timesheet_units 
     *
     * @return self
     */
    public function setTimesheetUnits($timesheet_units)
    {
        if (is_null($timesheet_units)) {
            throw new \InvalidArgumentException('non-nullable timesheet_units cannot be null');
        }
        $this->container['timesheet_units'] = $timesheet_units;

        return $this;
    }

    /**
     * Gets timesheet_unit_type
     *
     * @return string|null
     */
    public function getTimesheetUnitType()
    {
        return $this->container['timesheet_unit_type'];
    }

    /**
     * Sets timesheet_unit_type
     *
     * @param string|null $timesheet_unit_type 
     *
     * @return self
     */
    public function setTimesheetUnitType($timesheet_unit_type)
    {
        if (is_null($timesheet_unit_type)) {
            throw new \InvalidArgumentException('non-nullable timesheet_unit_type cannot be null');
        }
        $this->container['timesheet_unit_type'] = $timesheet_unit_type;

        return $this;
    }

    /**
     * Gets timesheet_cost
     *
     * @return float|null
     */
    public function getTimesheetCost()
    {
        return $this->container['timesheet_cost'];
    }

    /**
     * Sets timesheet_cost
     *
     * @param float|null $timesheet_cost 
     *
     * @return self
     */
    public function setTimesheetCost($timesheet_cost)
    {
        if (is_null($timesheet_cost)) {
            throw new \InvalidArgumentException('non-nullable timesheet_cost cannot be null');
        }
        $this->container['timesheet_cost'] = $timesheet_cost;

        return $this;
    }

    /**
     * Gets time_variance
     *
     * @return string|null
     */
    public function getTimeVariance()
    {
        return $this->container['time_variance'];
    }

    /**
     * Sets time_variance
     *
     * @param string|null $time_variance 
     *
     * @return self
     */
    public function setTimeVariance($time_variance)
    {
        if (is_null($time_variance)) {
            throw new \InvalidArgumentException('non-nullable time_variance cannot be null');
        }
        $this->container['time_variance'] = $time_variance;

        return $this;
    }

    /**
     * Gets cost_variance
     *
     * @return float|null
     */
    public function getCostVariance()
    {
        return $this->container['cost_variance'];
    }

    /**
     * Sets cost_variance
     *
     * @param float|null $cost_variance 
     *
     * @return self
     */
    public function setCostVariance($cost_variance)
    {
        if (is_null($cost_variance)) {
            throw new \InvalidArgumentException('non-nullable cost_variance cannot be null');
        }
        $this->container['cost_variance'] = $cost_variance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


