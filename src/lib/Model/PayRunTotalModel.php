<?php
/**
 * PayRunTotalModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PayRunTotalModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayRunTotalModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayRunTotalModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'total_hours' => 'float',
        'gross_earnings' => 'float',
        'pre_tax_deductions' => 'float',
        'taxable_earnings' => 'float',
        'post_tax_deductions' => 'float',
        'net_earnings' => 'float',
        'total_employee_expenses' => 'float',
        'total_employer_liabilities' => 'float',
        'is_published' => 'bool',
        'pay_run_id' => 'int',
        'notes' => 'string',
        'notation' => 'string',
        'payg_withheld' => 'float',
        'sfss_withheld' => 'float',
        'help_withheld' => 'float',
        'super_contribution' => 'float',
        'employer_contribution' => 'float',
        'kiwi_saver_employee_contribution' => 'float',
        'kiwi_saver_employer_contribution' => 'float',
        'esct_contribution' => 'float',
        'student_loan_amount' => 'float',
        'post_grad_loan_amount' => 'float',
        'student_loan_additional_mandatory_amount' => 'float',
        'student_loan_additional_voluntary_amount' => 'float',
        'acc_levy_amount' => 'float',
        'cpf_employer_contribution_amount' => 'float',
        'cpf_employee_contribution_amount' => 'float',
        'employer_voluntary_cpf_amount' => 'float',
        'employer_voluntary_medi_save_amount' => 'float',
        'sdl_contribution_amount' => 'float',
        'employer_pension_contribution' => 'float',
        'employee_pension_contribution' => 'float',
        'employee_national_insurance_contribution' => 'float',
        'employer_national_insurance_contribution' => 'float',
        'employee_pensionable_earnings' => 'float',
        'employer_pensionable_earnings' => 'float',
        'termination_payment_ni_exempt' => 'float',
        'termination_payment_employer_ni' => 'float',
        'nic_class1_a' => 'float',
        'enrolled_in_pension_scheme' => 'bool',
        'deferral_date' => '\DateTime',
        'bik_taxable_amount' => 'float',
        'bik_tax_exempt_amount' => 'float',
        'cp38_amount' => 'float',
        'pcb_borne_by_employer_amount' => 'float',
        'epf_employer_amount' => 'float',
        'epf_employee_amount' => 'float',
        'eis_employer_amount' => 'float',
        'eis_employee_amount' => 'float',
        'socso_employer_amount' => 'float',
        'socso_employee_amount' => 'float',
        'hrdf_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'pre_tax_deductions' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deductions' => 'double',
        'net_earnings' => 'double',
        'total_employee_expenses' => 'double',
        'total_employer_liabilities' => 'double',
        'is_published' => null,
        'pay_run_id' => 'int32',
        'notes' => null,
        'notation' => null,
        'payg_withheld' => 'double',
        'sfss_withheld' => 'double',
        'help_withheld' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'kiwi_saver_employee_contribution' => 'double',
        'kiwi_saver_employer_contribution' => 'double',
        'esct_contribution' => 'double',
        'student_loan_amount' => 'double',
        'post_grad_loan_amount' => 'double',
        'student_loan_additional_mandatory_amount' => 'double',
        'student_loan_additional_voluntary_amount' => 'double',
        'acc_levy_amount' => 'double',
        'cpf_employer_contribution_amount' => 'double',
        'cpf_employee_contribution_amount' => 'double',
        'employer_voluntary_cpf_amount' => 'double',
        'employer_voluntary_medi_save_amount' => 'double',
        'sdl_contribution_amount' => 'double',
        'employer_pension_contribution' => 'double',
        'employee_pension_contribution' => 'double',
        'employee_national_insurance_contribution' => 'double',
        'employer_national_insurance_contribution' => 'double',
        'employee_pensionable_earnings' => 'double',
        'employer_pensionable_earnings' => 'double',
        'termination_payment_ni_exempt' => 'double',
        'termination_payment_employer_ni' => 'double',
        'nic_class1_a' => 'double',
        'enrolled_in_pension_scheme' => null,
        'deferral_date' => 'date-time',
        'bik_taxable_amount' => 'double',
        'bik_tax_exempt_amount' => 'double',
        'cp38_amount' => 'double',
        'pcb_borne_by_employer_amount' => 'double',
        'epf_employer_amount' => 'double',
        'epf_employee_amount' => 'double',
        'eis_employer_amount' => 'double',
        'eis_employee_amount' => 'double',
        'socso_employer_amount' => 'double',
        'socso_employee_amount' => 'double',
        'hrdf_amount' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'total_hours' => false,
		'gross_earnings' => false,
		'pre_tax_deductions' => false,
		'taxable_earnings' => false,
		'post_tax_deductions' => false,
		'net_earnings' => false,
		'total_employee_expenses' => false,
		'total_employer_liabilities' => false,
		'is_published' => false,
		'pay_run_id' => false,
		'notes' => false,
		'notation' => false,
		'payg_withheld' => false,
		'sfss_withheld' => false,
		'help_withheld' => false,
		'super_contribution' => false,
		'employer_contribution' => false,
		'kiwi_saver_employee_contribution' => false,
		'kiwi_saver_employer_contribution' => false,
		'esct_contribution' => false,
		'student_loan_amount' => false,
		'post_grad_loan_amount' => false,
		'student_loan_additional_mandatory_amount' => false,
		'student_loan_additional_voluntary_amount' => false,
		'acc_levy_amount' => false,
		'cpf_employer_contribution_amount' => false,
		'cpf_employee_contribution_amount' => false,
		'employer_voluntary_cpf_amount' => false,
		'employer_voluntary_medi_save_amount' => false,
		'sdl_contribution_amount' => false,
		'employer_pension_contribution' => false,
		'employee_pension_contribution' => false,
		'employee_national_insurance_contribution' => false,
		'employer_national_insurance_contribution' => false,
		'employee_pensionable_earnings' => false,
		'employer_pensionable_earnings' => false,
		'termination_payment_ni_exempt' => false,
		'termination_payment_employer_ni' => false,
		'nic_class1_a' => false,
		'enrolled_in_pension_scheme' => false,
		'deferral_date' => false,
		'bik_taxable_amount' => false,
		'bik_tax_exempt_amount' => false,
		'cp38_amount' => false,
		'pcb_borne_by_employer_amount' => false,
		'epf_employer_amount' => false,
		'epf_employee_amount' => false,
		'eis_employer_amount' => false,
		'eis_employee_amount' => false,
		'socso_employer_amount' => false,
		'socso_employee_amount' => false,
		'hrdf_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'pre_tax_deductions' => 'preTaxDeductions',
        'taxable_earnings' => 'taxableEarnings',
        'post_tax_deductions' => 'postTaxDeductions',
        'net_earnings' => 'netEarnings',
        'total_employee_expenses' => 'totalEmployeeExpenses',
        'total_employer_liabilities' => 'totalEmployerLiabilities',
        'is_published' => 'isPublished',
        'pay_run_id' => 'payRunId',
        'notes' => 'notes',
        'notation' => 'notation',
        'payg_withheld' => 'paygWithheld',
        'sfss_withheld' => 'sfssWithheld',
        'help_withheld' => 'helpWithheld',
        'super_contribution' => 'superContribution',
        'employer_contribution' => 'employerContribution',
        'kiwi_saver_employee_contribution' => 'kiwiSaverEmployeeContribution',
        'kiwi_saver_employer_contribution' => 'kiwiSaverEmployerContribution',
        'esct_contribution' => 'esctContribution',
        'student_loan_amount' => 'studentLoanAmount',
        'post_grad_loan_amount' => 'postGradLoanAmount',
        'student_loan_additional_mandatory_amount' => 'studentLoanAdditionalMandatoryAmount',
        'student_loan_additional_voluntary_amount' => 'studentLoanAdditionalVoluntaryAmount',
        'acc_levy_amount' => 'accLevyAmount',
        'cpf_employer_contribution_amount' => 'cpfEmployerContributionAmount',
        'cpf_employee_contribution_amount' => 'cpfEmployeeContributionAmount',
        'employer_voluntary_cpf_amount' => 'employerVoluntaryCpfAmount',
        'employer_voluntary_medi_save_amount' => 'employerVoluntaryMediSaveAmount',
        'sdl_contribution_amount' => 'sdlContributionAmount',
        'employer_pension_contribution' => 'employerPensionContribution',
        'employee_pension_contribution' => 'employeePensionContribution',
        'employee_national_insurance_contribution' => 'employeeNationalInsuranceContribution',
        'employer_national_insurance_contribution' => 'employerNationalInsuranceContribution',
        'employee_pensionable_earnings' => 'employeePensionableEarnings',
        'employer_pensionable_earnings' => 'employerPensionableEarnings',
        'termination_payment_ni_exempt' => 'terminationPaymentNIExempt',
        'termination_payment_employer_ni' => 'terminationPaymentEmployerNI',
        'nic_class1_a' => 'nicClass1A',
        'enrolled_in_pension_scheme' => 'enrolledInPensionScheme',
        'deferral_date' => 'deferralDate',
        'bik_taxable_amount' => 'bikTaxableAmount',
        'bik_tax_exempt_amount' => 'bikTaxExemptAmount',
        'cp38_amount' => 'cp38Amount',
        'pcb_borne_by_employer_amount' => 'pcbBorneByEmployerAmount',
        'epf_employer_amount' => 'epfEmployerAmount',
        'epf_employee_amount' => 'epfEmployeeAmount',
        'eis_employer_amount' => 'eisEmployerAmount',
        'eis_employee_amount' => 'eisEmployeeAmount',
        'socso_employer_amount' => 'socsoEmployerAmount',
        'socso_employee_amount' => 'socsoEmployeeAmount',
        'hrdf_amount' => 'hrdfAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'pre_tax_deductions' => 'setPreTaxDeductions',
        'taxable_earnings' => 'setTaxableEarnings',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'net_earnings' => 'setNetEarnings',
        'total_employee_expenses' => 'setTotalEmployeeExpenses',
        'total_employer_liabilities' => 'setTotalEmployerLiabilities',
        'is_published' => 'setIsPublished',
        'pay_run_id' => 'setPayRunId',
        'notes' => 'setNotes',
        'notation' => 'setNotation',
        'payg_withheld' => 'setPaygWithheld',
        'sfss_withheld' => 'setSfssWithheld',
        'help_withheld' => 'setHelpWithheld',
        'super_contribution' => 'setSuperContribution',
        'employer_contribution' => 'setEmployerContribution',
        'kiwi_saver_employee_contribution' => 'setKiwiSaverEmployeeContribution',
        'kiwi_saver_employer_contribution' => 'setKiwiSaverEmployerContribution',
        'esct_contribution' => 'setEsctContribution',
        'student_loan_amount' => 'setStudentLoanAmount',
        'post_grad_loan_amount' => 'setPostGradLoanAmount',
        'student_loan_additional_mandatory_amount' => 'setStudentLoanAdditionalMandatoryAmount',
        'student_loan_additional_voluntary_amount' => 'setStudentLoanAdditionalVoluntaryAmount',
        'acc_levy_amount' => 'setAccLevyAmount',
        'cpf_employer_contribution_amount' => 'setCpfEmployerContributionAmount',
        'cpf_employee_contribution_amount' => 'setCpfEmployeeContributionAmount',
        'employer_voluntary_cpf_amount' => 'setEmployerVoluntaryCpfAmount',
        'employer_voluntary_medi_save_amount' => 'setEmployerVoluntaryMediSaveAmount',
        'sdl_contribution_amount' => 'setSdlContributionAmount',
        'employer_pension_contribution' => 'setEmployerPensionContribution',
        'employee_pension_contribution' => 'setEmployeePensionContribution',
        'employee_national_insurance_contribution' => 'setEmployeeNationalInsuranceContribution',
        'employer_national_insurance_contribution' => 'setEmployerNationalInsuranceContribution',
        'employee_pensionable_earnings' => 'setEmployeePensionableEarnings',
        'employer_pensionable_earnings' => 'setEmployerPensionableEarnings',
        'termination_payment_ni_exempt' => 'setTerminationPaymentNiExempt',
        'termination_payment_employer_ni' => 'setTerminationPaymentEmployerNi',
        'nic_class1_a' => 'setNicClass1A',
        'enrolled_in_pension_scheme' => 'setEnrolledInPensionScheme',
        'deferral_date' => 'setDeferralDate',
        'bik_taxable_amount' => 'setBikTaxableAmount',
        'bik_tax_exempt_amount' => 'setBikTaxExemptAmount',
        'cp38_amount' => 'setCp38Amount',
        'pcb_borne_by_employer_amount' => 'setPcbBorneByEmployerAmount',
        'epf_employer_amount' => 'setEpfEmployerAmount',
        'epf_employee_amount' => 'setEpfEmployeeAmount',
        'eis_employer_amount' => 'setEisEmployerAmount',
        'eis_employee_amount' => 'setEisEmployeeAmount',
        'socso_employer_amount' => 'setSocsoEmployerAmount',
        'socso_employee_amount' => 'setSocsoEmployeeAmount',
        'hrdf_amount' => 'setHrdfAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'pre_tax_deductions' => 'getPreTaxDeductions',
        'taxable_earnings' => 'getTaxableEarnings',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'net_earnings' => 'getNetEarnings',
        'total_employee_expenses' => 'getTotalEmployeeExpenses',
        'total_employer_liabilities' => 'getTotalEmployerLiabilities',
        'is_published' => 'getIsPublished',
        'pay_run_id' => 'getPayRunId',
        'notes' => 'getNotes',
        'notation' => 'getNotation',
        'payg_withheld' => 'getPaygWithheld',
        'sfss_withheld' => 'getSfssWithheld',
        'help_withheld' => 'getHelpWithheld',
        'super_contribution' => 'getSuperContribution',
        'employer_contribution' => 'getEmployerContribution',
        'kiwi_saver_employee_contribution' => 'getKiwiSaverEmployeeContribution',
        'kiwi_saver_employer_contribution' => 'getKiwiSaverEmployerContribution',
        'esct_contribution' => 'getEsctContribution',
        'student_loan_amount' => 'getStudentLoanAmount',
        'post_grad_loan_amount' => 'getPostGradLoanAmount',
        'student_loan_additional_mandatory_amount' => 'getStudentLoanAdditionalMandatoryAmount',
        'student_loan_additional_voluntary_amount' => 'getStudentLoanAdditionalVoluntaryAmount',
        'acc_levy_amount' => 'getAccLevyAmount',
        'cpf_employer_contribution_amount' => 'getCpfEmployerContributionAmount',
        'cpf_employee_contribution_amount' => 'getCpfEmployeeContributionAmount',
        'employer_voluntary_cpf_amount' => 'getEmployerVoluntaryCpfAmount',
        'employer_voluntary_medi_save_amount' => 'getEmployerVoluntaryMediSaveAmount',
        'sdl_contribution_amount' => 'getSdlContributionAmount',
        'employer_pension_contribution' => 'getEmployerPensionContribution',
        'employee_pension_contribution' => 'getEmployeePensionContribution',
        'employee_national_insurance_contribution' => 'getEmployeeNationalInsuranceContribution',
        'employer_national_insurance_contribution' => 'getEmployerNationalInsuranceContribution',
        'employee_pensionable_earnings' => 'getEmployeePensionableEarnings',
        'employer_pensionable_earnings' => 'getEmployerPensionableEarnings',
        'termination_payment_ni_exempt' => 'getTerminationPaymentNiExempt',
        'termination_payment_employer_ni' => 'getTerminationPaymentEmployerNi',
        'nic_class1_a' => 'getNicClass1A',
        'enrolled_in_pension_scheme' => 'getEnrolledInPensionScheme',
        'deferral_date' => 'getDeferralDate',
        'bik_taxable_amount' => 'getBikTaxableAmount',
        'bik_tax_exempt_amount' => 'getBikTaxExemptAmount',
        'cp38_amount' => 'getCp38Amount',
        'pcb_borne_by_employer_amount' => 'getPcbBorneByEmployerAmount',
        'epf_employer_amount' => 'getEpfEmployerAmount',
        'epf_employee_amount' => 'getEpfEmployeeAmount',
        'eis_employer_amount' => 'getEisEmployerAmount',
        'eis_employee_amount' => 'getEisEmployeeAmount',
        'socso_employer_amount' => 'getSocsoEmployerAmount',
        'socso_employee_amount' => 'getSocsoEmployeeAmount',
        'hrdf_amount' => 'getHrdfAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('pre_tax_deductions', $data ?? [], null);
        $this->setIfExists('taxable_earnings', $data ?? [], null);
        $this->setIfExists('post_tax_deductions', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('total_employee_expenses', $data ?? [], null);
        $this->setIfExists('total_employer_liabilities', $data ?? [], null);
        $this->setIfExists('is_published', $data ?? [], null);
        $this->setIfExists('pay_run_id', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('notation', $data ?? [], null);
        $this->setIfExists('payg_withheld', $data ?? [], null);
        $this->setIfExists('sfss_withheld', $data ?? [], null);
        $this->setIfExists('help_withheld', $data ?? [], null);
        $this->setIfExists('super_contribution', $data ?? [], null);
        $this->setIfExists('employer_contribution', $data ?? [], null);
        $this->setIfExists('kiwi_saver_employee_contribution', $data ?? [], null);
        $this->setIfExists('kiwi_saver_employer_contribution', $data ?? [], null);
        $this->setIfExists('esct_contribution', $data ?? [], null);
        $this->setIfExists('student_loan_amount', $data ?? [], null);
        $this->setIfExists('post_grad_loan_amount', $data ?? [], null);
        $this->setIfExists('student_loan_additional_mandatory_amount', $data ?? [], null);
        $this->setIfExists('student_loan_additional_voluntary_amount', $data ?? [], null);
        $this->setIfExists('acc_levy_amount', $data ?? [], null);
        $this->setIfExists('cpf_employer_contribution_amount', $data ?? [], null);
        $this->setIfExists('cpf_employee_contribution_amount', $data ?? [], null);
        $this->setIfExists('employer_voluntary_cpf_amount', $data ?? [], null);
        $this->setIfExists('employer_voluntary_medi_save_amount', $data ?? [], null);
        $this->setIfExists('sdl_contribution_amount', $data ?? [], null);
        $this->setIfExists('employer_pension_contribution', $data ?? [], null);
        $this->setIfExists('employee_pension_contribution', $data ?? [], null);
        $this->setIfExists('employee_national_insurance_contribution', $data ?? [], null);
        $this->setIfExists('employer_national_insurance_contribution', $data ?? [], null);
        $this->setIfExists('employee_pensionable_earnings', $data ?? [], null);
        $this->setIfExists('employer_pensionable_earnings', $data ?? [], null);
        $this->setIfExists('termination_payment_ni_exempt', $data ?? [], null);
        $this->setIfExists('termination_payment_employer_ni', $data ?? [], null);
        $this->setIfExists('nic_class1_a', $data ?? [], null);
        $this->setIfExists('enrolled_in_pension_scheme', $data ?? [], null);
        $this->setIfExists('deferral_date', $data ?? [], null);
        $this->setIfExists('bik_taxable_amount', $data ?? [], null);
        $this->setIfExists('bik_tax_exempt_amount', $data ?? [], null);
        $this->setIfExists('cp38_amount', $data ?? [], null);
        $this->setIfExists('pcb_borne_by_employer_amount', $data ?? [], null);
        $this->setIfExists('epf_employer_amount', $data ?? [], null);
        $this->setIfExists('epf_employee_amount', $data ?? [], null);
        $this->setIfExists('eis_employer_amount', $data ?? [], null);
        $this->setIfExists('eis_employee_amount', $data ?? [], null);
        $this->setIfExists('socso_employer_amount', $data ?? [], null);
        $this->setIfExists('socso_employee_amount', $data ?? [], null);
        $this->setIfExists('hrdf_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets pre_tax_deductions
     *
     * @return float|null
     */
    public function getPreTaxDeductions()
    {
        return $this->container['pre_tax_deductions'];
    }

    /**
     * Sets pre_tax_deductions
     *
     * @param float|null $pre_tax_deductions 
     *
     * @return self
     */
    public function setPreTaxDeductions($pre_tax_deductions)
    {
        if (is_null($pre_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deductions cannot be null');
        }
        $this->container['pre_tax_deductions'] = $pre_tax_deductions;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float|null
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float|null $taxable_earnings 
     *
     * @return self
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        if (is_null($taxable_earnings)) {
            throw new \InvalidArgumentException('non-nullable taxable_earnings cannot be null');
        }
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return float|null
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param float|null $post_tax_deductions 
     *
     * @return self
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        if (is_null($post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions cannot be null');
        }
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets total_employee_expenses
     *
     * @return float|null
     */
    public function getTotalEmployeeExpenses()
    {
        return $this->container['total_employee_expenses'];
    }

    /**
     * Sets total_employee_expenses
     *
     * @param float|null $total_employee_expenses 
     *
     * @return self
     */
    public function setTotalEmployeeExpenses($total_employee_expenses)
    {
        if (is_null($total_employee_expenses)) {
            throw new \InvalidArgumentException('non-nullable total_employee_expenses cannot be null');
        }
        $this->container['total_employee_expenses'] = $total_employee_expenses;

        return $this;
    }

    /**
     * Gets total_employer_liabilities
     *
     * @return float|null
     */
    public function getTotalEmployerLiabilities()
    {
        return $this->container['total_employer_liabilities'];
    }

    /**
     * Sets total_employer_liabilities
     *
     * @param float|null $total_employer_liabilities 
     *
     * @return self
     */
    public function setTotalEmployerLiabilities($total_employer_liabilities)
    {
        if (is_null($total_employer_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_employer_liabilities cannot be null');
        }
        $this->container['total_employer_liabilities'] = $total_employer_liabilities;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool|null $is_published 
     *
     * @return self
     */
    public function setIsPublished($is_published)
    {
        if (is_null($is_published)) {
            throw new \InvalidArgumentException('non-nullable is_published cannot be null');
        }
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets pay_run_id
     *
     * @return int|null
     */
    public function getPayRunId()
    {
        return $this->container['pay_run_id'];
    }

    /**
     * Sets pay_run_id
     *
     * @param int|null $pay_run_id 
     *
     * @return self
     */
    public function setPayRunId($pay_run_id)
    {
        if (is_null($pay_run_id)) {
            throw new \InvalidArgumentException('non-nullable pay_run_id cannot be null');
        }
        $this->container['pay_run_id'] = $pay_run_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string|null
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string|null $notation 
     *
     * @return self
     */
    public function setNotation($notation)
    {
        if (is_null($notation)) {
            throw new \InvalidArgumentException('non-nullable notation cannot be null');
        }
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets payg_withheld
     *
     * @return float|null
     */
    public function getPaygWithheld()
    {
        return $this->container['payg_withheld'];
    }

    /**
     * Sets payg_withheld
     *
     * @param float|null $payg_withheld 
     *
     * @return self
     */
    public function setPaygWithheld($payg_withheld)
    {
        if (is_null($payg_withheld)) {
            throw new \InvalidArgumentException('non-nullable payg_withheld cannot be null');
        }
        $this->container['payg_withheld'] = $payg_withheld;

        return $this;
    }

    /**
     * Gets sfss_withheld
     *
     * @return float|null
     */
    public function getSfssWithheld()
    {
        return $this->container['sfss_withheld'];
    }

    /**
     * Sets sfss_withheld
     *
     * @param float|null $sfss_withheld 
     *
     * @return self
     */
    public function setSfssWithheld($sfss_withheld)
    {
        if (is_null($sfss_withheld)) {
            throw new \InvalidArgumentException('non-nullable sfss_withheld cannot be null');
        }
        $this->container['sfss_withheld'] = $sfss_withheld;

        return $this;
    }

    /**
     * Gets help_withheld
     *
     * @return float|null
     */
    public function getHelpWithheld()
    {
        return $this->container['help_withheld'];
    }

    /**
     * Sets help_withheld
     *
     * @param float|null $help_withheld 
     *
     * @return self
     */
    public function setHelpWithheld($help_withheld)
    {
        if (is_null($help_withheld)) {
            throw new \InvalidArgumentException('non-nullable help_withheld cannot be null');
        }
        $this->container['help_withheld'] = $help_withheld;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return float|null
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float|null $super_contribution 
     *
     * @return self
     */
    public function setSuperContribution($super_contribution)
    {
        if (is_null($super_contribution)) {
            throw new \InvalidArgumentException('non-nullable super_contribution cannot be null');
        }
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return float|null
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param float|null $employer_contribution 
     *
     * @return self
     */
    public function setEmployerContribution($employer_contribution)
    {
        if (is_null($employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_contribution cannot be null');
        }
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets kiwi_saver_employee_contribution
     *
     * @return float|null
     */
    public function getKiwiSaverEmployeeContribution()
    {
        return $this->container['kiwi_saver_employee_contribution'];
    }

    /**
     * Sets kiwi_saver_employee_contribution
     *
     * @param float|null $kiwi_saver_employee_contribution 
     *
     * @return self
     */
    public function setKiwiSaverEmployeeContribution($kiwi_saver_employee_contribution)
    {
        if (is_null($kiwi_saver_employee_contribution)) {
            throw new \InvalidArgumentException('non-nullable kiwi_saver_employee_contribution cannot be null');
        }
        $this->container['kiwi_saver_employee_contribution'] = $kiwi_saver_employee_contribution;

        return $this;
    }

    /**
     * Gets kiwi_saver_employer_contribution
     *
     * @return float|null
     */
    public function getKiwiSaverEmployerContribution()
    {
        return $this->container['kiwi_saver_employer_contribution'];
    }

    /**
     * Sets kiwi_saver_employer_contribution
     *
     * @param float|null $kiwi_saver_employer_contribution 
     *
     * @return self
     */
    public function setKiwiSaverEmployerContribution($kiwi_saver_employer_contribution)
    {
        if (is_null($kiwi_saver_employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable kiwi_saver_employer_contribution cannot be null');
        }
        $this->container['kiwi_saver_employer_contribution'] = $kiwi_saver_employer_contribution;

        return $this;
    }

    /**
     * Gets esct_contribution
     *
     * @return float|null
     */
    public function getEsctContribution()
    {
        return $this->container['esct_contribution'];
    }

    /**
     * Sets esct_contribution
     *
     * @param float|null $esct_contribution 
     *
     * @return self
     */
    public function setEsctContribution($esct_contribution)
    {
        if (is_null($esct_contribution)) {
            throw new \InvalidArgumentException('non-nullable esct_contribution cannot be null');
        }
        $this->container['esct_contribution'] = $esct_contribution;

        return $this;
    }

    /**
     * Gets student_loan_amount
     *
     * @return float|null
     */
    public function getStudentLoanAmount()
    {
        return $this->container['student_loan_amount'];
    }

    /**
     * Sets student_loan_amount
     *
     * @param float|null $student_loan_amount 
     *
     * @return self
     */
    public function setStudentLoanAmount($student_loan_amount)
    {
        if (is_null($student_loan_amount)) {
            throw new \InvalidArgumentException('non-nullable student_loan_amount cannot be null');
        }
        $this->container['student_loan_amount'] = $student_loan_amount;

        return $this;
    }

    /**
     * Gets post_grad_loan_amount
     *
     * @return float|null
     */
    public function getPostGradLoanAmount()
    {
        return $this->container['post_grad_loan_amount'];
    }

    /**
     * Sets post_grad_loan_amount
     *
     * @param float|null $post_grad_loan_amount 
     *
     * @return self
     */
    public function setPostGradLoanAmount($post_grad_loan_amount)
    {
        if (is_null($post_grad_loan_amount)) {
            throw new \InvalidArgumentException('non-nullable post_grad_loan_amount cannot be null');
        }
        $this->container['post_grad_loan_amount'] = $post_grad_loan_amount;

        return $this;
    }

    /**
     * Gets student_loan_additional_mandatory_amount
     *
     * @return float|null
     */
    public function getStudentLoanAdditionalMandatoryAmount()
    {
        return $this->container['student_loan_additional_mandatory_amount'];
    }

    /**
     * Sets student_loan_additional_mandatory_amount
     *
     * @param float|null $student_loan_additional_mandatory_amount 
     *
     * @return self
     */
    public function setStudentLoanAdditionalMandatoryAmount($student_loan_additional_mandatory_amount)
    {
        if (is_null($student_loan_additional_mandatory_amount)) {
            throw new \InvalidArgumentException('non-nullable student_loan_additional_mandatory_amount cannot be null');
        }
        $this->container['student_loan_additional_mandatory_amount'] = $student_loan_additional_mandatory_amount;

        return $this;
    }

    /**
     * Gets student_loan_additional_voluntary_amount
     *
     * @return float|null
     */
    public function getStudentLoanAdditionalVoluntaryAmount()
    {
        return $this->container['student_loan_additional_voluntary_amount'];
    }

    /**
     * Sets student_loan_additional_voluntary_amount
     *
     * @param float|null $student_loan_additional_voluntary_amount 
     *
     * @return self
     */
    public function setStudentLoanAdditionalVoluntaryAmount($student_loan_additional_voluntary_amount)
    {
        if (is_null($student_loan_additional_voluntary_amount)) {
            throw new \InvalidArgumentException('non-nullable student_loan_additional_voluntary_amount cannot be null');
        }
        $this->container['student_loan_additional_voluntary_amount'] = $student_loan_additional_voluntary_amount;

        return $this;
    }

    /**
     * Gets acc_levy_amount
     *
     * @return float|null
     */
    public function getAccLevyAmount()
    {
        return $this->container['acc_levy_amount'];
    }

    /**
     * Sets acc_levy_amount
     *
     * @param float|null $acc_levy_amount 
     *
     * @return self
     */
    public function setAccLevyAmount($acc_levy_amount)
    {
        if (is_null($acc_levy_amount)) {
            throw new \InvalidArgumentException('non-nullable acc_levy_amount cannot be null');
        }
        $this->container['acc_levy_amount'] = $acc_levy_amount;

        return $this;
    }

    /**
     * Gets cpf_employer_contribution_amount
     *
     * @return float|null
     */
    public function getCpfEmployerContributionAmount()
    {
        return $this->container['cpf_employer_contribution_amount'];
    }

    /**
     * Sets cpf_employer_contribution_amount
     *
     * @param float|null $cpf_employer_contribution_amount 
     *
     * @return self
     */
    public function setCpfEmployerContributionAmount($cpf_employer_contribution_amount)
    {
        if (is_null($cpf_employer_contribution_amount)) {
            throw new \InvalidArgumentException('non-nullable cpf_employer_contribution_amount cannot be null');
        }
        $this->container['cpf_employer_contribution_amount'] = $cpf_employer_contribution_amount;

        return $this;
    }

    /**
     * Gets cpf_employee_contribution_amount
     *
     * @return float|null
     */
    public function getCpfEmployeeContributionAmount()
    {
        return $this->container['cpf_employee_contribution_amount'];
    }

    /**
     * Sets cpf_employee_contribution_amount
     *
     * @param float|null $cpf_employee_contribution_amount 
     *
     * @return self
     */
    public function setCpfEmployeeContributionAmount($cpf_employee_contribution_amount)
    {
        if (is_null($cpf_employee_contribution_amount)) {
            throw new \InvalidArgumentException('non-nullable cpf_employee_contribution_amount cannot be null');
        }
        $this->container['cpf_employee_contribution_amount'] = $cpf_employee_contribution_amount;

        return $this;
    }

    /**
     * Gets employer_voluntary_cpf_amount
     *
     * @return float|null
     */
    public function getEmployerVoluntaryCpfAmount()
    {
        return $this->container['employer_voluntary_cpf_amount'];
    }

    /**
     * Sets employer_voluntary_cpf_amount
     *
     * @param float|null $employer_voluntary_cpf_amount 
     *
     * @return self
     */
    public function setEmployerVoluntaryCpfAmount($employer_voluntary_cpf_amount)
    {
        if (is_null($employer_voluntary_cpf_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_voluntary_cpf_amount cannot be null');
        }
        $this->container['employer_voluntary_cpf_amount'] = $employer_voluntary_cpf_amount;

        return $this;
    }

    /**
     * Gets employer_voluntary_medi_save_amount
     *
     * @return float|null
     */
    public function getEmployerVoluntaryMediSaveAmount()
    {
        return $this->container['employer_voluntary_medi_save_amount'];
    }

    /**
     * Sets employer_voluntary_medi_save_amount
     *
     * @param float|null $employer_voluntary_medi_save_amount 
     *
     * @return self
     */
    public function setEmployerVoluntaryMediSaveAmount($employer_voluntary_medi_save_amount)
    {
        if (is_null($employer_voluntary_medi_save_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_voluntary_medi_save_amount cannot be null');
        }
        $this->container['employer_voluntary_medi_save_amount'] = $employer_voluntary_medi_save_amount;

        return $this;
    }

    /**
     * Gets sdl_contribution_amount
     *
     * @return float|null
     */
    public function getSdlContributionAmount()
    {
        return $this->container['sdl_contribution_amount'];
    }

    /**
     * Sets sdl_contribution_amount
     *
     * @param float|null $sdl_contribution_amount 
     *
     * @return self
     */
    public function setSdlContributionAmount($sdl_contribution_amount)
    {
        if (is_null($sdl_contribution_amount)) {
            throw new \InvalidArgumentException('non-nullable sdl_contribution_amount cannot be null');
        }
        $this->container['sdl_contribution_amount'] = $sdl_contribution_amount;

        return $this;
    }

    /**
     * Gets employer_pension_contribution
     *
     * @return float|null
     */
    public function getEmployerPensionContribution()
    {
        return $this->container['employer_pension_contribution'];
    }

    /**
     * Sets employer_pension_contribution
     *
     * @param float|null $employer_pension_contribution 
     *
     * @return self
     */
    public function setEmployerPensionContribution($employer_pension_contribution)
    {
        if (is_null($employer_pension_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_pension_contribution cannot be null');
        }
        $this->container['employer_pension_contribution'] = $employer_pension_contribution;

        return $this;
    }

    /**
     * Gets employee_pension_contribution
     *
     * @return float|null
     */
    public function getEmployeePensionContribution()
    {
        return $this->container['employee_pension_contribution'];
    }

    /**
     * Sets employee_pension_contribution
     *
     * @param float|null $employee_pension_contribution 
     *
     * @return self
     */
    public function setEmployeePensionContribution($employee_pension_contribution)
    {
        if (is_null($employee_pension_contribution)) {
            throw new \InvalidArgumentException('non-nullable employee_pension_contribution cannot be null');
        }
        $this->container['employee_pension_contribution'] = $employee_pension_contribution;

        return $this;
    }

    /**
     * Gets employee_national_insurance_contribution
     *
     * @return float|null
     */
    public function getEmployeeNationalInsuranceContribution()
    {
        return $this->container['employee_national_insurance_contribution'];
    }

    /**
     * Sets employee_national_insurance_contribution
     *
     * @param float|null $employee_national_insurance_contribution 
     *
     * @return self
     */
    public function setEmployeeNationalInsuranceContribution($employee_national_insurance_contribution)
    {
        if (is_null($employee_national_insurance_contribution)) {
            throw new \InvalidArgumentException('non-nullable employee_national_insurance_contribution cannot be null');
        }
        $this->container['employee_national_insurance_contribution'] = $employee_national_insurance_contribution;

        return $this;
    }

    /**
     * Gets employer_national_insurance_contribution
     *
     * @return float|null
     */
    public function getEmployerNationalInsuranceContribution()
    {
        return $this->container['employer_national_insurance_contribution'];
    }

    /**
     * Sets employer_national_insurance_contribution
     *
     * @param float|null $employer_national_insurance_contribution 
     *
     * @return self
     */
    public function setEmployerNationalInsuranceContribution($employer_national_insurance_contribution)
    {
        if (is_null($employer_national_insurance_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_national_insurance_contribution cannot be null');
        }
        $this->container['employer_national_insurance_contribution'] = $employer_national_insurance_contribution;

        return $this;
    }

    /**
     * Gets employee_pensionable_earnings
     *
     * @return float|null
     */
    public function getEmployeePensionableEarnings()
    {
        return $this->container['employee_pensionable_earnings'];
    }

    /**
     * Sets employee_pensionable_earnings
     *
     * @param float|null $employee_pensionable_earnings 
     *
     * @return self
     */
    public function setEmployeePensionableEarnings($employee_pensionable_earnings)
    {
        if (is_null($employee_pensionable_earnings)) {
            throw new \InvalidArgumentException('non-nullable employee_pensionable_earnings cannot be null');
        }
        $this->container['employee_pensionable_earnings'] = $employee_pensionable_earnings;

        return $this;
    }

    /**
     * Gets employer_pensionable_earnings
     *
     * @return float|null
     */
    public function getEmployerPensionableEarnings()
    {
        return $this->container['employer_pensionable_earnings'];
    }

    /**
     * Sets employer_pensionable_earnings
     *
     * @param float|null $employer_pensionable_earnings 
     *
     * @return self
     */
    public function setEmployerPensionableEarnings($employer_pensionable_earnings)
    {
        if (is_null($employer_pensionable_earnings)) {
            throw new \InvalidArgumentException('non-nullable employer_pensionable_earnings cannot be null');
        }
        $this->container['employer_pensionable_earnings'] = $employer_pensionable_earnings;

        return $this;
    }

    /**
     * Gets termination_payment_ni_exempt
     *
     * @return float|null
     */
    public function getTerminationPaymentNiExempt()
    {
        return $this->container['termination_payment_ni_exempt'];
    }

    /**
     * Sets termination_payment_ni_exempt
     *
     * @param float|null $termination_payment_ni_exempt 
     *
     * @return self
     */
    public function setTerminationPaymentNiExempt($termination_payment_ni_exempt)
    {
        if (is_null($termination_payment_ni_exempt)) {
            throw new \InvalidArgumentException('non-nullable termination_payment_ni_exempt cannot be null');
        }
        $this->container['termination_payment_ni_exempt'] = $termination_payment_ni_exempt;

        return $this;
    }

    /**
     * Gets termination_payment_employer_ni
     *
     * @return float|null
     */
    public function getTerminationPaymentEmployerNi()
    {
        return $this->container['termination_payment_employer_ni'];
    }

    /**
     * Sets termination_payment_employer_ni
     *
     * @param float|null $termination_payment_employer_ni 
     *
     * @return self
     */
    public function setTerminationPaymentEmployerNi($termination_payment_employer_ni)
    {
        if (is_null($termination_payment_employer_ni)) {
            throw new \InvalidArgumentException('non-nullable termination_payment_employer_ni cannot be null');
        }
        $this->container['termination_payment_employer_ni'] = $termination_payment_employer_ni;

        return $this;
    }

    /**
     * Gets nic_class1_a
     *
     * @return float|null
     */
    public function getNicClass1A()
    {
        return $this->container['nic_class1_a'];
    }

    /**
     * Sets nic_class1_a
     *
     * @param float|null $nic_class1_a 
     *
     * @return self
     */
    public function setNicClass1A($nic_class1_a)
    {
        if (is_null($nic_class1_a)) {
            throw new \InvalidArgumentException('non-nullable nic_class1_a cannot be null');
        }
        $this->container['nic_class1_a'] = $nic_class1_a;

        return $this;
    }

    /**
     * Gets enrolled_in_pension_scheme
     *
     * @return bool|null
     */
    public function getEnrolledInPensionScheme()
    {
        return $this->container['enrolled_in_pension_scheme'];
    }

    /**
     * Sets enrolled_in_pension_scheme
     *
     * @param bool|null $enrolled_in_pension_scheme 
     *
     * @return self
     */
    public function setEnrolledInPensionScheme($enrolled_in_pension_scheme)
    {
        if (is_null($enrolled_in_pension_scheme)) {
            throw new \InvalidArgumentException('non-nullable enrolled_in_pension_scheme cannot be null');
        }
        $this->container['enrolled_in_pension_scheme'] = $enrolled_in_pension_scheme;

        return $this;
    }

    /**
     * Gets deferral_date
     *
     * @return \DateTime|null
     */
    public function getDeferralDate()
    {
        return $this->container['deferral_date'];
    }

    /**
     * Sets deferral_date
     *
     * @param \DateTime|null $deferral_date 
     *
     * @return self
     */
    public function setDeferralDate($deferral_date)
    {
        if (is_null($deferral_date)) {
            throw new \InvalidArgumentException('non-nullable deferral_date cannot be null');
        }
        $this->container['deferral_date'] = $deferral_date;

        return $this;
    }

    /**
     * Gets bik_taxable_amount
     *
     * @return float|null
     */
    public function getBikTaxableAmount()
    {
        return $this->container['bik_taxable_amount'];
    }

    /**
     * Sets bik_taxable_amount
     *
     * @param float|null $bik_taxable_amount 
     *
     * @return self
     */
    public function setBikTaxableAmount($bik_taxable_amount)
    {
        if (is_null($bik_taxable_amount)) {
            throw new \InvalidArgumentException('non-nullable bik_taxable_amount cannot be null');
        }
        $this->container['bik_taxable_amount'] = $bik_taxable_amount;

        return $this;
    }

    /**
     * Gets bik_tax_exempt_amount
     *
     * @return float|null
     */
    public function getBikTaxExemptAmount()
    {
        return $this->container['bik_tax_exempt_amount'];
    }

    /**
     * Sets bik_tax_exempt_amount
     *
     * @param float|null $bik_tax_exempt_amount 
     *
     * @return self
     */
    public function setBikTaxExemptAmount($bik_tax_exempt_amount)
    {
        if (is_null($bik_tax_exempt_amount)) {
            throw new \InvalidArgumentException('non-nullable bik_tax_exempt_amount cannot be null');
        }
        $this->container['bik_tax_exempt_amount'] = $bik_tax_exempt_amount;

        return $this;
    }

    /**
     * Gets cp38_amount
     *
     * @return float|null
     */
    public function getCp38Amount()
    {
        return $this->container['cp38_amount'];
    }

    /**
     * Sets cp38_amount
     *
     * @param float|null $cp38_amount 
     *
     * @return self
     */
    public function setCp38Amount($cp38_amount)
    {
        if (is_null($cp38_amount)) {
            throw new \InvalidArgumentException('non-nullable cp38_amount cannot be null');
        }
        $this->container['cp38_amount'] = $cp38_amount;

        return $this;
    }

    /**
     * Gets pcb_borne_by_employer_amount
     *
     * @return float|null
     */
    public function getPcbBorneByEmployerAmount()
    {
        return $this->container['pcb_borne_by_employer_amount'];
    }

    /**
     * Sets pcb_borne_by_employer_amount
     *
     * @param float|null $pcb_borne_by_employer_amount 
     *
     * @return self
     */
    public function setPcbBorneByEmployerAmount($pcb_borne_by_employer_amount)
    {
        if (is_null($pcb_borne_by_employer_amount)) {
            throw new \InvalidArgumentException('non-nullable pcb_borne_by_employer_amount cannot be null');
        }
        $this->container['pcb_borne_by_employer_amount'] = $pcb_borne_by_employer_amount;

        return $this;
    }

    /**
     * Gets epf_employer_amount
     *
     * @return float|null
     */
    public function getEpfEmployerAmount()
    {
        return $this->container['epf_employer_amount'];
    }

    /**
     * Sets epf_employer_amount
     *
     * @param float|null $epf_employer_amount 
     *
     * @return self
     */
    public function setEpfEmployerAmount($epf_employer_amount)
    {
        if (is_null($epf_employer_amount)) {
            throw new \InvalidArgumentException('non-nullable epf_employer_amount cannot be null');
        }
        $this->container['epf_employer_amount'] = $epf_employer_amount;

        return $this;
    }

    /**
     * Gets epf_employee_amount
     *
     * @return float|null
     */
    public function getEpfEmployeeAmount()
    {
        return $this->container['epf_employee_amount'];
    }

    /**
     * Sets epf_employee_amount
     *
     * @param float|null $epf_employee_amount 
     *
     * @return self
     */
    public function setEpfEmployeeAmount($epf_employee_amount)
    {
        if (is_null($epf_employee_amount)) {
            throw new \InvalidArgumentException('non-nullable epf_employee_amount cannot be null');
        }
        $this->container['epf_employee_amount'] = $epf_employee_amount;

        return $this;
    }

    /**
     * Gets eis_employer_amount
     *
     * @return float|null
     */
    public function getEisEmployerAmount()
    {
        return $this->container['eis_employer_amount'];
    }

    /**
     * Sets eis_employer_amount
     *
     * @param float|null $eis_employer_amount 
     *
     * @return self
     */
    public function setEisEmployerAmount($eis_employer_amount)
    {
        if (is_null($eis_employer_amount)) {
            throw new \InvalidArgumentException('non-nullable eis_employer_amount cannot be null');
        }
        $this->container['eis_employer_amount'] = $eis_employer_amount;

        return $this;
    }

    /**
     * Gets eis_employee_amount
     *
     * @return float|null
     */
    public function getEisEmployeeAmount()
    {
        return $this->container['eis_employee_amount'];
    }

    /**
     * Sets eis_employee_amount
     *
     * @param float|null $eis_employee_amount 
     *
     * @return self
     */
    public function setEisEmployeeAmount($eis_employee_amount)
    {
        if (is_null($eis_employee_amount)) {
            throw new \InvalidArgumentException('non-nullable eis_employee_amount cannot be null');
        }
        $this->container['eis_employee_amount'] = $eis_employee_amount;

        return $this;
    }

    /**
     * Gets socso_employer_amount
     *
     * @return float|null
     */
    public function getSocsoEmployerAmount()
    {
        return $this->container['socso_employer_amount'];
    }

    /**
     * Sets socso_employer_amount
     *
     * @param float|null $socso_employer_amount 
     *
     * @return self
     */
    public function setSocsoEmployerAmount($socso_employer_amount)
    {
        if (is_null($socso_employer_amount)) {
            throw new \InvalidArgumentException('non-nullable socso_employer_amount cannot be null');
        }
        $this->container['socso_employer_amount'] = $socso_employer_amount;

        return $this;
    }

    /**
     * Gets socso_employee_amount
     *
     * @return float|null
     */
    public function getSocsoEmployeeAmount()
    {
        return $this->container['socso_employee_amount'];
    }

    /**
     * Sets socso_employee_amount
     *
     * @param float|null $socso_employee_amount 
     *
     * @return self
     */
    public function setSocsoEmployeeAmount($socso_employee_amount)
    {
        if (is_null($socso_employee_amount)) {
            throw new \InvalidArgumentException('non-nullable socso_employee_amount cannot be null');
        }
        $this->container['socso_employee_amount'] = $socso_employee_amount;

        return $this;
    }

    /**
     * Gets hrdf_amount
     *
     * @return float|null
     */
    public function getHrdfAmount()
    {
        return $this->container['hrdf_amount'];
    }

    /**
     * Sets hrdf_amount
     *
     * @param float|null $hrdf_amount 
     *
     * @return self
     */
    public function setHrdfAmount($hrdf_amount)
    {
        if (is_null($hrdf_amount)) {
            throw new \InvalidArgumentException('non-nullable hrdf_amount cannot be null');
        }
        $this->container['hrdf_amount'] = $hrdf_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


