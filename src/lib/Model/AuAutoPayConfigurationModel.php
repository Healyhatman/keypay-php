<?php
/**
 * AuAutoPayConfigurationModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuAutoPayConfigurationModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuAutoPayConfigurationModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuAutoPayConfigurationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'paused' => 'bool',
        'initial_pay_period_ending' => '\DateTime',
        'initial_date_paid' => '\DateTime',
        'initial_pay_run_creation_date_time' => '\DateTime',
        'scheduled_end_date' => '\DateTime',
        'next_scheduled_creation_date_time_utc' => '\DateTime',
        'finalise' => 'bool',
        'timesheet_import_option' => 'string',
        'export_journals' => 'bool',
        'lodge_pay_run' => 'bool',
        'publish_pay_slips' => 'string',
        'publish_pay_slips_hour' => 'int',
        'suppress_notifications' => 'bool',
        'users_to_notify' => 'string[]',
        'run_on_specific_day_of_month' => 'bool',
        'adjust_run_date_to_work_day' => 'bool',
        'adjust_date_paid_to_work_day' => 'bool',
        'specific_day_of_month' => 'int',
        'week_of_month' => 'int',
        'day_of_week' => 'int',
        'report_packs_to_run' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'paused' => null,
        'initial_pay_period_ending' => 'date-time',
        'initial_date_paid' => 'date-time',
        'initial_pay_run_creation_date_time' => 'date-time',
        'scheduled_end_date' => 'date-time',
        'next_scheduled_creation_date_time_utc' => 'date-time',
        'finalise' => null,
        'timesheet_import_option' => null,
        'export_journals' => null,
        'lodge_pay_run' => null,
        'publish_pay_slips' => null,
        'publish_pay_slips_hour' => 'int32',
        'suppress_notifications' => null,
        'users_to_notify' => null,
        'run_on_specific_day_of_month' => null,
        'adjust_run_date_to_work_day' => null,
        'adjust_date_paid_to_work_day' => null,
        'specific_day_of_month' => 'int32',
        'week_of_month' => 'int32',
        'day_of_week' => 'int32',
        'report_packs_to_run' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
		'paused' => false,
		'initial_pay_period_ending' => false,
		'initial_date_paid' => false,
		'initial_pay_run_creation_date_time' => false,
		'scheduled_end_date' => false,
		'next_scheduled_creation_date_time_utc' => false,
		'finalise' => false,
		'timesheet_import_option' => false,
		'export_journals' => false,
		'lodge_pay_run' => false,
		'publish_pay_slips' => false,
		'publish_pay_slips_hour' => false,
		'suppress_notifications' => false,
		'users_to_notify' => false,
		'run_on_specific_day_of_month' => false,
		'adjust_run_date_to_work_day' => false,
		'adjust_date_paid_to_work_day' => false,
		'specific_day_of_month' => false,
		'week_of_month' => false,
		'day_of_week' => false,
		'report_packs_to_run' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'paused' => 'paused',
        'initial_pay_period_ending' => 'initialPayPeriodEnding',
        'initial_date_paid' => 'initialDatePaid',
        'initial_pay_run_creation_date_time' => 'initialPayRunCreationDateTime',
        'scheduled_end_date' => 'scheduledEndDate',
        'next_scheduled_creation_date_time_utc' => 'nextScheduledCreationDateTimeUtc',
        'finalise' => 'finalise',
        'timesheet_import_option' => 'timesheetImportOption',
        'export_journals' => 'exportJournals',
        'lodge_pay_run' => 'lodgePayRun',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_pay_slips_hour' => 'publishPaySlipsHour',
        'suppress_notifications' => 'suppressNotifications',
        'users_to_notify' => 'usersToNotify',
        'run_on_specific_day_of_month' => 'runOnSpecificDayOfMonth',
        'adjust_run_date_to_work_day' => 'adjustRunDateToWorkDay',
        'adjust_date_paid_to_work_day' => 'adjustDatePaidToWorkDay',
        'specific_day_of_month' => 'specificDayOfMonth',
        'week_of_month' => 'weekOfMonth',
        'day_of_week' => 'dayOfWeek',
        'report_packs_to_run' => 'reportPacksToRun'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'paused' => 'setPaused',
        'initial_pay_period_ending' => 'setInitialPayPeriodEnding',
        'initial_date_paid' => 'setInitialDatePaid',
        'initial_pay_run_creation_date_time' => 'setInitialPayRunCreationDateTime',
        'scheduled_end_date' => 'setScheduledEndDate',
        'next_scheduled_creation_date_time_utc' => 'setNextScheduledCreationDateTimeUtc',
        'finalise' => 'setFinalise',
        'timesheet_import_option' => 'setTimesheetImportOption',
        'export_journals' => 'setExportJournals',
        'lodge_pay_run' => 'setLodgePayRun',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_pay_slips_hour' => 'setPublishPaySlipsHour',
        'suppress_notifications' => 'setSuppressNotifications',
        'users_to_notify' => 'setUsersToNotify',
        'run_on_specific_day_of_month' => 'setRunOnSpecificDayOfMonth',
        'adjust_run_date_to_work_day' => 'setAdjustRunDateToWorkDay',
        'adjust_date_paid_to_work_day' => 'setAdjustDatePaidToWorkDay',
        'specific_day_of_month' => 'setSpecificDayOfMonth',
        'week_of_month' => 'setWeekOfMonth',
        'day_of_week' => 'setDayOfWeek',
        'report_packs_to_run' => 'setReportPacksToRun'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'paused' => 'getPaused',
        'initial_pay_period_ending' => 'getInitialPayPeriodEnding',
        'initial_date_paid' => 'getInitialDatePaid',
        'initial_pay_run_creation_date_time' => 'getInitialPayRunCreationDateTime',
        'scheduled_end_date' => 'getScheduledEndDate',
        'next_scheduled_creation_date_time_utc' => 'getNextScheduledCreationDateTimeUtc',
        'finalise' => 'getFinalise',
        'timesheet_import_option' => 'getTimesheetImportOption',
        'export_journals' => 'getExportJournals',
        'lodge_pay_run' => 'getLodgePayRun',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_pay_slips_hour' => 'getPublishPaySlipsHour',
        'suppress_notifications' => 'getSuppressNotifications',
        'users_to_notify' => 'getUsersToNotify',
        'run_on_specific_day_of_month' => 'getRunOnSpecificDayOfMonth',
        'adjust_run_date_to_work_day' => 'getAdjustRunDateToWorkDay',
        'adjust_date_paid_to_work_day' => 'getAdjustDatePaidToWorkDay',
        'specific_day_of_month' => 'getSpecificDayOfMonth',
        'week_of_month' => 'getWeekOfMonth',
        'day_of_week' => 'getDayOfWeek',
        'report_packs_to_run' => 'getReportPacksToRun'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIMESHEET_IMPORT_OPTION_NONE = 'None';
    public const TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD = 'ThisPayPeriod';
    public const TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING = 'AllOutstanding';
    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetImportOptionAllowableValues()
    {
        return [
            self::TIMESHEET_IMPORT_OPTION_NONE,
            self::TIMESHEET_IMPORT_OPTION_THIS_PAY_PERIOD,
            self::TIMESHEET_IMPORT_OPTION_ALL_OUTSTANDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('paused', $data ?? [], null);
        $this->setIfExists('initial_pay_period_ending', $data ?? [], null);
        $this->setIfExists('initial_date_paid', $data ?? [], null);
        $this->setIfExists('initial_pay_run_creation_date_time', $data ?? [], null);
        $this->setIfExists('scheduled_end_date', $data ?? [], null);
        $this->setIfExists('next_scheduled_creation_date_time_utc', $data ?? [], null);
        $this->setIfExists('finalise', $data ?? [], null);
        $this->setIfExists('timesheet_import_option', $data ?? [], null);
        $this->setIfExists('export_journals', $data ?? [], null);
        $this->setIfExists('lodge_pay_run', $data ?? [], null);
        $this->setIfExists('publish_pay_slips', $data ?? [], null);
        $this->setIfExists('publish_pay_slips_hour', $data ?? [], null);
        $this->setIfExists('suppress_notifications', $data ?? [], null);
        $this->setIfExists('users_to_notify', $data ?? [], null);
        $this->setIfExists('run_on_specific_day_of_month', $data ?? [], null);
        $this->setIfExists('adjust_run_date_to_work_day', $data ?? [], null);
        $this->setIfExists('adjust_date_paid_to_work_day', $data ?? [], null);
        $this->setIfExists('specific_day_of_month', $data ?? [], null);
        $this->setIfExists('week_of_month', $data ?? [], null);
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('report_packs_to_run', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!is_null($this->container['timesheet_import_option']) && !in_array($this->container['timesheet_import_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timesheet_import_option', must be one of '%s'",
                $this->container['timesheet_import_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!is_null($this->container['publish_pay_slips']) && !in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                $this->container['publish_pay_slips'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled 
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets paused
     *
     * @return bool|null
     */
    public function getPaused()
    {
        return $this->container['paused'];
    }

    /**
     * Sets paused
     *
     * @param bool|null $paused 
     *
     * @return self
     */
    public function setPaused($paused)
    {
        if (is_null($paused)) {
            throw new \InvalidArgumentException('non-nullable paused cannot be null');
        }
        $this->container['paused'] = $paused;

        return $this;
    }

    /**
     * Gets initial_pay_period_ending
     *
     * @return \DateTime|null
     */
    public function getInitialPayPeriodEnding()
    {
        return $this->container['initial_pay_period_ending'];
    }

    /**
     * Sets initial_pay_period_ending
     *
     * @param \DateTime|null $initial_pay_period_ending 
     *
     * @return self
     */
    public function setInitialPayPeriodEnding($initial_pay_period_ending)
    {
        if (is_null($initial_pay_period_ending)) {
            throw new \InvalidArgumentException('non-nullable initial_pay_period_ending cannot be null');
        }
        $this->container['initial_pay_period_ending'] = $initial_pay_period_ending;

        return $this;
    }

    /**
     * Gets initial_date_paid
     *
     * @return \DateTime|null
     */
    public function getInitialDatePaid()
    {
        return $this->container['initial_date_paid'];
    }

    /**
     * Sets initial_date_paid
     *
     * @param \DateTime|null $initial_date_paid 
     *
     * @return self
     */
    public function setInitialDatePaid($initial_date_paid)
    {
        if (is_null($initial_date_paid)) {
            throw new \InvalidArgumentException('non-nullable initial_date_paid cannot be null');
        }
        $this->container['initial_date_paid'] = $initial_date_paid;

        return $this;
    }

    /**
     * Gets initial_pay_run_creation_date_time
     *
     * @return \DateTime|null
     */
    public function getInitialPayRunCreationDateTime()
    {
        return $this->container['initial_pay_run_creation_date_time'];
    }

    /**
     * Sets initial_pay_run_creation_date_time
     *
     * @param \DateTime|null $initial_pay_run_creation_date_time 
     *
     * @return self
     */
    public function setInitialPayRunCreationDateTime($initial_pay_run_creation_date_time)
    {
        if (is_null($initial_pay_run_creation_date_time)) {
            throw new \InvalidArgumentException('non-nullable initial_pay_run_creation_date_time cannot be null');
        }
        $this->container['initial_pay_run_creation_date_time'] = $initial_pay_run_creation_date_time;

        return $this;
    }

    /**
     * Gets scheduled_end_date
     *
     * @return \DateTime|null
     */
    public function getScheduledEndDate()
    {
        return $this->container['scheduled_end_date'];
    }

    /**
     * Sets scheduled_end_date
     *
     * @param \DateTime|null $scheduled_end_date 
     *
     * @return self
     */
    public function setScheduledEndDate($scheduled_end_date)
    {
        if (is_null($scheduled_end_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_end_date cannot be null');
        }
        $this->container['scheduled_end_date'] = $scheduled_end_date;

        return $this;
    }

    /**
     * Gets next_scheduled_creation_date_time_utc
     *
     * @return \DateTime|null
     */
    public function getNextScheduledCreationDateTimeUtc()
    {
        return $this->container['next_scheduled_creation_date_time_utc'];
    }

    /**
     * Sets next_scheduled_creation_date_time_utc
     *
     * @param \DateTime|null $next_scheduled_creation_date_time_utc 
     *
     * @return self
     */
    public function setNextScheduledCreationDateTimeUtc($next_scheduled_creation_date_time_utc)
    {
        if (is_null($next_scheduled_creation_date_time_utc)) {
            throw new \InvalidArgumentException('non-nullable next_scheduled_creation_date_time_utc cannot be null');
        }
        $this->container['next_scheduled_creation_date_time_utc'] = $next_scheduled_creation_date_time_utc;

        return $this;
    }

    /**
     * Gets finalise
     *
     * @return bool|null
     */
    public function getFinalise()
    {
        return $this->container['finalise'];
    }

    /**
     * Sets finalise
     *
     * @param bool|null $finalise 
     *
     * @return self
     */
    public function setFinalise($finalise)
    {
        if (is_null($finalise)) {
            throw new \InvalidArgumentException('non-nullable finalise cannot be null');
        }
        $this->container['finalise'] = $finalise;

        return $this;
    }

    /**
     * Gets timesheet_import_option
     *
     * @return string|null
     */
    public function getTimesheetImportOption()
    {
        return $this->container['timesheet_import_option'];
    }

    /**
     * Sets timesheet_import_option
     *
     * @param string|null $timesheet_import_option 
     *
     * @return self
     */
    public function setTimesheetImportOption($timesheet_import_option)
    {
        if (is_null($timesheet_import_option)) {
            throw new \InvalidArgumentException('non-nullable timesheet_import_option cannot be null');
        }
        $allowedValues = $this->getTimesheetImportOptionAllowableValues();
        if (!in_array($timesheet_import_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timesheet_import_option', must be one of '%s'",
                    $timesheet_import_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_import_option'] = $timesheet_import_option;

        return $this;
    }

    /**
     * Gets export_journals
     *
     * @return bool|null
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param bool|null $export_journals 
     *
     * @return self
     */
    public function setExportJournals($export_journals)
    {
        if (is_null($export_journals)) {
            throw new \InvalidArgumentException('non-nullable export_journals cannot be null');
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return bool|null
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param bool|null $lodge_pay_run 
     *
     * @return self
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        if (is_null($lodge_pay_run)) {
            throw new \InvalidArgumentException('non-nullable lodge_pay_run cannot be null');
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string|null
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string|null $publish_pay_slips 
     *
     * @return self
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        if (is_null($publish_pay_slips)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips cannot be null');
        }
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (!in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'publish_pay_slips', must be one of '%s'",
                    $publish_pay_slips,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_pay_slips_hour
     *
     * @return int|null
     */
    public function getPublishPaySlipsHour()
    {
        return $this->container['publish_pay_slips_hour'];
    }

    /**
     * Sets publish_pay_slips_hour
     *
     * @param int|null $publish_pay_slips_hour 
     *
     * @return self
     */
    public function setPublishPaySlipsHour($publish_pay_slips_hour)
    {
        if (is_null($publish_pay_slips_hour)) {
            throw new \InvalidArgumentException('non-nullable publish_pay_slips_hour cannot be null');
        }
        $this->container['publish_pay_slips_hour'] = $publish_pay_slips_hour;

        return $this;
    }

    /**
     * Gets suppress_notifications
     *
     * @return bool|null
     */
    public function getSuppressNotifications()
    {
        return $this->container['suppress_notifications'];
    }

    /**
     * Sets suppress_notifications
     *
     * @param bool|null $suppress_notifications 
     *
     * @return self
     */
    public function setSuppressNotifications($suppress_notifications)
    {
        if (is_null($suppress_notifications)) {
            throw new \InvalidArgumentException('non-nullable suppress_notifications cannot be null');
        }
        $this->container['suppress_notifications'] = $suppress_notifications;

        return $this;
    }

    /**
     * Gets users_to_notify
     *
     * @return string[]|null
     */
    public function getUsersToNotify()
    {
        return $this->container['users_to_notify'];
    }

    /**
     * Sets users_to_notify
     *
     * @param string[]|null $users_to_notify 
     *
     * @return self
     */
    public function setUsersToNotify($users_to_notify)
    {
        if (is_null($users_to_notify)) {
            throw new \InvalidArgumentException('non-nullable users_to_notify cannot be null');
        }
        $this->container['users_to_notify'] = $users_to_notify;

        return $this;
    }

    /**
     * Gets run_on_specific_day_of_month
     *
     * @return bool|null
     */
    public function getRunOnSpecificDayOfMonth()
    {
        return $this->container['run_on_specific_day_of_month'];
    }

    /**
     * Sets run_on_specific_day_of_month
     *
     * @param bool|null $run_on_specific_day_of_month 
     *
     * @return self
     */
    public function setRunOnSpecificDayOfMonth($run_on_specific_day_of_month)
    {
        if (is_null($run_on_specific_day_of_month)) {
            throw new \InvalidArgumentException('non-nullable run_on_specific_day_of_month cannot be null');
        }
        $this->container['run_on_specific_day_of_month'] = $run_on_specific_day_of_month;

        return $this;
    }

    /**
     * Gets adjust_run_date_to_work_day
     *
     * @return bool|null
     */
    public function getAdjustRunDateToWorkDay()
    {
        return $this->container['adjust_run_date_to_work_day'];
    }

    /**
     * Sets adjust_run_date_to_work_day
     *
     * @param bool|null $adjust_run_date_to_work_day 
     *
     * @return self
     */
    public function setAdjustRunDateToWorkDay($adjust_run_date_to_work_day)
    {
        if (is_null($adjust_run_date_to_work_day)) {
            throw new \InvalidArgumentException('non-nullable adjust_run_date_to_work_day cannot be null');
        }
        $this->container['adjust_run_date_to_work_day'] = $adjust_run_date_to_work_day;

        return $this;
    }

    /**
     * Gets adjust_date_paid_to_work_day
     *
     * @return bool|null
     */
    public function getAdjustDatePaidToWorkDay()
    {
        return $this->container['adjust_date_paid_to_work_day'];
    }

    /**
     * Sets adjust_date_paid_to_work_day
     *
     * @param bool|null $adjust_date_paid_to_work_day 
     *
     * @return self
     */
    public function setAdjustDatePaidToWorkDay($adjust_date_paid_to_work_day)
    {
        if (is_null($adjust_date_paid_to_work_day)) {
            throw new \InvalidArgumentException('non-nullable adjust_date_paid_to_work_day cannot be null');
        }
        $this->container['adjust_date_paid_to_work_day'] = $adjust_date_paid_to_work_day;

        return $this;
    }

    /**
     * Gets specific_day_of_month
     *
     * @return int|null
     */
    public function getSpecificDayOfMonth()
    {
        return $this->container['specific_day_of_month'];
    }

    /**
     * Sets specific_day_of_month
     *
     * @param int|null $specific_day_of_month 
     *
     * @return self
     */
    public function setSpecificDayOfMonth($specific_day_of_month)
    {
        if (is_null($specific_day_of_month)) {
            throw new \InvalidArgumentException('non-nullable specific_day_of_month cannot be null');
        }
        $this->container['specific_day_of_month'] = $specific_day_of_month;

        return $this;
    }

    /**
     * Gets week_of_month
     *
     * @return int|null
     */
    public function getWeekOfMonth()
    {
        return $this->container['week_of_month'];
    }

    /**
     * Sets week_of_month
     *
     * @param int|null $week_of_month 
     *
     * @return self
     */
    public function setWeekOfMonth($week_of_month)
    {
        if (is_null($week_of_month)) {
            throw new \InvalidArgumentException('non-nullable week_of_month cannot be null');
        }
        $this->container['week_of_month'] = $week_of_month;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return int|null
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param int|null $day_of_week 
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets report_packs_to_run
     *
     * @return int[]|null
     */
    public function getReportPacksToRun()
    {
        return $this->container['report_packs_to_run'];
    }

    /**
     * Sets report_packs_to_run
     *
     * @param int[]|null $report_packs_to_run 
     *
     * @return self
     */
    public function setReportPacksToRun($report_packs_to_run)
    {
        if (is_null($report_packs_to_run)) {
            throw new \InvalidArgumentException('non-nullable report_packs_to_run cannot be null');
        }
        $this->container['report_packs_to_run'] = $report_packs_to_run;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


