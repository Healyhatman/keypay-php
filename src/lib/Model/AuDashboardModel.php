<?php
/**
 * AuDashboardModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuDashboardModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuDashboardModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuDashboardModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'features' => '\OpenAPI\Client\Model\AuFeaturesModel',
        'next_shift' => '\OpenAPI\Client\Model\AuEssRosterShiftModel',
        'latest_payslip' => '\OpenAPI\Client\Model\EssPayslipModel',
        'leave_balances' => '\OpenAPI\Client\Model\LeaveBalanceModel[]',
        'titles' => '\OpenAPI\Client\Model\TitleViewModel[]',
        'work_types' => '\OpenAPI\Client\Model\EssWorkTypeModel[]',
        'shift_conditions' => '\OpenAPI\Client\Model\EssWorkTypeModel[]',
        'locations' => '\OpenAPI\Client\Model\LocationModel[]',
        'classifications' => '\OpenAPI\Client\Model\ClassificationSelectModel[]',
        'leave_categories' => '\OpenAPI\Client\Model\EssLeaveCategoryModel[]',
        'current_week_satisfaction_survey' => '\OpenAPI\Client\Model\EssSatisfactionSurvey',
        'timesheets' => '\OpenAPI\Client\Model\EssCurrentTimesheetsModel',
        'timesheet_entry_period_end' => '\DateTime',
        'expense_categories' => '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]',
        'tax_codes' => '\OpenAPI\Client\Model\JournalServiceTaxCode[]',
        'expenses' => '\OpenAPI\Client\Model\EssCurrentExpensesModel',
        'pending_shift_count' => 'int',
        'proposed_swap_count' => 'int',
        'pending_leave_count' => 'int',
        'current_shift' => '\OpenAPI\Client\Model\EssCurrentShiftModel',
        'documents_requiring_acknowledgement_count' => 'int',
        'region' => 'string',
        'biddable_shift_count' => 'int',
        'is_terminated' => 'bool',
        'google_maps_api_key' => 'string',
        'start_date' => '\DateTime',
        'standard_hours' => '\OpenAPI\Client\Model\StandardHoursModel',
        'not_accepted_shifts_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'features' => null,
        'next_shift' => null,
        'latest_payslip' => null,
        'leave_balances' => null,
        'titles' => null,
        'work_types' => null,
        'shift_conditions' => null,
        'locations' => null,
        'classifications' => null,
        'leave_categories' => null,
        'current_week_satisfaction_survey' => null,
        'timesheets' => null,
        'timesheet_entry_period_end' => 'date-time',
        'expense_categories' => null,
        'tax_codes' => null,
        'expenses' => null,
        'pending_shift_count' => 'int32',
        'proposed_swap_count' => 'int32',
        'pending_leave_count' => 'int32',
        'current_shift' => null,
        'documents_requiring_acknowledgement_count' => 'int32',
        'region' => null,
        'biddable_shift_count' => 'int32',
        'is_terminated' => null,
        'google_maps_api_key' => null,
        'start_date' => 'date-time',
        'standard_hours' => null,
        'not_accepted_shifts_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'features' => false,
		'next_shift' => false,
		'latest_payslip' => false,
		'leave_balances' => false,
		'titles' => false,
		'work_types' => false,
		'shift_conditions' => false,
		'locations' => false,
		'classifications' => false,
		'leave_categories' => false,
		'current_week_satisfaction_survey' => false,
		'timesheets' => false,
		'timesheet_entry_period_end' => false,
		'expense_categories' => false,
		'tax_codes' => false,
		'expenses' => false,
		'pending_shift_count' => false,
		'proposed_swap_count' => false,
		'pending_leave_count' => false,
		'current_shift' => false,
		'documents_requiring_acknowledgement_count' => false,
		'region' => false,
		'biddable_shift_count' => false,
		'is_terminated' => false,
		'google_maps_api_key' => false,
		'start_date' => false,
		'standard_hours' => false,
		'not_accepted_shifts_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'features' => 'features',
        'next_shift' => 'nextShift',
        'latest_payslip' => 'latestPayslip',
        'leave_balances' => 'leaveBalances',
        'titles' => 'titles',
        'work_types' => 'workTypes',
        'shift_conditions' => 'shiftConditions',
        'locations' => 'locations',
        'classifications' => 'classifications',
        'leave_categories' => 'leaveCategories',
        'current_week_satisfaction_survey' => 'currentWeekSatisfactionSurvey',
        'timesheets' => 'timesheets',
        'timesheet_entry_period_end' => 'timesheetEntryPeriodEnd',
        'expense_categories' => 'expenseCategories',
        'tax_codes' => 'taxCodes',
        'expenses' => 'expenses',
        'pending_shift_count' => 'pendingShiftCount',
        'proposed_swap_count' => 'proposedSwapCount',
        'pending_leave_count' => 'pendingLeaveCount',
        'current_shift' => 'currentShift',
        'documents_requiring_acknowledgement_count' => 'documentsRequiringAcknowledgementCount',
        'region' => 'region',
        'biddable_shift_count' => 'biddableShiftCount',
        'is_terminated' => 'isTerminated',
        'google_maps_api_key' => 'googleMapsApiKey',
        'start_date' => 'startDate',
        'standard_hours' => 'standardHours',
        'not_accepted_shifts_count' => 'notAcceptedShiftsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'features' => 'setFeatures',
        'next_shift' => 'setNextShift',
        'latest_payslip' => 'setLatestPayslip',
        'leave_balances' => 'setLeaveBalances',
        'titles' => 'setTitles',
        'work_types' => 'setWorkTypes',
        'shift_conditions' => 'setShiftConditions',
        'locations' => 'setLocations',
        'classifications' => 'setClassifications',
        'leave_categories' => 'setLeaveCategories',
        'current_week_satisfaction_survey' => 'setCurrentWeekSatisfactionSurvey',
        'timesheets' => 'setTimesheets',
        'timesheet_entry_period_end' => 'setTimesheetEntryPeriodEnd',
        'expense_categories' => 'setExpenseCategories',
        'tax_codes' => 'setTaxCodes',
        'expenses' => 'setExpenses',
        'pending_shift_count' => 'setPendingShiftCount',
        'proposed_swap_count' => 'setProposedSwapCount',
        'pending_leave_count' => 'setPendingLeaveCount',
        'current_shift' => 'setCurrentShift',
        'documents_requiring_acknowledgement_count' => 'setDocumentsRequiringAcknowledgementCount',
        'region' => 'setRegion',
        'biddable_shift_count' => 'setBiddableShiftCount',
        'is_terminated' => 'setIsTerminated',
        'google_maps_api_key' => 'setGoogleMapsApiKey',
        'start_date' => 'setStartDate',
        'standard_hours' => 'setStandardHours',
        'not_accepted_shifts_count' => 'setNotAcceptedShiftsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'features' => 'getFeatures',
        'next_shift' => 'getNextShift',
        'latest_payslip' => 'getLatestPayslip',
        'leave_balances' => 'getLeaveBalances',
        'titles' => 'getTitles',
        'work_types' => 'getWorkTypes',
        'shift_conditions' => 'getShiftConditions',
        'locations' => 'getLocations',
        'classifications' => 'getClassifications',
        'leave_categories' => 'getLeaveCategories',
        'current_week_satisfaction_survey' => 'getCurrentWeekSatisfactionSurvey',
        'timesheets' => 'getTimesheets',
        'timesheet_entry_period_end' => 'getTimesheetEntryPeriodEnd',
        'expense_categories' => 'getExpenseCategories',
        'tax_codes' => 'getTaxCodes',
        'expenses' => 'getExpenses',
        'pending_shift_count' => 'getPendingShiftCount',
        'proposed_swap_count' => 'getProposedSwapCount',
        'pending_leave_count' => 'getPendingLeaveCount',
        'current_shift' => 'getCurrentShift',
        'documents_requiring_acknowledgement_count' => 'getDocumentsRequiringAcknowledgementCount',
        'region' => 'getRegion',
        'biddable_shift_count' => 'getBiddableShiftCount',
        'is_terminated' => 'getIsTerminated',
        'google_maps_api_key' => 'getGoogleMapsApiKey',
        'start_date' => 'getStartDate',
        'standard_hours' => 'getStandardHours',
        'not_accepted_shifts_count' => 'getNotAcceptedShiftsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('next_shift', $data ?? [], null);
        $this->setIfExists('latest_payslip', $data ?? [], null);
        $this->setIfExists('leave_balances', $data ?? [], null);
        $this->setIfExists('titles', $data ?? [], null);
        $this->setIfExists('work_types', $data ?? [], null);
        $this->setIfExists('shift_conditions', $data ?? [], null);
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('classifications', $data ?? [], null);
        $this->setIfExists('leave_categories', $data ?? [], null);
        $this->setIfExists('current_week_satisfaction_survey', $data ?? [], null);
        $this->setIfExists('timesheets', $data ?? [], null);
        $this->setIfExists('timesheet_entry_period_end', $data ?? [], null);
        $this->setIfExists('expense_categories', $data ?? [], null);
        $this->setIfExists('tax_codes', $data ?? [], null);
        $this->setIfExists('expenses', $data ?? [], null);
        $this->setIfExists('pending_shift_count', $data ?? [], null);
        $this->setIfExists('proposed_swap_count', $data ?? [], null);
        $this->setIfExists('pending_leave_count', $data ?? [], null);
        $this->setIfExists('current_shift', $data ?? [], null);
        $this->setIfExists('documents_requiring_acknowledgement_count', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('biddable_shift_count', $data ?? [], null);
        $this->setIfExists('is_terminated', $data ?? [], null);
        $this->setIfExists('google_maps_api_key', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('standard_hours', $data ?? [], null);
        $this->setIfExists('not_accepted_shifts_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\AuFeaturesModel|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\AuFeaturesModel|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets next_shift
     *
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel|null
     */
    public function getNextShift()
    {
        return $this->container['next_shift'];
    }

    /**
     * Sets next_shift
     *
     * @param \OpenAPI\Client\Model\AuEssRosterShiftModel|null $next_shift next_shift
     *
     * @return self
     */
    public function setNextShift($next_shift)
    {
        if (is_null($next_shift)) {
            throw new \InvalidArgumentException('non-nullable next_shift cannot be null');
        }
        $this->container['next_shift'] = $next_shift;

        return $this;
    }

    /**
     * Gets latest_payslip
     *
     * @return \OpenAPI\Client\Model\EssPayslipModel|null
     */
    public function getLatestPayslip()
    {
        return $this->container['latest_payslip'];
    }

    /**
     * Sets latest_payslip
     *
     * @param \OpenAPI\Client\Model\EssPayslipModel|null $latest_payslip latest_payslip
     *
     * @return self
     */
    public function setLatestPayslip($latest_payslip)
    {
        if (is_null($latest_payslip)) {
            throw new \InvalidArgumentException('non-nullable latest_payslip cannot be null');
        }
        $this->container['latest_payslip'] = $latest_payslip;

        return $this;
    }

    /**
     * Gets leave_balances
     *
     * @return \OpenAPI\Client\Model\LeaveBalanceModel[]|null
     */
    public function getLeaveBalances()
    {
        return $this->container['leave_balances'];
    }

    /**
     * Sets leave_balances
     *
     * @param \OpenAPI\Client\Model\LeaveBalanceModel[]|null $leave_balances 
     *
     * @return self
     */
    public function setLeaveBalances($leave_balances)
    {
        if (is_null($leave_balances)) {
            throw new \InvalidArgumentException('non-nullable leave_balances cannot be null');
        }
        $this->container['leave_balances'] = $leave_balances;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return \OpenAPI\Client\Model\TitleViewModel[]|null
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param \OpenAPI\Client\Model\TitleViewModel[]|null $titles 
     *
     * @return self
     */
    public function setTitles($titles)
    {
        if (is_null($titles)) {
            throw new \InvalidArgumentException('non-nullable titles cannot be null');
        }
        $this->container['titles'] = $titles;

        return $this;
    }

    /**
     * Gets work_types
     *
     * @return \OpenAPI\Client\Model\EssWorkTypeModel[]|null
     */
    public function getWorkTypes()
    {
        return $this->container['work_types'];
    }

    /**
     * Sets work_types
     *
     * @param \OpenAPI\Client\Model\EssWorkTypeModel[]|null $work_types 
     *
     * @return self
     */
    public function setWorkTypes($work_types)
    {
        if (is_null($work_types)) {
            throw new \InvalidArgumentException('non-nullable work_types cannot be null');
        }
        $this->container['work_types'] = $work_types;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \OpenAPI\Client\Model\EssWorkTypeModel[]|null
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \OpenAPI\Client\Model\EssWorkTypeModel[]|null $shift_conditions 
     *
     * @return self
     */
    public function setShiftConditions($shift_conditions)
    {
        if (is_null($shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable shift_conditions cannot be null');
        }
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \OpenAPI\Client\Model\LocationModel[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \OpenAPI\Client\Model\LocationModel[]|null $locations 
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            throw new \InvalidArgumentException('non-nullable locations cannot be null');
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \OpenAPI\Client\Model\ClassificationSelectModel[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \OpenAPI\Client\Model\ClassificationSelectModel[]|null $classifications 
     *
     * @return self
     */
    public function setClassifications($classifications)
    {
        if (is_null($classifications)) {
            throw new \InvalidArgumentException('non-nullable classifications cannot be null');
        }
        $this->container['classifications'] = $classifications;

        return $this;
    }

    /**
     * Gets leave_categories
     *
     * @return \OpenAPI\Client\Model\EssLeaveCategoryModel[]|null
     */
    public function getLeaveCategories()
    {
        return $this->container['leave_categories'];
    }

    /**
     * Sets leave_categories
     *
     * @param \OpenAPI\Client\Model\EssLeaveCategoryModel[]|null $leave_categories 
     *
     * @return self
     */
    public function setLeaveCategories($leave_categories)
    {
        if (is_null($leave_categories)) {
            throw new \InvalidArgumentException('non-nullable leave_categories cannot be null');
        }
        $this->container['leave_categories'] = $leave_categories;

        return $this;
    }

    /**
     * Gets current_week_satisfaction_survey
     *
     * @return \OpenAPI\Client\Model\EssSatisfactionSurvey|null
     */
    public function getCurrentWeekSatisfactionSurvey()
    {
        return $this->container['current_week_satisfaction_survey'];
    }

    /**
     * Sets current_week_satisfaction_survey
     *
     * @param \OpenAPI\Client\Model\EssSatisfactionSurvey|null $current_week_satisfaction_survey current_week_satisfaction_survey
     *
     * @return self
     */
    public function setCurrentWeekSatisfactionSurvey($current_week_satisfaction_survey)
    {
        if (is_null($current_week_satisfaction_survey)) {
            throw new \InvalidArgumentException('non-nullable current_week_satisfaction_survey cannot be null');
        }
        $this->container['current_week_satisfaction_survey'] = $current_week_satisfaction_survey;

        return $this;
    }

    /**
     * Gets timesheets
     *
     * @return \OpenAPI\Client\Model\EssCurrentTimesheetsModel|null
     */
    public function getTimesheets()
    {
        return $this->container['timesheets'];
    }

    /**
     * Sets timesheets
     *
     * @param \OpenAPI\Client\Model\EssCurrentTimesheetsModel|null $timesheets timesheets
     *
     * @return self
     */
    public function setTimesheets($timesheets)
    {
        if (is_null($timesheets)) {
            throw new \InvalidArgumentException('non-nullable timesheets cannot be null');
        }
        $this->container['timesheets'] = $timesheets;

        return $this;
    }

    /**
     * Gets timesheet_entry_period_end
     *
     * @return \DateTime|null
     */
    public function getTimesheetEntryPeriodEnd()
    {
        return $this->container['timesheet_entry_period_end'];
    }

    /**
     * Sets timesheet_entry_period_end
     *
     * @param \DateTime|null $timesheet_entry_period_end 
     *
     * @return self
     */
    public function setTimesheetEntryPeriodEnd($timesheet_entry_period_end)
    {
        if (is_null($timesheet_entry_period_end)) {
            throw new \InvalidArgumentException('non-nullable timesheet_entry_period_end cannot be null');
        }
        $this->container['timesheet_entry_period_end'] = $timesheet_entry_period_end;

        return $this;
    }

    /**
     * Gets expense_categories
     *
     * @return \OpenAPI\Client\Model\ExpenseCategoryResponseModel[]|null
     */
    public function getExpenseCategories()
    {
        return $this->container['expense_categories'];
    }

    /**
     * Sets expense_categories
     *
     * @param \OpenAPI\Client\Model\ExpenseCategoryResponseModel[]|null $expense_categories 
     *
     * @return self
     */
    public function setExpenseCategories($expense_categories)
    {
        if (is_null($expense_categories)) {
            throw new \InvalidArgumentException('non-nullable expense_categories cannot be null');
        }
        $this->container['expense_categories'] = $expense_categories;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return \OpenAPI\Client\Model\JournalServiceTaxCode[]|null
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param \OpenAPI\Client\Model\JournalServiceTaxCode[]|null $tax_codes 
     *
     * @return self
     */
    public function setTaxCodes($tax_codes)
    {
        if (is_null($tax_codes)) {
            throw new \InvalidArgumentException('non-nullable tax_codes cannot be null');
        }
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return \OpenAPI\Client\Model\EssCurrentExpensesModel|null
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param \OpenAPI\Client\Model\EssCurrentExpensesModel|null $expenses expenses
     *
     * @return self
     */
    public function setExpenses($expenses)
    {
        if (is_null($expenses)) {
            throw new \InvalidArgumentException('non-nullable expenses cannot be null');
        }
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets pending_shift_count
     *
     * @return int|null
     */
    public function getPendingShiftCount()
    {
        return $this->container['pending_shift_count'];
    }

    /**
     * Sets pending_shift_count
     *
     * @param int|null $pending_shift_count 
     *
     * @return self
     */
    public function setPendingShiftCount($pending_shift_count)
    {
        if (is_null($pending_shift_count)) {
            throw new \InvalidArgumentException('non-nullable pending_shift_count cannot be null');
        }
        $this->container['pending_shift_count'] = $pending_shift_count;

        return $this;
    }

    /**
     * Gets proposed_swap_count
     *
     * @return int|null
     */
    public function getProposedSwapCount()
    {
        return $this->container['proposed_swap_count'];
    }

    /**
     * Sets proposed_swap_count
     *
     * @param int|null $proposed_swap_count 
     *
     * @return self
     */
    public function setProposedSwapCount($proposed_swap_count)
    {
        if (is_null($proposed_swap_count)) {
            throw new \InvalidArgumentException('non-nullable proposed_swap_count cannot be null');
        }
        $this->container['proposed_swap_count'] = $proposed_swap_count;

        return $this;
    }

    /**
     * Gets pending_leave_count
     *
     * @return int|null
     */
    public function getPendingLeaveCount()
    {
        return $this->container['pending_leave_count'];
    }

    /**
     * Sets pending_leave_count
     *
     * @param int|null $pending_leave_count 
     *
     * @return self
     */
    public function setPendingLeaveCount($pending_leave_count)
    {
        if (is_null($pending_leave_count)) {
            throw new \InvalidArgumentException('non-nullable pending_leave_count cannot be null');
        }
        $this->container['pending_leave_count'] = $pending_leave_count;

        return $this;
    }

    /**
     * Gets current_shift
     *
     * @return \OpenAPI\Client\Model\EssCurrentShiftModel|null
     */
    public function getCurrentShift()
    {
        return $this->container['current_shift'];
    }

    /**
     * Sets current_shift
     *
     * @param \OpenAPI\Client\Model\EssCurrentShiftModel|null $current_shift current_shift
     *
     * @return self
     */
    public function setCurrentShift($current_shift)
    {
        if (is_null($current_shift)) {
            throw new \InvalidArgumentException('non-nullable current_shift cannot be null');
        }
        $this->container['current_shift'] = $current_shift;

        return $this;
    }

    /**
     * Gets documents_requiring_acknowledgement_count
     *
     * @return int|null
     */
    public function getDocumentsRequiringAcknowledgementCount()
    {
        return $this->container['documents_requiring_acknowledgement_count'];
    }

    /**
     * Sets documents_requiring_acknowledgement_count
     *
     * @param int|null $documents_requiring_acknowledgement_count 
     *
     * @return self
     */
    public function setDocumentsRequiringAcknowledgementCount($documents_requiring_acknowledgement_count)
    {
        if (is_null($documents_requiring_acknowledgement_count)) {
            throw new \InvalidArgumentException('non-nullable documents_requiring_acknowledgement_count cannot be null');
        }
        $this->container['documents_requiring_acknowledgement_count'] = $documents_requiring_acknowledgement_count;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region 
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets biddable_shift_count
     *
     * @return int|null
     */
    public function getBiddableShiftCount()
    {
        return $this->container['biddable_shift_count'];
    }

    /**
     * Sets biddable_shift_count
     *
     * @param int|null $biddable_shift_count 
     *
     * @return self
     */
    public function setBiddableShiftCount($biddable_shift_count)
    {
        if (is_null($biddable_shift_count)) {
            throw new \InvalidArgumentException('non-nullable biddable_shift_count cannot be null');
        }
        $this->container['biddable_shift_count'] = $biddable_shift_count;

        return $this;
    }

    /**
     * Gets is_terminated
     *
     * @return bool|null
     */
    public function getIsTerminated()
    {
        return $this->container['is_terminated'];
    }

    /**
     * Sets is_terminated
     *
     * @param bool|null $is_terminated 
     *
     * @return self
     */
    public function setIsTerminated($is_terminated)
    {
        if (is_null($is_terminated)) {
            throw new \InvalidArgumentException('non-nullable is_terminated cannot be null');
        }
        $this->container['is_terminated'] = $is_terminated;

        return $this;
    }

    /**
     * Gets google_maps_api_key
     *
     * @return string|null
     */
    public function getGoogleMapsApiKey()
    {
        return $this->container['google_maps_api_key'];
    }

    /**
     * Sets google_maps_api_key
     *
     * @param string|null $google_maps_api_key 
     *
     * @return self
     */
    public function setGoogleMapsApiKey($google_maps_api_key)
    {
        if (is_null($google_maps_api_key)) {
            throw new \InvalidArgumentException('non-nullable google_maps_api_key cannot be null');
        }
        $this->container['google_maps_api_key'] = $google_maps_api_key;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date 
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets standard_hours
     *
     * @return \OpenAPI\Client\Model\StandardHoursModel|null
     */
    public function getStandardHours()
    {
        return $this->container['standard_hours'];
    }

    /**
     * Sets standard_hours
     *
     * @param \OpenAPI\Client\Model\StandardHoursModel|null $standard_hours standard_hours
     *
     * @return self
     */
    public function setStandardHours($standard_hours)
    {
        if (is_null($standard_hours)) {
            throw new \InvalidArgumentException('non-nullable standard_hours cannot be null');
        }
        $this->container['standard_hours'] = $standard_hours;

        return $this;
    }

    /**
     * Gets not_accepted_shifts_count
     *
     * @return int|null
     */
    public function getNotAcceptedShiftsCount()
    {
        return $this->container['not_accepted_shifts_count'];
    }

    /**
     * Sets not_accepted_shifts_count
     *
     * @param int|null $not_accepted_shifts_count 
     *
     * @return self
     */
    public function setNotAcceptedShiftsCount($not_accepted_shifts_count)
    {
        if (is_null($not_accepted_shifts_count)) {
            throw new \InvalidArgumentException('non-nullable not_accepted_shifts_count cannot be null');
        }
        $this->container['not_accepted_shifts_count'] = $not_accepted_shifts_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


