<?php
/**
 * AuPayScheduleModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuPayScheduleModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuPayScheduleModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuPayScheduleModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aba_details_id' => 'int',
        'payg_account_bsb' => 'string',
        'payg_account_number' => 'string',
        'payg_account_name' => 'string',
        'payg_reference' => 'string',
        'auto_pay_configuration' => '\Swagger\Client\Model\AuAutoPayConfigurationModel',
        'frequency' => 'string',
        'id' => 'int',
        'name' => 'string',
        'employee_selection_strategy' => 'string',
        'last_date_paid' => '\DateTime',
        'last_pay_run' => '\DateTime',
        'external_id' => 'string',
        'source' => 'string',
        'locations' => 'int[]',
        'equal_monthly_payments' => 'bool',
        'ignored_pay_run_warnings' => 'int[]',
        'default_finalise_settings' => '\Swagger\Client\Model\PayRunFinaliseDefaultSettingsModel',
        'pay_schedule_approval_settings' => '\Swagger\Client\Model\PayScheduleApprovalSettingsModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aba_details_id' => 'int32',
        'payg_account_bsb' => null,
        'payg_account_number' => null,
        'payg_account_name' => null,
        'payg_reference' => null,
        'auto_pay_configuration' => null,
        'frequency' => null,
        'id' => 'int32',
        'name' => null,
        'employee_selection_strategy' => null,
        'last_date_paid' => 'date-time',
        'last_pay_run' => 'date-time',
        'external_id' => null,
        'source' => null,
        'locations' => 'int32',
        'equal_monthly_payments' => null,
        'ignored_pay_run_warnings' => 'int32',
        'default_finalise_settings' => null,
        'pay_schedule_approval_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aba_details_id' => 'abaDetailsId',
        'payg_account_bsb' => 'paygAccountBsb',
        'payg_account_number' => 'paygAccountNumber',
        'payg_account_name' => 'paygAccountName',
        'payg_reference' => 'paygReference',
        'auto_pay_configuration' => 'autoPayConfiguration',
        'frequency' => 'frequency',
        'id' => 'id',
        'name' => 'name',
        'employee_selection_strategy' => 'employeeSelectionStrategy',
        'last_date_paid' => 'lastDatePaid',
        'last_pay_run' => 'lastPayRun',
        'external_id' => 'externalId',
        'source' => 'source',
        'locations' => 'locations',
        'equal_monthly_payments' => 'equalMonthlyPayments',
        'ignored_pay_run_warnings' => 'ignoredPayRunWarnings',
        'default_finalise_settings' => 'defaultFinaliseSettings',
        'pay_schedule_approval_settings' => 'payScheduleApprovalSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aba_details_id' => 'setAbaDetailsId',
        'payg_account_bsb' => 'setPaygAccountBsb',
        'payg_account_number' => 'setPaygAccountNumber',
        'payg_account_name' => 'setPaygAccountName',
        'payg_reference' => 'setPaygReference',
        'auto_pay_configuration' => 'setAutoPayConfiguration',
        'frequency' => 'setFrequency',
        'id' => 'setId',
        'name' => 'setName',
        'employee_selection_strategy' => 'setEmployeeSelectionStrategy',
        'last_date_paid' => 'setLastDatePaid',
        'last_pay_run' => 'setLastPayRun',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'locations' => 'setLocations',
        'equal_monthly_payments' => 'setEqualMonthlyPayments',
        'ignored_pay_run_warnings' => 'setIgnoredPayRunWarnings',
        'default_finalise_settings' => 'setDefaultFinaliseSettings',
        'pay_schedule_approval_settings' => 'setPayScheduleApprovalSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aba_details_id' => 'getAbaDetailsId',
        'payg_account_bsb' => 'getPaygAccountBsb',
        'payg_account_number' => 'getPaygAccountNumber',
        'payg_account_name' => 'getPaygAccountName',
        'payg_reference' => 'getPaygReference',
        'auto_pay_configuration' => 'getAutoPayConfiguration',
        'frequency' => 'getFrequency',
        'id' => 'getId',
        'name' => 'getName',
        'employee_selection_strategy' => 'getEmployeeSelectionStrategy',
        'last_date_paid' => 'getLastDatePaid',
        'last_pay_run' => 'getLastPayRun',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'locations' => 'getLocations',
        'equal_monthly_payments' => 'getEqualMonthlyPayments',
        'ignored_pay_run_warnings' => 'getIgnoredPayRunWarnings',
        'default_finalise_settings' => 'getDefaultFinaliseSettings',
        'pay_schedule_approval_settings' => 'getPayScheduleApprovalSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FREQUENCY_WEEKLY = 'Weekly';
    const FREQUENCY_FORTNIGHTLY = 'Fortnightly';
    const FREQUENCY_MONTHLY = 'Monthly';
    const EMPLOYEE_SELECTION_STRATEGY_NONE = 'None';
    const EMPLOYEE_SELECTION_STRATEGY_PAY_RUN_DEFAULT = 'PayRunDefault';
    const EMPLOYEE_SELECTION_STRATEGY_TIMESHEET_LOCATIONS = 'TimesheetLocations';
    const EMPLOYEE_SELECTION_STRATEGY_PAY_RUN_DEFAULT_WITH_TIMESHEETS = 'PayRunDefaultWithTimesheets';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_FORTNIGHTLY,
            self::FREQUENCY_MONTHLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmployeeSelectionStrategyAllowableValues()
    {
        return [
            self::EMPLOYEE_SELECTION_STRATEGY_NONE,
            self::EMPLOYEE_SELECTION_STRATEGY_PAY_RUN_DEFAULT,
            self::EMPLOYEE_SELECTION_STRATEGY_TIMESHEET_LOCATIONS,
            self::EMPLOYEE_SELECTION_STRATEGY_PAY_RUN_DEFAULT_WITH_TIMESHEETS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aba_details_id'] = isset($data['aba_details_id']) ? $data['aba_details_id'] : null;
        $this->container['payg_account_bsb'] = isset($data['payg_account_bsb']) ? $data['payg_account_bsb'] : null;
        $this->container['payg_account_number'] = isset($data['payg_account_number']) ? $data['payg_account_number'] : null;
        $this->container['payg_account_name'] = isset($data['payg_account_name']) ? $data['payg_account_name'] : null;
        $this->container['payg_reference'] = isset($data['payg_reference']) ? $data['payg_reference'] : null;
        $this->container['auto_pay_configuration'] = isset($data['auto_pay_configuration']) ? $data['auto_pay_configuration'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['employee_selection_strategy'] = isset($data['employee_selection_strategy']) ? $data['employee_selection_strategy'] : null;
        $this->container['last_date_paid'] = isset($data['last_date_paid']) ? $data['last_date_paid'] : null;
        $this->container['last_pay_run'] = isset($data['last_pay_run']) ? $data['last_pay_run'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['equal_monthly_payments'] = isset($data['equal_monthly_payments']) ? $data['equal_monthly_payments'] : null;
        $this->container['ignored_pay_run_warnings'] = isset($data['ignored_pay_run_warnings']) ? $data['ignored_pay_run_warnings'] : null;
        $this->container['default_finalise_settings'] = isset($data['default_finalise_settings']) ? $data['default_finalise_settings'] : null;
        $this->container['pay_schedule_approval_settings'] = isset($data['pay_schedule_approval_settings']) ? $data['pay_schedule_approval_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($this->container['frequency']) && !in_array($this->container['frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmployeeSelectionStrategyAllowableValues();
        if (!is_null($this->container['employee_selection_strategy']) && !in_array($this->container['employee_selection_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employee_selection_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aba_details_id
     *
     * @return int
     */
    public function getAbaDetailsId()
    {
        return $this->container['aba_details_id'];
    }

    /**
     * Sets aba_details_id
     *
     * @param int $aba_details_id 
     *
     * @return $this
     */
    public function setAbaDetailsId($aba_details_id)
    {
        $this->container['aba_details_id'] = $aba_details_id;

        return $this;
    }

    /**
     * Gets payg_account_bsb
     *
     * @return string
     */
    public function getPaygAccountBsb()
    {
        return $this->container['payg_account_bsb'];
    }

    /**
     * Sets payg_account_bsb
     *
     * @param string $payg_account_bsb 
     *
     * @return $this
     */
    public function setPaygAccountBsb($payg_account_bsb)
    {
        $this->container['payg_account_bsb'] = $payg_account_bsb;

        return $this;
    }

    /**
     * Gets payg_account_number
     *
     * @return string
     */
    public function getPaygAccountNumber()
    {
        return $this->container['payg_account_number'];
    }

    /**
     * Sets payg_account_number
     *
     * @param string $payg_account_number 
     *
     * @return $this
     */
    public function setPaygAccountNumber($payg_account_number)
    {
        $this->container['payg_account_number'] = $payg_account_number;

        return $this;
    }

    /**
     * Gets payg_account_name
     *
     * @return string
     */
    public function getPaygAccountName()
    {
        return $this->container['payg_account_name'];
    }

    /**
     * Sets payg_account_name
     *
     * @param string $payg_account_name 
     *
     * @return $this
     */
    public function setPaygAccountName($payg_account_name)
    {
        $this->container['payg_account_name'] = $payg_account_name;

        return $this;
    }

    /**
     * Gets payg_reference
     *
     * @return string
     */
    public function getPaygReference()
    {
        return $this->container['payg_reference'];
    }

    /**
     * Sets payg_reference
     *
     * @param string $payg_reference 
     *
     * @return $this
     */
    public function setPaygReference($payg_reference)
    {
        $this->container['payg_reference'] = $payg_reference;

        return $this;
    }

    /**
     * Gets auto_pay_configuration
     *
     * @return \Swagger\Client\Model\AuAutoPayConfigurationModel
     */
    public function getAutoPayConfiguration()
    {
        return $this->container['auto_pay_configuration'];
    }

    /**
     * Sets auto_pay_configuration
     *
     * @param \Swagger\Client\Model\AuAutoPayConfigurationModel $auto_pay_configuration 
     *
     * @return $this
     */
    public function setAutoPayConfiguration($auto_pay_configuration)
    {
        $this->container['auto_pay_configuration'] = $auto_pay_configuration;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency 
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $allowedValues = $this->getFrequencyAllowableValues();
        if (!is_null($frequency) && !in_array($frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets employee_selection_strategy
     *
     * @return string
     */
    public function getEmployeeSelectionStrategy()
    {
        return $this->container['employee_selection_strategy'];
    }

    /**
     * Sets employee_selection_strategy
     *
     * @param string $employee_selection_strategy 
     *
     * @return $this
     */
    public function setEmployeeSelectionStrategy($employee_selection_strategy)
    {
        $allowedValues = $this->getEmployeeSelectionStrategyAllowableValues();
        if (!is_null($employee_selection_strategy) && !in_array($employee_selection_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employee_selection_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employee_selection_strategy'] = $employee_selection_strategy;

        return $this;
    }

    /**
     * Gets last_date_paid
     *
     * @return \DateTime
     */
    public function getLastDatePaid()
    {
        return $this->container['last_date_paid'];
    }

    /**
     * Sets last_date_paid
     *
     * @param \DateTime $last_date_paid 
     *
     * @return $this
     */
    public function setLastDatePaid($last_date_paid)
    {
        $this->container['last_date_paid'] = $last_date_paid;

        return $this;
    }

    /**
     * Gets last_pay_run
     *
     * @return \DateTime
     */
    public function getLastPayRun()
    {
        return $this->container['last_pay_run'];
    }

    /**
     * Sets last_pay_run
     *
     * @param \DateTime $last_pay_run 
     *
     * @return $this
     */
    public function setLastPayRun($last_pay_run)
    {
        $this->container['last_pay_run'] = $last_pay_run;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source 
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return int[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param int[] $locations 
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets equal_monthly_payments
     *
     * @return bool
     */
    public function getEqualMonthlyPayments()
    {
        return $this->container['equal_monthly_payments'];
    }

    /**
     * Sets equal_monthly_payments
     *
     * @param bool $equal_monthly_payments 
     *
     * @return $this
     */
    public function setEqualMonthlyPayments($equal_monthly_payments)
    {
        $this->container['equal_monthly_payments'] = $equal_monthly_payments;

        return $this;
    }

    /**
     * Gets ignored_pay_run_warnings
     *
     * @return int[]
     */
    public function getIgnoredPayRunWarnings()
    {
        return $this->container['ignored_pay_run_warnings'];
    }

    /**
     * Sets ignored_pay_run_warnings
     *
     * @param int[] $ignored_pay_run_warnings 
     *
     * @return $this
     */
    public function setIgnoredPayRunWarnings($ignored_pay_run_warnings)
    {
        $this->container['ignored_pay_run_warnings'] = $ignored_pay_run_warnings;

        return $this;
    }

    /**
     * Gets default_finalise_settings
     *
     * @return \Swagger\Client\Model\PayRunFinaliseDefaultSettingsModel
     */
    public function getDefaultFinaliseSettings()
    {
        return $this->container['default_finalise_settings'];
    }

    /**
     * Sets default_finalise_settings
     *
     * @param \Swagger\Client\Model\PayRunFinaliseDefaultSettingsModel $default_finalise_settings 
     *
     * @return $this
     */
    public function setDefaultFinaliseSettings($default_finalise_settings)
    {
        $this->container['default_finalise_settings'] = $default_finalise_settings;

        return $this;
    }

    /**
     * Gets pay_schedule_approval_settings
     *
     * @return \Swagger\Client\Model\PayScheduleApprovalSettingsModel
     */
    public function getPayScheduleApprovalSettings()
    {
        return $this->container['pay_schedule_approval_settings'];
    }

    /**
     * Sets pay_schedule_approval_settings
     *
     * @param \Swagger\Client\Model\PayScheduleApprovalSettingsModel $pay_schedule_approval_settings 
     *
     * @return $this
     */
    public function setPayScheduleApprovalSettings($pay_schedule_approval_settings)
    {
        $this->container['pay_schedule_approval_settings'] = $pay_schedule_approval_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


