<?php
/**
 * EmploymentAgreementModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmploymentAgreementModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmploymentAgreementModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmploymentAgreementModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'classification' => 'string',
        'employment_type' => 'string',
        'pay_rate_template_type' => 'string',
        'pay_condition_rule_set_id' => 'int',
        'pay_condition_rule_set' => '\Swagger\Client\Model\PayConditionRuleSetModel',
        'leave_allowance_templates' => '\Swagger\Client\Model\LeaveAllowanceTemplateModel[]',
        'leave_allowance_template_ids' => 'int[]',
        'age_pay_rate_templates' => '\Swagger\Client\Model\EmploymentAgreementPayRateTemplateModel[]',
        'external_id' => 'string',
        'source' => 'string',
        'rank' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'classification' => null,
        'employment_type' => null,
        'pay_rate_template_type' => null,
        'pay_condition_rule_set_id' => 'int32',
        'pay_condition_rule_set' => null,
        'leave_allowance_templates' => null,
        'leave_allowance_template_ids' => 'int32',
        'age_pay_rate_templates' => null,
        'external_id' => null,
        'source' => null,
        'rank' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'classification' => 'classification',
        'employment_type' => 'employmentType',
        'pay_rate_template_type' => 'payRateTemplateType',
        'pay_condition_rule_set_id' => 'payConditionRuleSetId',
        'pay_condition_rule_set' => 'payConditionRuleSet',
        'leave_allowance_templates' => 'leaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'leaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'agePayRateTemplates',
        'external_id' => 'externalId',
        'source' => 'source',
        'rank' => 'rank'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'classification' => 'setClassification',
        'employment_type' => 'setEmploymentType',
        'pay_rate_template_type' => 'setPayRateTemplateType',
        'pay_condition_rule_set_id' => 'setPayConditionRuleSetId',
        'pay_condition_rule_set' => 'setPayConditionRuleSet',
        'leave_allowance_templates' => 'setLeaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'setLeaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'setAgePayRateTemplates',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'rank' => 'setRank'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'classification' => 'getClassification',
        'employment_type' => 'getEmploymentType',
        'pay_rate_template_type' => 'getPayRateTemplateType',
        'pay_condition_rule_set_id' => 'getPayConditionRuleSetId',
        'pay_condition_rule_set' => 'getPayConditionRuleSet',
        'leave_allowance_templates' => 'getLeaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'getLeaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'getAgePayRateTemplates',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'rank' => 'getRank'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EMPLOYMENT_TYPE_UNKNOWN = 'Unknown';
    const EMPLOYMENT_TYPE_FULL_TIME = 'FullTime';
    const EMPLOYMENT_TYPE_PART_TIME = 'PartTime';
    const EMPLOYMENT_TYPE_LABOUR_HIRE = 'LabourHire';
    const EMPLOYMENT_TYPE_SUPERANNUATION_INCOME_STREAM = 'SuperannuationIncomeStream';
    const EMPLOYMENT_TYPE_CASUAL = 'Casual';
    const EMPLOYMENT_TYPE_NOT_APPLICABLE = 'NotApplicable';
    const EMPLOYMENT_TYPE_INDEPENDENT_CONTRACTOR = 'IndependentContractor';
    const PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH = 'DateOfBirth';
    const PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY = 'Anniversary';
    const PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY_IN_MONTHS = 'AnniversaryInMonths';
    const PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH_AND_ANNIVERSARY_IN_MONTHS = 'DateOfBirthAndAnniversaryInMonths';
    const SOURCE_NONE = 'None';
    const SOURCE_SAASU = 'Saasu';
    const SOURCE_XERO = 'Xero';
    const SOURCE_MYOB = 'MYOB';
    const SOURCE_DEPUTY = 'Deputy';
    const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    const SOURCE_CLICK_SUPER = 'ClickSuper';
    const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    const SOURCE_FILE_IMPORT = 'FileImport';
    const SOURCE_FILE_EXPORT = 'FileExport';
    const SOURCE_QUICK_BOOKS = 'QuickBooks';
    const SOURCE_HARMONY = 'Harmony';
    const SOURCE_AWARD_STORE = 'AwardStore';
    const SOURCE_ATTACHE = 'Attache';
    const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    const SOURCE_API = 'API';
    const SOURCE_MICRO_POWER = 'MicroPower';
    const SOURCE_ROSTER_LIVE = 'RosterLive';
    const SOURCE_NET_SUITE = 'NetSuite';
    const SOURCE_KOUNTA = 'Kounta';
    const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    const SOURCE_JONAS_PREMIER = 'JonasPremier';
    const SOURCE_WAGE_EASY = 'WageEasy';
    const SOURCE_MAESTRANO = 'Maestrano';
    const SOURCE_WORK_ZONE = 'WorkZone';
    const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    const SOURCE_ONBOARDING = 'Onboarding';
    const SOURCE_ADMIN = 'Admin';
    const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    const SOURCE_SAGE50 = 'Sage50';
    const SOURCE_PENSION_SYNC = 'PensionSync';
    const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    const SOURCE_PRONTO_XI = 'ProntoXI';
    const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    const SOURCE_BEAM = 'Beam';
    const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    const SOURCE_WIISE = 'Wiise';
    const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    const SOURCE_O_AUTH = 'OAuth';
    const SOURCE_FRESH_BOOKS = 'FreshBooks';
    const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    const SOURCE_TELLEROO = 'Telleroo';
    const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    const SOURCE_PAYTRON = 'Paytron';
    const SOURCE_ZOHO = 'Zoho';
    const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    const SOURCE_TWINFIELD = 'Twinfield';
    const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentTypeAllowableValues()
    {
        return [
            self::EMPLOYMENT_TYPE_UNKNOWN,
            self::EMPLOYMENT_TYPE_FULL_TIME,
            self::EMPLOYMENT_TYPE_PART_TIME,
            self::EMPLOYMENT_TYPE_LABOUR_HIRE,
            self::EMPLOYMENT_TYPE_SUPERANNUATION_INCOME_STREAM,
            self::EMPLOYMENT_TYPE_CASUAL,
            self::EMPLOYMENT_TYPE_NOT_APPLICABLE,
            self::EMPLOYMENT_TYPE_INDEPENDENT_CONTRACTOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayRateTemplateTypeAllowableValues()
    {
        return [
            self::PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH,
            self::PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY,
            self::PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY_IN_MONTHS,
            self::PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH_AND_ANNIVERSARY_IN_MONTHS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['pay_rate_template_type'] = isset($data['pay_rate_template_type']) ? $data['pay_rate_template_type'] : null;
        $this->container['pay_condition_rule_set_id'] = isset($data['pay_condition_rule_set_id']) ? $data['pay_condition_rule_set_id'] : null;
        $this->container['pay_condition_rule_set'] = isset($data['pay_condition_rule_set']) ? $data['pay_condition_rule_set'] : null;
        $this->container['leave_allowance_templates'] = isset($data['leave_allowance_templates']) ? $data['leave_allowance_templates'] : null;
        $this->container['leave_allowance_template_ids'] = isset($data['leave_allowance_template_ids']) ? $data['leave_allowance_template_ids'] : null;
        $this->container['age_pay_rate_templates'] = isset($data['age_pay_rate_templates']) ? $data['age_pay_rate_templates'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!is_null($this->container['employment_type']) && !in_array($this->container['employment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayRateTemplateTypeAllowableValues();
        if (!is_null($this->container['pay_rate_template_type']) && !in_array($this->container['pay_rate_template_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_rate_template_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string $classification 
     *
     * @return $this
     */
    public function setClassification($classification)
    {
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string $employment_type 
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!is_null($employment_type) && !in_array($employment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets pay_rate_template_type
     *
     * @return string
     */
    public function getPayRateTemplateType()
    {
        return $this->container['pay_rate_template_type'];
    }

    /**
     * Sets pay_rate_template_type
     *
     * @param string $pay_rate_template_type 
     *
     * @return $this
     */
    public function setPayRateTemplateType($pay_rate_template_type)
    {
        $allowedValues = $this->getPayRateTemplateTypeAllowableValues();
        if (!is_null($pay_rate_template_type) && !in_array($pay_rate_template_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_rate_template_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_rate_template_type'] = $pay_rate_template_type;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set_id
     *
     * @return int
     */
    public function getPayConditionRuleSetId()
    {
        return $this->container['pay_condition_rule_set_id'];
    }

    /**
     * Sets pay_condition_rule_set_id
     *
     * @param int $pay_condition_rule_set_id 
     *
     * @return $this
     */
    public function setPayConditionRuleSetId($pay_condition_rule_set_id)
    {
        $this->container['pay_condition_rule_set_id'] = $pay_condition_rule_set_id;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set
     *
     * @return \Swagger\Client\Model\PayConditionRuleSetModel
     */
    public function getPayConditionRuleSet()
    {
        return $this->container['pay_condition_rule_set'];
    }

    /**
     * Sets pay_condition_rule_set
     *
     * @param \Swagger\Client\Model\PayConditionRuleSetModel $pay_condition_rule_set 
     *
     * @return $this
     */
    public function setPayConditionRuleSet($pay_condition_rule_set)
    {
        $this->container['pay_condition_rule_set'] = $pay_condition_rule_set;

        return $this;
    }

    /**
     * Gets leave_allowance_templates
     *
     * @return \Swagger\Client\Model\LeaveAllowanceTemplateModel[]
     */
    public function getLeaveAllowanceTemplates()
    {
        return $this->container['leave_allowance_templates'];
    }

    /**
     * Sets leave_allowance_templates
     *
     * @param \Swagger\Client\Model\LeaveAllowanceTemplateModel[] $leave_allowance_templates 
     *
     * @return $this
     */
    public function setLeaveAllowanceTemplates($leave_allowance_templates)
    {
        $this->container['leave_allowance_templates'] = $leave_allowance_templates;

        return $this;
    }

    /**
     * Gets leave_allowance_template_ids
     *
     * @return int[]
     */
    public function getLeaveAllowanceTemplateIds()
    {
        return $this->container['leave_allowance_template_ids'];
    }

    /**
     * Sets leave_allowance_template_ids
     *
     * @param int[] $leave_allowance_template_ids 
     *
     * @return $this
     */
    public function setLeaveAllowanceTemplateIds($leave_allowance_template_ids)
    {
        $this->container['leave_allowance_template_ids'] = $leave_allowance_template_ids;

        return $this;
    }

    /**
     * Gets age_pay_rate_templates
     *
     * @return \Swagger\Client\Model\EmploymentAgreementPayRateTemplateModel[]
     */
    public function getAgePayRateTemplates()
    {
        return $this->container['age_pay_rate_templates'];
    }

    /**
     * Sets age_pay_rate_templates
     *
     * @param \Swagger\Client\Model\EmploymentAgreementPayRateTemplateModel[] $age_pay_rate_templates 
     *
     * @return $this
     */
    public function setAgePayRateTemplates($age_pay_rate_templates)
    {
        $this->container['age_pay_rate_templates'] = $age_pay_rate_templates;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source 
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank 
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


