<?php
/**
 * EmploymentAgreementModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmploymentAgreementModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmploymentAgreementModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmploymentAgreementModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'classification' => 'string',
        'employment_type' => 'string',
        'pay_rate_template_type' => 'string',
        'pay_condition_rule_set_id' => 'int',
        'pay_condition_rule_set' => '\OpenAPI\Client\Model\PayConditionRuleSetModel',
        'leave_allowance_templates' => '\OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]',
        'leave_allowance_template_ids' => 'int[]',
        'age_pay_rate_templates' => '\OpenAPI\Client\Model\EmploymentAgreementPayRateTemplateModel[]',
        'external_id' => 'string',
        'source' => 'string',
        'rank' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'classification' => null,
        'employment_type' => null,
        'pay_rate_template_type' => null,
        'pay_condition_rule_set_id' => 'int32',
        'pay_condition_rule_set' => null,
        'leave_allowance_templates' => null,
        'leave_allowance_template_ids' => 'int32',
        'age_pay_rate_templates' => null,
        'external_id' => null,
        'source' => null,
        'rank' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'classification' => false,
		'employment_type' => false,
		'pay_rate_template_type' => false,
		'pay_condition_rule_set_id' => false,
		'pay_condition_rule_set' => false,
		'leave_allowance_templates' => false,
		'leave_allowance_template_ids' => false,
		'age_pay_rate_templates' => false,
		'external_id' => false,
		'source' => false,
		'rank' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'classification' => 'classification',
        'employment_type' => 'employmentType',
        'pay_rate_template_type' => 'payRateTemplateType',
        'pay_condition_rule_set_id' => 'payConditionRuleSetId',
        'pay_condition_rule_set' => 'payConditionRuleSet',
        'leave_allowance_templates' => 'leaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'leaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'agePayRateTemplates',
        'external_id' => 'externalId',
        'source' => 'source',
        'rank' => 'rank'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'classification' => 'setClassification',
        'employment_type' => 'setEmploymentType',
        'pay_rate_template_type' => 'setPayRateTemplateType',
        'pay_condition_rule_set_id' => 'setPayConditionRuleSetId',
        'pay_condition_rule_set' => 'setPayConditionRuleSet',
        'leave_allowance_templates' => 'setLeaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'setLeaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'setAgePayRateTemplates',
        'external_id' => 'setExternalId',
        'source' => 'setSource',
        'rank' => 'setRank'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'classification' => 'getClassification',
        'employment_type' => 'getEmploymentType',
        'pay_rate_template_type' => 'getPayRateTemplateType',
        'pay_condition_rule_set_id' => 'getPayConditionRuleSetId',
        'pay_condition_rule_set' => 'getPayConditionRuleSet',
        'leave_allowance_templates' => 'getLeaveAllowanceTemplates',
        'leave_allowance_template_ids' => 'getLeaveAllowanceTemplateIds',
        'age_pay_rate_templates' => 'getAgePayRateTemplates',
        'external_id' => 'getExternalId',
        'source' => 'getSource',
        'rank' => 'getRank'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMPLOYMENT_TYPE_UNKNOWN = 'Unknown';
    public const EMPLOYMENT_TYPE_FULL_TIME = 'FullTime';
    public const EMPLOYMENT_TYPE_PART_TIME = 'PartTime';
    public const EMPLOYMENT_TYPE_LABOUR_HIRE = 'LabourHire';
    public const EMPLOYMENT_TYPE_SUPERANNUATION_INCOME_STREAM = 'SuperannuationIncomeStream';
    public const EMPLOYMENT_TYPE_CASUAL = 'Casual';
    public const EMPLOYMENT_TYPE_NOT_APPLICABLE = 'NotApplicable';
    public const EMPLOYMENT_TYPE_INDEPENDENT_CONTRACTOR = 'IndependentContractor';
    public const PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH = 'DateOfBirth';
    public const PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY = 'Anniversary';
    public const PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY_IN_MONTHS = 'AnniversaryInMonths';
    public const PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH_AND_ANNIVERSARY_IN_MONTHS = 'DateOfBirthAndAnniversaryInMonths';
    public const SOURCE_NONE = 'None';
    public const SOURCE_SAASU = 'Saasu';
    public const SOURCE_XERO = 'Xero';
    public const SOURCE_MYOB = 'MYOB';
    public const SOURCE_DEPUTY = 'Deputy';
    public const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    public const SOURCE_CLICK_SUPER = 'ClickSuper';
    public const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    public const SOURCE_FILE_IMPORT = 'FileImport';
    public const SOURCE_FILE_EXPORT = 'FileExport';
    public const SOURCE_QUICK_BOOKS = 'QuickBooks';
    public const SOURCE_HARMONY = 'Harmony';
    public const SOURCE_AWARD_STORE = 'AwardStore';
    public const SOURCE_ATTACHE = 'Attache';
    public const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    public const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    public const SOURCE_API = 'API';
    public const SOURCE_MICRO_POWER = 'MicroPower';
    public const SOURCE_ROSTER_LIVE = 'RosterLive';
    public const SOURCE_NET_SUITE = 'NetSuite';
    public const SOURCE_KOUNTA = 'Kounta';
    public const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    public const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    public const SOURCE_JONAS_PREMIER = 'JonasPremier';
    public const SOURCE_WAGE_EASY = 'WageEasy';
    public const SOURCE_MAESTRANO = 'Maestrano';
    public const SOURCE_WORK_ZONE = 'WorkZone';
    public const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    public const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    public const SOURCE_ONBOARDING = 'Onboarding';
    public const SOURCE_ADMIN = 'Admin';
    public const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    public const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    public const SOURCE_SAGE50 = 'Sage50';
    public const SOURCE_PENSION_SYNC = 'PensionSync';
    public const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    public const SOURCE_PRONTO_XI = 'ProntoXI';
    public const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    public const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    public const SOURCE_BEAM = 'Beam';
    public const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    public const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    public const SOURCE_WIISE = 'Wiise';
    public const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    public const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    public const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    public const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    public const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    public const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    public const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    public const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    public const SOURCE_O_AUTH = 'OAuth';
    public const SOURCE_FRESH_BOOKS = 'FreshBooks';
    public const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    public const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    public const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    public const SOURCE_TELLEROO = 'Telleroo';
    public const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    public const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    public const SOURCE_PAYTRON = 'Paytron';
    public const SOURCE_ACCESS_FINANCIALS = 'AccessFinancials';
    public const SOURCE_COMMA = 'Comma';
    public const SOURCE_ZOHO = 'Zoho';
    public const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    public const SOURCE_TWINFIELD = 'Twinfield';
    public const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    public const SOURCE_SQUARE = 'Square';
    public const SOURCE_QUICKFILE = 'Quickfile';
    public const SOURCE_TIDE = 'Tide';
    public const SOURCE_TIDE_SSO = 'TideSso';
    public const SOURCE_FREE_AGENT = 'FreeAgent';
    public const SOURCE_AKAHU = 'Akahu';
    public const SOURCE_INSTA_PAY = 'InstaPay';
    public const SOURCE_ZEPTO = 'Zepto';
    public const SOURCE_SLACK = 'Slack';
    public const SOURCE_CAXTON = 'Caxton';
    public const SOURCE_QUICKBOOKS_STANDALONE_PAYROLL = 'QuickbooksStandalonePayroll';
    public const SOURCE_IMPORT_EMPLOYEE_SELF_SETUP = 'ImportEmployeeSelfSetup';
    public const SOURCE_XERO_IDENTITY_PAYROLL_SIGN_UP = 'XeroIdentityPayrollSignUp';
    public const SOURCE_XERO_IDENTITY_HR_SIGN_UP = 'XeroIdentityHrSignUp';
    public const SOURCE_SAGE_INTACCT = 'SageIntacct';
    public const SOURCE_DAILY_PAY = 'DailyPay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentTypeAllowableValues()
    {
        return [
            self::EMPLOYMENT_TYPE_UNKNOWN,
            self::EMPLOYMENT_TYPE_FULL_TIME,
            self::EMPLOYMENT_TYPE_PART_TIME,
            self::EMPLOYMENT_TYPE_LABOUR_HIRE,
            self::EMPLOYMENT_TYPE_SUPERANNUATION_INCOME_STREAM,
            self::EMPLOYMENT_TYPE_CASUAL,
            self::EMPLOYMENT_TYPE_NOT_APPLICABLE,
            self::EMPLOYMENT_TYPE_INDEPENDENT_CONTRACTOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayRateTemplateTypeAllowableValues()
    {
        return [
            self::PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH,
            self::PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY,
            self::PAY_RATE_TEMPLATE_TYPE_ANNIVERSARY_IN_MONTHS,
            self::PAY_RATE_TEMPLATE_TYPE_DATE_OF_BIRTH_AND_ANNIVERSARY_IN_MONTHS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ACCESS_FINANCIALS,
            self::SOURCE_COMMA,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
            self::SOURCE_SQUARE,
            self::SOURCE_QUICKFILE,
            self::SOURCE_TIDE,
            self::SOURCE_TIDE_SSO,
            self::SOURCE_FREE_AGENT,
            self::SOURCE_AKAHU,
            self::SOURCE_INSTA_PAY,
            self::SOURCE_ZEPTO,
            self::SOURCE_SLACK,
            self::SOURCE_CAXTON,
            self::SOURCE_QUICKBOOKS_STANDALONE_PAYROLL,
            self::SOURCE_IMPORT_EMPLOYEE_SELF_SETUP,
            self::SOURCE_XERO_IDENTITY_PAYROLL_SIGN_UP,
            self::SOURCE_XERO_IDENTITY_HR_SIGN_UP,
            self::SOURCE_SAGE_INTACCT,
            self::SOURCE_DAILY_PAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('employment_type', $data ?? [], null);
        $this->setIfExists('pay_rate_template_type', $data ?? [], null);
        $this->setIfExists('pay_condition_rule_set_id', $data ?? [], null);
        $this->setIfExists('pay_condition_rule_set', $data ?? [], null);
        $this->setIfExists('leave_allowance_templates', $data ?? [], null);
        $this->setIfExists('leave_allowance_template_ids', $data ?? [], null);
        $this->setIfExists('age_pay_rate_templates', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!is_null($this->container['employment_type']) && !in_array($this->container['employment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'employment_type', must be one of '%s'",
                $this->container['employment_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayRateTemplateTypeAllowableValues();
        if (!is_null($this->container['pay_rate_template_type']) && !in_array($this->container['pay_rate_template_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_rate_template_type', must be one of '%s'",
                $this->container['pay_rate_template_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification 
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string|null
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string|null $employment_type 
     *
     * @return self
     */
    public function setEmploymentType($employment_type)
    {
        if (is_null($employment_type)) {
            throw new \InvalidArgumentException('non-nullable employment_type cannot be null');
        }
        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!in_array($employment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'employment_type', must be one of '%s'",
                    $employment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets pay_rate_template_type
     *
     * @return string|null
     */
    public function getPayRateTemplateType()
    {
        return $this->container['pay_rate_template_type'];
    }

    /**
     * Sets pay_rate_template_type
     *
     * @param string|null $pay_rate_template_type 
     *
     * @return self
     */
    public function setPayRateTemplateType($pay_rate_template_type)
    {
        if (is_null($pay_rate_template_type)) {
            throw new \InvalidArgumentException('non-nullable pay_rate_template_type cannot be null');
        }
        $allowedValues = $this->getPayRateTemplateTypeAllowableValues();
        if (!in_array($pay_rate_template_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_rate_template_type', must be one of '%s'",
                    $pay_rate_template_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_rate_template_type'] = $pay_rate_template_type;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set_id
     *
     * @return int|null
     */
    public function getPayConditionRuleSetId()
    {
        return $this->container['pay_condition_rule_set_id'];
    }

    /**
     * Sets pay_condition_rule_set_id
     *
     * @param int|null $pay_condition_rule_set_id 
     *
     * @return self
     */
    public function setPayConditionRuleSetId($pay_condition_rule_set_id)
    {
        if (is_null($pay_condition_rule_set_id)) {
            throw new \InvalidArgumentException('non-nullable pay_condition_rule_set_id cannot be null');
        }
        $this->container['pay_condition_rule_set_id'] = $pay_condition_rule_set_id;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set
     *
     * @return \OpenAPI\Client\Model\PayConditionRuleSetModel|null
     */
    public function getPayConditionRuleSet()
    {
        return $this->container['pay_condition_rule_set'];
    }

    /**
     * Sets pay_condition_rule_set
     *
     * @param \OpenAPI\Client\Model\PayConditionRuleSetModel|null $pay_condition_rule_set pay_condition_rule_set
     *
     * @return self
     */
    public function setPayConditionRuleSet($pay_condition_rule_set)
    {
        if (is_null($pay_condition_rule_set)) {
            throw new \InvalidArgumentException('non-nullable pay_condition_rule_set cannot be null');
        }
        $this->container['pay_condition_rule_set'] = $pay_condition_rule_set;

        return $this;
    }

    /**
     * Gets leave_allowance_templates
     *
     * @return \OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]|null
     */
    public function getLeaveAllowanceTemplates()
    {
        return $this->container['leave_allowance_templates'];
    }

    /**
     * Sets leave_allowance_templates
     *
     * @param \OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]|null $leave_allowance_templates 
     *
     * @return self
     */
    public function setLeaveAllowanceTemplates($leave_allowance_templates)
    {
        if (is_null($leave_allowance_templates)) {
            throw new \InvalidArgumentException('non-nullable leave_allowance_templates cannot be null');
        }
        $this->container['leave_allowance_templates'] = $leave_allowance_templates;

        return $this;
    }

    /**
     * Gets leave_allowance_template_ids
     *
     * @return int[]|null
     */
    public function getLeaveAllowanceTemplateIds()
    {
        return $this->container['leave_allowance_template_ids'];
    }

    /**
     * Sets leave_allowance_template_ids
     *
     * @param int[]|null $leave_allowance_template_ids 
     *
     * @return self
     */
    public function setLeaveAllowanceTemplateIds($leave_allowance_template_ids)
    {
        if (is_null($leave_allowance_template_ids)) {
            throw new \InvalidArgumentException('non-nullable leave_allowance_template_ids cannot be null');
        }
        $this->container['leave_allowance_template_ids'] = $leave_allowance_template_ids;

        return $this;
    }

    /**
     * Gets age_pay_rate_templates
     *
     * @return \OpenAPI\Client\Model\EmploymentAgreementPayRateTemplateModel[]|null
     */
    public function getAgePayRateTemplates()
    {
        return $this->container['age_pay_rate_templates'];
    }

    /**
     * Sets age_pay_rate_templates
     *
     * @param \OpenAPI\Client\Model\EmploymentAgreementPayRateTemplateModel[]|null $age_pay_rate_templates 
     *
     * @return self
     */
    public function setAgePayRateTemplates($age_pay_rate_templates)
    {
        if (is_null($age_pay_rate_templates)) {
            throw new \InvalidArgumentException('non-nullable age_pay_rate_templates cannot be null');
        }
        $this->container['age_pay_rate_templates'] = $age_pay_rate_templates;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int|null $rank 
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


