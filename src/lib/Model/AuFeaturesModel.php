<?php
/**
 * AuFeaturesModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuFeaturesModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuFeaturesModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuFeaturesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_employee_super_fund_self_service' => 'bool',
        'clock_on_can_specify_higher_classification' => 'bool',
        'allow_employee_leave_self_service' => 'bool',
        'allow_employee_self_editing' => 'bool',
        'allow_employee_timesheets_self_service' => 'bool',
        'allow_employee_to_set_unavailability' => 'bool',
        'allow_employee_to_decline_shifts' => 'bool',
        'allow_employee_bank_account_self_service' => 'bool',
        'allow_employee_satisfaction_survey' => 'bool',
        'allow_employees_to_view_all_approved_leave' => 'bool',
        'unavailability_cut_off' => 'int',
        'allow_employees_to_upload_profile_picture' => 'bool',
        'allow_employee_rostering_self_service' => 'bool',
        'allow_employee_expenses_self_service' => 'bool',
        'allow_employee_qualifications_self_service' => 'bool',
        'allow_employee_override_tax_codes' => 'bool',
        'allow_employees_to_edit_kiosk_timesheets' => 'bool',
        'ess_timesheet_setting' => 'string',
        'employee_must_accept_shifts' => 'bool',
        'allow_employee_timesheets_without_start_stop_times' => 'bool',
        'allow_employee_to_swap_shifts' => 'bool',
        'clock_on_require_photo' => 'bool',
        'clock_on_allow_employee_shift_selection' => 'bool',
        'clock_on_window_minutes' => 'int',
        'clock_off_window_minutes' => 'int',
        'timesheets_require_location' => 'bool',
        'timesheets_require_work_type' => 'bool',
        'enable_work_zone_clock_on' => 'bool',
        'shift_bidding' => 'bool',
        'allow_to_select_higher_classification' => 'bool',
        'allow_employee_work_eligibility_self_service' => 'bool',
        'paid_breaks_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_employee_super_fund_self_service' => null,
        'clock_on_can_specify_higher_classification' => null,
        'allow_employee_leave_self_service' => null,
        'allow_employee_self_editing' => null,
        'allow_employee_timesheets_self_service' => null,
        'allow_employee_to_set_unavailability' => null,
        'allow_employee_to_decline_shifts' => null,
        'allow_employee_bank_account_self_service' => null,
        'allow_employee_satisfaction_survey' => null,
        'allow_employees_to_view_all_approved_leave' => null,
        'unavailability_cut_off' => 'int32',
        'allow_employees_to_upload_profile_picture' => null,
        'allow_employee_rostering_self_service' => null,
        'allow_employee_expenses_self_service' => null,
        'allow_employee_qualifications_self_service' => null,
        'allow_employee_override_tax_codes' => null,
        'allow_employees_to_edit_kiosk_timesheets' => null,
        'ess_timesheet_setting' => null,
        'employee_must_accept_shifts' => null,
        'allow_employee_timesheets_without_start_stop_times' => null,
        'allow_employee_to_swap_shifts' => null,
        'clock_on_require_photo' => null,
        'clock_on_allow_employee_shift_selection' => null,
        'clock_on_window_minutes' => 'int32',
        'clock_off_window_minutes' => 'int32',
        'timesheets_require_location' => null,
        'timesheets_require_work_type' => null,
        'enable_work_zone_clock_on' => null,
        'shift_bidding' => null,
        'allow_to_select_higher_classification' => null,
        'allow_employee_work_eligibility_self_service' => null,
        'paid_breaks_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_employee_super_fund_self_service' => false,
		'clock_on_can_specify_higher_classification' => false,
		'allow_employee_leave_self_service' => false,
		'allow_employee_self_editing' => false,
		'allow_employee_timesheets_self_service' => false,
		'allow_employee_to_set_unavailability' => false,
		'allow_employee_to_decline_shifts' => false,
		'allow_employee_bank_account_self_service' => false,
		'allow_employee_satisfaction_survey' => false,
		'allow_employees_to_view_all_approved_leave' => false,
		'unavailability_cut_off' => false,
		'allow_employees_to_upload_profile_picture' => false,
		'allow_employee_rostering_self_service' => false,
		'allow_employee_expenses_self_service' => false,
		'allow_employee_qualifications_self_service' => false,
		'allow_employee_override_tax_codes' => false,
		'allow_employees_to_edit_kiosk_timesheets' => false,
		'ess_timesheet_setting' => false,
		'employee_must_accept_shifts' => false,
		'allow_employee_timesheets_without_start_stop_times' => false,
		'allow_employee_to_swap_shifts' => false,
		'clock_on_require_photo' => false,
		'clock_on_allow_employee_shift_selection' => false,
		'clock_on_window_minutes' => false,
		'clock_off_window_minutes' => false,
		'timesheets_require_location' => false,
		'timesheets_require_work_type' => false,
		'enable_work_zone_clock_on' => false,
		'shift_bidding' => false,
		'allow_to_select_higher_classification' => false,
		'allow_employee_work_eligibility_self_service' => false,
		'paid_breaks_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_employee_super_fund_self_service' => 'allowEmployeeSuperFundSelfService',
        'clock_on_can_specify_higher_classification' => 'clockOnCanSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'allowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'allowEmployeeSelfEditing',
        'allow_employee_timesheets_self_service' => 'allowEmployeeTimesheetsSelfService',
        'allow_employee_to_set_unavailability' => 'allowEmployeeToSetUnavailability',
        'allow_employee_to_decline_shifts' => 'allowEmployeeToDeclineShifts',
        'allow_employee_bank_account_self_service' => 'allowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'allowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'allowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'unavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'allowEmployeesToUploadProfilePicture',
        'allow_employee_rostering_self_service' => 'allowEmployeeRosteringSelfService',
        'allow_employee_expenses_self_service' => 'allowEmployeeExpensesSelfService',
        'allow_employee_qualifications_self_service' => 'allowEmployeeQualificationsSelfService',
        'allow_employee_override_tax_codes' => 'allowEmployeeOverrideTaxCodes',
        'allow_employees_to_edit_kiosk_timesheets' => 'allowEmployeesToEditKioskTimesheets',
        'ess_timesheet_setting' => 'essTimesheetSetting',
        'employee_must_accept_shifts' => 'employeeMustAcceptShifts',
        'allow_employee_timesheets_without_start_stop_times' => 'allowEmployeeTimesheetsWithoutStartStopTimes',
        'allow_employee_to_swap_shifts' => 'allowEmployeeToSwapShifts',
        'clock_on_require_photo' => 'clockOnRequirePhoto',
        'clock_on_allow_employee_shift_selection' => 'clockOnAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'clockOnWindowMinutes',
        'clock_off_window_minutes' => 'clockOffWindowMinutes',
        'timesheets_require_location' => 'timesheetsRequireLocation',
        'timesheets_require_work_type' => 'timesheetsRequireWorkType',
        'enable_work_zone_clock_on' => 'enableWorkZoneClockOn',
        'shift_bidding' => 'shiftBidding',
        'allow_to_select_higher_classification' => 'allowToSelectHigherClassification',
        'allow_employee_work_eligibility_self_service' => 'allowEmployeeWorkEligibilitySelfService',
        'paid_breaks_enabled' => 'paidBreaksEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_employee_super_fund_self_service' => 'setAllowEmployeeSuperFundSelfService',
        'clock_on_can_specify_higher_classification' => 'setClockOnCanSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'setAllowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'setAllowEmployeeSelfEditing',
        'allow_employee_timesheets_self_service' => 'setAllowEmployeeTimesheetsSelfService',
        'allow_employee_to_set_unavailability' => 'setAllowEmployeeToSetUnavailability',
        'allow_employee_to_decline_shifts' => 'setAllowEmployeeToDeclineShifts',
        'allow_employee_bank_account_self_service' => 'setAllowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'setAllowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'setAllowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'setUnavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'setAllowEmployeesToUploadProfilePicture',
        'allow_employee_rostering_self_service' => 'setAllowEmployeeRosteringSelfService',
        'allow_employee_expenses_self_service' => 'setAllowEmployeeExpensesSelfService',
        'allow_employee_qualifications_self_service' => 'setAllowEmployeeQualificationsSelfService',
        'allow_employee_override_tax_codes' => 'setAllowEmployeeOverrideTaxCodes',
        'allow_employees_to_edit_kiosk_timesheets' => 'setAllowEmployeesToEditKioskTimesheets',
        'ess_timesheet_setting' => 'setEssTimesheetSetting',
        'employee_must_accept_shifts' => 'setEmployeeMustAcceptShifts',
        'allow_employee_timesheets_without_start_stop_times' => 'setAllowEmployeeTimesheetsWithoutStartStopTimes',
        'allow_employee_to_swap_shifts' => 'setAllowEmployeeToSwapShifts',
        'clock_on_require_photo' => 'setClockOnRequirePhoto',
        'clock_on_allow_employee_shift_selection' => 'setClockOnAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'setClockOnWindowMinutes',
        'clock_off_window_minutes' => 'setClockOffWindowMinutes',
        'timesheets_require_location' => 'setTimesheetsRequireLocation',
        'timesheets_require_work_type' => 'setTimesheetsRequireWorkType',
        'enable_work_zone_clock_on' => 'setEnableWorkZoneClockOn',
        'shift_bidding' => 'setShiftBidding',
        'allow_to_select_higher_classification' => 'setAllowToSelectHigherClassification',
        'allow_employee_work_eligibility_self_service' => 'setAllowEmployeeWorkEligibilitySelfService',
        'paid_breaks_enabled' => 'setPaidBreaksEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_employee_super_fund_self_service' => 'getAllowEmployeeSuperFundSelfService',
        'clock_on_can_specify_higher_classification' => 'getClockOnCanSpecifyHigherClassification',
        'allow_employee_leave_self_service' => 'getAllowEmployeeLeaveSelfService',
        'allow_employee_self_editing' => 'getAllowEmployeeSelfEditing',
        'allow_employee_timesheets_self_service' => 'getAllowEmployeeTimesheetsSelfService',
        'allow_employee_to_set_unavailability' => 'getAllowEmployeeToSetUnavailability',
        'allow_employee_to_decline_shifts' => 'getAllowEmployeeToDeclineShifts',
        'allow_employee_bank_account_self_service' => 'getAllowEmployeeBankAccountSelfService',
        'allow_employee_satisfaction_survey' => 'getAllowEmployeeSatisfactionSurvey',
        'allow_employees_to_view_all_approved_leave' => 'getAllowEmployeesToViewAllApprovedLeave',
        'unavailability_cut_off' => 'getUnavailabilityCutOff',
        'allow_employees_to_upload_profile_picture' => 'getAllowEmployeesToUploadProfilePicture',
        'allow_employee_rostering_self_service' => 'getAllowEmployeeRosteringSelfService',
        'allow_employee_expenses_self_service' => 'getAllowEmployeeExpensesSelfService',
        'allow_employee_qualifications_self_service' => 'getAllowEmployeeQualificationsSelfService',
        'allow_employee_override_tax_codes' => 'getAllowEmployeeOverrideTaxCodes',
        'allow_employees_to_edit_kiosk_timesheets' => 'getAllowEmployeesToEditKioskTimesheets',
        'ess_timesheet_setting' => 'getEssTimesheetSetting',
        'employee_must_accept_shifts' => 'getEmployeeMustAcceptShifts',
        'allow_employee_timesheets_without_start_stop_times' => 'getAllowEmployeeTimesheetsWithoutStartStopTimes',
        'allow_employee_to_swap_shifts' => 'getAllowEmployeeToSwapShifts',
        'clock_on_require_photo' => 'getClockOnRequirePhoto',
        'clock_on_allow_employee_shift_selection' => 'getClockOnAllowEmployeeShiftSelection',
        'clock_on_window_minutes' => 'getClockOnWindowMinutes',
        'clock_off_window_minutes' => 'getClockOffWindowMinutes',
        'timesheets_require_location' => 'getTimesheetsRequireLocation',
        'timesheets_require_work_type' => 'getTimesheetsRequireWorkType',
        'enable_work_zone_clock_on' => 'getEnableWorkZoneClockOn',
        'shift_bidding' => 'getShiftBidding',
        'allow_to_select_higher_classification' => 'getAllowToSelectHigherClassification',
        'allow_employee_work_eligibility_self_service' => 'getAllowEmployeeWorkEligibilitySelfService',
        'paid_breaks_enabled' => 'getPaidBreaksEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ESS_TIMESHEET_SETTING_DISABLED = 'Disabled';
    public const ESS_TIMESHEET_SETTING_READ_ONLY = 'ReadOnly';
    public const ESS_TIMESHEET_SETTING_READ_WRITE = 'ReadWrite';
    public const ESS_TIMESHEET_SETTING_EDIT_KIOSK = 'EditKiosk';
    public const ESS_TIMESHEET_SETTING_EDIT_WORK_ZONE_CLOCK_ON_OFF = 'EditWorkZoneClockOnOff';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEssTimesheetSettingAllowableValues()
    {
        return [
            self::ESS_TIMESHEET_SETTING_DISABLED,
            self::ESS_TIMESHEET_SETTING_READ_ONLY,
            self::ESS_TIMESHEET_SETTING_READ_WRITE,
            self::ESS_TIMESHEET_SETTING_EDIT_KIOSK,
            self::ESS_TIMESHEET_SETTING_EDIT_WORK_ZONE_CLOCK_ON_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_employee_super_fund_self_service', $data ?? [], null);
        $this->setIfExists('clock_on_can_specify_higher_classification', $data ?? [], null);
        $this->setIfExists('allow_employee_leave_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_self_editing', $data ?? [], null);
        $this->setIfExists('allow_employee_timesheets_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_to_set_unavailability', $data ?? [], null);
        $this->setIfExists('allow_employee_to_decline_shifts', $data ?? [], null);
        $this->setIfExists('allow_employee_bank_account_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_satisfaction_survey', $data ?? [], null);
        $this->setIfExists('allow_employees_to_view_all_approved_leave', $data ?? [], null);
        $this->setIfExists('unavailability_cut_off', $data ?? [], null);
        $this->setIfExists('allow_employees_to_upload_profile_picture', $data ?? [], null);
        $this->setIfExists('allow_employee_rostering_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_expenses_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_qualifications_self_service', $data ?? [], null);
        $this->setIfExists('allow_employee_override_tax_codes', $data ?? [], null);
        $this->setIfExists('allow_employees_to_edit_kiosk_timesheets', $data ?? [], null);
        $this->setIfExists('ess_timesheet_setting', $data ?? [], null);
        $this->setIfExists('employee_must_accept_shifts', $data ?? [], null);
        $this->setIfExists('allow_employee_timesheets_without_start_stop_times', $data ?? [], null);
        $this->setIfExists('allow_employee_to_swap_shifts', $data ?? [], null);
        $this->setIfExists('clock_on_require_photo', $data ?? [], null);
        $this->setIfExists('clock_on_allow_employee_shift_selection', $data ?? [], null);
        $this->setIfExists('clock_on_window_minutes', $data ?? [], null);
        $this->setIfExists('clock_off_window_minutes', $data ?? [], null);
        $this->setIfExists('timesheets_require_location', $data ?? [], null);
        $this->setIfExists('timesheets_require_work_type', $data ?? [], null);
        $this->setIfExists('enable_work_zone_clock_on', $data ?? [], null);
        $this->setIfExists('shift_bidding', $data ?? [], null);
        $this->setIfExists('allow_to_select_higher_classification', $data ?? [], null);
        $this->setIfExists('allow_employee_work_eligibility_self_service', $data ?? [], null);
        $this->setIfExists('paid_breaks_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEssTimesheetSettingAllowableValues();
        if (!is_null($this->container['ess_timesheet_setting']) && !in_array($this->container['ess_timesheet_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ess_timesheet_setting', must be one of '%s'",
                $this->container['ess_timesheet_setting'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_employee_super_fund_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeSuperFundSelfService()
    {
        return $this->container['allow_employee_super_fund_self_service'];
    }

    /**
     * Sets allow_employee_super_fund_self_service
     *
     * @param bool|null $allow_employee_super_fund_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeSuperFundSelfService($allow_employee_super_fund_self_service)
    {
        if (is_null($allow_employee_super_fund_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_super_fund_self_service cannot be null');
        }
        $this->container['allow_employee_super_fund_self_service'] = $allow_employee_super_fund_self_service;

        return $this;
    }

    /**
     * Gets clock_on_can_specify_higher_classification
     *
     * @return bool|null
     */
    public function getClockOnCanSpecifyHigherClassification()
    {
        return $this->container['clock_on_can_specify_higher_classification'];
    }

    /**
     * Sets clock_on_can_specify_higher_classification
     *
     * @param bool|null $clock_on_can_specify_higher_classification 
     *
     * @return self
     */
    public function setClockOnCanSpecifyHigherClassification($clock_on_can_specify_higher_classification)
    {
        if (is_null($clock_on_can_specify_higher_classification)) {
            throw new \InvalidArgumentException('non-nullable clock_on_can_specify_higher_classification cannot be null');
        }
        $this->container['clock_on_can_specify_higher_classification'] = $clock_on_can_specify_higher_classification;

        return $this;
    }

    /**
     * Gets allow_employee_leave_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeLeaveSelfService()
    {
        return $this->container['allow_employee_leave_self_service'];
    }

    /**
     * Sets allow_employee_leave_self_service
     *
     * @param bool|null $allow_employee_leave_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeLeaveSelfService($allow_employee_leave_self_service)
    {
        if (is_null($allow_employee_leave_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_leave_self_service cannot be null');
        }
        $this->container['allow_employee_leave_self_service'] = $allow_employee_leave_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_self_editing
     *
     * @return bool|null
     */
    public function getAllowEmployeeSelfEditing()
    {
        return $this->container['allow_employee_self_editing'];
    }

    /**
     * Sets allow_employee_self_editing
     *
     * @param bool|null $allow_employee_self_editing 
     *
     * @return self
     */
    public function setAllowEmployeeSelfEditing($allow_employee_self_editing)
    {
        if (is_null($allow_employee_self_editing)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_self_editing cannot be null');
        }
        $this->container['allow_employee_self_editing'] = $allow_employee_self_editing;

        return $this;
    }

    /**
     * Gets allow_employee_timesheets_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeTimesheetsSelfService()
    {
        return $this->container['allow_employee_timesheets_self_service'];
    }

    /**
     * Sets allow_employee_timesheets_self_service
     *
     * @param bool|null $allow_employee_timesheets_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeTimesheetsSelfService($allow_employee_timesheets_self_service)
    {
        if (is_null($allow_employee_timesheets_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_timesheets_self_service cannot be null');
        }
        $this->container['allow_employee_timesheets_self_service'] = $allow_employee_timesheets_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_to_set_unavailability
     *
     * @return bool|null
     */
    public function getAllowEmployeeToSetUnavailability()
    {
        return $this->container['allow_employee_to_set_unavailability'];
    }

    /**
     * Sets allow_employee_to_set_unavailability
     *
     * @param bool|null $allow_employee_to_set_unavailability 
     *
     * @return self
     */
    public function setAllowEmployeeToSetUnavailability($allow_employee_to_set_unavailability)
    {
        if (is_null($allow_employee_to_set_unavailability)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_to_set_unavailability cannot be null');
        }
        $this->container['allow_employee_to_set_unavailability'] = $allow_employee_to_set_unavailability;

        return $this;
    }

    /**
     * Gets allow_employee_to_decline_shifts
     *
     * @return bool|null
     */
    public function getAllowEmployeeToDeclineShifts()
    {
        return $this->container['allow_employee_to_decline_shifts'];
    }

    /**
     * Sets allow_employee_to_decline_shifts
     *
     * @param bool|null $allow_employee_to_decline_shifts 
     *
     * @return self
     */
    public function setAllowEmployeeToDeclineShifts($allow_employee_to_decline_shifts)
    {
        if (is_null($allow_employee_to_decline_shifts)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_to_decline_shifts cannot be null');
        }
        $this->container['allow_employee_to_decline_shifts'] = $allow_employee_to_decline_shifts;

        return $this;
    }

    /**
     * Gets allow_employee_bank_account_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeBankAccountSelfService()
    {
        return $this->container['allow_employee_bank_account_self_service'];
    }

    /**
     * Sets allow_employee_bank_account_self_service
     *
     * @param bool|null $allow_employee_bank_account_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeBankAccountSelfService($allow_employee_bank_account_self_service)
    {
        if (is_null($allow_employee_bank_account_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_bank_account_self_service cannot be null');
        }
        $this->container['allow_employee_bank_account_self_service'] = $allow_employee_bank_account_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_satisfaction_survey
     *
     * @return bool|null
     */
    public function getAllowEmployeeSatisfactionSurvey()
    {
        return $this->container['allow_employee_satisfaction_survey'];
    }

    /**
     * Sets allow_employee_satisfaction_survey
     *
     * @param bool|null $allow_employee_satisfaction_survey 
     *
     * @return self
     */
    public function setAllowEmployeeSatisfactionSurvey($allow_employee_satisfaction_survey)
    {
        if (is_null($allow_employee_satisfaction_survey)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_satisfaction_survey cannot be null');
        }
        $this->container['allow_employee_satisfaction_survey'] = $allow_employee_satisfaction_survey;

        return $this;
    }

    /**
     * Gets allow_employees_to_view_all_approved_leave
     *
     * @return bool|null
     */
    public function getAllowEmployeesToViewAllApprovedLeave()
    {
        return $this->container['allow_employees_to_view_all_approved_leave'];
    }

    /**
     * Sets allow_employees_to_view_all_approved_leave
     *
     * @param bool|null $allow_employees_to_view_all_approved_leave 
     *
     * @return self
     */
    public function setAllowEmployeesToViewAllApprovedLeave($allow_employees_to_view_all_approved_leave)
    {
        if (is_null($allow_employees_to_view_all_approved_leave)) {
            throw new \InvalidArgumentException('non-nullable allow_employees_to_view_all_approved_leave cannot be null');
        }
        $this->container['allow_employees_to_view_all_approved_leave'] = $allow_employees_to_view_all_approved_leave;

        return $this;
    }

    /**
     * Gets unavailability_cut_off
     *
     * @return int|null
     */
    public function getUnavailabilityCutOff()
    {
        return $this->container['unavailability_cut_off'];
    }

    /**
     * Sets unavailability_cut_off
     *
     * @param int|null $unavailability_cut_off 
     *
     * @return self
     */
    public function setUnavailabilityCutOff($unavailability_cut_off)
    {
        if (is_null($unavailability_cut_off)) {
            throw new \InvalidArgumentException('non-nullable unavailability_cut_off cannot be null');
        }
        $this->container['unavailability_cut_off'] = $unavailability_cut_off;

        return $this;
    }

    /**
     * Gets allow_employees_to_upload_profile_picture
     *
     * @return bool|null
     */
    public function getAllowEmployeesToUploadProfilePicture()
    {
        return $this->container['allow_employees_to_upload_profile_picture'];
    }

    /**
     * Sets allow_employees_to_upload_profile_picture
     *
     * @param bool|null $allow_employees_to_upload_profile_picture 
     *
     * @return self
     */
    public function setAllowEmployeesToUploadProfilePicture($allow_employees_to_upload_profile_picture)
    {
        if (is_null($allow_employees_to_upload_profile_picture)) {
            throw new \InvalidArgumentException('non-nullable allow_employees_to_upload_profile_picture cannot be null');
        }
        $this->container['allow_employees_to_upload_profile_picture'] = $allow_employees_to_upload_profile_picture;

        return $this;
    }

    /**
     * Gets allow_employee_rostering_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeRosteringSelfService()
    {
        return $this->container['allow_employee_rostering_self_service'];
    }

    /**
     * Sets allow_employee_rostering_self_service
     *
     * @param bool|null $allow_employee_rostering_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeRosteringSelfService($allow_employee_rostering_self_service)
    {
        if (is_null($allow_employee_rostering_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_rostering_self_service cannot be null');
        }
        $this->container['allow_employee_rostering_self_service'] = $allow_employee_rostering_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_expenses_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeExpensesSelfService()
    {
        return $this->container['allow_employee_expenses_self_service'];
    }

    /**
     * Sets allow_employee_expenses_self_service
     *
     * @param bool|null $allow_employee_expenses_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeExpensesSelfService($allow_employee_expenses_self_service)
    {
        if (is_null($allow_employee_expenses_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_expenses_self_service cannot be null');
        }
        $this->container['allow_employee_expenses_self_service'] = $allow_employee_expenses_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_qualifications_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeQualificationsSelfService()
    {
        return $this->container['allow_employee_qualifications_self_service'];
    }

    /**
     * Sets allow_employee_qualifications_self_service
     *
     * @param bool|null $allow_employee_qualifications_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeQualificationsSelfService($allow_employee_qualifications_self_service)
    {
        if (is_null($allow_employee_qualifications_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_qualifications_self_service cannot be null');
        }
        $this->container['allow_employee_qualifications_self_service'] = $allow_employee_qualifications_self_service;

        return $this;
    }

    /**
     * Gets allow_employee_override_tax_codes
     *
     * @return bool|null
     */
    public function getAllowEmployeeOverrideTaxCodes()
    {
        return $this->container['allow_employee_override_tax_codes'];
    }

    /**
     * Sets allow_employee_override_tax_codes
     *
     * @param bool|null $allow_employee_override_tax_codes 
     *
     * @return self
     */
    public function setAllowEmployeeOverrideTaxCodes($allow_employee_override_tax_codes)
    {
        if (is_null($allow_employee_override_tax_codes)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_override_tax_codes cannot be null');
        }
        $this->container['allow_employee_override_tax_codes'] = $allow_employee_override_tax_codes;

        return $this;
    }

    /**
     * Gets allow_employees_to_edit_kiosk_timesheets
     *
     * @return bool|null
     */
    public function getAllowEmployeesToEditKioskTimesheets()
    {
        return $this->container['allow_employees_to_edit_kiosk_timesheets'];
    }

    /**
     * Sets allow_employees_to_edit_kiosk_timesheets
     *
     * @param bool|null $allow_employees_to_edit_kiosk_timesheets 
     *
     * @return self
     */
    public function setAllowEmployeesToEditKioskTimesheets($allow_employees_to_edit_kiosk_timesheets)
    {
        if (is_null($allow_employees_to_edit_kiosk_timesheets)) {
            throw new \InvalidArgumentException('non-nullable allow_employees_to_edit_kiosk_timesheets cannot be null');
        }
        $this->container['allow_employees_to_edit_kiosk_timesheets'] = $allow_employees_to_edit_kiosk_timesheets;

        return $this;
    }

    /**
     * Gets ess_timesheet_setting
     *
     * @return string|null
     */
    public function getEssTimesheetSetting()
    {
        return $this->container['ess_timesheet_setting'];
    }

    /**
     * Sets ess_timesheet_setting
     *
     * @param string|null $ess_timesheet_setting 
     *
     * @return self
     */
    public function setEssTimesheetSetting($ess_timesheet_setting)
    {
        if (is_null($ess_timesheet_setting)) {
            throw new \InvalidArgumentException('non-nullable ess_timesheet_setting cannot be null');
        }
        $allowedValues = $this->getEssTimesheetSettingAllowableValues();
        if (!in_array($ess_timesheet_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ess_timesheet_setting', must be one of '%s'",
                    $ess_timesheet_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ess_timesheet_setting'] = $ess_timesheet_setting;

        return $this;
    }

    /**
     * Gets employee_must_accept_shifts
     *
     * @return bool|null
     */
    public function getEmployeeMustAcceptShifts()
    {
        return $this->container['employee_must_accept_shifts'];
    }

    /**
     * Sets employee_must_accept_shifts
     *
     * @param bool|null $employee_must_accept_shifts 
     *
     * @return self
     */
    public function setEmployeeMustAcceptShifts($employee_must_accept_shifts)
    {
        if (is_null($employee_must_accept_shifts)) {
            throw new \InvalidArgumentException('non-nullable employee_must_accept_shifts cannot be null');
        }
        $this->container['employee_must_accept_shifts'] = $employee_must_accept_shifts;

        return $this;
    }

    /**
     * Gets allow_employee_timesheets_without_start_stop_times
     *
     * @return bool|null
     */
    public function getAllowEmployeeTimesheetsWithoutStartStopTimes()
    {
        return $this->container['allow_employee_timesheets_without_start_stop_times'];
    }

    /**
     * Sets allow_employee_timesheets_without_start_stop_times
     *
     * @param bool|null $allow_employee_timesheets_without_start_stop_times 
     *
     * @return self
     */
    public function setAllowEmployeeTimesheetsWithoutStartStopTimes($allow_employee_timesheets_without_start_stop_times)
    {
        if (is_null($allow_employee_timesheets_without_start_stop_times)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_timesheets_without_start_stop_times cannot be null');
        }
        $this->container['allow_employee_timesheets_without_start_stop_times'] = $allow_employee_timesheets_without_start_stop_times;

        return $this;
    }

    /**
     * Gets allow_employee_to_swap_shifts
     *
     * @return bool|null
     */
    public function getAllowEmployeeToSwapShifts()
    {
        return $this->container['allow_employee_to_swap_shifts'];
    }

    /**
     * Sets allow_employee_to_swap_shifts
     *
     * @param bool|null $allow_employee_to_swap_shifts 
     *
     * @return self
     */
    public function setAllowEmployeeToSwapShifts($allow_employee_to_swap_shifts)
    {
        if (is_null($allow_employee_to_swap_shifts)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_to_swap_shifts cannot be null');
        }
        $this->container['allow_employee_to_swap_shifts'] = $allow_employee_to_swap_shifts;

        return $this;
    }

    /**
     * Gets clock_on_require_photo
     *
     * @return bool|null
     */
    public function getClockOnRequirePhoto()
    {
        return $this->container['clock_on_require_photo'];
    }

    /**
     * Sets clock_on_require_photo
     *
     * @param bool|null $clock_on_require_photo 
     *
     * @return self
     */
    public function setClockOnRequirePhoto($clock_on_require_photo)
    {
        if (is_null($clock_on_require_photo)) {
            throw new \InvalidArgumentException('non-nullable clock_on_require_photo cannot be null');
        }
        $this->container['clock_on_require_photo'] = $clock_on_require_photo;

        return $this;
    }

    /**
     * Gets clock_on_allow_employee_shift_selection
     *
     * @return bool|null
     */
    public function getClockOnAllowEmployeeShiftSelection()
    {
        return $this->container['clock_on_allow_employee_shift_selection'];
    }

    /**
     * Sets clock_on_allow_employee_shift_selection
     *
     * @param bool|null $clock_on_allow_employee_shift_selection 
     *
     * @return self
     */
    public function setClockOnAllowEmployeeShiftSelection($clock_on_allow_employee_shift_selection)
    {
        if (is_null($clock_on_allow_employee_shift_selection)) {
            throw new \InvalidArgumentException('non-nullable clock_on_allow_employee_shift_selection cannot be null');
        }
        $this->container['clock_on_allow_employee_shift_selection'] = $clock_on_allow_employee_shift_selection;

        return $this;
    }

    /**
     * Gets clock_on_window_minutes
     *
     * @return int|null
     */
    public function getClockOnWindowMinutes()
    {
        return $this->container['clock_on_window_minutes'];
    }

    /**
     * Sets clock_on_window_minutes
     *
     * @param int|null $clock_on_window_minutes 
     *
     * @return self
     */
    public function setClockOnWindowMinutes($clock_on_window_minutes)
    {
        if (is_null($clock_on_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_on_window_minutes cannot be null');
        }
        $this->container['clock_on_window_minutes'] = $clock_on_window_minutes;

        return $this;
    }

    /**
     * Gets clock_off_window_minutes
     *
     * @return int|null
     */
    public function getClockOffWindowMinutes()
    {
        return $this->container['clock_off_window_minutes'];
    }

    /**
     * Sets clock_off_window_minutes
     *
     * @param int|null $clock_off_window_minutes 
     *
     * @return self
     */
    public function setClockOffWindowMinutes($clock_off_window_minutes)
    {
        if (is_null($clock_off_window_minutes)) {
            throw new \InvalidArgumentException('non-nullable clock_off_window_minutes cannot be null');
        }
        $this->container['clock_off_window_minutes'] = $clock_off_window_minutes;

        return $this;
    }

    /**
     * Gets timesheets_require_location
     *
     * @return bool|null
     */
    public function getTimesheetsRequireLocation()
    {
        return $this->container['timesheets_require_location'];
    }

    /**
     * Sets timesheets_require_location
     *
     * @param bool|null $timesheets_require_location 
     *
     * @return self
     */
    public function setTimesheetsRequireLocation($timesheets_require_location)
    {
        if (is_null($timesheets_require_location)) {
            throw new \InvalidArgumentException('non-nullable timesheets_require_location cannot be null');
        }
        $this->container['timesheets_require_location'] = $timesheets_require_location;

        return $this;
    }

    /**
     * Gets timesheets_require_work_type
     *
     * @return bool|null
     */
    public function getTimesheetsRequireWorkType()
    {
        return $this->container['timesheets_require_work_type'];
    }

    /**
     * Sets timesheets_require_work_type
     *
     * @param bool|null $timesheets_require_work_type 
     *
     * @return self
     */
    public function setTimesheetsRequireWorkType($timesheets_require_work_type)
    {
        if (is_null($timesheets_require_work_type)) {
            throw new \InvalidArgumentException('non-nullable timesheets_require_work_type cannot be null');
        }
        $this->container['timesheets_require_work_type'] = $timesheets_require_work_type;

        return $this;
    }

    /**
     * Gets enable_work_zone_clock_on
     *
     * @return bool|null
     */
    public function getEnableWorkZoneClockOn()
    {
        return $this->container['enable_work_zone_clock_on'];
    }

    /**
     * Sets enable_work_zone_clock_on
     *
     * @param bool|null $enable_work_zone_clock_on 
     *
     * @return self
     */
    public function setEnableWorkZoneClockOn($enable_work_zone_clock_on)
    {
        if (is_null($enable_work_zone_clock_on)) {
            throw new \InvalidArgumentException('non-nullable enable_work_zone_clock_on cannot be null');
        }
        $this->container['enable_work_zone_clock_on'] = $enable_work_zone_clock_on;

        return $this;
    }

    /**
     * Gets shift_bidding
     *
     * @return bool|null
     */
    public function getShiftBidding()
    {
        return $this->container['shift_bidding'];
    }

    /**
     * Sets shift_bidding
     *
     * @param bool|null $shift_bidding 
     *
     * @return self
     */
    public function setShiftBidding($shift_bidding)
    {
        if (is_null($shift_bidding)) {
            throw new \InvalidArgumentException('non-nullable shift_bidding cannot be null');
        }
        $this->container['shift_bidding'] = $shift_bidding;

        return $this;
    }

    /**
     * Gets allow_to_select_higher_classification
     *
     * @return bool|null
     */
    public function getAllowToSelectHigherClassification()
    {
        return $this->container['allow_to_select_higher_classification'];
    }

    /**
     * Sets allow_to_select_higher_classification
     *
     * @param bool|null $allow_to_select_higher_classification 
     *
     * @return self
     */
    public function setAllowToSelectHigherClassification($allow_to_select_higher_classification)
    {
        if (is_null($allow_to_select_higher_classification)) {
            throw new \InvalidArgumentException('non-nullable allow_to_select_higher_classification cannot be null');
        }
        $this->container['allow_to_select_higher_classification'] = $allow_to_select_higher_classification;

        return $this;
    }

    /**
     * Gets allow_employee_work_eligibility_self_service
     *
     * @return bool|null
     */
    public function getAllowEmployeeWorkEligibilitySelfService()
    {
        return $this->container['allow_employee_work_eligibility_self_service'];
    }

    /**
     * Sets allow_employee_work_eligibility_self_service
     *
     * @param bool|null $allow_employee_work_eligibility_self_service 
     *
     * @return self
     */
    public function setAllowEmployeeWorkEligibilitySelfService($allow_employee_work_eligibility_self_service)
    {
        if (is_null($allow_employee_work_eligibility_self_service)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_work_eligibility_self_service cannot be null');
        }
        $this->container['allow_employee_work_eligibility_self_service'] = $allow_employee_work_eligibility_self_service;

        return $this;
    }

    /**
     * Gets paid_breaks_enabled
     *
     * @return bool|null
     */
    public function getPaidBreaksEnabled()
    {
        return $this->container['paid_breaks_enabled'];
    }

    /**
     * Sets paid_breaks_enabled
     *
     * @param bool|null $paid_breaks_enabled 
     *
     * @return self
     */
    public function setPaidBreaksEnabled($paid_breaks_enabled)
    {
        if (is_null($paid_breaks_enabled)) {
            throw new \InvalidArgumentException('non-nullable paid_breaks_enabled cannot be null');
        }
        $this->container['paid_breaks_enabled'] = $paid_breaks_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


