<?php
/**
 * EmployeeExpenseModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeExpenseModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeExpenseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeExpenseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee_expense_category_id' => 'string',
        'employee_expense_category_name' => 'string',
        'notes' => 'string',
        'amount' => 'double',
        'tax_code' => 'string',
        'tax_rate' => 'double',
        'tax_code_display_name' => 'string',
        'reporting_dimension_value_ids' => 'int[]',
        'reporting_dimension_value_names' => 'map[string,string[]]',
        'id' => 'int',
        'external_id' => 'string',
        'location_id' => 'string',
        'location_name' => 'string',
        'employee_id' => 'string',
        'employee_name' => 'string',
        'employee_external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee_expense_category_id' => null,
        'employee_expense_category_name' => null,
        'notes' => null,
        'amount' => 'double',
        'tax_code' => null,
        'tax_rate' => 'double',
        'tax_code_display_name' => null,
        'reporting_dimension_value_ids' => 'int32',
        'reporting_dimension_value_names' => null,
        'id' => 'int32',
        'external_id' => null,
        'location_id' => null,
        'location_name' => null,
        'employee_id' => null,
        'employee_name' => null,
        'employee_external_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_expense_category_id' => 'employeeExpenseCategoryId',
        'employee_expense_category_name' => 'employeeExpenseCategoryName',
        'notes' => 'notes',
        'amount' => 'amount',
        'tax_code' => 'taxCode',
        'tax_rate' => 'taxRate',
        'tax_code_display_name' => 'taxCodeDisplayName',
        'reporting_dimension_value_ids' => 'reportingDimensionValueIds',
        'reporting_dimension_value_names' => 'reportingDimensionValueNames',
        'id' => 'id',
        'external_id' => 'externalId',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'employee_external_id' => 'employeeExternalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_expense_category_id' => 'setEmployeeExpenseCategoryId',
        'employee_expense_category_name' => 'setEmployeeExpenseCategoryName',
        'notes' => 'setNotes',
        'amount' => 'setAmount',
        'tax_code' => 'setTaxCode',
        'tax_rate' => 'setTaxRate',
        'tax_code_display_name' => 'setTaxCodeDisplayName',
        'reporting_dimension_value_ids' => 'setReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'setReportingDimensionValueNames',
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'employee_external_id' => 'setEmployeeExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_expense_category_id' => 'getEmployeeExpenseCategoryId',
        'employee_expense_category_name' => 'getEmployeeExpenseCategoryName',
        'notes' => 'getNotes',
        'amount' => 'getAmount',
        'tax_code' => 'getTaxCode',
        'tax_rate' => 'getTaxRate',
        'tax_code_display_name' => 'getTaxCodeDisplayName',
        'reporting_dimension_value_ids' => 'getReportingDimensionValueIds',
        'reporting_dimension_value_names' => 'getReportingDimensionValueNames',
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'employee_external_id' => 'getEmployeeExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee_expense_category_id'] = isset($data['employee_expense_category_id']) ? $data['employee_expense_category_id'] : null;
        $this->container['employee_expense_category_name'] = isset($data['employee_expense_category_name']) ? $data['employee_expense_category_name'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['tax_code_display_name'] = isset($data['tax_code_display_name']) ? $data['tax_code_display_name'] : null;
        $this->container['reporting_dimension_value_ids'] = isset($data['reporting_dimension_value_ids']) ? $data['reporting_dimension_value_ids'] : null;
        $this->container['reporting_dimension_value_names'] = isset($data['reporting_dimension_value_names']) ? $data['reporting_dimension_value_names'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['employee_external_id'] = isset($data['employee_external_id']) ? $data['employee_external_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_expense_category_id
     *
     * @return string
     */
    public function getEmployeeExpenseCategoryId()
    {
        return $this->container['employee_expense_category_id'];
    }

    /**
     * Sets employee_expense_category_id
     *
     * @param string $employee_expense_category_id 
     *
     * @return $this
     */
    public function setEmployeeExpenseCategoryId($employee_expense_category_id)
    {
        $this->container['employee_expense_category_id'] = $employee_expense_category_id;

        return $this;
    }

    /**
     * Gets employee_expense_category_name
     *
     * @return string
     */
    public function getEmployeeExpenseCategoryName()
    {
        return $this->container['employee_expense_category_name'];
    }

    /**
     * Sets employee_expense_category_name
     *
     * @param string $employee_expense_category_name 
     *
     * @return $this
     */
    public function setEmployeeExpenseCategoryName($employee_expense_category_name)
    {
        $this->container['employee_expense_category_name'] = $employee_expense_category_name;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes 
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount 
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code 
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return double
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param double $tax_rate 
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_code_display_name
     *
     * @return string
     */
    public function getTaxCodeDisplayName()
    {
        return $this->container['tax_code_display_name'];
    }

    /**
     * Sets tax_code_display_name
     *
     * @param string $tax_code_display_name 
     *
     * @return $this
     */
    public function setTaxCodeDisplayName($tax_code_display_name)
    {
        $this->container['tax_code_display_name'] = $tax_code_display_name;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_ids
     *
     * @return int[]
     */
    public function getReportingDimensionValueIds()
    {
        return $this->container['reporting_dimension_value_ids'];
    }

    /**
     * Sets reporting_dimension_value_ids
     *
     * @param int[] $reporting_dimension_value_ids Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return $this
     */
    public function setReportingDimensionValueIds($reporting_dimension_value_ids)
    {
        $this->container['reporting_dimension_value_ids'] = $reporting_dimension_value_ids;

        return $this;
    }

    /**
     * Gets reporting_dimension_value_names
     *
     * @return map[string,string[]]
     */
    public function getReportingDimensionValueNames()
    {
        return $this->container['reporting_dimension_value_names'];
    }

    /**
     * Sets reporting_dimension_value_names
     *
     * @param map[string,string[]] $reporting_dimension_value_names Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { \"Department\": [\"Accounting\"], \"Job Code\": [\"JC1\"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)
     *
     * @return $this
     */
    public function setReportingDimensionValueNames($reporting_dimension_value_names)
    {
        $this->container['reporting_dimension_value_names'] = $reporting_dimension_value_names;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id 
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id 
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name 
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name 
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string $employee_external_id 
     *
     * @return $this
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


