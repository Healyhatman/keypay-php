<?php
/**
 * AuPayRunTotalDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuPayRunTotalDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuPayRunTotalDetailModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuPayRunTotalDetailModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payg_withholding_amount' => 'double',
        'payg_withholding_percent' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'super_contribution_minus_super_adjustments' => 'double',
        'all_super_contributions_total' => 'double',
        'gross_plus_super' => 'double',
        'super_adjustments_amount' => 'double',
        'salary_sacrifice_super_amount' => 'double',
        'member_voluntary_super_amount' => 'double',
        'non_super_deduction_total' => 'double',
        'super_payments_total' => 'double',
        'is_employee_under18' => 'bool',
        'employer_contribution_adjustments_amount' => 'double',
        'payg_adjustments_amount' => 'double',
        'super_contributions_cap_applied' => 'bool',
        'payg_payment_total' => 'double',
        'id' => 'int',
        'employee_name' => 'string',
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deduction_amount' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'pay_condition_rule_set_name' => 'string',
        'employee_id' => 'int',
        'is_termination' => 'bool',
        'notation' => 'string',
        'employee_start_date' => '\DateTime',
        'employee_external_reference_id' => 'string',
        'is_excluded' => 'bool',
        'employee_external_id' => 'string',
        'bank_payments_total' => 'double',
        'termination_date' => '\DateTime',
        'earliest_termination_date' => '\DateTime',
        'previous_termination_date' => '\DateTime',
        'employee_expenses_total' => 'double',
        'employer_liabilities_total' => 'double',
        'is_complete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payg_withholding_amount' => 'double',
        'payg_withholding_percent' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'super_contribution_minus_super_adjustments' => 'double',
        'all_super_contributions_total' => 'double',
        'gross_plus_super' => 'double',
        'super_adjustments_amount' => 'double',
        'salary_sacrifice_super_amount' => 'double',
        'member_voluntary_super_amount' => 'double',
        'non_super_deduction_total' => 'double',
        'super_payments_total' => 'double',
        'is_employee_under18' => null,
        'employer_contribution_adjustments_amount' => 'double',
        'payg_adjustments_amount' => 'double',
        'super_contributions_cap_applied' => null,
        'payg_payment_total' => 'double',
        'id' => 'int32',
        'employee_name' => null,
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deduction_amount' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'pay_condition_rule_set_name' => null,
        'employee_id' => 'int32',
        'is_termination' => null,
        'notation' => null,
        'employee_start_date' => 'date-time',
        'employee_external_reference_id' => null,
        'is_excluded' => null,
        'employee_external_id' => null,
        'bank_payments_total' => 'double',
        'termination_date' => 'date-time',
        'earliest_termination_date' => 'date-time',
        'previous_termination_date' => 'date-time',
        'employee_expenses_total' => 'double',
        'employer_liabilities_total' => 'double',
        'is_complete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'payg_withholding_percent' => 'paygWithholdingPercent',
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'employer_contribution' => 'employerContribution',
        'super_contribution_minus_super_adjustments' => 'superContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'allSuperContributionsTotal',
        'gross_plus_super' => 'grossPlusSuper',
        'super_adjustments_amount' => 'superAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'salarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'memberVoluntarySuperAmount',
        'non_super_deduction_total' => 'nonSuperDeductionTotal',
        'super_payments_total' => 'superPaymentsTotal',
        'is_employee_under18' => 'isEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'employerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'paygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'superContributionsCapApplied',
        'payg_payment_total' => 'paygPaymentTotal',
        'id' => 'id',
        'employee_name' => 'employeeName',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'net_earnings' => 'netEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'post_tax_deduction_amount' => 'postTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'preTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'payConditionRuleSetName',
        'employee_id' => 'employeeId',
        'is_termination' => 'isTermination',
        'notation' => 'notation',
        'employee_start_date' => 'employeeStartDate',
        'employee_external_reference_id' => 'employeeExternalReferenceId',
        'is_excluded' => 'isExcluded',
        'employee_external_id' => 'employeeExternalId',
        'bank_payments_total' => 'bankPaymentsTotal',
        'termination_date' => 'terminationDate',
        'earliest_termination_date' => 'earliestTerminationDate',
        'previous_termination_date' => 'previousTerminationDate',
        'employee_expenses_total' => 'employeeExpensesTotal',
        'employer_liabilities_total' => 'employerLiabilitiesTotal',
        'is_complete' => 'isComplete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'payg_withholding_percent' => 'setPaygWithholdingPercent',
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'employer_contribution' => 'setEmployerContribution',
        'super_contribution_minus_super_adjustments' => 'setSuperContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'setAllSuperContributionsTotal',
        'gross_plus_super' => 'setGrossPlusSuper',
        'super_adjustments_amount' => 'setSuperAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'setSalarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'setMemberVoluntarySuperAmount',
        'non_super_deduction_total' => 'setNonSuperDeductionTotal',
        'super_payments_total' => 'setSuperPaymentsTotal',
        'is_employee_under18' => 'setIsEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'setEmployerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'setPaygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'setSuperContributionsCapApplied',
        'payg_payment_total' => 'setPaygPaymentTotal',
        'id' => 'setId',
        'employee_name' => 'setEmployeeName',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'net_earnings' => 'setNetEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'post_tax_deduction_amount' => 'setPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'setPreTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'setPayConditionRuleSetName',
        'employee_id' => 'setEmployeeId',
        'is_termination' => 'setIsTermination',
        'notation' => 'setNotation',
        'employee_start_date' => 'setEmployeeStartDate',
        'employee_external_reference_id' => 'setEmployeeExternalReferenceId',
        'is_excluded' => 'setIsExcluded',
        'employee_external_id' => 'setEmployeeExternalId',
        'bank_payments_total' => 'setBankPaymentsTotal',
        'termination_date' => 'setTerminationDate',
        'earliest_termination_date' => 'setEarliestTerminationDate',
        'previous_termination_date' => 'setPreviousTerminationDate',
        'employee_expenses_total' => 'setEmployeeExpensesTotal',
        'employer_liabilities_total' => 'setEmployerLiabilitiesTotal',
        'is_complete' => 'setIsComplete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'payg_withholding_percent' => 'getPaygWithholdingPercent',
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'employer_contribution' => 'getEmployerContribution',
        'super_contribution_minus_super_adjustments' => 'getSuperContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'getAllSuperContributionsTotal',
        'gross_plus_super' => 'getGrossPlusSuper',
        'super_adjustments_amount' => 'getSuperAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'getSalarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'getMemberVoluntarySuperAmount',
        'non_super_deduction_total' => 'getNonSuperDeductionTotal',
        'super_payments_total' => 'getSuperPaymentsTotal',
        'is_employee_under18' => 'getIsEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'getEmployerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'getPaygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'getSuperContributionsCapApplied',
        'payg_payment_total' => 'getPaygPaymentTotal',
        'id' => 'getId',
        'employee_name' => 'getEmployeeName',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'net_earnings' => 'getNetEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'post_tax_deduction_amount' => 'getPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'getPreTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'getPayConditionRuleSetName',
        'employee_id' => 'getEmployeeId',
        'is_termination' => 'getIsTermination',
        'notation' => 'getNotation',
        'employee_start_date' => 'getEmployeeStartDate',
        'employee_external_reference_id' => 'getEmployeeExternalReferenceId',
        'is_excluded' => 'getIsExcluded',
        'employee_external_id' => 'getEmployeeExternalId',
        'bank_payments_total' => 'getBankPaymentsTotal',
        'termination_date' => 'getTerminationDate',
        'earliest_termination_date' => 'getEarliestTerminationDate',
        'previous_termination_date' => 'getPreviousTerminationDate',
        'employee_expenses_total' => 'getEmployeeExpensesTotal',
        'employer_liabilities_total' => 'getEmployerLiabilitiesTotal',
        'is_complete' => 'getIsComplete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payg_withholding_amount'] = isset($data['payg_withholding_amount']) ? $data['payg_withholding_amount'] : null;
        $this->container['payg_withholding_percent'] = isset($data['payg_withholding_percent']) ? $data['payg_withholding_percent'] : null;
        $this->container['sfss_amount'] = isset($data['sfss_amount']) ? $data['sfss_amount'] : null;
        $this->container['help_amount'] = isset($data['help_amount']) ? $data['help_amount'] : null;
        $this->container['super_contribution'] = isset($data['super_contribution']) ? $data['super_contribution'] : null;
        $this->container['employer_contribution'] = isset($data['employer_contribution']) ? $data['employer_contribution'] : null;
        $this->container['super_contribution_minus_super_adjustments'] = isset($data['super_contribution_minus_super_adjustments']) ? $data['super_contribution_minus_super_adjustments'] : null;
        $this->container['all_super_contributions_total'] = isset($data['all_super_contributions_total']) ? $data['all_super_contributions_total'] : null;
        $this->container['gross_plus_super'] = isset($data['gross_plus_super']) ? $data['gross_plus_super'] : null;
        $this->container['super_adjustments_amount'] = isset($data['super_adjustments_amount']) ? $data['super_adjustments_amount'] : null;
        $this->container['salary_sacrifice_super_amount'] = isset($data['salary_sacrifice_super_amount']) ? $data['salary_sacrifice_super_amount'] : null;
        $this->container['member_voluntary_super_amount'] = isset($data['member_voluntary_super_amount']) ? $data['member_voluntary_super_amount'] : null;
        $this->container['non_super_deduction_total'] = isset($data['non_super_deduction_total']) ? $data['non_super_deduction_total'] : null;
        $this->container['super_payments_total'] = isset($data['super_payments_total']) ? $data['super_payments_total'] : null;
        $this->container['is_employee_under18'] = isset($data['is_employee_under18']) ? $data['is_employee_under18'] : null;
        $this->container['employer_contribution_adjustments_amount'] = isset($data['employer_contribution_adjustments_amount']) ? $data['employer_contribution_adjustments_amount'] : null;
        $this->container['payg_adjustments_amount'] = isset($data['payg_adjustments_amount']) ? $data['payg_adjustments_amount'] : null;
        $this->container['super_contributions_cap_applied'] = isset($data['super_contributions_cap_applied']) ? $data['super_contributions_cap_applied'] : null;
        $this->container['payg_payment_total'] = isset($data['payg_payment_total']) ? $data['payg_payment_total'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['total_hours'] = isset($data['total_hours']) ? $data['total_hours'] : null;
        $this->container['gross_earnings'] = isset($data['gross_earnings']) ? $data['gross_earnings'] : null;
        $this->container['net_earnings'] = isset($data['net_earnings']) ? $data['net_earnings'] : null;
        $this->container['taxable_earnings'] = isset($data['taxable_earnings']) ? $data['taxable_earnings'] : null;
        $this->container['post_tax_deduction_amount'] = isset($data['post_tax_deduction_amount']) ? $data['post_tax_deduction_amount'] : null;
        $this->container['pre_tax_deduction_amount'] = isset($data['pre_tax_deduction_amount']) ? $data['pre_tax_deduction_amount'] : null;
        $this->container['pay_condition_rule_set_name'] = isset($data['pay_condition_rule_set_name']) ? $data['pay_condition_rule_set_name'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['is_termination'] = isset($data['is_termination']) ? $data['is_termination'] : null;
        $this->container['notation'] = isset($data['notation']) ? $data['notation'] : null;
        $this->container['employee_start_date'] = isset($data['employee_start_date']) ? $data['employee_start_date'] : null;
        $this->container['employee_external_reference_id'] = isset($data['employee_external_reference_id']) ? $data['employee_external_reference_id'] : null;
        $this->container['is_excluded'] = isset($data['is_excluded']) ? $data['is_excluded'] : null;
        $this->container['employee_external_id'] = isset($data['employee_external_id']) ? $data['employee_external_id'] : null;
        $this->container['bank_payments_total'] = isset($data['bank_payments_total']) ? $data['bank_payments_total'] : null;
        $this->container['termination_date'] = isset($data['termination_date']) ? $data['termination_date'] : null;
        $this->container['earliest_termination_date'] = isset($data['earliest_termination_date']) ? $data['earliest_termination_date'] : null;
        $this->container['previous_termination_date'] = isset($data['previous_termination_date']) ? $data['previous_termination_date'] : null;
        $this->container['employee_expenses_total'] = isset($data['employee_expenses_total']) ? $data['employee_expenses_total'] : null;
        $this->container['employer_liabilities_total'] = isset($data['employer_liabilities_total']) ? $data['employer_liabilities_total'] : null;
        $this->container['is_complete'] = isset($data['is_complete']) ? $data['is_complete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg_withholding_amount
     *
     * @return double
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param double $payg_withholding_amount 
     *
     * @return $this
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets payg_withholding_percent
     *
     * @return double
     */
    public function getPaygWithholdingPercent()
    {
        return $this->container['payg_withholding_percent'];
    }

    /**
     * Sets payg_withholding_percent
     *
     * @param double $payg_withholding_percent 
     *
     * @return $this
     */
    public function setPaygWithholdingPercent($payg_withholding_percent)
    {
        $this->container['payg_withholding_percent'] = $payg_withholding_percent;

        return $this;
    }

    /**
     * Gets sfss_amount
     *
     * @return double
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param double $sfss_amount 
     *
     * @return $this
     */
    public function setSfssAmount($sfss_amount)
    {
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return double
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param double $help_amount 
     *
     * @return $this
     */
    public function setHelpAmount($help_amount)
    {
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return double
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param double $super_contribution 
     *
     * @return $this
     */
    public function setSuperContribution($super_contribution)
    {
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return double
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param double $employer_contribution 
     *
     * @return $this
     */
    public function setEmployerContribution($employer_contribution)
    {
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets super_contribution_minus_super_adjustments
     *
     * @return double
     */
    public function getSuperContributionMinusSuperAdjustments()
    {
        return $this->container['super_contribution_minus_super_adjustments'];
    }

    /**
     * Sets super_contribution_minus_super_adjustments
     *
     * @param double $super_contribution_minus_super_adjustments 
     *
     * @return $this
     */
    public function setSuperContributionMinusSuperAdjustments($super_contribution_minus_super_adjustments)
    {
        $this->container['super_contribution_minus_super_adjustments'] = $super_contribution_minus_super_adjustments;

        return $this;
    }

    /**
     * Gets all_super_contributions_total
     *
     * @return double
     */
    public function getAllSuperContributionsTotal()
    {
        return $this->container['all_super_contributions_total'];
    }

    /**
     * Sets all_super_contributions_total
     *
     * @param double $all_super_contributions_total 
     *
     * @return $this
     */
    public function setAllSuperContributionsTotal($all_super_contributions_total)
    {
        $this->container['all_super_contributions_total'] = $all_super_contributions_total;

        return $this;
    }

    /**
     * Gets gross_plus_super
     *
     * @return double
     */
    public function getGrossPlusSuper()
    {
        return $this->container['gross_plus_super'];
    }

    /**
     * Sets gross_plus_super
     *
     * @param double $gross_plus_super 
     *
     * @return $this
     */
    public function setGrossPlusSuper($gross_plus_super)
    {
        $this->container['gross_plus_super'] = $gross_plus_super;

        return $this;
    }

    /**
     * Gets super_adjustments_amount
     *
     * @return double
     */
    public function getSuperAdjustmentsAmount()
    {
        return $this->container['super_adjustments_amount'];
    }

    /**
     * Sets super_adjustments_amount
     *
     * @param double $super_adjustments_amount 
     *
     * @return $this
     */
    public function setSuperAdjustmentsAmount($super_adjustments_amount)
    {
        $this->container['super_adjustments_amount'] = $super_adjustments_amount;

        return $this;
    }

    /**
     * Gets salary_sacrifice_super_amount
     *
     * @return double
     */
    public function getSalarySacrificeSuperAmount()
    {
        return $this->container['salary_sacrifice_super_amount'];
    }

    /**
     * Sets salary_sacrifice_super_amount
     *
     * @param double $salary_sacrifice_super_amount 
     *
     * @return $this
     */
    public function setSalarySacrificeSuperAmount($salary_sacrifice_super_amount)
    {
        $this->container['salary_sacrifice_super_amount'] = $salary_sacrifice_super_amount;

        return $this;
    }

    /**
     * Gets member_voluntary_super_amount
     *
     * @return double
     */
    public function getMemberVoluntarySuperAmount()
    {
        return $this->container['member_voluntary_super_amount'];
    }

    /**
     * Sets member_voluntary_super_amount
     *
     * @param double $member_voluntary_super_amount 
     *
     * @return $this
     */
    public function setMemberVoluntarySuperAmount($member_voluntary_super_amount)
    {
        $this->container['member_voluntary_super_amount'] = $member_voluntary_super_amount;

        return $this;
    }

    /**
     * Gets non_super_deduction_total
     *
     * @return double
     */
    public function getNonSuperDeductionTotal()
    {
        return $this->container['non_super_deduction_total'];
    }

    /**
     * Sets non_super_deduction_total
     *
     * @param double $non_super_deduction_total 
     *
     * @return $this
     */
    public function setNonSuperDeductionTotal($non_super_deduction_total)
    {
        $this->container['non_super_deduction_total'] = $non_super_deduction_total;

        return $this;
    }

    /**
     * Gets super_payments_total
     *
     * @return double
     */
    public function getSuperPaymentsTotal()
    {
        return $this->container['super_payments_total'];
    }

    /**
     * Sets super_payments_total
     *
     * @param double $super_payments_total 
     *
     * @return $this
     */
    public function setSuperPaymentsTotal($super_payments_total)
    {
        $this->container['super_payments_total'] = $super_payments_total;

        return $this;
    }

    /**
     * Gets is_employee_under18
     *
     * @return bool
     */
    public function getIsEmployeeUnder18()
    {
        return $this->container['is_employee_under18'];
    }

    /**
     * Sets is_employee_under18
     *
     * @param bool $is_employee_under18 
     *
     * @return $this
     */
    public function setIsEmployeeUnder18($is_employee_under18)
    {
        $this->container['is_employee_under18'] = $is_employee_under18;

        return $this;
    }

    /**
     * Gets employer_contribution_adjustments_amount
     *
     * @return double
     */
    public function getEmployerContributionAdjustmentsAmount()
    {
        return $this->container['employer_contribution_adjustments_amount'];
    }

    /**
     * Sets employer_contribution_adjustments_amount
     *
     * @param double $employer_contribution_adjustments_amount 
     *
     * @return $this
     */
    public function setEmployerContributionAdjustmentsAmount($employer_contribution_adjustments_amount)
    {
        $this->container['employer_contribution_adjustments_amount'] = $employer_contribution_adjustments_amount;

        return $this;
    }

    /**
     * Gets payg_adjustments_amount
     *
     * @return double
     */
    public function getPaygAdjustmentsAmount()
    {
        return $this->container['payg_adjustments_amount'];
    }

    /**
     * Sets payg_adjustments_amount
     *
     * @param double $payg_adjustments_amount 
     *
     * @return $this
     */
    public function setPaygAdjustmentsAmount($payg_adjustments_amount)
    {
        $this->container['payg_adjustments_amount'] = $payg_adjustments_amount;

        return $this;
    }

    /**
     * Gets super_contributions_cap_applied
     *
     * @return bool
     */
    public function getSuperContributionsCapApplied()
    {
        return $this->container['super_contributions_cap_applied'];
    }

    /**
     * Sets super_contributions_cap_applied
     *
     * @param bool $super_contributions_cap_applied 
     *
     * @return $this
     */
    public function setSuperContributionsCapApplied($super_contributions_cap_applied)
    {
        $this->container['super_contributions_cap_applied'] = $super_contributions_cap_applied;

        return $this;
    }

    /**
     * Gets payg_payment_total
     *
     * @return double
     */
    public function getPaygPaymentTotal()
    {
        return $this->container['payg_payment_total'];
    }

    /**
     * Sets payg_payment_total
     *
     * @param double $payg_payment_total 
     *
     * @return $this
     */
    public function setPaygPaymentTotal($payg_payment_total)
    {
        $this->container['payg_payment_total'] = $payg_payment_total;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name 
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return double
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param double $total_hours 
     *
     * @return $this
     */
    public function setTotalHours($total_hours)
    {
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return double
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param double $gross_earnings 
     *
     * @return $this
     */
    public function setGrossEarnings($gross_earnings)
    {
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return double
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param double $net_earnings 
     *
     * @return $this
     */
    public function setNetEarnings($net_earnings)
    {
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return double
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param double $taxable_earnings 
     *
     * @return $this
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets post_tax_deduction_amount
     *
     * @return double
     */
    public function getPostTaxDeductionAmount()
    {
        return $this->container['post_tax_deduction_amount'];
    }

    /**
     * Sets post_tax_deduction_amount
     *
     * @param double $post_tax_deduction_amount 
     *
     * @return $this
     */
    public function setPostTaxDeductionAmount($post_tax_deduction_amount)
    {
        $this->container['post_tax_deduction_amount'] = $post_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets pre_tax_deduction_amount
     *
     * @return double
     */
    public function getPreTaxDeductionAmount()
    {
        return $this->container['pre_tax_deduction_amount'];
    }

    /**
     * Sets pre_tax_deduction_amount
     *
     * @param double $pre_tax_deduction_amount 
     *
     * @return $this
     */
    public function setPreTaxDeductionAmount($pre_tax_deduction_amount)
    {
        $this->container['pre_tax_deduction_amount'] = $pre_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set_name
     *
     * @return string
     */
    public function getPayConditionRuleSetName()
    {
        return $this->container['pay_condition_rule_set_name'];
    }

    /**
     * Sets pay_condition_rule_set_name
     *
     * @param string $pay_condition_rule_set_name 
     *
     * @return $this
     */
    public function setPayConditionRuleSetName($pay_condition_rule_set_name)
    {
        $this->container['pay_condition_rule_set_name'] = $pay_condition_rule_set_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets is_termination
     *
     * @return bool
     */
    public function getIsTermination()
    {
        return $this->container['is_termination'];
    }

    /**
     * Sets is_termination
     *
     * @param bool $is_termination 
     *
     * @return $this
     */
    public function setIsTermination($is_termination)
    {
        $this->container['is_termination'] = $is_termination;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string $notation 
     *
     * @return $this
     */
    public function setNotation($notation)
    {
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets employee_start_date
     *
     * @return \DateTime
     */
    public function getEmployeeStartDate()
    {
        return $this->container['employee_start_date'];
    }

    /**
     * Sets employee_start_date
     *
     * @param \DateTime $employee_start_date 
     *
     * @return $this
     */
    public function setEmployeeStartDate($employee_start_date)
    {
        $this->container['employee_start_date'] = $employee_start_date;

        return $this;
    }

    /**
     * Gets employee_external_reference_id
     *
     * @return string
     */
    public function getEmployeeExternalReferenceId()
    {
        return $this->container['employee_external_reference_id'];
    }

    /**
     * Sets employee_external_reference_id
     *
     * @param string $employee_external_reference_id 
     *
     * @return $this
     */
    public function setEmployeeExternalReferenceId($employee_external_reference_id)
    {
        $this->container['employee_external_reference_id'] = $employee_external_reference_id;

        return $this;
    }

    /**
     * Gets is_excluded
     *
     * @return bool
     */
    public function getIsExcluded()
    {
        return $this->container['is_excluded'];
    }

    /**
     * Sets is_excluded
     *
     * @param bool $is_excluded 
     *
     * @return $this
     */
    public function setIsExcluded($is_excluded)
    {
        $this->container['is_excluded'] = $is_excluded;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string $employee_external_id 
     *
     * @return $this
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets bank_payments_total
     *
     * @return double
     */
    public function getBankPaymentsTotal()
    {
        return $this->container['bank_payments_total'];
    }

    /**
     * Sets bank_payments_total
     *
     * @param double $bank_payments_total 
     *
     * @return $this
     */
    public function setBankPaymentsTotal($bank_payments_total)
    {
        $this->container['bank_payments_total'] = $bank_payments_total;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime $termination_date 
     *
     * @return $this
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets earliest_termination_date
     *
     * @return \DateTime
     */
    public function getEarliestTerminationDate()
    {
        return $this->container['earliest_termination_date'];
    }

    /**
     * Sets earliest_termination_date
     *
     * @param \DateTime $earliest_termination_date 
     *
     * @return $this
     */
    public function setEarliestTerminationDate($earliest_termination_date)
    {
        $this->container['earliest_termination_date'] = $earliest_termination_date;

        return $this;
    }

    /**
     * Gets previous_termination_date
     *
     * @return \DateTime
     */
    public function getPreviousTerminationDate()
    {
        return $this->container['previous_termination_date'];
    }

    /**
     * Sets previous_termination_date
     *
     * @param \DateTime $previous_termination_date 
     *
     * @return $this
     */
    public function setPreviousTerminationDate($previous_termination_date)
    {
        $this->container['previous_termination_date'] = $previous_termination_date;

        return $this;
    }

    /**
     * Gets employee_expenses_total
     *
     * @return double
     */
    public function getEmployeeExpensesTotal()
    {
        return $this->container['employee_expenses_total'];
    }

    /**
     * Sets employee_expenses_total
     *
     * @param double $employee_expenses_total 
     *
     * @return $this
     */
    public function setEmployeeExpensesTotal($employee_expenses_total)
    {
        $this->container['employee_expenses_total'] = $employee_expenses_total;

        return $this;
    }

    /**
     * Gets employer_liabilities_total
     *
     * @return double
     */
    public function getEmployerLiabilitiesTotal()
    {
        return $this->container['employer_liabilities_total'];
    }

    /**
     * Sets employer_liabilities_total
     *
     * @param double $employer_liabilities_total 
     *
     * @return $this
     */
    public function setEmployerLiabilitiesTotal($employer_liabilities_total)
    {
        $this->container['employer_liabilities_total'] = $employer_liabilities_total;

        return $this;
    }

    /**
     * Gets is_complete
     *
     * @return bool
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool $is_complete 
     *
     * @return $this
     */
    public function setIsComplete($is_complete)
    {
        $this->container['is_complete'] = $is_complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


