<?php
/**
 * AuPayRunTotalDetailModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuPayRunTotalDetailModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuPayRunTotalDetailModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuPayRunTotalDetailModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payg_withholding_amount' => 'float',
        'payg_withholding_percent' => 'float',
        'sfss_amount' => 'float',
        'help_amount' => 'float',
        'super_contribution' => 'float',
        'employer_contribution' => 'float',
        'super_contribution_minus_super_adjustments' => 'float',
        'all_super_contributions_total' => 'float',
        'gross_plus_super' => 'float',
        'super_adjustments_amount' => 'float',
        'salary_sacrifice_super_amount' => 'float',
        'member_voluntary_super_amount' => 'float',
        'non_super_deduction_total' => 'float',
        'super_payments_total' => 'float',
        'is_employee_under18' => 'bool',
        'employer_contribution_adjustments_amount' => 'float',
        'payg_adjustments_amount' => 'float',
        'super_contributions_cap_applied' => 'bool',
        'payg_payment_total' => 'float',
        'id' => 'int',
        'employee_name' => 'string',
        'total_hours' => 'float',
        'gross_earnings' => 'float',
        'net_earnings' => 'float',
        'taxable_earnings' => 'float',
        'post_tax_deduction_amount' => 'float',
        'pre_tax_deduction_amount' => 'float',
        'pay_condition_rule_set_name' => 'string',
        'employee_id' => 'int',
        'is_termination' => 'bool',
        'notation' => 'string',
        'employee_start_date' => '\DateTime',
        'employee_external_reference_id' => 'string',
        'is_excluded' => 'bool',
        'employee_external_id' => 'string',
        'bank_payments_total' => 'float',
        'termination_date' => '\DateTime',
        'earliest_termination_date' => '\DateTime',
        'previous_termination_date' => '\DateTime',
        'employee_expenses_total' => 'float',
        'employer_liabilities_total' => 'float',
        'is_complete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payg_withholding_amount' => 'double',
        'payg_withholding_percent' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'super_contribution_minus_super_adjustments' => 'double',
        'all_super_contributions_total' => 'double',
        'gross_plus_super' => 'double',
        'super_adjustments_amount' => 'double',
        'salary_sacrifice_super_amount' => 'double',
        'member_voluntary_super_amount' => 'double',
        'non_super_deduction_total' => 'double',
        'super_payments_total' => 'double',
        'is_employee_under18' => null,
        'employer_contribution_adjustments_amount' => 'double',
        'payg_adjustments_amount' => 'double',
        'super_contributions_cap_applied' => null,
        'payg_payment_total' => 'double',
        'id' => 'int32',
        'employee_name' => null,
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deduction_amount' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'pay_condition_rule_set_name' => null,
        'employee_id' => 'int32',
        'is_termination' => null,
        'notation' => null,
        'employee_start_date' => 'date-time',
        'employee_external_reference_id' => null,
        'is_excluded' => null,
        'employee_external_id' => null,
        'bank_payments_total' => 'double',
        'termination_date' => 'date-time',
        'earliest_termination_date' => 'date-time',
        'previous_termination_date' => 'date-time',
        'employee_expenses_total' => 'double',
        'employer_liabilities_total' => 'double',
        'is_complete' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payg_withholding_amount' => false,
		'payg_withholding_percent' => false,
		'sfss_amount' => false,
		'help_amount' => false,
		'super_contribution' => false,
		'employer_contribution' => false,
		'super_contribution_minus_super_adjustments' => false,
		'all_super_contributions_total' => false,
		'gross_plus_super' => false,
		'super_adjustments_amount' => false,
		'salary_sacrifice_super_amount' => false,
		'member_voluntary_super_amount' => false,
		'non_super_deduction_total' => false,
		'super_payments_total' => false,
		'is_employee_under18' => false,
		'employer_contribution_adjustments_amount' => false,
		'payg_adjustments_amount' => false,
		'super_contributions_cap_applied' => false,
		'payg_payment_total' => false,
		'id' => false,
		'employee_name' => false,
		'total_hours' => false,
		'gross_earnings' => false,
		'net_earnings' => false,
		'taxable_earnings' => false,
		'post_tax_deduction_amount' => false,
		'pre_tax_deduction_amount' => false,
		'pay_condition_rule_set_name' => false,
		'employee_id' => false,
		'is_termination' => false,
		'notation' => false,
		'employee_start_date' => false,
		'employee_external_reference_id' => false,
		'is_excluded' => false,
		'employee_external_id' => false,
		'bank_payments_total' => false,
		'termination_date' => false,
		'earliest_termination_date' => false,
		'previous_termination_date' => false,
		'employee_expenses_total' => false,
		'employer_liabilities_total' => false,
		'is_complete' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'payg_withholding_percent' => 'paygWithholdingPercent',
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'employer_contribution' => 'employerContribution',
        'super_contribution_minus_super_adjustments' => 'superContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'allSuperContributionsTotal',
        'gross_plus_super' => 'grossPlusSuper',
        'super_adjustments_amount' => 'superAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'salarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'memberVoluntarySuperAmount',
        'non_super_deduction_total' => 'nonSuperDeductionTotal',
        'super_payments_total' => 'superPaymentsTotal',
        'is_employee_under18' => 'isEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'employerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'paygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'superContributionsCapApplied',
        'payg_payment_total' => 'paygPaymentTotal',
        'id' => 'id',
        'employee_name' => 'employeeName',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'net_earnings' => 'netEarnings',
        'taxable_earnings' => 'taxableEarnings',
        'post_tax_deduction_amount' => 'postTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'preTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'payConditionRuleSetName',
        'employee_id' => 'employeeId',
        'is_termination' => 'isTermination',
        'notation' => 'notation',
        'employee_start_date' => 'employeeStartDate',
        'employee_external_reference_id' => 'employeeExternalReferenceId',
        'is_excluded' => 'isExcluded',
        'employee_external_id' => 'employeeExternalId',
        'bank_payments_total' => 'bankPaymentsTotal',
        'termination_date' => 'terminationDate',
        'earliest_termination_date' => 'earliestTerminationDate',
        'previous_termination_date' => 'previousTerminationDate',
        'employee_expenses_total' => 'employeeExpensesTotal',
        'employer_liabilities_total' => 'employerLiabilitiesTotal',
        'is_complete' => 'isComplete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'payg_withholding_percent' => 'setPaygWithholdingPercent',
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'employer_contribution' => 'setEmployerContribution',
        'super_contribution_minus_super_adjustments' => 'setSuperContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'setAllSuperContributionsTotal',
        'gross_plus_super' => 'setGrossPlusSuper',
        'super_adjustments_amount' => 'setSuperAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'setSalarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'setMemberVoluntarySuperAmount',
        'non_super_deduction_total' => 'setNonSuperDeductionTotal',
        'super_payments_total' => 'setSuperPaymentsTotal',
        'is_employee_under18' => 'setIsEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'setEmployerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'setPaygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'setSuperContributionsCapApplied',
        'payg_payment_total' => 'setPaygPaymentTotal',
        'id' => 'setId',
        'employee_name' => 'setEmployeeName',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'net_earnings' => 'setNetEarnings',
        'taxable_earnings' => 'setTaxableEarnings',
        'post_tax_deduction_amount' => 'setPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'setPreTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'setPayConditionRuleSetName',
        'employee_id' => 'setEmployeeId',
        'is_termination' => 'setIsTermination',
        'notation' => 'setNotation',
        'employee_start_date' => 'setEmployeeStartDate',
        'employee_external_reference_id' => 'setEmployeeExternalReferenceId',
        'is_excluded' => 'setIsExcluded',
        'employee_external_id' => 'setEmployeeExternalId',
        'bank_payments_total' => 'setBankPaymentsTotal',
        'termination_date' => 'setTerminationDate',
        'earliest_termination_date' => 'setEarliestTerminationDate',
        'previous_termination_date' => 'setPreviousTerminationDate',
        'employee_expenses_total' => 'setEmployeeExpensesTotal',
        'employer_liabilities_total' => 'setEmployerLiabilitiesTotal',
        'is_complete' => 'setIsComplete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'payg_withholding_percent' => 'getPaygWithholdingPercent',
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'employer_contribution' => 'getEmployerContribution',
        'super_contribution_minus_super_adjustments' => 'getSuperContributionMinusSuperAdjustments',
        'all_super_contributions_total' => 'getAllSuperContributionsTotal',
        'gross_plus_super' => 'getGrossPlusSuper',
        'super_adjustments_amount' => 'getSuperAdjustmentsAmount',
        'salary_sacrifice_super_amount' => 'getSalarySacrificeSuperAmount',
        'member_voluntary_super_amount' => 'getMemberVoluntarySuperAmount',
        'non_super_deduction_total' => 'getNonSuperDeductionTotal',
        'super_payments_total' => 'getSuperPaymentsTotal',
        'is_employee_under18' => 'getIsEmployeeUnder18',
        'employer_contribution_adjustments_amount' => 'getEmployerContributionAdjustmentsAmount',
        'payg_adjustments_amount' => 'getPaygAdjustmentsAmount',
        'super_contributions_cap_applied' => 'getSuperContributionsCapApplied',
        'payg_payment_total' => 'getPaygPaymentTotal',
        'id' => 'getId',
        'employee_name' => 'getEmployeeName',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'net_earnings' => 'getNetEarnings',
        'taxable_earnings' => 'getTaxableEarnings',
        'post_tax_deduction_amount' => 'getPostTaxDeductionAmount',
        'pre_tax_deduction_amount' => 'getPreTaxDeductionAmount',
        'pay_condition_rule_set_name' => 'getPayConditionRuleSetName',
        'employee_id' => 'getEmployeeId',
        'is_termination' => 'getIsTermination',
        'notation' => 'getNotation',
        'employee_start_date' => 'getEmployeeStartDate',
        'employee_external_reference_id' => 'getEmployeeExternalReferenceId',
        'is_excluded' => 'getIsExcluded',
        'employee_external_id' => 'getEmployeeExternalId',
        'bank_payments_total' => 'getBankPaymentsTotal',
        'termination_date' => 'getTerminationDate',
        'earliest_termination_date' => 'getEarliestTerminationDate',
        'previous_termination_date' => 'getPreviousTerminationDate',
        'employee_expenses_total' => 'getEmployeeExpensesTotal',
        'employer_liabilities_total' => 'getEmployerLiabilitiesTotal',
        'is_complete' => 'getIsComplete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payg_withholding_amount', $data ?? [], null);
        $this->setIfExists('payg_withholding_percent', $data ?? [], null);
        $this->setIfExists('sfss_amount', $data ?? [], null);
        $this->setIfExists('help_amount', $data ?? [], null);
        $this->setIfExists('super_contribution', $data ?? [], null);
        $this->setIfExists('employer_contribution', $data ?? [], null);
        $this->setIfExists('super_contribution_minus_super_adjustments', $data ?? [], null);
        $this->setIfExists('all_super_contributions_total', $data ?? [], null);
        $this->setIfExists('gross_plus_super', $data ?? [], null);
        $this->setIfExists('super_adjustments_amount', $data ?? [], null);
        $this->setIfExists('salary_sacrifice_super_amount', $data ?? [], null);
        $this->setIfExists('member_voluntary_super_amount', $data ?? [], null);
        $this->setIfExists('non_super_deduction_total', $data ?? [], null);
        $this->setIfExists('super_payments_total', $data ?? [], null);
        $this->setIfExists('is_employee_under18', $data ?? [], null);
        $this->setIfExists('employer_contribution_adjustments_amount', $data ?? [], null);
        $this->setIfExists('payg_adjustments_amount', $data ?? [], null);
        $this->setIfExists('super_contributions_cap_applied', $data ?? [], null);
        $this->setIfExists('payg_payment_total', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('taxable_earnings', $data ?? [], null);
        $this->setIfExists('post_tax_deduction_amount', $data ?? [], null);
        $this->setIfExists('pre_tax_deduction_amount', $data ?? [], null);
        $this->setIfExists('pay_condition_rule_set_name', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('is_termination', $data ?? [], null);
        $this->setIfExists('notation', $data ?? [], null);
        $this->setIfExists('employee_start_date', $data ?? [], null);
        $this->setIfExists('employee_external_reference_id', $data ?? [], null);
        $this->setIfExists('is_excluded', $data ?? [], null);
        $this->setIfExists('employee_external_id', $data ?? [], null);
        $this->setIfExists('bank_payments_total', $data ?? [], null);
        $this->setIfExists('termination_date', $data ?? [], null);
        $this->setIfExists('earliest_termination_date', $data ?? [], null);
        $this->setIfExists('previous_termination_date', $data ?? [], null);
        $this->setIfExists('employee_expenses_total', $data ?? [], null);
        $this->setIfExists('employer_liabilities_total', $data ?? [], null);
        $this->setIfExists('is_complete', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg_withholding_amount
     *
     * @return float|null
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param float|null $payg_withholding_amount 
     *
     * @return self
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        if (is_null($payg_withholding_amount)) {
            throw new \InvalidArgumentException('non-nullable payg_withholding_amount cannot be null');
        }
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets payg_withholding_percent
     *
     * @return float|null
     */
    public function getPaygWithholdingPercent()
    {
        return $this->container['payg_withholding_percent'];
    }

    /**
     * Sets payg_withholding_percent
     *
     * @param float|null $payg_withholding_percent 
     *
     * @return self
     */
    public function setPaygWithholdingPercent($payg_withholding_percent)
    {
        if (is_null($payg_withholding_percent)) {
            throw new \InvalidArgumentException('non-nullable payg_withholding_percent cannot be null');
        }
        $this->container['payg_withholding_percent'] = $payg_withholding_percent;

        return $this;
    }

    /**
     * Gets sfss_amount
     *
     * @return float|null
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param float|null $sfss_amount 
     *
     * @return self
     */
    public function setSfssAmount($sfss_amount)
    {
        if (is_null($sfss_amount)) {
            throw new \InvalidArgumentException('non-nullable sfss_amount cannot be null');
        }
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return float|null
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param float|null $help_amount 
     *
     * @return self
     */
    public function setHelpAmount($help_amount)
    {
        if (is_null($help_amount)) {
            throw new \InvalidArgumentException('non-nullable help_amount cannot be null');
        }
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return float|null
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float|null $super_contribution 
     *
     * @return self
     */
    public function setSuperContribution($super_contribution)
    {
        if (is_null($super_contribution)) {
            throw new \InvalidArgumentException('non-nullable super_contribution cannot be null');
        }
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return float|null
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param float|null $employer_contribution 
     *
     * @return self
     */
    public function setEmployerContribution($employer_contribution)
    {
        if (is_null($employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_contribution cannot be null');
        }
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets super_contribution_minus_super_adjustments
     *
     * @return float|null
     */
    public function getSuperContributionMinusSuperAdjustments()
    {
        return $this->container['super_contribution_minus_super_adjustments'];
    }

    /**
     * Sets super_contribution_minus_super_adjustments
     *
     * @param float|null $super_contribution_minus_super_adjustments 
     *
     * @return self
     */
    public function setSuperContributionMinusSuperAdjustments($super_contribution_minus_super_adjustments)
    {
        if (is_null($super_contribution_minus_super_adjustments)) {
            throw new \InvalidArgumentException('non-nullable super_contribution_minus_super_adjustments cannot be null');
        }
        $this->container['super_contribution_minus_super_adjustments'] = $super_contribution_minus_super_adjustments;

        return $this;
    }

    /**
     * Gets all_super_contributions_total
     *
     * @return float|null
     */
    public function getAllSuperContributionsTotal()
    {
        return $this->container['all_super_contributions_total'];
    }

    /**
     * Sets all_super_contributions_total
     *
     * @param float|null $all_super_contributions_total 
     *
     * @return self
     */
    public function setAllSuperContributionsTotal($all_super_contributions_total)
    {
        if (is_null($all_super_contributions_total)) {
            throw new \InvalidArgumentException('non-nullable all_super_contributions_total cannot be null');
        }
        $this->container['all_super_contributions_total'] = $all_super_contributions_total;

        return $this;
    }

    /**
     * Gets gross_plus_super
     *
     * @return float|null
     */
    public function getGrossPlusSuper()
    {
        return $this->container['gross_plus_super'];
    }

    /**
     * Sets gross_plus_super
     *
     * @param float|null $gross_plus_super 
     *
     * @return self
     */
    public function setGrossPlusSuper($gross_plus_super)
    {
        if (is_null($gross_plus_super)) {
            throw new \InvalidArgumentException('non-nullable gross_plus_super cannot be null');
        }
        $this->container['gross_plus_super'] = $gross_plus_super;

        return $this;
    }

    /**
     * Gets super_adjustments_amount
     *
     * @return float|null
     */
    public function getSuperAdjustmentsAmount()
    {
        return $this->container['super_adjustments_amount'];
    }

    /**
     * Sets super_adjustments_amount
     *
     * @param float|null $super_adjustments_amount 
     *
     * @return self
     */
    public function setSuperAdjustmentsAmount($super_adjustments_amount)
    {
        if (is_null($super_adjustments_amount)) {
            throw new \InvalidArgumentException('non-nullable super_adjustments_amount cannot be null');
        }
        $this->container['super_adjustments_amount'] = $super_adjustments_amount;

        return $this;
    }

    /**
     * Gets salary_sacrifice_super_amount
     *
     * @return float|null
     */
    public function getSalarySacrificeSuperAmount()
    {
        return $this->container['salary_sacrifice_super_amount'];
    }

    /**
     * Sets salary_sacrifice_super_amount
     *
     * @param float|null $salary_sacrifice_super_amount 
     *
     * @return self
     */
    public function setSalarySacrificeSuperAmount($salary_sacrifice_super_amount)
    {
        if (is_null($salary_sacrifice_super_amount)) {
            throw new \InvalidArgumentException('non-nullable salary_sacrifice_super_amount cannot be null');
        }
        $this->container['salary_sacrifice_super_amount'] = $salary_sacrifice_super_amount;

        return $this;
    }

    /**
     * Gets member_voluntary_super_amount
     *
     * @return float|null
     */
    public function getMemberVoluntarySuperAmount()
    {
        return $this->container['member_voluntary_super_amount'];
    }

    /**
     * Sets member_voluntary_super_amount
     *
     * @param float|null $member_voluntary_super_amount 
     *
     * @return self
     */
    public function setMemberVoluntarySuperAmount($member_voluntary_super_amount)
    {
        if (is_null($member_voluntary_super_amount)) {
            throw new \InvalidArgumentException('non-nullable member_voluntary_super_amount cannot be null');
        }
        $this->container['member_voluntary_super_amount'] = $member_voluntary_super_amount;

        return $this;
    }

    /**
     * Gets non_super_deduction_total
     *
     * @return float|null
     */
    public function getNonSuperDeductionTotal()
    {
        return $this->container['non_super_deduction_total'];
    }

    /**
     * Sets non_super_deduction_total
     *
     * @param float|null $non_super_deduction_total 
     *
     * @return self
     */
    public function setNonSuperDeductionTotal($non_super_deduction_total)
    {
        if (is_null($non_super_deduction_total)) {
            throw new \InvalidArgumentException('non-nullable non_super_deduction_total cannot be null');
        }
        $this->container['non_super_deduction_total'] = $non_super_deduction_total;

        return $this;
    }

    /**
     * Gets super_payments_total
     *
     * @return float|null
     */
    public function getSuperPaymentsTotal()
    {
        return $this->container['super_payments_total'];
    }

    /**
     * Sets super_payments_total
     *
     * @param float|null $super_payments_total 
     *
     * @return self
     */
    public function setSuperPaymentsTotal($super_payments_total)
    {
        if (is_null($super_payments_total)) {
            throw new \InvalidArgumentException('non-nullable super_payments_total cannot be null');
        }
        $this->container['super_payments_total'] = $super_payments_total;

        return $this;
    }

    /**
     * Gets is_employee_under18
     *
     * @return bool|null
     */
    public function getIsEmployeeUnder18()
    {
        return $this->container['is_employee_under18'];
    }

    /**
     * Sets is_employee_under18
     *
     * @param bool|null $is_employee_under18 
     *
     * @return self
     */
    public function setIsEmployeeUnder18($is_employee_under18)
    {
        if (is_null($is_employee_under18)) {
            throw new \InvalidArgumentException('non-nullable is_employee_under18 cannot be null');
        }
        $this->container['is_employee_under18'] = $is_employee_under18;

        return $this;
    }

    /**
     * Gets employer_contribution_adjustments_amount
     *
     * @return float|null
     */
    public function getEmployerContributionAdjustmentsAmount()
    {
        return $this->container['employer_contribution_adjustments_amount'];
    }

    /**
     * Sets employer_contribution_adjustments_amount
     *
     * @param float|null $employer_contribution_adjustments_amount 
     *
     * @return self
     */
    public function setEmployerContributionAdjustmentsAmount($employer_contribution_adjustments_amount)
    {
        if (is_null($employer_contribution_adjustments_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_contribution_adjustments_amount cannot be null');
        }
        $this->container['employer_contribution_adjustments_amount'] = $employer_contribution_adjustments_amount;

        return $this;
    }

    /**
     * Gets payg_adjustments_amount
     *
     * @return float|null
     */
    public function getPaygAdjustmentsAmount()
    {
        return $this->container['payg_adjustments_amount'];
    }

    /**
     * Sets payg_adjustments_amount
     *
     * @param float|null $payg_adjustments_amount 
     *
     * @return self
     */
    public function setPaygAdjustmentsAmount($payg_adjustments_amount)
    {
        if (is_null($payg_adjustments_amount)) {
            throw new \InvalidArgumentException('non-nullable payg_adjustments_amount cannot be null');
        }
        $this->container['payg_adjustments_amount'] = $payg_adjustments_amount;

        return $this;
    }

    /**
     * Gets super_contributions_cap_applied
     *
     * @return bool|null
     */
    public function getSuperContributionsCapApplied()
    {
        return $this->container['super_contributions_cap_applied'];
    }

    /**
     * Sets super_contributions_cap_applied
     *
     * @param bool|null $super_contributions_cap_applied 
     *
     * @return self
     */
    public function setSuperContributionsCapApplied($super_contributions_cap_applied)
    {
        if (is_null($super_contributions_cap_applied)) {
            throw new \InvalidArgumentException('non-nullable super_contributions_cap_applied cannot be null');
        }
        $this->container['super_contributions_cap_applied'] = $super_contributions_cap_applied;

        return $this;
    }

    /**
     * Gets payg_payment_total
     *
     * @return float|null
     */
    public function getPaygPaymentTotal()
    {
        return $this->container['payg_payment_total'];
    }

    /**
     * Sets payg_payment_total
     *
     * @param float|null $payg_payment_total 
     *
     * @return self
     */
    public function setPaygPaymentTotal($payg_payment_total)
    {
        if (is_null($payg_payment_total)) {
            throw new \InvalidArgumentException('non-nullable payg_payment_total cannot be null');
        }
        $this->container['payg_payment_total'] = $payg_payment_total;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float|null
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float|null $taxable_earnings 
     *
     * @return self
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        if (is_null($taxable_earnings)) {
            throw new \InvalidArgumentException('non-nullable taxable_earnings cannot be null');
        }
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets post_tax_deduction_amount
     *
     * @return float|null
     */
    public function getPostTaxDeductionAmount()
    {
        return $this->container['post_tax_deduction_amount'];
    }

    /**
     * Sets post_tax_deduction_amount
     *
     * @param float|null $post_tax_deduction_amount 
     *
     * @return self
     */
    public function setPostTaxDeductionAmount($post_tax_deduction_amount)
    {
        if (is_null($post_tax_deduction_amount)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deduction_amount cannot be null');
        }
        $this->container['post_tax_deduction_amount'] = $post_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets pre_tax_deduction_amount
     *
     * @return float|null
     */
    public function getPreTaxDeductionAmount()
    {
        return $this->container['pre_tax_deduction_amount'];
    }

    /**
     * Sets pre_tax_deduction_amount
     *
     * @param float|null $pre_tax_deduction_amount 
     *
     * @return self
     */
    public function setPreTaxDeductionAmount($pre_tax_deduction_amount)
    {
        if (is_null($pre_tax_deduction_amount)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deduction_amount cannot be null');
        }
        $this->container['pre_tax_deduction_amount'] = $pre_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets pay_condition_rule_set_name
     *
     * @return string|null
     */
    public function getPayConditionRuleSetName()
    {
        return $this->container['pay_condition_rule_set_name'];
    }

    /**
     * Sets pay_condition_rule_set_name
     *
     * @param string|null $pay_condition_rule_set_name 
     *
     * @return self
     */
    public function setPayConditionRuleSetName($pay_condition_rule_set_name)
    {
        if (is_null($pay_condition_rule_set_name)) {
            throw new \InvalidArgumentException('non-nullable pay_condition_rule_set_name cannot be null');
        }
        $this->container['pay_condition_rule_set_name'] = $pay_condition_rule_set_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets is_termination
     *
     * @return bool|null
     */
    public function getIsTermination()
    {
        return $this->container['is_termination'];
    }

    /**
     * Sets is_termination
     *
     * @param bool|null $is_termination 
     *
     * @return self
     */
    public function setIsTermination($is_termination)
    {
        if (is_null($is_termination)) {
            throw new \InvalidArgumentException('non-nullable is_termination cannot be null');
        }
        $this->container['is_termination'] = $is_termination;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string|null
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string|null $notation 
     *
     * @return self
     */
    public function setNotation($notation)
    {
        if (is_null($notation)) {
            throw new \InvalidArgumentException('non-nullable notation cannot be null');
        }
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets employee_start_date
     *
     * @return \DateTime|null
     */
    public function getEmployeeStartDate()
    {
        return $this->container['employee_start_date'];
    }

    /**
     * Sets employee_start_date
     *
     * @param \DateTime|null $employee_start_date 
     *
     * @return self
     */
    public function setEmployeeStartDate($employee_start_date)
    {
        if (is_null($employee_start_date)) {
            throw new \InvalidArgumentException('non-nullable employee_start_date cannot be null');
        }
        $this->container['employee_start_date'] = $employee_start_date;

        return $this;
    }

    /**
     * Gets employee_external_reference_id
     *
     * @return string|null
     */
    public function getEmployeeExternalReferenceId()
    {
        return $this->container['employee_external_reference_id'];
    }

    /**
     * Sets employee_external_reference_id
     *
     * @param string|null $employee_external_reference_id 
     *
     * @return self
     */
    public function setEmployeeExternalReferenceId($employee_external_reference_id)
    {
        if (is_null($employee_external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_reference_id cannot be null');
        }
        $this->container['employee_external_reference_id'] = $employee_external_reference_id;

        return $this;
    }

    /**
     * Gets is_excluded
     *
     * @return bool|null
     */
    public function getIsExcluded()
    {
        return $this->container['is_excluded'];
    }

    /**
     * Sets is_excluded
     *
     * @param bool|null $is_excluded 
     *
     * @return self
     */
    public function setIsExcluded($is_excluded)
    {
        if (is_null($is_excluded)) {
            throw new \InvalidArgumentException('non-nullable is_excluded cannot be null');
        }
        $this->container['is_excluded'] = $is_excluded;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string|null
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string|null $employee_external_id 
     *
     * @return self
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        if (is_null($employee_external_id)) {
            throw new \InvalidArgumentException('non-nullable employee_external_id cannot be null');
        }
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets bank_payments_total
     *
     * @return float|null
     */
    public function getBankPaymentsTotal()
    {
        return $this->container['bank_payments_total'];
    }

    /**
     * Sets bank_payments_total
     *
     * @param float|null $bank_payments_total 
     *
     * @return self
     */
    public function setBankPaymentsTotal($bank_payments_total)
    {
        if (is_null($bank_payments_total)) {
            throw new \InvalidArgumentException('non-nullable bank_payments_total cannot be null');
        }
        $this->container['bank_payments_total'] = $bank_payments_total;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date 
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        if (is_null($termination_date)) {
            throw new \InvalidArgumentException('non-nullable termination_date cannot be null');
        }
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets earliest_termination_date
     *
     * @return \DateTime|null
     */
    public function getEarliestTerminationDate()
    {
        return $this->container['earliest_termination_date'];
    }

    /**
     * Sets earliest_termination_date
     *
     * @param \DateTime|null $earliest_termination_date 
     *
     * @return self
     */
    public function setEarliestTerminationDate($earliest_termination_date)
    {
        if (is_null($earliest_termination_date)) {
            throw new \InvalidArgumentException('non-nullable earliest_termination_date cannot be null');
        }
        $this->container['earliest_termination_date'] = $earliest_termination_date;

        return $this;
    }

    /**
     * Gets previous_termination_date
     *
     * @return \DateTime|null
     */
    public function getPreviousTerminationDate()
    {
        return $this->container['previous_termination_date'];
    }

    /**
     * Sets previous_termination_date
     *
     * @param \DateTime|null $previous_termination_date 
     *
     * @return self
     */
    public function setPreviousTerminationDate($previous_termination_date)
    {
        if (is_null($previous_termination_date)) {
            throw new \InvalidArgumentException('non-nullable previous_termination_date cannot be null');
        }
        $this->container['previous_termination_date'] = $previous_termination_date;

        return $this;
    }

    /**
     * Gets employee_expenses_total
     *
     * @return float|null
     */
    public function getEmployeeExpensesTotal()
    {
        return $this->container['employee_expenses_total'];
    }

    /**
     * Sets employee_expenses_total
     *
     * @param float|null $employee_expenses_total 
     *
     * @return self
     */
    public function setEmployeeExpensesTotal($employee_expenses_total)
    {
        if (is_null($employee_expenses_total)) {
            throw new \InvalidArgumentException('non-nullable employee_expenses_total cannot be null');
        }
        $this->container['employee_expenses_total'] = $employee_expenses_total;

        return $this;
    }

    /**
     * Gets employer_liabilities_total
     *
     * @return float|null
     */
    public function getEmployerLiabilitiesTotal()
    {
        return $this->container['employer_liabilities_total'];
    }

    /**
     * Sets employer_liabilities_total
     *
     * @param float|null $employer_liabilities_total 
     *
     * @return self
     */
    public function setEmployerLiabilitiesTotal($employer_liabilities_total)
    {
        if (is_null($employer_liabilities_total)) {
            throw new \InvalidArgumentException('non-nullable employer_liabilities_total cannot be null');
        }
        $this->container['employer_liabilities_total'] = $employer_liabilities_total;

        return $this;
    }

    /**
     * Gets is_complete
     *
     * @return bool|null
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool|null $is_complete 
     *
     * @return self
     */
    public function setIsComplete($is_complete)
    {
        if (is_null($is_complete)) {
            throw new \InvalidArgumentException('non-nullable is_complete cannot be null');
        }
        $this->container['is_complete'] = $is_complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


