<?php
/**
 * PayScheduleMetaDataModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PayScheduleMetaDataModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayScheduleMetaDataModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayScheduleMetaDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pay_run_warnings' => '\Swagger\Client\Model\PayRunWarningModel[]',
        'frequencies' => 'string[]',
        'employment_selection_strategies' => 'string[]',
        'timesheet_import_options' => 'string[]',
        'publish_pay_slips_preferences' => 'string[]',
        'report_packs' => '\Swagger\Client\Model\ReportPackModel[]',
        'users_to_notify' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pay_run_warnings' => null,
        'frequencies' => null,
        'employment_selection_strategies' => null,
        'timesheet_import_options' => null,
        'publish_pay_slips_preferences' => null,
        'report_packs' => null,
        'users_to_notify' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_run_warnings' => 'payRunWarnings',
        'frequencies' => 'frequencies',
        'employment_selection_strategies' => 'employmentSelectionStrategies',
        'timesheet_import_options' => 'timesheetImportOptions',
        'publish_pay_slips_preferences' => 'publishPaySlipsPreferences',
        'report_packs' => 'reportPacks',
        'users_to_notify' => 'usersToNotify'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_run_warnings' => 'setPayRunWarnings',
        'frequencies' => 'setFrequencies',
        'employment_selection_strategies' => 'setEmploymentSelectionStrategies',
        'timesheet_import_options' => 'setTimesheetImportOptions',
        'publish_pay_slips_preferences' => 'setPublishPaySlipsPreferences',
        'report_packs' => 'setReportPacks',
        'users_to_notify' => 'setUsersToNotify'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_run_warnings' => 'getPayRunWarnings',
        'frequencies' => 'getFrequencies',
        'employment_selection_strategies' => 'getEmploymentSelectionStrategies',
        'timesheet_import_options' => 'getTimesheetImportOptions',
        'publish_pay_slips_preferences' => 'getPublishPaySlipsPreferences',
        'report_packs' => 'getReportPacks',
        'users_to_notify' => 'getUsersToNotify'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pay_run_warnings'] = isset($data['pay_run_warnings']) ? $data['pay_run_warnings'] : null;
        $this->container['frequencies'] = isset($data['frequencies']) ? $data['frequencies'] : null;
        $this->container['employment_selection_strategies'] = isset($data['employment_selection_strategies']) ? $data['employment_selection_strategies'] : null;
        $this->container['timesheet_import_options'] = isset($data['timesheet_import_options']) ? $data['timesheet_import_options'] : null;
        $this->container['publish_pay_slips_preferences'] = isset($data['publish_pay_slips_preferences']) ? $data['publish_pay_slips_preferences'] : null;
        $this->container['report_packs'] = isset($data['report_packs']) ? $data['report_packs'] : null;
        $this->container['users_to_notify'] = isset($data['users_to_notify']) ? $data['users_to_notify'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_run_warnings
     *
     * @return \Swagger\Client\Model\PayRunWarningModel[]
     */
    public function getPayRunWarnings()
    {
        return $this->container['pay_run_warnings'];
    }

    /**
     * Sets pay_run_warnings
     *
     * @param \Swagger\Client\Model\PayRunWarningModel[] $pay_run_warnings 
     *
     * @return $this
     */
    public function setPayRunWarnings($pay_run_warnings)
    {
        $this->container['pay_run_warnings'] = $pay_run_warnings;

        return $this;
    }

    /**
     * Gets frequencies
     *
     * @return string[]
     */
    public function getFrequencies()
    {
        return $this->container['frequencies'];
    }

    /**
     * Sets frequencies
     *
     * @param string[] $frequencies 
     *
     * @return $this
     */
    public function setFrequencies($frequencies)
    {
        $this->container['frequencies'] = $frequencies;

        return $this;
    }

    /**
     * Gets employment_selection_strategies
     *
     * @return string[]
     */
    public function getEmploymentSelectionStrategies()
    {
        return $this->container['employment_selection_strategies'];
    }

    /**
     * Sets employment_selection_strategies
     *
     * @param string[] $employment_selection_strategies 
     *
     * @return $this
     */
    public function setEmploymentSelectionStrategies($employment_selection_strategies)
    {
        $this->container['employment_selection_strategies'] = $employment_selection_strategies;

        return $this;
    }

    /**
     * Gets timesheet_import_options
     *
     * @return string[]
     */
    public function getTimesheetImportOptions()
    {
        return $this->container['timesheet_import_options'];
    }

    /**
     * Sets timesheet_import_options
     *
     * @param string[] $timesheet_import_options 
     *
     * @return $this
     */
    public function setTimesheetImportOptions($timesheet_import_options)
    {
        $this->container['timesheet_import_options'] = $timesheet_import_options;

        return $this;
    }

    /**
     * Gets publish_pay_slips_preferences
     *
     * @return string[]
     */
    public function getPublishPaySlipsPreferences()
    {
        return $this->container['publish_pay_slips_preferences'];
    }

    /**
     * Sets publish_pay_slips_preferences
     *
     * @param string[] $publish_pay_slips_preferences 
     *
     * @return $this
     */
    public function setPublishPaySlipsPreferences($publish_pay_slips_preferences)
    {
        $this->container['publish_pay_slips_preferences'] = $publish_pay_slips_preferences;

        return $this;
    }

    /**
     * Gets report_packs
     *
     * @return \Swagger\Client\Model\ReportPackModel[]
     */
    public function getReportPacks()
    {
        return $this->container['report_packs'];
    }

    /**
     * Sets report_packs
     *
     * @param \Swagger\Client\Model\ReportPackModel[] $report_packs 
     *
     * @return $this
     */
    public function setReportPacks($report_packs)
    {
        $this->container['report_packs'] = $report_packs;

        return $this;
    }

    /**
     * Gets users_to_notify
     *
     * @return string[]
     */
    public function getUsersToNotify()
    {
        return $this->container['users_to_notify'];
    }

    /**
     * Sets users_to_notify
     *
     * @param string[] $users_to_notify 
     *
     * @return $this
     */
    public function setUsersToNotify($users_to_notify)
    {
        $this->container['users_to_notify'] = $users_to_notify;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


