<?php
/**
 * AuLeaveLiabilityExportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuLeaveLiabilityExportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuLeaveLiabilityExportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuLeaveLiabilityExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'leave_loading_dollar_value' => 'float',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'start_date' => '\DateTime',
        'last_paid_date' => '\DateTime',
        'last_pay_period_ending' => '\DateTime',
        'calculated_weeks' => 'float',
        'location' => 'string',
        'leave_category_name' => 'string',
        'approved_leave_amount' => 'float',
        'accrued_amount' => 'float',
        'leave_value' => 'float',
        'approved_leave_amount_in_hours' => 'float',
        'unit_type' => 'string',
        'accrued_amount_in_hours' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'leave_loading_dollar_value' => 'double',
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'start_date' => 'date-time',
        'last_paid_date' => 'date-time',
        'last_pay_period_ending' => 'date-time',
        'calculated_weeks' => 'double',
        'location' => null,
        'leave_category_name' => null,
        'approved_leave_amount' => 'double',
        'accrued_amount' => 'double',
        'leave_value' => 'double',
        'approved_leave_amount_in_hours' => 'double',
        'unit_type' => null,
        'accrued_amount_in_hours' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'leave_loading_dollar_value' => false,
		'employee_id' => false,
		'first_name' => false,
		'surname' => false,
		'external_id' => false,
		'start_date' => false,
		'last_paid_date' => false,
		'last_pay_period_ending' => false,
		'calculated_weeks' => false,
		'location' => false,
		'leave_category_name' => false,
		'approved_leave_amount' => false,
		'accrued_amount' => false,
		'leave_value' => false,
		'approved_leave_amount_in_hours' => false,
		'unit_type' => false,
		'accrued_amount_in_hours' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leave_loading_dollar_value' => 'leaveLoadingDollarValue',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'start_date' => 'startDate',
        'last_paid_date' => 'lastPaidDate',
        'last_pay_period_ending' => 'lastPayPeriodEnding',
        'calculated_weeks' => 'calculatedWeeks',
        'location' => 'location',
        'leave_category_name' => 'leaveCategoryName',
        'approved_leave_amount' => 'approvedLeaveAmount',
        'accrued_amount' => 'accruedAmount',
        'leave_value' => 'leaveValue',
        'approved_leave_amount_in_hours' => 'approvedLeaveAmountInHours',
        'unit_type' => 'unitType',
        'accrued_amount_in_hours' => 'accruedAmountInHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leave_loading_dollar_value' => 'setLeaveLoadingDollarValue',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'start_date' => 'setStartDate',
        'last_paid_date' => 'setLastPaidDate',
        'last_pay_period_ending' => 'setLastPayPeriodEnding',
        'calculated_weeks' => 'setCalculatedWeeks',
        'location' => 'setLocation',
        'leave_category_name' => 'setLeaveCategoryName',
        'approved_leave_amount' => 'setApprovedLeaveAmount',
        'accrued_amount' => 'setAccruedAmount',
        'leave_value' => 'setLeaveValue',
        'approved_leave_amount_in_hours' => 'setApprovedLeaveAmountInHours',
        'unit_type' => 'setUnitType',
        'accrued_amount_in_hours' => 'setAccruedAmountInHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leave_loading_dollar_value' => 'getLeaveLoadingDollarValue',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'start_date' => 'getStartDate',
        'last_paid_date' => 'getLastPaidDate',
        'last_pay_period_ending' => 'getLastPayPeriodEnding',
        'calculated_weeks' => 'getCalculatedWeeks',
        'location' => 'getLocation',
        'leave_category_name' => 'getLeaveCategoryName',
        'approved_leave_amount' => 'getApprovedLeaveAmount',
        'accrued_amount' => 'getAccruedAmount',
        'leave_value' => 'getLeaveValue',
        'approved_leave_amount_in_hours' => 'getApprovedLeaveAmountInHours',
        'unit_type' => 'getUnitType',
        'accrued_amount_in_hours' => 'getAccruedAmountInHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_TYPE_HOURS = 'Hours';
    public const UNIT_TYPE_DAYS = 'Days';
    public const UNIT_TYPE_WEEKS = 'Weeks';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitTypeAllowableValues()
    {
        return [
            self::UNIT_TYPE_HOURS,
            self::UNIT_TYPE_DAYS,
            self::UNIT_TYPE_WEEKS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('leave_loading_dollar_value', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('last_paid_date', $data ?? [], null);
        $this->setIfExists('last_pay_period_ending', $data ?? [], null);
        $this->setIfExists('calculated_weeks', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('leave_category_name', $data ?? [], null);
        $this->setIfExists('approved_leave_amount', $data ?? [], null);
        $this->setIfExists('accrued_amount', $data ?? [], null);
        $this->setIfExists('leave_value', $data ?? [], null);
        $this->setIfExists('approved_leave_amount_in_hours', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('accrued_amount_in_hours', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!is_null($this->container['unit_type']) && !in_array($this->container['unit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_type', must be one of '%s'",
                $this->container['unit_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leave_loading_dollar_value
     *
     * @return float|null
     */
    public function getLeaveLoadingDollarValue()
    {
        return $this->container['leave_loading_dollar_value'];
    }

    /**
     * Sets leave_loading_dollar_value
     *
     * @param float|null $leave_loading_dollar_value 
     *
     * @return self
     */
    public function setLeaveLoadingDollarValue($leave_loading_dollar_value)
    {
        if (is_null($leave_loading_dollar_value)) {
            throw new \InvalidArgumentException('non-nullable leave_loading_dollar_value cannot be null');
        }
        $this->container['leave_loading_dollar_value'] = $leave_loading_dollar_value;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date 
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets last_paid_date
     *
     * @return \DateTime|null
     */
    public function getLastPaidDate()
    {
        return $this->container['last_paid_date'];
    }

    /**
     * Sets last_paid_date
     *
     * @param \DateTime|null $last_paid_date 
     *
     * @return self
     */
    public function setLastPaidDate($last_paid_date)
    {
        if (is_null($last_paid_date)) {
            throw new \InvalidArgumentException('non-nullable last_paid_date cannot be null');
        }
        $this->container['last_paid_date'] = $last_paid_date;

        return $this;
    }

    /**
     * Gets last_pay_period_ending
     *
     * @return \DateTime|null
     */
    public function getLastPayPeriodEnding()
    {
        return $this->container['last_pay_period_ending'];
    }

    /**
     * Sets last_pay_period_ending
     *
     * @param \DateTime|null $last_pay_period_ending 
     *
     * @return self
     */
    public function setLastPayPeriodEnding($last_pay_period_ending)
    {
        if (is_null($last_pay_period_ending)) {
            throw new \InvalidArgumentException('non-nullable last_pay_period_ending cannot be null');
        }
        $this->container['last_pay_period_ending'] = $last_pay_period_ending;

        return $this;
    }

    /**
     * Gets calculated_weeks
     *
     * @return float|null
     */
    public function getCalculatedWeeks()
    {
        return $this->container['calculated_weeks'];
    }

    /**
     * Sets calculated_weeks
     *
     * @param float|null $calculated_weeks 
     *
     * @return self
     */
    public function setCalculatedWeeks($calculated_weeks)
    {
        if (is_null($calculated_weeks)) {
            throw new \InvalidArgumentException('non-nullable calculated_weeks cannot be null');
        }
        $this->container['calculated_weeks'] = $calculated_weeks;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location 
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets leave_category_name
     *
     * @return string|null
     */
    public function getLeaveCategoryName()
    {
        return $this->container['leave_category_name'];
    }

    /**
     * Sets leave_category_name
     *
     * @param string|null $leave_category_name 
     *
     * @return self
     */
    public function setLeaveCategoryName($leave_category_name)
    {
        if (is_null($leave_category_name)) {
            throw new \InvalidArgumentException('non-nullable leave_category_name cannot be null');
        }
        $this->container['leave_category_name'] = $leave_category_name;

        return $this;
    }

    /**
     * Gets approved_leave_amount
     *
     * @return float|null
     */
    public function getApprovedLeaveAmount()
    {
        return $this->container['approved_leave_amount'];
    }

    /**
     * Sets approved_leave_amount
     *
     * @param float|null $approved_leave_amount 
     *
     * @return self
     */
    public function setApprovedLeaveAmount($approved_leave_amount)
    {
        if (is_null($approved_leave_amount)) {
            throw new \InvalidArgumentException('non-nullable approved_leave_amount cannot be null');
        }
        $this->container['approved_leave_amount'] = $approved_leave_amount;

        return $this;
    }

    /**
     * Gets accrued_amount
     *
     * @return float|null
     */
    public function getAccruedAmount()
    {
        return $this->container['accrued_amount'];
    }

    /**
     * Sets accrued_amount
     *
     * @param float|null $accrued_amount 
     *
     * @return self
     */
    public function setAccruedAmount($accrued_amount)
    {
        if (is_null($accrued_amount)) {
            throw new \InvalidArgumentException('non-nullable accrued_amount cannot be null');
        }
        $this->container['accrued_amount'] = $accrued_amount;

        return $this;
    }

    /**
     * Gets leave_value
     *
     * @return float|null
     */
    public function getLeaveValue()
    {
        return $this->container['leave_value'];
    }

    /**
     * Sets leave_value
     *
     * @param float|null $leave_value 
     *
     * @return self
     */
    public function setLeaveValue($leave_value)
    {
        if (is_null($leave_value)) {
            throw new \InvalidArgumentException('non-nullable leave_value cannot be null');
        }
        $this->container['leave_value'] = $leave_value;

        return $this;
    }

    /**
     * Gets approved_leave_amount_in_hours
     *
     * @return float|null
     */
    public function getApprovedLeaveAmountInHours()
    {
        return $this->container['approved_leave_amount_in_hours'];
    }

    /**
     * Sets approved_leave_amount_in_hours
     *
     * @param float|null $approved_leave_amount_in_hours 
     *
     * @return self
     */
    public function setApprovedLeaveAmountInHours($approved_leave_amount_in_hours)
    {
        if (is_null($approved_leave_amount_in_hours)) {
            throw new \InvalidArgumentException('non-nullable approved_leave_amount_in_hours cannot be null');
        }
        $this->container['approved_leave_amount_in_hours'] = $approved_leave_amount_in_hours;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $allowedValues = $this->getUnitTypeAllowableValues();
        if (!in_array($unit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_type', must be one of '%s'",
                    $unit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets accrued_amount_in_hours
     *
     * @return float|null
     */
    public function getAccruedAmountInHours()
    {
        return $this->container['accrued_amount_in_hours'];
    }

    /**
     * Sets accrued_amount_in_hours
     *
     * @param float|null $accrued_amount_in_hours 
     *
     * @return self
     */
    public function setAccruedAmountInHours($accrued_amount_in_hours)
    {
        if (is_null($accrued_amount_in_hours)) {
            throw new \InvalidArgumentException('non-nullable accrued_amount_in_hours cannot be null');
        }
        $this->container['accrued_amount_in_hours'] = $accrued_amount_in_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


