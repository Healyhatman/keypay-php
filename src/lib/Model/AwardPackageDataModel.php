<?php
/**
 * AwardPackageDataModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AwardPackageDataModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AwardPackageDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AwardPackageDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employment_agreements' => '\OpenAPI\Client\Model\EmploymentAgreementModel[]',
        'pay_categories' => '\OpenAPI\Client\Model\ConsolidatedPayCategoryModel[]',
        'leave_categories' => '\OpenAPI\Client\Model\LeaveCategoryModel[]',
        'expense_categories' => '\OpenAPI\Client\Model\EmployeeExpenseCategoryModel[]',
        'work_types' => '\OpenAPI\Client\Model\WorkTypeModel[]',
        'tags' => '\OpenAPI\Client\Model\TagModel[]',
        'qualifications' => '\OpenAPI\Client\Model\QualificationModel[]',
        'rule_sets' => '\OpenAPI\Client\Model\PayConditionRuleSetModel[]',
        'pay_rate_templates' => '\OpenAPI\Client\Model\PayRateTemplateModel[]',
        'leave_allowance_templates' => '\OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employment_agreements' => null,
        'pay_categories' => null,
        'leave_categories' => null,
        'expense_categories' => null,
        'work_types' => null,
        'tags' => null,
        'qualifications' => null,
        'rule_sets' => null,
        'pay_rate_templates' => null,
        'leave_allowance_templates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employment_agreements' => false,
		'pay_categories' => false,
		'leave_categories' => false,
		'expense_categories' => false,
		'work_types' => false,
		'tags' => false,
		'qualifications' => false,
		'rule_sets' => false,
		'pay_rate_templates' => false,
		'leave_allowance_templates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employment_agreements' => 'employmentAgreements',
        'pay_categories' => 'payCategories',
        'leave_categories' => 'leaveCategories',
        'expense_categories' => 'expenseCategories',
        'work_types' => 'workTypes',
        'tags' => 'tags',
        'qualifications' => 'qualifications',
        'rule_sets' => 'ruleSets',
        'pay_rate_templates' => 'payRateTemplates',
        'leave_allowance_templates' => 'leaveAllowanceTemplates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employment_agreements' => 'setEmploymentAgreements',
        'pay_categories' => 'setPayCategories',
        'leave_categories' => 'setLeaveCategories',
        'expense_categories' => 'setExpenseCategories',
        'work_types' => 'setWorkTypes',
        'tags' => 'setTags',
        'qualifications' => 'setQualifications',
        'rule_sets' => 'setRuleSets',
        'pay_rate_templates' => 'setPayRateTemplates',
        'leave_allowance_templates' => 'setLeaveAllowanceTemplates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employment_agreements' => 'getEmploymentAgreements',
        'pay_categories' => 'getPayCategories',
        'leave_categories' => 'getLeaveCategories',
        'expense_categories' => 'getExpenseCategories',
        'work_types' => 'getWorkTypes',
        'tags' => 'getTags',
        'qualifications' => 'getQualifications',
        'rule_sets' => 'getRuleSets',
        'pay_rate_templates' => 'getPayRateTemplates',
        'leave_allowance_templates' => 'getLeaveAllowanceTemplates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employment_agreements', $data ?? [], null);
        $this->setIfExists('pay_categories', $data ?? [], null);
        $this->setIfExists('leave_categories', $data ?? [], null);
        $this->setIfExists('expense_categories', $data ?? [], null);
        $this->setIfExists('work_types', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('qualifications', $data ?? [], null);
        $this->setIfExists('rule_sets', $data ?? [], null);
        $this->setIfExists('pay_rate_templates', $data ?? [], null);
        $this->setIfExists('leave_allowance_templates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employment_agreements
     *
     * @return \OpenAPI\Client\Model\EmploymentAgreementModel[]|null
     */
    public function getEmploymentAgreements()
    {
        return $this->container['employment_agreements'];
    }

    /**
     * Sets employment_agreements
     *
     * @param \OpenAPI\Client\Model\EmploymentAgreementModel[]|null $employment_agreements 
     *
     * @return self
     */
    public function setEmploymentAgreements($employment_agreements)
    {
        if (is_null($employment_agreements)) {
            throw new \InvalidArgumentException('non-nullable employment_agreements cannot be null');
        }
        $this->container['employment_agreements'] = $employment_agreements;

        return $this;
    }

    /**
     * Gets pay_categories
     *
     * @return \OpenAPI\Client\Model\ConsolidatedPayCategoryModel[]|null
     */
    public function getPayCategories()
    {
        return $this->container['pay_categories'];
    }

    /**
     * Sets pay_categories
     *
     * @param \OpenAPI\Client\Model\ConsolidatedPayCategoryModel[]|null $pay_categories 
     *
     * @return self
     */
    public function setPayCategories($pay_categories)
    {
        if (is_null($pay_categories)) {
            throw new \InvalidArgumentException('non-nullable pay_categories cannot be null');
        }
        $this->container['pay_categories'] = $pay_categories;

        return $this;
    }

    /**
     * Gets leave_categories
     *
     * @return \OpenAPI\Client\Model\LeaveCategoryModel[]|null
     */
    public function getLeaveCategories()
    {
        return $this->container['leave_categories'];
    }

    /**
     * Sets leave_categories
     *
     * @param \OpenAPI\Client\Model\LeaveCategoryModel[]|null $leave_categories 
     *
     * @return self
     */
    public function setLeaveCategories($leave_categories)
    {
        if (is_null($leave_categories)) {
            throw new \InvalidArgumentException('non-nullable leave_categories cannot be null');
        }
        $this->container['leave_categories'] = $leave_categories;

        return $this;
    }

    /**
     * Gets expense_categories
     *
     * @return \OpenAPI\Client\Model\EmployeeExpenseCategoryModel[]|null
     */
    public function getExpenseCategories()
    {
        return $this->container['expense_categories'];
    }

    /**
     * Sets expense_categories
     *
     * @param \OpenAPI\Client\Model\EmployeeExpenseCategoryModel[]|null $expense_categories 
     *
     * @return self
     */
    public function setExpenseCategories($expense_categories)
    {
        if (is_null($expense_categories)) {
            throw new \InvalidArgumentException('non-nullable expense_categories cannot be null');
        }
        $this->container['expense_categories'] = $expense_categories;

        return $this;
    }

    /**
     * Gets work_types
     *
     * @return \OpenAPI\Client\Model\WorkTypeModel[]|null
     */
    public function getWorkTypes()
    {
        return $this->container['work_types'];
    }

    /**
     * Sets work_types
     *
     * @param \OpenAPI\Client\Model\WorkTypeModel[]|null $work_types 
     *
     * @return self
     */
    public function setWorkTypes($work_types)
    {
        if (is_null($work_types)) {
            throw new \InvalidArgumentException('non-nullable work_types cannot be null');
        }
        $this->container['work_types'] = $work_types;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\TagModel[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\TagModel[]|null $tags 
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets qualifications
     *
     * @return \OpenAPI\Client\Model\QualificationModel[]|null
     */
    public function getQualifications()
    {
        return $this->container['qualifications'];
    }

    /**
     * Sets qualifications
     *
     * @param \OpenAPI\Client\Model\QualificationModel[]|null $qualifications 
     *
     * @return self
     */
    public function setQualifications($qualifications)
    {
        if (is_null($qualifications)) {
            throw new \InvalidArgumentException('non-nullable qualifications cannot be null');
        }
        $this->container['qualifications'] = $qualifications;

        return $this;
    }

    /**
     * Gets rule_sets
     *
     * @return \OpenAPI\Client\Model\PayConditionRuleSetModel[]|null
     */
    public function getRuleSets()
    {
        return $this->container['rule_sets'];
    }

    /**
     * Sets rule_sets
     *
     * @param \OpenAPI\Client\Model\PayConditionRuleSetModel[]|null $rule_sets 
     *
     * @return self
     */
    public function setRuleSets($rule_sets)
    {
        if (is_null($rule_sets)) {
            throw new \InvalidArgumentException('non-nullable rule_sets cannot be null');
        }
        $this->container['rule_sets'] = $rule_sets;

        return $this;
    }

    /**
     * Gets pay_rate_templates
     *
     * @return \OpenAPI\Client\Model\PayRateTemplateModel[]|null
     */
    public function getPayRateTemplates()
    {
        return $this->container['pay_rate_templates'];
    }

    /**
     * Sets pay_rate_templates
     *
     * @param \OpenAPI\Client\Model\PayRateTemplateModel[]|null $pay_rate_templates 
     *
     * @return self
     */
    public function setPayRateTemplates($pay_rate_templates)
    {
        if (is_null($pay_rate_templates)) {
            throw new \InvalidArgumentException('non-nullable pay_rate_templates cannot be null');
        }
        $this->container['pay_rate_templates'] = $pay_rate_templates;

        return $this;
    }

    /**
     * Gets leave_allowance_templates
     *
     * @return \OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]|null
     */
    public function getLeaveAllowanceTemplates()
    {
        return $this->container['leave_allowance_templates'];
    }

    /**
     * Sets leave_allowance_templates
     *
     * @param \OpenAPI\Client\Model\LeaveAllowanceTemplateModel[]|null $leave_allowance_templates 
     *
     * @return self
     */
    public function setLeaveAllowanceTemplates($leave_allowance_templates)
    {
        if (is_null($leave_allowance_templates)) {
            throw new \InvalidArgumentException('non-nullable leave_allowance_templates cannot be null');
        }
        $this->container['leave_allowance_templates'] = $leave_allowance_templates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


