<?php
/**
 * AuChartOfAccountsGroupModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuChartOfAccountsGroupModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuChartOfAccountsGroupModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuChartOfAccountsGroupModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_accounts' => '\OpenAPI\Client\Model\AuChartOfAccountsDefaultAccountsModel',
        'leave_categories' => '\OpenAPI\Client\Model\ChartOfAccountsLeaveCategoryModel[]',
        'pay_categories' => '\OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]',
        'deduction_categories' => '\OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]',
        'employee_expense_categories' => '\OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]',
        'employer_liability_categories' => '\OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_accounts' => null,
        'leave_categories' => null,
        'pay_categories' => null,
        'deduction_categories' => null,
        'employee_expense_categories' => null,
        'employer_liability_categories' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_accounts' => false,
		'leave_categories' => false,
		'pay_categories' => false,
		'deduction_categories' => false,
		'employee_expense_categories' => false,
		'employer_liability_categories' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_accounts' => 'defaultAccounts',
        'leave_categories' => 'leaveCategories',
        'pay_categories' => 'payCategories',
        'deduction_categories' => 'deductionCategories',
        'employee_expense_categories' => 'employeeExpenseCategories',
        'employer_liability_categories' => 'employerLiabilityCategories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_accounts' => 'setDefaultAccounts',
        'leave_categories' => 'setLeaveCategories',
        'pay_categories' => 'setPayCategories',
        'deduction_categories' => 'setDeductionCategories',
        'employee_expense_categories' => 'setEmployeeExpenseCategories',
        'employer_liability_categories' => 'setEmployerLiabilityCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_accounts' => 'getDefaultAccounts',
        'leave_categories' => 'getLeaveCategories',
        'pay_categories' => 'getPayCategories',
        'deduction_categories' => 'getDeductionCategories',
        'employee_expense_categories' => 'getEmployeeExpenseCategories',
        'employer_liability_categories' => 'getEmployerLiabilityCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_accounts', $data ?? [], null);
        $this->setIfExists('leave_categories', $data ?? [], null);
        $this->setIfExists('pay_categories', $data ?? [], null);
        $this->setIfExists('deduction_categories', $data ?? [], null);
        $this->setIfExists('employee_expense_categories', $data ?? [], null);
        $this->setIfExists('employer_liability_categories', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_accounts
     *
     * @return \OpenAPI\Client\Model\AuChartOfAccountsDefaultAccountsModel|null
     */
    public function getDefaultAccounts()
    {
        return $this->container['default_accounts'];
    }

    /**
     * Sets default_accounts
     *
     * @param \OpenAPI\Client\Model\AuChartOfAccountsDefaultAccountsModel|null $default_accounts default_accounts
     *
     * @return self
     */
    public function setDefaultAccounts($default_accounts)
    {
        if (is_null($default_accounts)) {
            throw new \InvalidArgumentException('non-nullable default_accounts cannot be null');
        }
        $this->container['default_accounts'] = $default_accounts;

        return $this;
    }

    /**
     * Gets leave_categories
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountsLeaveCategoryModel[]|null
     */
    public function getLeaveCategories()
    {
        return $this->container['leave_categories'];
    }

    /**
     * Sets leave_categories
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountsLeaveCategoryModel[]|null $leave_categories 
     *
     * @return self
     */
    public function setLeaveCategories($leave_categories)
    {
        if (is_null($leave_categories)) {
            throw new \InvalidArgumentException('non-nullable leave_categories cannot be null');
        }
        $this->container['leave_categories'] = $leave_categories;

        return $this;
    }

    /**
     * Gets pay_categories
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]|null
     */
    public function getPayCategories()
    {
        return $this->container['pay_categories'];
    }

    /**
     * Sets pay_categories
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]|null $pay_categories 
     *
     * @return self
     */
    public function setPayCategories($pay_categories)
    {
        if (is_null($pay_categories)) {
            throw new \InvalidArgumentException('non-nullable pay_categories cannot be null');
        }
        $this->container['pay_categories'] = $pay_categories;

        return $this;
    }

    /**
     * Gets deduction_categories
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]|null
     */
    public function getDeductionCategories()
    {
        return $this->container['deduction_categories'];
    }

    /**
     * Sets deduction_categories
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]|null $deduction_categories 
     *
     * @return self
     */
    public function setDeductionCategories($deduction_categories)
    {
        if (is_null($deduction_categories)) {
            throw new \InvalidArgumentException('non-nullable deduction_categories cannot be null');
        }
        $this->container['deduction_categories'] = $deduction_categories;

        return $this;
    }

    /**
     * Gets employee_expense_categories
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]|null
     */
    public function getEmployeeExpenseCategories()
    {
        return $this->container['employee_expense_categories'];
    }

    /**
     * Sets employee_expense_categories
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountsCategoryModel[]|null $employee_expense_categories 
     *
     * @return self
     */
    public function setEmployeeExpenseCategories($employee_expense_categories)
    {
        if (is_null($employee_expense_categories)) {
            throw new \InvalidArgumentException('non-nullable employee_expense_categories cannot be null');
        }
        $this->container['employee_expense_categories'] = $employee_expense_categories;

        return $this;
    }

    /**
     * Gets employer_liability_categories
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]|null
     */
    public function getEmployerLiabilityCategories()
    {
        return $this->container['employer_liability_categories'];
    }

    /**
     * Sets employer_liability_categories
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountsLiabilityCategoryModel[]|null $employer_liability_categories 
     *
     * @return self
     */
    public function setEmployerLiabilityCategories($employer_liability_categories)
    {
        if (is_null($employer_liability_categories)) {
            throw new \InvalidArgumentException('non-nullable employer_liability_categories cannot be null');
        }
        $this->container['employer_liability_categories'] = $employer_liability_categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


