<?php
/**
 * LocationModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocationModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocationModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'name' => 'string',
        'external_id' => 'string',
        'external_accounting_location_id' => 'string',
        'source' => 'string',
        'fully_qualified_name' => 'string',
        'is_global' => 'bool',
        'is_rollup_reporting_location' => 'bool',
        'general_ledger_mapping_code' => 'string',
        'default_shift_condition_ids' => 'int[]',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'parent_id' => 'int32',
        'name' => null,
        'external_id' => null,
        'external_accounting_location_id' => null,
        'source' => null,
        'fully_qualified_name' => null,
        'is_global' => null,
        'is_rollup_reporting_location' => null,
        'general_ledger_mapping_code' => null,
        'default_shift_condition_ids' => 'int32',
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'parent_id' => false,
		'name' => false,
		'external_id' => false,
		'external_accounting_location_id' => false,
		'source' => false,
		'fully_qualified_name' => false,
		'is_global' => false,
		'is_rollup_reporting_location' => false,
		'general_ledger_mapping_code' => false,
		'default_shift_condition_ids' => false,
		'state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'name' => 'name',
        'external_id' => 'externalId',
        'external_accounting_location_id' => 'externalAccountingLocationId',
        'source' => 'source',
        'fully_qualified_name' => 'fullyQualifiedName',
        'is_global' => 'isGlobal',
        'is_rollup_reporting_location' => 'isRollupReportingLocation',
        'general_ledger_mapping_code' => 'generalLedgerMappingCode',
        'default_shift_condition_ids' => 'defaultShiftConditionIds',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'external_accounting_location_id' => 'setExternalAccountingLocationId',
        'source' => 'setSource',
        'fully_qualified_name' => 'setFullyQualifiedName',
        'is_global' => 'setIsGlobal',
        'is_rollup_reporting_location' => 'setIsRollupReportingLocation',
        'general_ledger_mapping_code' => 'setGeneralLedgerMappingCode',
        'default_shift_condition_ids' => 'setDefaultShiftConditionIds',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'external_accounting_location_id' => 'getExternalAccountingLocationId',
        'source' => 'getSource',
        'fully_qualified_name' => 'getFullyQualifiedName',
        'is_global' => 'getIsGlobal',
        'is_rollup_reporting_location' => 'getIsRollupReportingLocation',
        'general_ledger_mapping_code' => 'getGeneralLedgerMappingCode',
        'default_shift_condition_ids' => 'getDefaultShiftConditionIds',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('external_accounting_location_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('fully_qualified_name', $data ?? [], null);
        $this->setIfExists('is_global', $data ?? [], null);
        $this->setIfExists('is_rollup_reporting_location', $data ?? [], null);
        $this->setIfExists('general_ledger_mapping_code', $data ?? [], null);
        $this->setIfExists('default_shift_condition_ids', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id 
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_accounting_location_id
     *
     * @return string|null
     */
    public function getExternalAccountingLocationId()
    {
        return $this->container['external_accounting_location_id'];
    }

    /**
     * Sets external_accounting_location_id
     *
     * @param string|null $external_accounting_location_id 
     *
     * @return self
     */
    public function setExternalAccountingLocationId($external_accounting_location_id)
    {
        if (is_null($external_accounting_location_id)) {
            throw new \InvalidArgumentException('non-nullable external_accounting_location_id cannot be null');
        }
        $this->container['external_accounting_location_id'] = $external_accounting_location_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets fully_qualified_name
     *
     * @return string|null
     */
    public function getFullyQualifiedName()
    {
        return $this->container['fully_qualified_name'];
    }

    /**
     * Sets fully_qualified_name
     *
     * @param string|null $fully_qualified_name 
     *
     * @return self
     */
    public function setFullyQualifiedName($fully_qualified_name)
    {
        if (is_null($fully_qualified_name)) {
            throw new \InvalidArgumentException('non-nullable fully_qualified_name cannot be null');
        }
        $this->container['fully_qualified_name'] = $fully_qualified_name;

        return $this;
    }

    /**
     * Gets is_global
     *
     * @return bool|null
     */
    public function getIsGlobal()
    {
        return $this->container['is_global'];
    }

    /**
     * Sets is_global
     *
     * @param bool|null $is_global 
     *
     * @return self
     */
    public function setIsGlobal($is_global)
    {
        if (is_null($is_global)) {
            throw new \InvalidArgumentException('non-nullable is_global cannot be null');
        }
        $this->container['is_global'] = $is_global;

        return $this;
    }

    /**
     * Gets is_rollup_reporting_location
     *
     * @return bool|null
     */
    public function getIsRollupReportingLocation()
    {
        return $this->container['is_rollup_reporting_location'];
    }

    /**
     * Sets is_rollup_reporting_location
     *
     * @param bool|null $is_rollup_reporting_location 
     *
     * @return self
     */
    public function setIsRollupReportingLocation($is_rollup_reporting_location)
    {
        if (is_null($is_rollup_reporting_location)) {
            throw new \InvalidArgumentException('non-nullable is_rollup_reporting_location cannot be null');
        }
        $this->container['is_rollup_reporting_location'] = $is_rollup_reporting_location;

        return $this;
    }

    /**
     * Gets general_ledger_mapping_code
     *
     * @return string|null
     */
    public function getGeneralLedgerMappingCode()
    {
        return $this->container['general_ledger_mapping_code'];
    }

    /**
     * Sets general_ledger_mapping_code
     *
     * @param string|null $general_ledger_mapping_code 
     *
     * @return self
     */
    public function setGeneralLedgerMappingCode($general_ledger_mapping_code)
    {
        if (is_null($general_ledger_mapping_code)) {
            throw new \InvalidArgumentException('non-nullable general_ledger_mapping_code cannot be null');
        }
        $this->container['general_ledger_mapping_code'] = $general_ledger_mapping_code;

        return $this;
    }

    /**
     * Gets default_shift_condition_ids
     *
     * @return int[]|null
     */
    public function getDefaultShiftConditionIds()
    {
        return $this->container['default_shift_condition_ids'];
    }

    /**
     * Sets default_shift_condition_ids
     *
     * @param int[]|null $default_shift_condition_ids 
     *
     * @return self
     */
    public function setDefaultShiftConditionIds($default_shift_condition_ids)
    {
        if (is_null($default_shift_condition_ids)) {
            throw new \InvalidArgumentException('non-nullable default_shift_condition_ids cannot be null');
        }
        $this->container['default_shift_condition_ids'] = $default_shift_condition_ids;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state 
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


