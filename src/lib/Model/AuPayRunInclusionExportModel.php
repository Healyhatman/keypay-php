<?php
/**
 * AuPayRunInclusionExportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuPayRunInclusionExportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuPayRunInclusionExportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuPayRunInclusionExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'super_contribution_type' => 'string',
        'super_rate' => 'string',
        'tax_code' => 'string',
        'tax_rate' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'primary_location' => 'string',
        'location' => 'string',
        'deduction_category' => 'string',
        'expense_category' => 'string',
        'employer_liability_category' => 'string',
        'pay_category' => 'string',
        'tax_adjustment_type' => 'string',
        'start_date' => 'string',
        'expiry' => 'string',
        'amount' => 'float',
        'amount_type' => 'string',
        'paid' => 'string',
        'preserved_earnings' => 'string',
        'units' => 'float',
        'rate' => 'string',
        'total' => 'string',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'super_contribution_type' => null,
        'super_rate' => null,
        'tax_code' => null,
        'tax_rate' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'primary_location' => null,
        'location' => null,
        'deduction_category' => null,
        'expense_category' => null,
        'employer_liability_category' => null,
        'pay_category' => null,
        'tax_adjustment_type' => null,
        'start_date' => null,
        'expiry' => null,
        'amount' => 'double',
        'amount_type' => null,
        'paid' => null,
        'preserved_earnings' => null,
        'units' => 'double',
        'rate' => null,
        'total' => null,
        'notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'super_contribution_type' => false,
		'super_rate' => false,
		'tax_code' => false,
		'tax_rate' => false,
		'employee_id' => false,
		'first_name' => false,
		'surname' => false,
		'external_id' => false,
		'primary_location' => false,
		'location' => false,
		'deduction_category' => false,
		'expense_category' => false,
		'employer_liability_category' => false,
		'pay_category' => false,
		'tax_adjustment_type' => false,
		'start_date' => false,
		'expiry' => false,
		'amount' => false,
		'amount_type' => false,
		'paid' => false,
		'preserved_earnings' => false,
		'units' => false,
		'rate' => false,
		'total' => false,
		'notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super_contribution_type' => 'superContributionType',
        'super_rate' => 'superRate',
        'tax_code' => 'taxCode',
        'tax_rate' => 'taxRate',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'primary_location' => 'primaryLocation',
        'location' => 'location',
        'deduction_category' => 'deductionCategory',
        'expense_category' => 'expenseCategory',
        'employer_liability_category' => 'employerLiabilityCategory',
        'pay_category' => 'payCategory',
        'tax_adjustment_type' => 'taxAdjustmentType',
        'start_date' => 'startDate',
        'expiry' => 'expiry',
        'amount' => 'amount',
        'amount_type' => 'amountType',
        'paid' => 'paid',
        'preserved_earnings' => 'preservedEarnings',
        'units' => 'units',
        'rate' => 'rate',
        'total' => 'total',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super_contribution_type' => 'setSuperContributionType',
        'super_rate' => 'setSuperRate',
        'tax_code' => 'setTaxCode',
        'tax_rate' => 'setTaxRate',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'primary_location' => 'setPrimaryLocation',
        'location' => 'setLocation',
        'deduction_category' => 'setDeductionCategory',
        'expense_category' => 'setExpenseCategory',
        'employer_liability_category' => 'setEmployerLiabilityCategory',
        'pay_category' => 'setPayCategory',
        'tax_adjustment_type' => 'setTaxAdjustmentType',
        'start_date' => 'setStartDate',
        'expiry' => 'setExpiry',
        'amount' => 'setAmount',
        'amount_type' => 'setAmountType',
        'paid' => 'setPaid',
        'preserved_earnings' => 'setPreservedEarnings',
        'units' => 'setUnits',
        'rate' => 'setRate',
        'total' => 'setTotal',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super_contribution_type' => 'getSuperContributionType',
        'super_rate' => 'getSuperRate',
        'tax_code' => 'getTaxCode',
        'tax_rate' => 'getTaxRate',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'primary_location' => 'getPrimaryLocation',
        'location' => 'getLocation',
        'deduction_category' => 'getDeductionCategory',
        'expense_category' => 'getExpenseCategory',
        'employer_liability_category' => 'getEmployerLiabilityCategory',
        'pay_category' => 'getPayCategory',
        'tax_adjustment_type' => 'getTaxAdjustmentType',
        'start_date' => 'getStartDate',
        'expiry' => 'getExpiry',
        'amount' => 'getAmount',
        'amount_type' => 'getAmountType',
        'paid' => 'getPaid',
        'preserved_earnings' => 'getPreservedEarnings',
        'units' => 'getUnits',
        'rate' => 'getRate',
        'total' => 'getTotal',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('super_contribution_type', $data ?? [], null);
        $this->setIfExists('super_rate', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('primary_location', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('deduction_category', $data ?? [], null);
        $this->setIfExists('expense_category', $data ?? [], null);
        $this->setIfExists('employer_liability_category', $data ?? [], null);
        $this->setIfExists('pay_category', $data ?? [], null);
        $this->setIfExists('tax_adjustment_type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiry', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_type', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('preserved_earnings', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super_contribution_type
     *
     * @return string|null
     */
    public function getSuperContributionType()
    {
        return $this->container['super_contribution_type'];
    }

    /**
     * Sets super_contribution_type
     *
     * @param string|null $super_contribution_type 
     *
     * @return self
     */
    public function setSuperContributionType($super_contribution_type)
    {
        if (is_null($super_contribution_type)) {
            throw new \InvalidArgumentException('non-nullable super_contribution_type cannot be null');
        }
        $this->container['super_contribution_type'] = $super_contribution_type;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return string|null
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param string|null $super_rate 
     *
     * @return self
     */
    public function setSuperRate($super_rate)
    {
        if (is_null($super_rate)) {
            throw new \InvalidArgumentException('non-nullable super_rate cannot be null');
        }
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code 
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string|null $tax_rate 
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets primary_location
     *
     * @return string|null
     */
    public function getPrimaryLocation()
    {
        return $this->container['primary_location'];
    }

    /**
     * Sets primary_location
     *
     * @param string|null $primary_location 
     *
     * @return self
     */
    public function setPrimaryLocation($primary_location)
    {
        if (is_null($primary_location)) {
            throw new \InvalidArgumentException('non-nullable primary_location cannot be null');
        }
        $this->container['primary_location'] = $primary_location;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location 
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets deduction_category
     *
     * @return string|null
     */
    public function getDeductionCategory()
    {
        return $this->container['deduction_category'];
    }

    /**
     * Sets deduction_category
     *
     * @param string|null $deduction_category 
     *
     * @return self
     */
    public function setDeductionCategory($deduction_category)
    {
        if (is_null($deduction_category)) {
            throw new \InvalidArgumentException('non-nullable deduction_category cannot be null');
        }
        $this->container['deduction_category'] = $deduction_category;

        return $this;
    }

    /**
     * Gets expense_category
     *
     * @return string|null
     */
    public function getExpenseCategory()
    {
        return $this->container['expense_category'];
    }

    /**
     * Sets expense_category
     *
     * @param string|null $expense_category 
     *
     * @return self
     */
    public function setExpenseCategory($expense_category)
    {
        if (is_null($expense_category)) {
            throw new \InvalidArgumentException('non-nullable expense_category cannot be null');
        }
        $this->container['expense_category'] = $expense_category;

        return $this;
    }

    /**
     * Gets employer_liability_category
     *
     * @return string|null
     */
    public function getEmployerLiabilityCategory()
    {
        return $this->container['employer_liability_category'];
    }

    /**
     * Sets employer_liability_category
     *
     * @param string|null $employer_liability_category 
     *
     * @return self
     */
    public function setEmployerLiabilityCategory($employer_liability_category)
    {
        if (is_null($employer_liability_category)) {
            throw new \InvalidArgumentException('non-nullable employer_liability_category cannot be null');
        }
        $this->container['employer_liability_category'] = $employer_liability_category;

        return $this;
    }

    /**
     * Gets pay_category
     *
     * @return string|null
     */
    public function getPayCategory()
    {
        return $this->container['pay_category'];
    }

    /**
     * Sets pay_category
     *
     * @param string|null $pay_category 
     *
     * @return self
     */
    public function setPayCategory($pay_category)
    {
        if (is_null($pay_category)) {
            throw new \InvalidArgumentException('non-nullable pay_category cannot be null');
        }
        $this->container['pay_category'] = $pay_category;

        return $this;
    }

    /**
     * Gets tax_adjustment_type
     *
     * @return string|null
     */
    public function getTaxAdjustmentType()
    {
        return $this->container['tax_adjustment_type'];
    }

    /**
     * Sets tax_adjustment_type
     *
     * @param string|null $tax_adjustment_type 
     *
     * @return self
     */
    public function setTaxAdjustmentType($tax_adjustment_type)
    {
        if (is_null($tax_adjustment_type)) {
            throw new \InvalidArgumentException('non-nullable tax_adjustment_type cannot be null');
        }
        $this->container['tax_adjustment_type'] = $tax_adjustment_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date 
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string|null
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string|null $expiry 
     *
     * @return self
     */
    public function setExpiry($expiry)
    {
        if (is_null($expiry)) {
            throw new \InvalidArgumentException('non-nullable expiry cannot be null');
        }
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_type
     *
     * @return string|null
     */
    public function getAmountType()
    {
        return $this->container['amount_type'];
    }

    /**
     * Sets amount_type
     *
     * @param string|null $amount_type 
     *
     * @return self
     */
    public function setAmountType($amount_type)
    {
        if (is_null($amount_type)) {
            throw new \InvalidArgumentException('non-nullable amount_type cannot be null');
        }
        $this->container['amount_type'] = $amount_type;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return string|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param string|null $paid 
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets preserved_earnings
     *
     * @return string|null
     */
    public function getPreservedEarnings()
    {
        return $this->container['preserved_earnings'];
    }

    /**
     * Sets preserved_earnings
     *
     * @param string|null $preserved_earnings 
     *
     * @return self
     */
    public function setPreservedEarnings($preserved_earnings)
    {
        if (is_null($preserved_earnings)) {
            throw new \InvalidArgumentException('non-nullable preserved_earnings cannot be null');
        }
        $this->container['preserved_earnings'] = $preserved_earnings;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate 
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total 
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


