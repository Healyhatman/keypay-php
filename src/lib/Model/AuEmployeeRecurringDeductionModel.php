<?php
/**
 * AuEmployeeRecurringDeductionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEmployeeRecurringDeductionModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEmployeeRecurringDeductionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEmployeeRecurringDeductionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deduction_type' => 'string',
        'paid_to' => 'string',
        'name' => 'string',
        'deduction_category_id' => 'int',
        'paid_to_account_id' => 'int',
        'external_reference_id' => 'string',
        'preserved_earnings_amount_not_reached_action' => 'string',
        'carry_forward_unpaid_deductions' => 'bool',
        'carry_forward_unused_preserved_earnings' => 'bool',
        'payment_reference' => 'string',
        'preserved_earnings' => 'string',
        'preserved_earnings_amount' => 'float',
        'additional_data' => 'int',
        'priority' => 'int',
        'deleted' => 'bool',
        'id' => 'int',
        'employee_id' => 'int',
        'amount' => 'float',
        'expiry_date' => '\DateTime',
        'from_date' => '\DateTime',
        'maximum_amount_paid' => 'float',
        'total_amount_paid' => 'float',
        'is_active' => 'bool',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deduction_type' => null,
        'paid_to' => null,
        'name' => null,
        'deduction_category_id' => 'int32',
        'paid_to_account_id' => 'int32',
        'external_reference_id' => null,
        'preserved_earnings_amount_not_reached_action' => null,
        'carry_forward_unpaid_deductions' => null,
        'carry_forward_unused_preserved_earnings' => null,
        'payment_reference' => null,
        'preserved_earnings' => null,
        'preserved_earnings_amount' => 'double',
        'additional_data' => 'int32',
        'priority' => 'int32',
        'deleted' => null,
        'id' => 'int32',
        'employee_id' => 'int32',
        'amount' => 'double',
        'expiry_date' => 'date-time',
        'from_date' => 'date-time',
        'maximum_amount_paid' => 'double',
        'total_amount_paid' => 'double',
        'is_active' => null,
        'notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deduction_type' => false,
		'paid_to' => false,
		'name' => false,
		'deduction_category_id' => false,
		'paid_to_account_id' => false,
		'external_reference_id' => false,
		'preserved_earnings_amount_not_reached_action' => false,
		'carry_forward_unpaid_deductions' => false,
		'carry_forward_unused_preserved_earnings' => false,
		'payment_reference' => false,
		'preserved_earnings' => false,
		'preserved_earnings_amount' => false,
		'additional_data' => false,
		'priority' => false,
		'deleted' => false,
		'id' => false,
		'employee_id' => false,
		'amount' => false,
		'expiry_date' => false,
		'from_date' => false,
		'maximum_amount_paid' => false,
		'total_amount_paid' => false,
		'is_active' => false,
		'notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deduction_type' => 'deductionType',
        'paid_to' => 'paidTo',
        'name' => 'name',
        'deduction_category_id' => 'deductionCategoryId',
        'paid_to_account_id' => 'paidToAccountId',
        'external_reference_id' => 'externalReferenceId',
        'preserved_earnings_amount_not_reached_action' => 'preservedEarningsAmountNotReachedAction',
        'carry_forward_unpaid_deductions' => 'carryForwardUnpaidDeductions',
        'carry_forward_unused_preserved_earnings' => 'carryForwardUnusedPreservedEarnings',
        'payment_reference' => 'paymentReference',
        'preserved_earnings' => 'preservedEarnings',
        'preserved_earnings_amount' => 'preservedEarningsAmount',
        'additional_data' => 'additionalData',
        'priority' => 'priority',
        'deleted' => 'deleted',
        'id' => 'id',
        'employee_id' => 'employeeId',
        'amount' => 'amount',
        'expiry_date' => 'expiryDate',
        'from_date' => 'fromDate',
        'maximum_amount_paid' => 'maximumAmountPaid',
        'total_amount_paid' => 'totalAmountPaid',
        'is_active' => 'isActive',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deduction_type' => 'setDeductionType',
        'paid_to' => 'setPaidTo',
        'name' => 'setName',
        'deduction_category_id' => 'setDeductionCategoryId',
        'paid_to_account_id' => 'setPaidToAccountId',
        'external_reference_id' => 'setExternalReferenceId',
        'preserved_earnings_amount_not_reached_action' => 'setPreservedEarningsAmountNotReachedAction',
        'carry_forward_unpaid_deductions' => 'setCarryForwardUnpaidDeductions',
        'carry_forward_unused_preserved_earnings' => 'setCarryForwardUnusedPreservedEarnings',
        'payment_reference' => 'setPaymentReference',
        'preserved_earnings' => 'setPreservedEarnings',
        'preserved_earnings_amount' => 'setPreservedEarningsAmount',
        'additional_data' => 'setAdditionalData',
        'priority' => 'setPriority',
        'deleted' => 'setDeleted',
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'amount' => 'setAmount',
        'expiry_date' => 'setExpiryDate',
        'from_date' => 'setFromDate',
        'maximum_amount_paid' => 'setMaximumAmountPaid',
        'total_amount_paid' => 'setTotalAmountPaid',
        'is_active' => 'setIsActive',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deduction_type' => 'getDeductionType',
        'paid_to' => 'getPaidTo',
        'name' => 'getName',
        'deduction_category_id' => 'getDeductionCategoryId',
        'paid_to_account_id' => 'getPaidToAccountId',
        'external_reference_id' => 'getExternalReferenceId',
        'preserved_earnings_amount_not_reached_action' => 'getPreservedEarningsAmountNotReachedAction',
        'carry_forward_unpaid_deductions' => 'getCarryForwardUnpaidDeductions',
        'carry_forward_unused_preserved_earnings' => 'getCarryForwardUnusedPreservedEarnings',
        'payment_reference' => 'getPaymentReference',
        'preserved_earnings' => 'getPreservedEarnings',
        'preserved_earnings_amount' => 'getPreservedEarningsAmount',
        'additional_data' => 'getAdditionalData',
        'priority' => 'getPriority',
        'deleted' => 'getDeleted',
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'amount' => 'getAmount',
        'expiry_date' => 'getExpiryDate',
        'from_date' => 'getFromDate',
        'maximum_amount_paid' => 'getMaximumAmountPaid',
        'total_amount_paid' => 'getTotalAmountPaid',
        'is_active' => 'getIsActive',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEDUCTION_TYPE_NOT_SET = 'NotSet';
    public const DEDUCTION_TYPE_FIXED = 'Fixed';
    public const DEDUCTION_TYPE_PERCENTAGE_GROSS = 'PercentageGross';
    public const DEDUCTION_TYPE_PERCENTAGE_OTE = 'PercentageOTE';
    public const DEDUCTION_TYPE_PERCENTAGE_STUDENT_LOAN = 'PercentageStudentLoan';
    public const DEDUCTION_TYPE_PERCENTAGE_NET = 'PercentageNet';
    public const DEDUCTION_TYPE_TIERED = 'Tiered';
    public const DEDUCTION_TYPE_CUSTOM = 'Custom';
    public const PAID_TO_MANUAL = 'Manual';
    public const PAID_TO_BANK_ACCOUNT = 'BankAccount';
    public const PAID_TO_SUPER_FUND = 'SuperFund';
    public const PAID_TO_BPAY = 'Bpay';
    public const PAID_TO_PENSION_SCHEME = 'PensionScheme';
    public const PAID_TO_TAX_OFFICE = 'TaxOffice';
    public const PAID_TO_CPFB = 'CPFB';
    public const PRESERVED_EARNINGS_AMOUNT_NOT_REACHED_ACTION_DO_NOT_PAY = 'DoNotPay';
    public const PRESERVED_EARNINGS_AMOUNT_NOT_REACHED_ACTION_PAY_TO_LIMIT = 'PayToLimit';
    public const PRESERVED_EARNINGS_NEVER = 'Never';
    public const PRESERVED_EARNINGS_AMOUNT = 'Amount';
    public const PRESERVED_EARNINGS_PERCENTAGE = 'Percentage';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeductionTypeAllowableValues()
    {
        return [
            self::DEDUCTION_TYPE_NOT_SET,
            self::DEDUCTION_TYPE_FIXED,
            self::DEDUCTION_TYPE_PERCENTAGE_GROSS,
            self::DEDUCTION_TYPE_PERCENTAGE_OTE,
            self::DEDUCTION_TYPE_PERCENTAGE_STUDENT_LOAN,
            self::DEDUCTION_TYPE_PERCENTAGE_NET,
            self::DEDUCTION_TYPE_TIERED,
            self::DEDUCTION_TYPE_CUSTOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaidToAllowableValues()
    {
        return [
            self::PAID_TO_MANUAL,
            self::PAID_TO_BANK_ACCOUNT,
            self::PAID_TO_SUPER_FUND,
            self::PAID_TO_BPAY,
            self::PAID_TO_PENSION_SCHEME,
            self::PAID_TO_TAX_OFFICE,
            self::PAID_TO_CPFB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreservedEarningsAmountNotReachedActionAllowableValues()
    {
        return [
            self::PRESERVED_EARNINGS_AMOUNT_NOT_REACHED_ACTION_DO_NOT_PAY,
            self::PRESERVED_EARNINGS_AMOUNT_NOT_REACHED_ACTION_PAY_TO_LIMIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreservedEarningsAllowableValues()
    {
        return [
            self::PRESERVED_EARNINGS_NEVER,
            self::PRESERVED_EARNINGS_AMOUNT,
            self::PRESERVED_EARNINGS_PERCENTAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deduction_type', $data ?? [], null);
        $this->setIfExists('paid_to', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('deduction_category_id', $data ?? [], null);
        $this->setIfExists('paid_to_account_id', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('preserved_earnings_amount_not_reached_action', $data ?? [], null);
        $this->setIfExists('carry_forward_unpaid_deductions', $data ?? [], null);
        $this->setIfExists('carry_forward_unused_preserved_earnings', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('preserved_earnings', $data ?? [], null);
        $this->setIfExists('preserved_earnings_amount', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('maximum_amount_paid', $data ?? [], null);
        $this->setIfExists('total_amount_paid', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeductionTypeAllowableValues();
        if (!is_null($this->container['deduction_type']) && !in_array($this->container['deduction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deduction_type', must be one of '%s'",
                $this->container['deduction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaidToAllowableValues();
        if (!is_null($this->container['paid_to']) && !in_array($this->container['paid_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paid_to', must be one of '%s'",
                $this->container['paid_to'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPreservedEarningsAmountNotReachedActionAllowableValues();
        if (!is_null($this->container['preserved_earnings_amount_not_reached_action']) && !in_array($this->container['preserved_earnings_amount_not_reached_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preserved_earnings_amount_not_reached_action', must be one of '%s'",
                $this->container['preserved_earnings_amount_not_reached_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPreservedEarningsAllowableValues();
        if (!is_null($this->container['preserved_earnings']) && !in_array($this->container['preserved_earnings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'preserved_earnings', must be one of '%s'",
                $this->container['preserved_earnings'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deduction_type
     *
     * @return string|null
     */
    public function getDeductionType()
    {
        return $this->container['deduction_type'];
    }

    /**
     * Sets deduction_type
     *
     * @param string|null $deduction_type 
     *
     * @return self
     */
    public function setDeductionType($deduction_type)
    {
        if (is_null($deduction_type)) {
            throw new \InvalidArgumentException('non-nullable deduction_type cannot be null');
        }
        $allowedValues = $this->getDeductionTypeAllowableValues();
        if (!in_array($deduction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deduction_type', must be one of '%s'",
                    $deduction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deduction_type'] = $deduction_type;

        return $this;
    }

    /**
     * Gets paid_to
     *
     * @return string|null
     */
    public function getPaidTo()
    {
        return $this->container['paid_to'];
    }

    /**
     * Sets paid_to
     *
     * @param string|null $paid_to 
     *
     * @return self
     */
    public function setPaidTo($paid_to)
    {
        if (is_null($paid_to)) {
            throw new \InvalidArgumentException('non-nullable paid_to cannot be null');
        }
        $allowedValues = $this->getPaidToAllowableValues();
        if (!in_array($paid_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paid_to', must be one of '%s'",
                    $paid_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paid_to'] = $paid_to;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets deduction_category_id
     *
     * @return int|null
     */
    public function getDeductionCategoryId()
    {
        return $this->container['deduction_category_id'];
    }

    /**
     * Sets deduction_category_id
     *
     * @param int|null $deduction_category_id 
     *
     * @return self
     */
    public function setDeductionCategoryId($deduction_category_id)
    {
        if (is_null($deduction_category_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_category_id cannot be null');
        }
        $this->container['deduction_category_id'] = $deduction_category_id;

        return $this;
    }

    /**
     * Gets paid_to_account_id
     *
     * @return int|null
     */
    public function getPaidToAccountId()
    {
        return $this->container['paid_to_account_id'];
    }

    /**
     * Sets paid_to_account_id
     *
     * @param int|null $paid_to_account_id 
     *
     * @return self
     */
    public function setPaidToAccountId($paid_to_account_id)
    {
        if (is_null($paid_to_account_id)) {
            throw new \InvalidArgumentException('non-nullable paid_to_account_id cannot be null');
        }
        $this->container['paid_to_account_id'] = $paid_to_account_id;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets preserved_earnings_amount_not_reached_action
     *
     * @return string|null
     */
    public function getPreservedEarningsAmountNotReachedAction()
    {
        return $this->container['preserved_earnings_amount_not_reached_action'];
    }

    /**
     * Sets preserved_earnings_amount_not_reached_action
     *
     * @param string|null $preserved_earnings_amount_not_reached_action 
     *
     * @return self
     */
    public function setPreservedEarningsAmountNotReachedAction($preserved_earnings_amount_not_reached_action)
    {
        if (is_null($preserved_earnings_amount_not_reached_action)) {
            throw new \InvalidArgumentException('non-nullable preserved_earnings_amount_not_reached_action cannot be null');
        }
        $allowedValues = $this->getPreservedEarningsAmountNotReachedActionAllowableValues();
        if (!in_array($preserved_earnings_amount_not_reached_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preserved_earnings_amount_not_reached_action', must be one of '%s'",
                    $preserved_earnings_amount_not_reached_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preserved_earnings_amount_not_reached_action'] = $preserved_earnings_amount_not_reached_action;

        return $this;
    }

    /**
     * Gets carry_forward_unpaid_deductions
     *
     * @return bool|null
     */
    public function getCarryForwardUnpaidDeductions()
    {
        return $this->container['carry_forward_unpaid_deductions'];
    }

    /**
     * Sets carry_forward_unpaid_deductions
     *
     * @param bool|null $carry_forward_unpaid_deductions 
     *
     * @return self
     */
    public function setCarryForwardUnpaidDeductions($carry_forward_unpaid_deductions)
    {
        if (is_null($carry_forward_unpaid_deductions)) {
            throw new \InvalidArgumentException('non-nullable carry_forward_unpaid_deductions cannot be null');
        }
        $this->container['carry_forward_unpaid_deductions'] = $carry_forward_unpaid_deductions;

        return $this;
    }

    /**
     * Gets carry_forward_unused_preserved_earnings
     *
     * @return bool|null
     */
    public function getCarryForwardUnusedPreservedEarnings()
    {
        return $this->container['carry_forward_unused_preserved_earnings'];
    }

    /**
     * Sets carry_forward_unused_preserved_earnings
     *
     * @param bool|null $carry_forward_unused_preserved_earnings 
     *
     * @return self
     */
    public function setCarryForwardUnusedPreservedEarnings($carry_forward_unused_preserved_earnings)
    {
        if (is_null($carry_forward_unused_preserved_earnings)) {
            throw new \InvalidArgumentException('non-nullable carry_forward_unused_preserved_earnings cannot be null');
        }
        $this->container['carry_forward_unused_preserved_earnings'] = $carry_forward_unused_preserved_earnings;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference 
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_reference cannot be null');
        }
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets preserved_earnings
     *
     * @return string|null
     */
    public function getPreservedEarnings()
    {
        return $this->container['preserved_earnings'];
    }

    /**
     * Sets preserved_earnings
     *
     * @param string|null $preserved_earnings 
     *
     * @return self
     */
    public function setPreservedEarnings($preserved_earnings)
    {
        if (is_null($preserved_earnings)) {
            throw new \InvalidArgumentException('non-nullable preserved_earnings cannot be null');
        }
        $allowedValues = $this->getPreservedEarningsAllowableValues();
        if (!in_array($preserved_earnings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'preserved_earnings', must be one of '%s'",
                    $preserved_earnings,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preserved_earnings'] = $preserved_earnings;

        return $this;
    }

    /**
     * Gets preserved_earnings_amount
     *
     * @return float|null
     */
    public function getPreservedEarningsAmount()
    {
        return $this->container['preserved_earnings_amount'];
    }

    /**
     * Sets preserved_earnings_amount
     *
     * @param float|null $preserved_earnings_amount 
     *
     * @return self
     */
    public function setPreservedEarningsAmount($preserved_earnings_amount)
    {
        if (is_null($preserved_earnings_amount)) {
            throw new \InvalidArgumentException('non-nullable preserved_earnings_amount cannot be null');
        }
        $this->container['preserved_earnings_amount'] = $preserved_earnings_amount;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return int|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param int|null $additional_data 
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority 
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted 
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date 
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date 
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            throw new \InvalidArgumentException('non-nullable from_date cannot be null');
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets maximum_amount_paid
     *
     * @return float|null
     */
    public function getMaximumAmountPaid()
    {
        return $this->container['maximum_amount_paid'];
    }

    /**
     * Sets maximum_amount_paid
     *
     * @param float|null $maximum_amount_paid 
     *
     * @return self
     */
    public function setMaximumAmountPaid($maximum_amount_paid)
    {
        if (is_null($maximum_amount_paid)) {
            throw new \InvalidArgumentException('non-nullable maximum_amount_paid cannot be null');
        }
        $this->container['maximum_amount_paid'] = $maximum_amount_paid;

        return $this;
    }

    /**
     * Gets total_amount_paid
     *
     * @return float|null
     */
    public function getTotalAmountPaid()
    {
        return $this->container['total_amount_paid'];
    }

    /**
     * Sets total_amount_paid
     *
     * @param float|null $total_amount_paid 
     *
     * @return self
     */
    public function setTotalAmountPaid($total_amount_paid)
    {
        if (is_null($total_amount_paid)) {
            throw new \InvalidArgumentException('non-nullable total_amount_paid cannot be null');
        }
        $this->container['total_amount_paid'] = $total_amount_paid;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active 
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


