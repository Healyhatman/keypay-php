<?php
/**
 * RecoverPasswordModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RecoverPasswordModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecoverPasswordModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecoverPasswordModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'username' => 'string',
        'message_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'username' => null,
        'message_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'message_type' => 'messageType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'message_type' => 'setMessageType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'message_type' => 'getMessageType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_TYPE_NEW_PAY_SLIP_AVAILABLE = 'NewPaySlipAvailable';
    const MESSAGE_TYPE_NEW_USER = 'NewUser';
    const MESSAGE_TYPE_RECOVER_PASSWORD = 'RecoverPassword';
    const MESSAGE_TYPE_EMPLOYEE_ACCESS = 'EmployeeAccess';
    const MESSAGE_TYPE_BUSINESS_ACCESS = 'BusinessAccess';
    const MESSAGE_TYPE_CANCEL_ACCOUNT = 'CancelAccount';
    const MESSAGE_TYPE_INVOICE = 'Invoice';
    const MESSAGE_TYPE_INVOICE_PAYMENT_SUCCESS_NOTIFICATION = 'InvoicePaymentSuccessNotification';
    const MESSAGE_TYPE_AUTOMATED_PASSWORD = 'AutomatedPassword';
    const MESSAGE_TYPE_LEAVE_REQUEST_NOTIFICATION = 'LeaveRequestNotification';
    const MESSAGE_TYPE_RESTRICTED_ACCESS = 'RestrictedAccess';
    const MESSAGE_TYPE_RESEND_PAYSLIP = 'ResendPayslip';
    const MESSAGE_TYPE_PAYMENT_SUMMARY_AVAILABLE = 'PaymentSummaryAvailable';
    const MESSAGE_TYPE_SUPER_PAYMENTS_UPDATE_RESULTS = 'SuperPaymentsUpdateResults';
    const MESSAGE_TYPE_INVOICE_PAYMENT_FAILED_NOTIFICATION = 'InvoicePaymentFailedNotification';
    const MESSAGE_TYPE_NEW_SHIFTS_PUBLISHED = 'NewShiftsPublished';
    const MESSAGE_TYPE_SHIFTS_UNPUBLISHED = 'ShiftsUnpublished';
    const MESSAGE_TYPE_SHIFT_DECLINED = 'ShiftDeclined';
    const MESSAGE_TYPE_KIOSK_ACCESS_GRANTED = 'KioskAccessGranted';
    const MESSAGE_TYPE_DAILY_NOTIFICATIONS = 'DailyNotifications';
    const MESSAGE_TYPE_BSB_DATA_IMPORTED = 'BsbDataImported';
    const MESSAGE_TYPE_INVOICEE_CARD_DETAILS_REMOVED = 'InvoiceeCardDetailsRemoved';
    const MESSAGE_TYPE_WHITE_LABEL_MANAGER_ACCESS = 'WhiteLabelManagerAccess';
    const MESSAGE_TYPE_RESELLER_ACCESS = 'ResellerAccess';
    const MESSAGE_TYPE_DIRECT_DEPOSIT_REMINDER = 'DirectDepositReminder';
    const MESSAGE_TYPE_EXPENSE_REQUEST_NOTIFICATION = 'ExpenseRequestNotification';
    const MESSAGE_TYPE_UNAVAILABILITY_NOTIFICATION = 'UnavailabilityNotification';
    const MESSAGE_TYPE_REPORT_PACK_GENERATED = 'ReportPackGenerated';
    const MESSAGE_TYPE_REPORT_PACK_ERROR = 'ReportPackError';
    const MESSAGE_TYPE_SYSTEM_PUBLIC_HOLIDAY_IMPORT = 'SystemPublicHolidayImport';
    const MESSAGE_TYPE_TIMESHEET_REJECTED = 'TimesheetRejected';
    const MESSAGE_TYPE_SHIFT_REPUBLISHED = 'ShiftRepublished';
    const MESSAGE_TYPE_PENDING_SHIFTS_REMINDER = 'PendingShiftsReminder';
    const MESSAGE_TYPE_EMPLOYEE_SHIFT_ACTION_TIMEOUT = 'EmployeeShiftActionTimeout';
    const MESSAGE_TYPE_INITIATE_EMPLOYEE_ONBOARDING = 'InitiateEmployeeOnboarding';
    const MESSAGE_TYPE_FOLLOW_UP_EMPLOYEE_ONBOARDING = 'FollowUpEmployeeOnboarding';
    const MESSAGE_TYPE_COMPLETE_EMPLOYEE_ONBOARDING = 'CompleteEmployeeOnboarding';
    const MESSAGE_TYPE_NEW_SHIFTS_PRE_ACCEPTED = 'NewShiftsPreAccepted';
    const MESSAGE_TYPE_PAY_RUN_TASK_NOTIFICATION = 'PayRunTaskNotification';
    const MESSAGE_TYPE_SHIFT_SWAP_CANCELLED = 'ShiftSwapCancelled';
    const MESSAGE_TYPE_BULK_SHIFT_SWAPS_CANCELLED = 'BulkShiftSwapsCancelled';
    const MESSAGE_TYPE_SHIFT_SWAP_AWAITING_APPROVAL = 'ShiftSwapAwaitingApproval';
    const MESSAGE_TYPE_SHIFT_SWAP_PROPOSED = 'ShiftSwapProposed';
    const MESSAGE_TYPE_SHIFT_SWAP_ACCEPTED = 'ShiftSwapAccepted';
    const MESSAGE_TYPE_SHIFT_SWAP_DECLINED = 'ShiftSwapDeclined';
    const MESSAGE_TYPE_SHIFT_SWAP_REJECTED = 'ShiftSwapRejected';
    const MESSAGE_TYPE_SHIFT_SWAP_APPROVED = 'ShiftSwapApproved';
    const MESSAGE_TYPE_P60_AVAILABLE = 'P60Available';
    const MESSAGE_TYPE_P60_ERROR = 'P60Error';
    const MESSAGE_TYPE_LEAVING_EMPLOYEE_FORM_NOTIFICATION = 'LeavingEmployeeFormNotification';
    const MESSAGE_TYPE_AUTO_ENROLMENT_NOTIFICATION = 'AutoEnrolmentNotification';
    const MESSAGE_TYPE_LODGEMENT_NOTIFICATION = 'LodgementNotification';
    const MESSAGE_TYPE_TWO_FACTOR_LOGIN = 'TwoFactorLogin';
    const MESSAGE_TYPE_TWO_FACTOR_CHALLENGE = 'TwoFactorChallenge';
    const MESSAGE_TYPE_CONFIRM_EMAIL_ADDRESS = 'ConfirmEmailAddress';
    const MESSAGE_TYPE_CONFIRM_MOBILE_PHONE = 'ConfirmMobilePhone';
    const MESSAGE_TYPE_DOCUMENT_NOTIFICATION_INITIAL = 'DocumentNotificationInitial';
    const MESSAGE_TYPE_DOCUMENT_NOTIFICATION_INITIAL_WITH_ACKNOWLEDGEMENT = 'DocumentNotificationInitialWithAcknowledgement';
    const MESSAGE_TYPE_DOCUMENT_NOTIFICATION_REMINDER = 'DocumentNotificationReminder';
    const MESSAGE_TYPE_DOCUMENT_ACKNOWLEDGED_NOTIFICATION = 'DocumentAcknowledgedNotification';
    const MESSAGE_TYPE_INITIATE_EMPLOYEE_ONBOARDING_ADMIN = 'InitiateEmployeeOnboardingAdmin';
    const MESSAGE_TYPE_PAY_EVENT_REQUEST_AUTHORITY = 'PayEventRequestAuthority';
    const MESSAGE_TYPE_PAY_EVENT_APPROVED_OR_REJECTED = 'PayEventApprovedOrRejected';
    const MESSAGE_TYPE_SHIFT_BID_ACCEPTED = 'ShiftBidAccepted';
    const MESSAGE_TYPE_EMPLOYEE_DETAILS_UPDATED = 'EmployeeDetailsUpdated';
    const MESSAGE_TYPE_BANK_ACCOUNT_DETAILS_UPDATED = 'BankAccountDetailsUpdated';
    const MESSAGE_TYPE_SUPER_DETAILS_UPDATED = 'SuperDetailsUpdated';
    const MESSAGE_TYPE_MANAGER_SHIFT_ACTION_TIMEOUT = 'ManagerShiftActionTimeout';
    const MESSAGE_TYPE_SUPER_FUND_NOTIFICATION_NEW_MEMBER = 'SuperFundNotificationNewMember';
    const MESSAGE_TYPE_SUPER_PAYMENT_DISHONOUR = 'SuperPaymentDishonour';
    const MESSAGE_TYPE_KIWI_SAVER_DETAILS_UPDATED = 'KiwiSaverDetailsUpdated';
    const MESSAGE_TYPE_AUTO_ENROLMENT_POSTPONEMENT_NOTIFICATION = 'AutoEnrolmentPostponementNotification';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_CREATION = 'AutomatedPayRunErrorCreation';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_PROCESSING = 'AutomatedPayRunErrorProcessing';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_FINALISATION = 'AutomatedPayRunErrorFinalisation';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_POST_FINALISE = 'AutomatedPayRunErrorPostFinalise';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_SUCCESS_AND_FINALISED = 'AutomatedPayRunSuccessAndFinalised';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_SUCCESS_NOT_FINALISED = 'AutomatedPayRunSuccessNotFinalised';
    const MESSAGE_TYPE_AUTOMATED_PAY_RUN_CREATION = 'AutomatedPayRunCreation';
    const MESSAGE_TYPE_PAY_RUN_USAGE_BILLING_FAILURES = 'PayRunUsageBillingFailures';
    const MESSAGE_TYPE_INCOME_STATEMENT_AVAILABLE = 'IncomeStatementAvailable';
    const MESSAGE_TYPE_MALICIOUS_FILE_NOTIFICATION_ADMIN = 'MaliciousFileNotificationAdmin';
    const MESSAGE_TYPE_USER_ACCOUNT_LOCKED = 'UserAccountLocked';
    const MESSAGE_TYPE_MALICIOUS_FILE_NOTIFICATION_EMPLOYEE = 'MaliciousFileNotificationEmployee';
    const MESSAGE_TYPE_SUPER_FUND_REFUND_NOTIFICATION = 'SuperFundRefundNotification';
    const MESSAGE_TYPE_SUPER_BATCH_CANCELLED_NOTIFICATION = 'SuperBatchCancelledNotification';
    const MESSAGE_TYPE_JOB_KEEPER_EMPLOYEE_NOMINATION = 'JobKeeperEmployeeNomination';
    const MESSAGE_TYPE_HMRC_PAYMENT_REMINDER = 'HmrcPaymentReminder';
    const MESSAGE_TYPE_IRAS_FORM_AVAILABLE = 'IrasFormAvailable';
    const MESSAGE_TYPE_HMRC_PAYMENT_REMINDER_SEND_FAILURE = 'HmrcPaymentReminderSendFailure';
    const MESSAGE_TYPE_SYNC_CANCELLED_SUPER_BATCHES_FROM_BEAM = 'SyncCancelledSuperBatchesFromBeam';
    const MESSAGE_TYPE_EA_FORM_INCOME_TAX_AVAILABLE = 'EAFormIncomeTaxAvailable';
    const MESSAGE_TYPE_PCB2_FORM_AVAILABLE = 'PCB2FormAvailable';
    const MESSAGE_TYPE_JOB_MAKER_EMPLOYEE_NOMINATION = 'JobMakerEmployeeNomination';
    const MESSAGE_TYPE_EARNINGS_CERTIFICATE_AVAILABLE = 'EarningsCertificateAvailable';
    const MESSAGE_TYPE_P11D_AVAILABLE = 'P11dAvailable';
    const MESSAGE_TYPE_PAY_RUN_APPROVAL_NOTIFICATION = 'PayRunApprovalNotification';
    const MESSAGE_TYPE_PAY_RUN_APPROVAL_REMINDER = 'PayRunApprovalReminder';
    const MESSAGE_TYPE_PAY_RUN_STATUS_CHANGED = 'PayRunStatusChanged';
    const MESSAGE_TYPE_QUALIFICATION_UPDATED_NOTIFICATION = 'QualificationUpdatedNotification';
    const MESSAGE_TYPE_QUALIFICATION_EXPIRING_NOTIFICATION = 'QualificationExpiringNotification';
    const MESSAGE_TYPE_QUALIFICATION_EXPIRED_NOTIFICATION = 'QualificationExpiredNotification';
    const MESSAGE_TYPE_CREDIT_CARD_EXPIRING_REMINDER = 'CreditCardExpiringReminder';
    const MESSAGE_TYPE_RESEND_PAYMENT_AND_DEDUCTION_STATEMENT = 'ResendPaymentAndDeductionStatement';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_NEW_PAY_SLIP_AVAILABLE,
            self::MESSAGE_TYPE_NEW_USER,
            self::MESSAGE_TYPE_RECOVER_PASSWORD,
            self::MESSAGE_TYPE_EMPLOYEE_ACCESS,
            self::MESSAGE_TYPE_BUSINESS_ACCESS,
            self::MESSAGE_TYPE_CANCEL_ACCOUNT,
            self::MESSAGE_TYPE_INVOICE,
            self::MESSAGE_TYPE_INVOICE_PAYMENT_SUCCESS_NOTIFICATION,
            self::MESSAGE_TYPE_AUTOMATED_PASSWORD,
            self::MESSAGE_TYPE_LEAVE_REQUEST_NOTIFICATION,
            self::MESSAGE_TYPE_RESTRICTED_ACCESS,
            self::MESSAGE_TYPE_RESEND_PAYSLIP,
            self::MESSAGE_TYPE_PAYMENT_SUMMARY_AVAILABLE,
            self::MESSAGE_TYPE_SUPER_PAYMENTS_UPDATE_RESULTS,
            self::MESSAGE_TYPE_INVOICE_PAYMENT_FAILED_NOTIFICATION,
            self::MESSAGE_TYPE_NEW_SHIFTS_PUBLISHED,
            self::MESSAGE_TYPE_SHIFTS_UNPUBLISHED,
            self::MESSAGE_TYPE_SHIFT_DECLINED,
            self::MESSAGE_TYPE_KIOSK_ACCESS_GRANTED,
            self::MESSAGE_TYPE_DAILY_NOTIFICATIONS,
            self::MESSAGE_TYPE_BSB_DATA_IMPORTED,
            self::MESSAGE_TYPE_INVOICEE_CARD_DETAILS_REMOVED,
            self::MESSAGE_TYPE_WHITE_LABEL_MANAGER_ACCESS,
            self::MESSAGE_TYPE_RESELLER_ACCESS,
            self::MESSAGE_TYPE_DIRECT_DEPOSIT_REMINDER,
            self::MESSAGE_TYPE_EXPENSE_REQUEST_NOTIFICATION,
            self::MESSAGE_TYPE_UNAVAILABILITY_NOTIFICATION,
            self::MESSAGE_TYPE_REPORT_PACK_GENERATED,
            self::MESSAGE_TYPE_REPORT_PACK_ERROR,
            self::MESSAGE_TYPE_SYSTEM_PUBLIC_HOLIDAY_IMPORT,
            self::MESSAGE_TYPE_TIMESHEET_REJECTED,
            self::MESSAGE_TYPE_SHIFT_REPUBLISHED,
            self::MESSAGE_TYPE_PENDING_SHIFTS_REMINDER,
            self::MESSAGE_TYPE_EMPLOYEE_SHIFT_ACTION_TIMEOUT,
            self::MESSAGE_TYPE_INITIATE_EMPLOYEE_ONBOARDING,
            self::MESSAGE_TYPE_FOLLOW_UP_EMPLOYEE_ONBOARDING,
            self::MESSAGE_TYPE_COMPLETE_EMPLOYEE_ONBOARDING,
            self::MESSAGE_TYPE_NEW_SHIFTS_PRE_ACCEPTED,
            self::MESSAGE_TYPE_PAY_RUN_TASK_NOTIFICATION,
            self::MESSAGE_TYPE_SHIFT_SWAP_CANCELLED,
            self::MESSAGE_TYPE_BULK_SHIFT_SWAPS_CANCELLED,
            self::MESSAGE_TYPE_SHIFT_SWAP_AWAITING_APPROVAL,
            self::MESSAGE_TYPE_SHIFT_SWAP_PROPOSED,
            self::MESSAGE_TYPE_SHIFT_SWAP_ACCEPTED,
            self::MESSAGE_TYPE_SHIFT_SWAP_DECLINED,
            self::MESSAGE_TYPE_SHIFT_SWAP_REJECTED,
            self::MESSAGE_TYPE_SHIFT_SWAP_APPROVED,
            self::MESSAGE_TYPE_P60_AVAILABLE,
            self::MESSAGE_TYPE_P60_ERROR,
            self::MESSAGE_TYPE_LEAVING_EMPLOYEE_FORM_NOTIFICATION,
            self::MESSAGE_TYPE_AUTO_ENROLMENT_NOTIFICATION,
            self::MESSAGE_TYPE_LODGEMENT_NOTIFICATION,
            self::MESSAGE_TYPE_TWO_FACTOR_LOGIN,
            self::MESSAGE_TYPE_TWO_FACTOR_CHALLENGE,
            self::MESSAGE_TYPE_CONFIRM_EMAIL_ADDRESS,
            self::MESSAGE_TYPE_CONFIRM_MOBILE_PHONE,
            self::MESSAGE_TYPE_DOCUMENT_NOTIFICATION_INITIAL,
            self::MESSAGE_TYPE_DOCUMENT_NOTIFICATION_INITIAL_WITH_ACKNOWLEDGEMENT,
            self::MESSAGE_TYPE_DOCUMENT_NOTIFICATION_REMINDER,
            self::MESSAGE_TYPE_DOCUMENT_ACKNOWLEDGED_NOTIFICATION,
            self::MESSAGE_TYPE_INITIATE_EMPLOYEE_ONBOARDING_ADMIN,
            self::MESSAGE_TYPE_PAY_EVENT_REQUEST_AUTHORITY,
            self::MESSAGE_TYPE_PAY_EVENT_APPROVED_OR_REJECTED,
            self::MESSAGE_TYPE_SHIFT_BID_ACCEPTED,
            self::MESSAGE_TYPE_EMPLOYEE_DETAILS_UPDATED,
            self::MESSAGE_TYPE_BANK_ACCOUNT_DETAILS_UPDATED,
            self::MESSAGE_TYPE_SUPER_DETAILS_UPDATED,
            self::MESSAGE_TYPE_MANAGER_SHIFT_ACTION_TIMEOUT,
            self::MESSAGE_TYPE_SUPER_FUND_NOTIFICATION_NEW_MEMBER,
            self::MESSAGE_TYPE_SUPER_PAYMENT_DISHONOUR,
            self::MESSAGE_TYPE_KIWI_SAVER_DETAILS_UPDATED,
            self::MESSAGE_TYPE_AUTO_ENROLMENT_POSTPONEMENT_NOTIFICATION,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_CREATION,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_PROCESSING,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_FINALISATION,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_ERROR_POST_FINALISE,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_SUCCESS_AND_FINALISED,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_SUCCESS_NOT_FINALISED,
            self::MESSAGE_TYPE_AUTOMATED_PAY_RUN_CREATION,
            self::MESSAGE_TYPE_PAY_RUN_USAGE_BILLING_FAILURES,
            self::MESSAGE_TYPE_INCOME_STATEMENT_AVAILABLE,
            self::MESSAGE_TYPE_MALICIOUS_FILE_NOTIFICATION_ADMIN,
            self::MESSAGE_TYPE_USER_ACCOUNT_LOCKED,
            self::MESSAGE_TYPE_MALICIOUS_FILE_NOTIFICATION_EMPLOYEE,
            self::MESSAGE_TYPE_SUPER_FUND_REFUND_NOTIFICATION,
            self::MESSAGE_TYPE_SUPER_BATCH_CANCELLED_NOTIFICATION,
            self::MESSAGE_TYPE_JOB_KEEPER_EMPLOYEE_NOMINATION,
            self::MESSAGE_TYPE_HMRC_PAYMENT_REMINDER,
            self::MESSAGE_TYPE_IRAS_FORM_AVAILABLE,
            self::MESSAGE_TYPE_HMRC_PAYMENT_REMINDER_SEND_FAILURE,
            self::MESSAGE_TYPE_SYNC_CANCELLED_SUPER_BATCHES_FROM_BEAM,
            self::MESSAGE_TYPE_EA_FORM_INCOME_TAX_AVAILABLE,
            self::MESSAGE_TYPE_PCB2_FORM_AVAILABLE,
            self::MESSAGE_TYPE_JOB_MAKER_EMPLOYEE_NOMINATION,
            self::MESSAGE_TYPE_EARNINGS_CERTIFICATE_AVAILABLE,
            self::MESSAGE_TYPE_P11D_AVAILABLE,
            self::MESSAGE_TYPE_PAY_RUN_APPROVAL_NOTIFICATION,
            self::MESSAGE_TYPE_PAY_RUN_APPROVAL_REMINDER,
            self::MESSAGE_TYPE_PAY_RUN_STATUS_CHANGED,
            self::MESSAGE_TYPE_QUALIFICATION_UPDATED_NOTIFICATION,
            self::MESSAGE_TYPE_QUALIFICATION_EXPIRING_NOTIFICATION,
            self::MESSAGE_TYPE_QUALIFICATION_EXPIRED_NOTIFICATION,
            self::MESSAGE_TYPE_CREDIT_CARD_EXPIRING_REMINDER,
            self::MESSAGE_TYPE_RESEND_PAYMENT_AND_DEDUCTION_STATEMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['message_type']) && !in_array($this->container['message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Required
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type 
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($message_type) && !in_array($message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


