<?php
/**
 * AuGrossToNetResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuGrossToNetResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuGrossToNetResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuGrossToNetResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payg' => 'float',
        'sfss' => 'float',
        'help' => 'float',
        'net_earnings' => 'float',
        'sgc' => 'float',
        'employer_contribution' => 'float',
        'non_resc_employer_contribution' => 'float',
        'total_gross_plus_super' => 'float',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'primary_location_id' => 'int',
        'primary_location' => 'string',
        'external_id' => 'string',
        'total_hours' => 'float',
        'gross_earnings' => 'array<string,float>',
        'total_gross_earnings' => 'float',
        'total_tax_exempt_earnings' => 'float',
        'pre_tax_deductions' => 'array<string,float>',
        'total_pre_tax_deductions' => 'float',
        'taxable_earnings' => 'float',
        'post_tax_deductions' => 'array<string,float>',
        'total_post_tax_deductions' => 'float',
        'expenses' => 'array<string,float>',
        'total_expenses' => 'float',
        'bank_payments' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payg' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'net_earnings' => 'double',
        'sgc' => 'double',
        'employer_contribution' => 'double',
        'non_resc_employer_contribution' => 'double',
        'total_gross_plus_super' => 'double',
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'primary_location_id' => 'int32',
        'primary_location' => null,
        'external_id' => null,
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'total_gross_earnings' => 'double',
        'total_tax_exempt_earnings' => 'double',
        'pre_tax_deductions' => 'double',
        'total_pre_tax_deductions' => 'double',
        'taxable_earnings' => 'double',
        'post_tax_deductions' => 'double',
        'total_post_tax_deductions' => 'double',
        'expenses' => 'double',
        'total_expenses' => 'double',
        'bank_payments' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payg' => false,
		'sfss' => false,
		'help' => false,
		'net_earnings' => false,
		'sgc' => false,
		'employer_contribution' => false,
		'non_resc_employer_contribution' => false,
		'total_gross_plus_super' => false,
		'employee_id' => false,
		'first_name' => false,
		'surname' => false,
		'primary_location_id' => false,
		'primary_location' => false,
		'external_id' => false,
		'total_hours' => false,
		'gross_earnings' => false,
		'total_gross_earnings' => false,
		'total_tax_exempt_earnings' => false,
		'pre_tax_deductions' => false,
		'total_pre_tax_deductions' => false,
		'taxable_earnings' => false,
		'post_tax_deductions' => false,
		'total_post_tax_deductions' => false,
		'expenses' => false,
		'total_expenses' => false,
		'bank_payments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payg' => 'payg',
        'sfss' => 'sfss',
        'help' => 'help',
        'net_earnings' => 'netEarnings',
        'sgc' => 'sgc',
        'employer_contribution' => 'employerContribution',
        'non_resc_employer_contribution' => 'nonRescEmployerContribution',
        'total_gross_plus_super' => 'totalGrossPlusSuper',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'primary_location_id' => 'primaryLocationId',
        'primary_location' => 'primaryLocation',
        'external_id' => 'externalId',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'total_gross_earnings' => 'totalGrossEarnings',
        'total_tax_exempt_earnings' => 'totalTaxExemptEarnings',
        'pre_tax_deductions' => 'preTaxDeductions',
        'total_pre_tax_deductions' => 'totalPreTaxDeductions',
        'taxable_earnings' => 'taxableEarnings',
        'post_tax_deductions' => 'postTaxDeductions',
        'total_post_tax_deductions' => 'totalPostTaxDeductions',
        'expenses' => 'expenses',
        'total_expenses' => 'totalExpenses',
        'bank_payments' => 'bankPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payg' => 'setPayg',
        'sfss' => 'setSfss',
        'help' => 'setHelp',
        'net_earnings' => 'setNetEarnings',
        'sgc' => 'setSgc',
        'employer_contribution' => 'setEmployerContribution',
        'non_resc_employer_contribution' => 'setNonRescEmployerContribution',
        'total_gross_plus_super' => 'setTotalGrossPlusSuper',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'primary_location_id' => 'setPrimaryLocationId',
        'primary_location' => 'setPrimaryLocation',
        'external_id' => 'setExternalId',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'total_gross_earnings' => 'setTotalGrossEarnings',
        'total_tax_exempt_earnings' => 'setTotalTaxExemptEarnings',
        'pre_tax_deductions' => 'setPreTaxDeductions',
        'total_pre_tax_deductions' => 'setTotalPreTaxDeductions',
        'taxable_earnings' => 'setTaxableEarnings',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'total_post_tax_deductions' => 'setTotalPostTaxDeductions',
        'expenses' => 'setExpenses',
        'total_expenses' => 'setTotalExpenses',
        'bank_payments' => 'setBankPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payg' => 'getPayg',
        'sfss' => 'getSfss',
        'help' => 'getHelp',
        'net_earnings' => 'getNetEarnings',
        'sgc' => 'getSgc',
        'employer_contribution' => 'getEmployerContribution',
        'non_resc_employer_contribution' => 'getNonRescEmployerContribution',
        'total_gross_plus_super' => 'getTotalGrossPlusSuper',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'primary_location_id' => 'getPrimaryLocationId',
        'primary_location' => 'getPrimaryLocation',
        'external_id' => 'getExternalId',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'total_gross_earnings' => 'getTotalGrossEarnings',
        'total_tax_exempt_earnings' => 'getTotalTaxExemptEarnings',
        'pre_tax_deductions' => 'getPreTaxDeductions',
        'total_pre_tax_deductions' => 'getTotalPreTaxDeductions',
        'taxable_earnings' => 'getTaxableEarnings',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'total_post_tax_deductions' => 'getTotalPostTaxDeductions',
        'expenses' => 'getExpenses',
        'total_expenses' => 'getTotalExpenses',
        'bank_payments' => 'getBankPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payg', $data ?? [], null);
        $this->setIfExists('sfss', $data ?? [], null);
        $this->setIfExists('help', $data ?? [], null);
        $this->setIfExists('net_earnings', $data ?? [], null);
        $this->setIfExists('sgc', $data ?? [], null);
        $this->setIfExists('employer_contribution', $data ?? [], null);
        $this->setIfExists('non_resc_employer_contribution', $data ?? [], null);
        $this->setIfExists('total_gross_plus_super', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('primary_location_id', $data ?? [], null);
        $this->setIfExists('primary_location', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('gross_earnings', $data ?? [], null);
        $this->setIfExists('total_gross_earnings', $data ?? [], null);
        $this->setIfExists('total_tax_exempt_earnings', $data ?? [], null);
        $this->setIfExists('pre_tax_deductions', $data ?? [], null);
        $this->setIfExists('total_pre_tax_deductions', $data ?? [], null);
        $this->setIfExists('taxable_earnings', $data ?? [], null);
        $this->setIfExists('post_tax_deductions', $data ?? [], null);
        $this->setIfExists('total_post_tax_deductions', $data ?? [], null);
        $this->setIfExists('expenses', $data ?? [], null);
        $this->setIfExists('total_expenses', $data ?? [], null);
        $this->setIfExists('bank_payments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payg
     *
     * @return float|null
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param float|null $payg 
     *
     * @return self
     */
    public function setPayg($payg)
    {
        if (is_null($payg)) {
            throw new \InvalidArgumentException('non-nullable payg cannot be null');
        }
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets sfss
     *
     * @return float|null
     */
    public function getSfss()
    {
        return $this->container['sfss'];
    }

    /**
     * Sets sfss
     *
     * @param float|null $sfss 
     *
     * @return self
     */
    public function setSfss($sfss)
    {
        if (is_null($sfss)) {
            throw new \InvalidArgumentException('non-nullable sfss cannot be null');
        }
        $this->container['sfss'] = $sfss;

        return $this;
    }

    /**
     * Gets help
     *
     * @return float|null
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param float|null $help 
     *
     * @return self
     */
    public function setHelp($help)
    {
        if (is_null($help)) {
            throw new \InvalidArgumentException('non-nullable help cannot be null');
        }
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float|null
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float|null $net_earnings 
     *
     * @return self
     */
    public function setNetEarnings($net_earnings)
    {
        if (is_null($net_earnings)) {
            throw new \InvalidArgumentException('non-nullable net_earnings cannot be null');
        }
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets sgc
     *
     * @return float|null
     */
    public function getSgc()
    {
        return $this->container['sgc'];
    }

    /**
     * Sets sgc
     *
     * @param float|null $sgc 
     *
     * @return self
     */
    public function setSgc($sgc)
    {
        if (is_null($sgc)) {
            throw new \InvalidArgumentException('non-nullable sgc cannot be null');
        }
        $this->container['sgc'] = $sgc;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return float|null
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param float|null $employer_contribution 
     *
     * @return self
     */
    public function setEmployerContribution($employer_contribution)
    {
        if (is_null($employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable employer_contribution cannot be null');
        }
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets non_resc_employer_contribution
     *
     * @return float|null
     */
    public function getNonRescEmployerContribution()
    {
        return $this->container['non_resc_employer_contribution'];
    }

    /**
     * Sets non_resc_employer_contribution
     *
     * @param float|null $non_resc_employer_contribution 
     *
     * @return self
     */
    public function setNonRescEmployerContribution($non_resc_employer_contribution)
    {
        if (is_null($non_resc_employer_contribution)) {
            throw new \InvalidArgumentException('non-nullable non_resc_employer_contribution cannot be null');
        }
        $this->container['non_resc_employer_contribution'] = $non_resc_employer_contribution;

        return $this;
    }

    /**
     * Gets total_gross_plus_super
     *
     * @return float|null
     */
    public function getTotalGrossPlusSuper()
    {
        return $this->container['total_gross_plus_super'];
    }

    /**
     * Sets total_gross_plus_super
     *
     * @param float|null $total_gross_plus_super 
     *
     * @return self
     */
    public function setTotalGrossPlusSuper($total_gross_plus_super)
    {
        if (is_null($total_gross_plus_super)) {
            throw new \InvalidArgumentException('non-nullable total_gross_plus_super cannot be null');
        }
        $this->container['total_gross_plus_super'] = $total_gross_plus_super;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets primary_location_id
     *
     * @return int|null
     */
    public function getPrimaryLocationId()
    {
        return $this->container['primary_location_id'];
    }

    /**
     * Sets primary_location_id
     *
     * @param int|null $primary_location_id 
     *
     * @return self
     */
    public function setPrimaryLocationId($primary_location_id)
    {
        if (is_null($primary_location_id)) {
            throw new \InvalidArgumentException('non-nullable primary_location_id cannot be null');
        }
        $this->container['primary_location_id'] = $primary_location_id;

        return $this;
    }

    /**
     * Gets primary_location
     *
     * @return string|null
     */
    public function getPrimaryLocation()
    {
        return $this->container['primary_location'];
    }

    /**
     * Sets primary_location
     *
     * @param string|null $primary_location 
     *
     * @return self
     */
    public function setPrimaryLocation($primary_location)
    {
        if (is_null($primary_location)) {
            throw new \InvalidArgumentException('non-nullable primary_location cannot be null');
        }
        $this->container['primary_location'] = $primary_location;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours 
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return array<string,float>|null
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param array<string,float>|null $gross_earnings 
     *
     * @return self
     */
    public function setGrossEarnings($gross_earnings)
    {
        if (is_null($gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable gross_earnings cannot be null');
        }
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets total_gross_earnings
     *
     * @return float|null
     */
    public function getTotalGrossEarnings()
    {
        return $this->container['total_gross_earnings'];
    }

    /**
     * Sets total_gross_earnings
     *
     * @param float|null $total_gross_earnings 
     *
     * @return self
     */
    public function setTotalGrossEarnings($total_gross_earnings)
    {
        if (is_null($total_gross_earnings)) {
            throw new \InvalidArgumentException('non-nullable total_gross_earnings cannot be null');
        }
        $this->container['total_gross_earnings'] = $total_gross_earnings;

        return $this;
    }

    /**
     * Gets total_tax_exempt_earnings
     *
     * @return float|null
     */
    public function getTotalTaxExemptEarnings()
    {
        return $this->container['total_tax_exempt_earnings'];
    }

    /**
     * Sets total_tax_exempt_earnings
     *
     * @param float|null $total_tax_exempt_earnings 
     *
     * @return self
     */
    public function setTotalTaxExemptEarnings($total_tax_exempt_earnings)
    {
        if (is_null($total_tax_exempt_earnings)) {
            throw new \InvalidArgumentException('non-nullable total_tax_exempt_earnings cannot be null');
        }
        $this->container['total_tax_exempt_earnings'] = $total_tax_exempt_earnings;

        return $this;
    }

    /**
     * Gets pre_tax_deductions
     *
     * @return array<string,float>|null
     */
    public function getPreTaxDeductions()
    {
        return $this->container['pre_tax_deductions'];
    }

    /**
     * Sets pre_tax_deductions
     *
     * @param array<string,float>|null $pre_tax_deductions 
     *
     * @return self
     */
    public function setPreTaxDeductions($pre_tax_deductions)
    {
        if (is_null($pre_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable pre_tax_deductions cannot be null');
        }
        $this->container['pre_tax_deductions'] = $pre_tax_deductions;

        return $this;
    }

    /**
     * Gets total_pre_tax_deductions
     *
     * @return float|null
     */
    public function getTotalPreTaxDeductions()
    {
        return $this->container['total_pre_tax_deductions'];
    }

    /**
     * Sets total_pre_tax_deductions
     *
     * @param float|null $total_pre_tax_deductions 
     *
     * @return self
     */
    public function setTotalPreTaxDeductions($total_pre_tax_deductions)
    {
        if (is_null($total_pre_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable total_pre_tax_deductions cannot be null');
        }
        $this->container['total_pre_tax_deductions'] = $total_pre_tax_deductions;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float|null
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float|null $taxable_earnings 
     *
     * @return self
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        if (is_null($taxable_earnings)) {
            throw new \InvalidArgumentException('non-nullable taxable_earnings cannot be null');
        }
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return array<string,float>|null
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param array<string,float>|null $post_tax_deductions 
     *
     * @return self
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        if (is_null($post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions cannot be null');
        }
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets total_post_tax_deductions
     *
     * @return float|null
     */
    public function getTotalPostTaxDeductions()
    {
        return $this->container['total_post_tax_deductions'];
    }

    /**
     * Sets total_post_tax_deductions
     *
     * @param float|null $total_post_tax_deductions 
     *
     * @return self
     */
    public function setTotalPostTaxDeductions($total_post_tax_deductions)
    {
        if (is_null($total_post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable total_post_tax_deductions cannot be null');
        }
        $this->container['total_post_tax_deductions'] = $total_post_tax_deductions;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return array<string,float>|null
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param array<string,float>|null $expenses 
     *
     * @return self
     */
    public function setExpenses($expenses)
    {
        if (is_null($expenses)) {
            throw new \InvalidArgumentException('non-nullable expenses cannot be null');
        }
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets total_expenses
     *
     * @return float|null
     */
    public function getTotalExpenses()
    {
        return $this->container['total_expenses'];
    }

    /**
     * Sets total_expenses
     *
     * @param float|null $total_expenses 
     *
     * @return self
     */
    public function setTotalExpenses($total_expenses)
    {
        if (is_null($total_expenses)) {
            throw new \InvalidArgumentException('non-nullable total_expenses cannot be null');
        }
        $this->container['total_expenses'] = $total_expenses;

        return $this;
    }

    /**
     * Gets bank_payments
     *
     * @return float|null
     */
    public function getBankPayments()
    {
        return $this->container['bank_payments'];
    }

    /**
     * Sets bank_payments
     *
     * @param float|null $bank_payments 
     *
     * @return self
     */
    public function setBankPayments($bank_payments)
    {
        if (is_null($bank_payments)) {
            throw new \InvalidArgumentException('non-nullable bank_payments cannot be null');
        }
        $this->container['bank_payments'] = $bank_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


