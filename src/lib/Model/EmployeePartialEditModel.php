<?php
/**
 * EmployeePartialEditModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmployeePartialEditModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeePartialEditModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeePartialEditModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'anniversary_date' => '\DateTime',
        'external_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'business_id' => 'int',
        'tax_file_number' => 'string',
        'tax_file_number_masked' => 'string',
        'bank_accounts' => '\OpenAPI\Client\Model\BankAccountEditModel[]',
        'external_reference_id' => 'string',
        'payroll_id' => 'string',
        'employee_starter_type' => 'string',
        'source' => 'string',
        'tags_string' => 'string',
        'timesheet_setting' => 'string',
        'termination_reason' => 'string',
        'title_id' => 'int',
        'first_name' => 'string',
        'other_name' => 'string',
        'middle_name' => 'string',
        'surname' => 'string',
        'previous_surname' => 'string',
        'legal_name' => 'string',
        'date_of_birth' => '\DateTime',
        'gender' => 'string',
        'residential_street_address' => 'string',
        'residential_address_line2' => 'string',
        'residential_suburb_id' => 'int',
        'residential_suburb' => 'string',
        'residential_state' => 'string',
        'residential_postcode' => 'string',
        'residential_country' => 'string',
        'residential_country_id' => 'string',
        'is_overseas_residential_address' => 'bool',
        'residential_address_type' => 'string',
        'residential_block_number' => 'string',
        'residential_level_number' => 'string',
        'residential_unit_number' => 'string',
        'residential_street_name' => 'string',
        'residential_address_line3' => 'string',
        'postal_street_address' => 'string',
        'postal_address_line2' => 'string',
        'postal_suburb_id' => 'int',
        'postal_suburb' => 'string',
        'postal_state' => 'string',
        'postal_postcode' => 'string',
        'postal_country' => 'string',
        'postal_country_id' => 'string',
        'is_overseas_postal_address' => 'bool',
        'postal_address_type' => 'string',
        'postal_block_number' => 'string',
        'postal_level_number' => 'string',
        'postal_unit_number' => 'string',
        'postal_street_name' => 'string',
        'postal_address_line3' => 'string',
        'is_postal_address_same_as_residential' => 'bool',
        'email' => 'string',
        'home_phone' => 'string',
        'work_phone' => 'string',
        'mobile_phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'anniversary_date' => 'date-time',
        'external_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'business_id' => 'int32',
        'tax_file_number' => null,
        'tax_file_number_masked' => null,
        'bank_accounts' => null,
        'external_reference_id' => null,
        'payroll_id' => null,
        'employee_starter_type' => null,
        'source' => null,
        'tags_string' => null,
        'timesheet_setting' => null,
        'termination_reason' => null,
        'title_id' => 'int32',
        'first_name' => null,
        'other_name' => null,
        'middle_name' => null,
        'surname' => null,
        'previous_surname' => null,
        'legal_name' => null,
        'date_of_birth' => 'date-time',
        'gender' => null,
        'residential_street_address' => null,
        'residential_address_line2' => null,
        'residential_suburb_id' => 'int32',
        'residential_suburb' => null,
        'residential_state' => null,
        'residential_postcode' => null,
        'residential_country' => null,
        'residential_country_id' => null,
        'is_overseas_residential_address' => null,
        'residential_address_type' => null,
        'residential_block_number' => null,
        'residential_level_number' => null,
        'residential_unit_number' => null,
        'residential_street_name' => null,
        'residential_address_line3' => null,
        'postal_street_address' => null,
        'postal_address_line2' => null,
        'postal_suburb_id' => 'int32',
        'postal_suburb' => null,
        'postal_state' => null,
        'postal_postcode' => null,
        'postal_country' => null,
        'postal_country_id' => null,
        'is_overseas_postal_address' => null,
        'postal_address_type' => null,
        'postal_block_number' => null,
        'postal_level_number' => null,
        'postal_unit_number' => null,
        'postal_street_name' => null,
        'postal_address_line3' => null,
        'is_postal_address_same_as_residential' => null,
        'email' => null,
        'home_phone' => null,
        'work_phone' => null,
        'mobile_phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'anniversary_date' => false,
		'external_id' => false,
		'start_date' => false,
		'end_date' => false,
		'business_id' => false,
		'tax_file_number' => false,
		'tax_file_number_masked' => false,
		'bank_accounts' => false,
		'external_reference_id' => false,
		'payroll_id' => false,
		'employee_starter_type' => false,
		'source' => false,
		'tags_string' => false,
		'timesheet_setting' => false,
		'termination_reason' => false,
		'title_id' => false,
		'first_name' => false,
		'other_name' => false,
		'middle_name' => false,
		'surname' => false,
		'previous_surname' => false,
		'legal_name' => false,
		'date_of_birth' => false,
		'gender' => false,
		'residential_street_address' => false,
		'residential_address_line2' => false,
		'residential_suburb_id' => false,
		'residential_suburb' => false,
		'residential_state' => false,
		'residential_postcode' => false,
		'residential_country' => false,
		'residential_country_id' => false,
		'is_overseas_residential_address' => false,
		'residential_address_type' => false,
		'residential_block_number' => false,
		'residential_level_number' => false,
		'residential_unit_number' => false,
		'residential_street_name' => false,
		'residential_address_line3' => false,
		'postal_street_address' => false,
		'postal_address_line2' => false,
		'postal_suburb_id' => false,
		'postal_suburb' => false,
		'postal_state' => false,
		'postal_postcode' => false,
		'postal_country' => false,
		'postal_country_id' => false,
		'is_overseas_postal_address' => false,
		'postal_address_type' => false,
		'postal_block_number' => false,
		'postal_level_number' => false,
		'postal_unit_number' => false,
		'postal_street_name' => false,
		'postal_address_line3' => false,
		'is_postal_address_same_as_residential' => false,
		'email' => false,
		'home_phone' => false,
		'work_phone' => false,
		'mobile_phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'anniversary_date' => 'anniversaryDate',
        'external_id' => 'externalId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'business_id' => 'businessId',
        'tax_file_number' => 'taxFileNumber',
        'tax_file_number_masked' => 'taxFileNumberMasked',
        'bank_accounts' => 'bankAccounts',
        'external_reference_id' => 'externalReferenceId',
        'payroll_id' => 'payrollId',
        'employee_starter_type' => 'employeeStarterType',
        'source' => 'source',
        'tags_string' => 'tagsString',
        'timesheet_setting' => 'timesheetSetting',
        'termination_reason' => 'terminationReason',
        'title_id' => 'titleId',
        'first_name' => 'firstName',
        'other_name' => 'otherName',
        'middle_name' => 'middleName',
        'surname' => 'surname',
        'previous_surname' => 'previousSurname',
        'legal_name' => 'legalName',
        'date_of_birth' => 'dateOfBirth',
        'gender' => 'gender',
        'residential_street_address' => 'residentialStreetAddress',
        'residential_address_line2' => 'residentialAddressLine2',
        'residential_suburb_id' => 'residentialSuburbId',
        'residential_suburb' => 'residentialSuburb',
        'residential_state' => 'residentialState',
        'residential_postcode' => 'residentialPostcode',
        'residential_country' => 'residentialCountry',
        'residential_country_id' => 'residentialCountryId',
        'is_overseas_residential_address' => 'isOverseasResidentialAddress',
        'residential_address_type' => 'residentialAddressType',
        'residential_block_number' => 'residentialBlockNumber',
        'residential_level_number' => 'residentialLevelNumber',
        'residential_unit_number' => 'residentialUnitNumber',
        'residential_street_name' => 'residentialStreetName',
        'residential_address_line3' => 'residentialAddressLine3',
        'postal_street_address' => 'postalStreetAddress',
        'postal_address_line2' => 'postalAddressLine2',
        'postal_suburb_id' => 'postalSuburbId',
        'postal_suburb' => 'postalSuburb',
        'postal_state' => 'postalState',
        'postal_postcode' => 'postalPostcode',
        'postal_country' => 'postalCountry',
        'postal_country_id' => 'postalCountryId',
        'is_overseas_postal_address' => 'isOverseasPostalAddress',
        'postal_address_type' => 'postalAddressType',
        'postal_block_number' => 'postalBlockNumber',
        'postal_level_number' => 'postalLevelNumber',
        'postal_unit_number' => 'postalUnitNumber',
        'postal_street_name' => 'postalStreetName',
        'postal_address_line3' => 'postalAddressLine3',
        'is_postal_address_same_as_residential' => 'isPostalAddressSameAsResidential',
        'email' => 'email',
        'home_phone' => 'homePhone',
        'work_phone' => 'workPhone',
        'mobile_phone' => 'mobilePhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'anniversary_date' => 'setAnniversaryDate',
        'external_id' => 'setExternalId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'business_id' => 'setBusinessId',
        'tax_file_number' => 'setTaxFileNumber',
        'tax_file_number_masked' => 'setTaxFileNumberMasked',
        'bank_accounts' => 'setBankAccounts',
        'external_reference_id' => 'setExternalReferenceId',
        'payroll_id' => 'setPayrollId',
        'employee_starter_type' => 'setEmployeeStarterType',
        'source' => 'setSource',
        'tags_string' => 'setTagsString',
        'timesheet_setting' => 'setTimesheetSetting',
        'termination_reason' => 'setTerminationReason',
        'title_id' => 'setTitleId',
        'first_name' => 'setFirstName',
        'other_name' => 'setOtherName',
        'middle_name' => 'setMiddleName',
        'surname' => 'setSurname',
        'previous_surname' => 'setPreviousSurname',
        'legal_name' => 'setLegalName',
        'date_of_birth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'residential_street_address' => 'setResidentialStreetAddress',
        'residential_address_line2' => 'setResidentialAddressLine2',
        'residential_suburb_id' => 'setResidentialSuburbId',
        'residential_suburb' => 'setResidentialSuburb',
        'residential_state' => 'setResidentialState',
        'residential_postcode' => 'setResidentialPostcode',
        'residential_country' => 'setResidentialCountry',
        'residential_country_id' => 'setResidentialCountryId',
        'is_overseas_residential_address' => 'setIsOverseasResidentialAddress',
        'residential_address_type' => 'setResidentialAddressType',
        'residential_block_number' => 'setResidentialBlockNumber',
        'residential_level_number' => 'setResidentialLevelNumber',
        'residential_unit_number' => 'setResidentialUnitNumber',
        'residential_street_name' => 'setResidentialStreetName',
        'residential_address_line3' => 'setResidentialAddressLine3',
        'postal_street_address' => 'setPostalStreetAddress',
        'postal_address_line2' => 'setPostalAddressLine2',
        'postal_suburb_id' => 'setPostalSuburbId',
        'postal_suburb' => 'setPostalSuburb',
        'postal_state' => 'setPostalState',
        'postal_postcode' => 'setPostalPostcode',
        'postal_country' => 'setPostalCountry',
        'postal_country_id' => 'setPostalCountryId',
        'is_overseas_postal_address' => 'setIsOverseasPostalAddress',
        'postal_address_type' => 'setPostalAddressType',
        'postal_block_number' => 'setPostalBlockNumber',
        'postal_level_number' => 'setPostalLevelNumber',
        'postal_unit_number' => 'setPostalUnitNumber',
        'postal_street_name' => 'setPostalStreetName',
        'postal_address_line3' => 'setPostalAddressLine3',
        'is_postal_address_same_as_residential' => 'setIsPostalAddressSameAsResidential',
        'email' => 'setEmail',
        'home_phone' => 'setHomePhone',
        'work_phone' => 'setWorkPhone',
        'mobile_phone' => 'setMobilePhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'anniversary_date' => 'getAnniversaryDate',
        'external_id' => 'getExternalId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'business_id' => 'getBusinessId',
        'tax_file_number' => 'getTaxFileNumber',
        'tax_file_number_masked' => 'getTaxFileNumberMasked',
        'bank_accounts' => 'getBankAccounts',
        'external_reference_id' => 'getExternalReferenceId',
        'payroll_id' => 'getPayrollId',
        'employee_starter_type' => 'getEmployeeStarterType',
        'source' => 'getSource',
        'tags_string' => 'getTagsString',
        'timesheet_setting' => 'getTimesheetSetting',
        'termination_reason' => 'getTerminationReason',
        'title_id' => 'getTitleId',
        'first_name' => 'getFirstName',
        'other_name' => 'getOtherName',
        'middle_name' => 'getMiddleName',
        'surname' => 'getSurname',
        'previous_surname' => 'getPreviousSurname',
        'legal_name' => 'getLegalName',
        'date_of_birth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'residential_street_address' => 'getResidentialStreetAddress',
        'residential_address_line2' => 'getResidentialAddressLine2',
        'residential_suburb_id' => 'getResidentialSuburbId',
        'residential_suburb' => 'getResidentialSuburb',
        'residential_state' => 'getResidentialState',
        'residential_postcode' => 'getResidentialPostcode',
        'residential_country' => 'getResidentialCountry',
        'residential_country_id' => 'getResidentialCountryId',
        'is_overseas_residential_address' => 'getIsOverseasResidentialAddress',
        'residential_address_type' => 'getResidentialAddressType',
        'residential_block_number' => 'getResidentialBlockNumber',
        'residential_level_number' => 'getResidentialLevelNumber',
        'residential_unit_number' => 'getResidentialUnitNumber',
        'residential_street_name' => 'getResidentialStreetName',
        'residential_address_line3' => 'getResidentialAddressLine3',
        'postal_street_address' => 'getPostalStreetAddress',
        'postal_address_line2' => 'getPostalAddressLine2',
        'postal_suburb_id' => 'getPostalSuburbId',
        'postal_suburb' => 'getPostalSuburb',
        'postal_state' => 'getPostalState',
        'postal_postcode' => 'getPostalPostcode',
        'postal_country' => 'getPostalCountry',
        'postal_country_id' => 'getPostalCountryId',
        'is_overseas_postal_address' => 'getIsOverseasPostalAddress',
        'postal_address_type' => 'getPostalAddressType',
        'postal_block_number' => 'getPostalBlockNumber',
        'postal_level_number' => 'getPostalLevelNumber',
        'postal_unit_number' => 'getPostalUnitNumber',
        'postal_street_name' => 'getPostalStreetName',
        'postal_address_line3' => 'getPostalAddressLine3',
        'is_postal_address_same_as_residential' => 'getIsPostalAddressSameAsResidential',
        'email' => 'getEmail',
        'home_phone' => 'getHomePhone',
        'work_phone' => 'getWorkPhone',
        'mobile_phone' => 'getMobilePhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMPLOYEE_STARTER_TYPE_NEW_STARTER = 'NewStarter';
    public const EMPLOYEE_STARTER_TYPE_REPORTED_HMRC = 'ReportedHmrc';
    public const SOURCE_NONE = 'None';
    public const SOURCE_SAASU = 'Saasu';
    public const SOURCE_XERO = 'Xero';
    public const SOURCE_MYOB = 'MYOB';
    public const SOURCE_DEPUTY = 'Deputy';
    public const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    public const SOURCE_CLICK_SUPER = 'ClickSuper';
    public const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    public const SOURCE_FILE_IMPORT = 'FileImport';
    public const SOURCE_FILE_EXPORT = 'FileExport';
    public const SOURCE_QUICK_BOOKS = 'QuickBooks';
    public const SOURCE_HARMONY = 'Harmony';
    public const SOURCE_AWARD_STORE = 'AwardStore';
    public const SOURCE_ATTACHE = 'Attache';
    public const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    public const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    public const SOURCE_API = 'API';
    public const SOURCE_MICRO_POWER = 'MicroPower';
    public const SOURCE_ROSTER_LIVE = 'RosterLive';
    public const SOURCE_NET_SUITE = 'NetSuite';
    public const SOURCE_KOUNTA = 'Kounta';
    public const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    public const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    public const SOURCE_JONAS_PREMIER = 'JonasPremier';
    public const SOURCE_WAGE_EASY = 'WageEasy';
    public const SOURCE_MAESTRANO = 'Maestrano';
    public const SOURCE_WORK_ZONE = 'WorkZone';
    public const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    public const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    public const SOURCE_ONBOARDING = 'Onboarding';
    public const SOURCE_ADMIN = 'Admin';
    public const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    public const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    public const SOURCE_SAGE50 = 'Sage50';
    public const SOURCE_PENSION_SYNC = 'PensionSync';
    public const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    public const SOURCE_PRONTO_XI = 'ProntoXI';
    public const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    public const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    public const SOURCE_BEAM = 'Beam';
    public const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    public const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    public const SOURCE_WIISE = 'Wiise';
    public const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    public const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    public const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    public const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    public const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    public const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    public const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    public const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    public const SOURCE_O_AUTH = 'OAuth';
    public const SOURCE_FRESH_BOOKS = 'FreshBooks';
    public const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    public const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    public const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    public const SOURCE_TELLEROO = 'Telleroo';
    public const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    public const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    public const SOURCE_PAYTRON = 'Paytron';
    public const SOURCE_ACCESS_FINANCIALS = 'AccessFinancials';
    public const SOURCE_COMMA = 'Comma';
    public const SOURCE_ZOHO = 'Zoho';
    public const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    public const SOURCE_TWINFIELD = 'Twinfield';
    public const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    public const SOURCE_SQUARE = 'Square';
    public const SOURCE_QUICKFILE = 'Quickfile';
    public const SOURCE_TIDE = 'Tide';
    public const SOURCE_TIDE_SSO = 'TideSso';
    public const SOURCE_FREE_AGENT = 'FreeAgent';
    public const SOURCE_AKAHU = 'Akahu';
    public const SOURCE_INSTA_PAY = 'InstaPay';
    public const SOURCE_ZEPTO = 'Zepto';
    public const SOURCE_SLACK = 'Slack';
    public const SOURCE_CAXTON = 'Caxton';
    public const TIMESHEET_SETTING_DISABLED = 'Disabled';
    public const TIMESHEET_SETTING_ENABLED = 'Enabled';
    public const TIMESHEET_SETTING_ENABLED_FOR_EXCEPTIONS = 'EnabledForExceptions';
    public const RESIDENTIAL_ADDRESS_TYPE_LOCAL_ADDRESS = 'LocalAddress';
    public const RESIDENTIAL_ADDRESS_TYPE_FOREIGN_ADDRESS = 'ForeignAddress';
    public const RESIDENTIAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS = 'LocalCareOfAddress';
    public const POSTAL_ADDRESS_TYPE_LOCAL_ADDRESS = 'LocalAddress';
    public const POSTAL_ADDRESS_TYPE_FOREIGN_ADDRESS = 'ForeignAddress';
    public const POSTAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS = 'LocalCareOfAddress';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmployeeStarterTypeAllowableValues()
    {
        return [
            self::EMPLOYEE_STARTER_TYPE_NEW_STARTER,
            self::EMPLOYEE_STARTER_TYPE_REPORTED_HMRC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ACCESS_FINANCIALS,
            self::SOURCE_COMMA,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
            self::SOURCE_SQUARE,
            self::SOURCE_QUICKFILE,
            self::SOURCE_TIDE,
            self::SOURCE_TIDE_SSO,
            self::SOURCE_FREE_AGENT,
            self::SOURCE_AKAHU,
            self::SOURCE_INSTA_PAY,
            self::SOURCE_ZEPTO,
            self::SOURCE_SLACK,
            self::SOURCE_CAXTON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimesheetSettingAllowableValues()
    {
        return [
            self::TIMESHEET_SETTING_DISABLED,
            self::TIMESHEET_SETTING_ENABLED,
            self::TIMESHEET_SETTING_ENABLED_FOR_EXCEPTIONS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidentialAddressTypeAllowableValues()
    {
        return [
            self::RESIDENTIAL_ADDRESS_TYPE_LOCAL_ADDRESS,
            self::RESIDENTIAL_ADDRESS_TYPE_FOREIGN_ADDRESS,
            self::RESIDENTIAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostalAddressTypeAllowableValues()
    {
        return [
            self::POSTAL_ADDRESS_TYPE_LOCAL_ADDRESS,
            self::POSTAL_ADDRESS_TYPE_FOREIGN_ADDRESS,
            self::POSTAL_ADDRESS_TYPE_LOCAL_CARE_OF_ADDRESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('anniversary_date', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('business_id', $data ?? [], null);
        $this->setIfExists('tax_file_number', $data ?? [], null);
        $this->setIfExists('tax_file_number_masked', $data ?? [], null);
        $this->setIfExists('bank_accounts', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('payroll_id', $data ?? [], null);
        $this->setIfExists('employee_starter_type', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('tags_string', $data ?? [], null);
        $this->setIfExists('timesheet_setting', $data ?? [], null);
        $this->setIfExists('termination_reason', $data ?? [], null);
        $this->setIfExists('title_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('other_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('previous_surname', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('residential_street_address', $data ?? [], null);
        $this->setIfExists('residential_address_line2', $data ?? [], null);
        $this->setIfExists('residential_suburb_id', $data ?? [], null);
        $this->setIfExists('residential_suburb', $data ?? [], null);
        $this->setIfExists('residential_state', $data ?? [], null);
        $this->setIfExists('residential_postcode', $data ?? [], null);
        $this->setIfExists('residential_country', $data ?? [], null);
        $this->setIfExists('residential_country_id', $data ?? [], null);
        $this->setIfExists('is_overseas_residential_address', $data ?? [], null);
        $this->setIfExists('residential_address_type', $data ?? [], null);
        $this->setIfExists('residential_block_number', $data ?? [], null);
        $this->setIfExists('residential_level_number', $data ?? [], null);
        $this->setIfExists('residential_unit_number', $data ?? [], null);
        $this->setIfExists('residential_street_name', $data ?? [], null);
        $this->setIfExists('residential_address_line3', $data ?? [], null);
        $this->setIfExists('postal_street_address', $data ?? [], null);
        $this->setIfExists('postal_address_line2', $data ?? [], null);
        $this->setIfExists('postal_suburb_id', $data ?? [], null);
        $this->setIfExists('postal_suburb', $data ?? [], null);
        $this->setIfExists('postal_state', $data ?? [], null);
        $this->setIfExists('postal_postcode', $data ?? [], null);
        $this->setIfExists('postal_country', $data ?? [], null);
        $this->setIfExists('postal_country_id', $data ?? [], null);
        $this->setIfExists('is_overseas_postal_address', $data ?? [], null);
        $this->setIfExists('postal_address_type', $data ?? [], null);
        $this->setIfExists('postal_block_number', $data ?? [], null);
        $this->setIfExists('postal_level_number', $data ?? [], null);
        $this->setIfExists('postal_unit_number', $data ?? [], null);
        $this->setIfExists('postal_street_name', $data ?? [], null);
        $this->setIfExists('postal_address_line3', $data ?? [], null);
        $this->setIfExists('is_postal_address_same_as_residential', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmployeeStarterTypeAllowableValues();
        if (!is_null($this->container['employee_starter_type']) && !in_array($this->container['employee_starter_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'employee_starter_type', must be one of '%s'",
                $this->container['employee_starter_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!is_null($this->container['timesheet_setting']) && !in_array($this->container['timesheet_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                $this->container['timesheet_setting'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResidentialAddressTypeAllowableValues();
        if (!is_null($this->container['residential_address_type']) && !in_array($this->container['residential_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'residential_address_type', must be one of '%s'",
                $this->container['residential_address_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostalAddressTypeAllowableValues();
        if (!is_null($this->container['postal_address_type']) && !in_array($this->container['postal_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'postal_address_type', must be one of '%s'",
                $this->container['postal_address_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets anniversary_date
     *
     * @return \DateTime|null
     */
    public function getAnniversaryDate()
    {
        return $this->container['anniversary_date'];
    }

    /**
     * Sets anniversary_date
     *
     * @param \DateTime|null $anniversary_date 
     *
     * @return self
     */
    public function setAnniversaryDate($anniversary_date)
    {
        if (is_null($anniversary_date)) {
            throw new \InvalidArgumentException('non-nullable anniversary_date cannot be null');
        }
        $this->container['anniversary_date'] = $anniversary_date;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id 
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date 
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date 
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return int|null
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param int|null $business_id 
     *
     * @return self
     */
    public function setBusinessId($business_id)
    {
        if (is_null($business_id)) {
            throw new \InvalidArgumentException('non-nullable business_id cannot be null');
        }
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets tax_file_number
     *
     * @return string|null
     */
    public function getTaxFileNumber()
    {
        return $this->container['tax_file_number'];
    }

    /**
     * Sets tax_file_number
     *
     * @param string|null $tax_file_number 
     *
     * @return self
     */
    public function setTaxFileNumber($tax_file_number)
    {
        if (is_null($tax_file_number)) {
            throw new \InvalidArgumentException('non-nullable tax_file_number cannot be null');
        }
        $this->container['tax_file_number'] = $tax_file_number;

        return $this;
    }

    /**
     * Gets tax_file_number_masked
     *
     * @return string|null
     */
    public function getTaxFileNumberMasked()
    {
        return $this->container['tax_file_number_masked'];
    }

    /**
     * Sets tax_file_number_masked
     *
     * @param string|null $tax_file_number_masked 
     *
     * @return self
     */
    public function setTaxFileNumberMasked($tax_file_number_masked)
    {
        if (is_null($tax_file_number_masked)) {
            throw new \InvalidArgumentException('non-nullable tax_file_number_masked cannot be null');
        }
        $this->container['tax_file_number_masked'] = $tax_file_number_masked;

        return $this;
    }

    /**
     * Gets bank_accounts
     *
     * @return \OpenAPI\Client\Model\BankAccountEditModel[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bank_accounts'];
    }

    /**
     * Sets bank_accounts
     *
     * @param \OpenAPI\Client\Model\BankAccountEditModel[]|null $bank_accounts 
     *
     * @return self
     */
    public function setBankAccounts($bank_accounts)
    {
        if (is_null($bank_accounts)) {
            throw new \InvalidArgumentException('non-nullable bank_accounts cannot be null');
        }
        $this->container['bank_accounts'] = $bank_accounts;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets payroll_id
     *
     * @return string|null
     */
    public function getPayrollId()
    {
        return $this->container['payroll_id'];
    }

    /**
     * Sets payroll_id
     *
     * @param string|null $payroll_id 
     *
     * @return self
     */
    public function setPayrollId($payroll_id)
    {
        if (is_null($payroll_id)) {
            throw new \InvalidArgumentException('non-nullable payroll_id cannot be null');
        }
        $this->container['payroll_id'] = $payroll_id;

        return $this;
    }

    /**
     * Gets employee_starter_type
     *
     * @return string|null
     */
    public function getEmployeeStarterType()
    {
        return $this->container['employee_starter_type'];
    }

    /**
     * Sets employee_starter_type
     *
     * @param string|null $employee_starter_type 
     *
     * @return self
     */
    public function setEmployeeStarterType($employee_starter_type)
    {
        if (is_null($employee_starter_type)) {
            throw new \InvalidArgumentException('non-nullable employee_starter_type cannot be null');
        }
        $allowedValues = $this->getEmployeeStarterTypeAllowableValues();
        if (!in_array($employee_starter_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'employee_starter_type', must be one of '%s'",
                    $employee_starter_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employee_starter_type'] = $employee_starter_type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets tags_string
     *
     * @return string|null
     */
    public function getTagsString()
    {
        return $this->container['tags_string'];
    }

    /**
     * Sets tags_string
     *
     * @param string|null $tags_string 
     *
     * @return self
     */
    public function setTagsString($tags_string)
    {
        if (is_null($tags_string)) {
            throw new \InvalidArgumentException('non-nullable tags_string cannot be null');
        }
        $this->container['tags_string'] = $tags_string;

        return $this;
    }

    /**
     * Gets timesheet_setting
     *
     * @return string|null
     */
    public function getTimesheetSetting()
    {
        return $this->container['timesheet_setting'];
    }

    /**
     * Sets timesheet_setting
     *
     * @param string|null $timesheet_setting 
     *
     * @return self
     */
    public function setTimesheetSetting($timesheet_setting)
    {
        if (is_null($timesheet_setting)) {
            throw new \InvalidArgumentException('non-nullable timesheet_setting cannot be null');
        }
        $allowedValues = $this->getTimesheetSettingAllowableValues();
        if (!in_array($timesheet_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timesheet_setting', must be one of '%s'",
                    $timesheet_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timesheet_setting'] = $timesheet_setting;

        return $this;
    }

    /**
     * Gets termination_reason
     *
     * @return string|null
     */
    public function getTerminationReason()
    {
        return $this->container['termination_reason'];
    }

    /**
     * Sets termination_reason
     *
     * @param string|null $termination_reason 
     *
     * @return self
     */
    public function setTerminationReason($termination_reason)
    {
        if (is_null($termination_reason)) {
            throw new \InvalidArgumentException('non-nullable termination_reason cannot be null');
        }
        $this->container['termination_reason'] = $termination_reason;

        return $this;
    }

    /**
     * Gets title_id
     *
     * @return int|null
     */
    public function getTitleId()
    {
        return $this->container['title_id'];
    }

    /**
     * Sets title_id
     *
     * @param int|null $title_id 
     *
     * @return self
     */
    public function setTitleId($title_id)
    {
        if (is_null($title_id)) {
            throw new \InvalidArgumentException('non-nullable title_id cannot be null');
        }
        $this->container['title_id'] = $title_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name 
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets other_name
     *
     * @return string|null
     */
    public function getOtherName()
    {
        return $this->container['other_name'];
    }

    /**
     * Sets other_name
     *
     * @param string|null $other_name 
     *
     * @return self
     */
    public function setOtherName($other_name)
    {
        if (is_null($other_name)) {
            throw new \InvalidArgumentException('non-nullable other_name cannot be null');
        }
        $this->container['other_name'] = $other_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name 
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname 
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets previous_surname
     *
     * @return string|null
     */
    public function getPreviousSurname()
    {
        return $this->container['previous_surname'];
    }

    /**
     * Sets previous_surname
     *
     * @param string|null $previous_surname 
     *
     * @return self
     */
    public function setPreviousSurname($previous_surname)
    {
        if (is_null($previous_surname)) {
            throw new \InvalidArgumentException('non-nullable previous_surname cannot be null');
        }
        $this->container['previous_surname'] = $previous_surname;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name 
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth 
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender 
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets residential_street_address
     *
     * @return string|null
     */
    public function getResidentialStreetAddress()
    {
        return $this->container['residential_street_address'];
    }

    /**
     * Sets residential_street_address
     *
     * @param string|null $residential_street_address 
     *
     * @return self
     */
    public function setResidentialStreetAddress($residential_street_address)
    {
        if (is_null($residential_street_address)) {
            throw new \InvalidArgumentException('non-nullable residential_street_address cannot be null');
        }
        $this->container['residential_street_address'] = $residential_street_address;

        return $this;
    }

    /**
     * Gets residential_address_line2
     *
     * @return string|null
     */
    public function getResidentialAddressLine2()
    {
        return $this->container['residential_address_line2'];
    }

    /**
     * Sets residential_address_line2
     *
     * @param string|null $residential_address_line2 
     *
     * @return self
     */
    public function setResidentialAddressLine2($residential_address_line2)
    {
        if (is_null($residential_address_line2)) {
            throw new \InvalidArgumentException('non-nullable residential_address_line2 cannot be null');
        }
        $this->container['residential_address_line2'] = $residential_address_line2;

        return $this;
    }

    /**
     * Gets residential_suburb_id
     *
     * @return int|null
     */
    public function getResidentialSuburbId()
    {
        return $this->container['residential_suburb_id'];
    }

    /**
     * Sets residential_suburb_id
     *
     * @param int|null $residential_suburb_id 
     *
     * @return self
     */
    public function setResidentialSuburbId($residential_suburb_id)
    {
        if (is_null($residential_suburb_id)) {
            throw new \InvalidArgumentException('non-nullable residential_suburb_id cannot be null');
        }
        $this->container['residential_suburb_id'] = $residential_suburb_id;

        return $this;
    }

    /**
     * Gets residential_suburb
     *
     * @return string|null
     */
    public function getResidentialSuburb()
    {
        return $this->container['residential_suburb'];
    }

    /**
     * Sets residential_suburb
     *
     * @param string|null $residential_suburb 
     *
     * @return self
     */
    public function setResidentialSuburb($residential_suburb)
    {
        if (is_null($residential_suburb)) {
            throw new \InvalidArgumentException('non-nullable residential_suburb cannot be null');
        }
        $this->container['residential_suburb'] = $residential_suburb;

        return $this;
    }

    /**
     * Gets residential_state
     *
     * @return string|null
     */
    public function getResidentialState()
    {
        return $this->container['residential_state'];
    }

    /**
     * Sets residential_state
     *
     * @param string|null $residential_state 
     *
     * @return self
     */
    public function setResidentialState($residential_state)
    {
        if (is_null($residential_state)) {
            throw new \InvalidArgumentException('non-nullable residential_state cannot be null');
        }
        $this->container['residential_state'] = $residential_state;

        return $this;
    }

    /**
     * Gets residential_postcode
     *
     * @return string|null
     */
    public function getResidentialPostcode()
    {
        return $this->container['residential_postcode'];
    }

    /**
     * Sets residential_postcode
     *
     * @param string|null $residential_postcode 
     *
     * @return self
     */
    public function setResidentialPostcode($residential_postcode)
    {
        if (is_null($residential_postcode)) {
            throw new \InvalidArgumentException('non-nullable residential_postcode cannot be null');
        }
        $this->container['residential_postcode'] = $residential_postcode;

        return $this;
    }

    /**
     * Gets residential_country
     *
     * @return string|null
     */
    public function getResidentialCountry()
    {
        return $this->container['residential_country'];
    }

    /**
     * Sets residential_country
     *
     * @param string|null $residential_country 
     *
     * @return self
     */
    public function setResidentialCountry($residential_country)
    {
        if (is_null($residential_country)) {
            throw new \InvalidArgumentException('non-nullable residential_country cannot be null');
        }
        $this->container['residential_country'] = $residential_country;

        return $this;
    }

    /**
     * Gets residential_country_id
     *
     * @return string|null
     */
    public function getResidentialCountryId()
    {
        return $this->container['residential_country_id'];
    }

    /**
     * Sets residential_country_id
     *
     * @param string|null $residential_country_id 
     *
     * @return self
     */
    public function setResidentialCountryId($residential_country_id)
    {
        if (is_null($residential_country_id)) {
            throw new \InvalidArgumentException('non-nullable residential_country_id cannot be null');
        }
        $this->container['residential_country_id'] = $residential_country_id;

        return $this;
    }

    /**
     * Gets is_overseas_residential_address
     *
     * @return bool|null
     */
    public function getIsOverseasResidentialAddress()
    {
        return $this->container['is_overseas_residential_address'];
    }

    /**
     * Sets is_overseas_residential_address
     *
     * @param bool|null $is_overseas_residential_address 
     *
     * @return self
     */
    public function setIsOverseasResidentialAddress($is_overseas_residential_address)
    {
        if (is_null($is_overseas_residential_address)) {
            throw new \InvalidArgumentException('non-nullable is_overseas_residential_address cannot be null');
        }
        $this->container['is_overseas_residential_address'] = $is_overseas_residential_address;

        return $this;
    }

    /**
     * Gets residential_address_type
     *
     * @return string|null
     */
    public function getResidentialAddressType()
    {
        return $this->container['residential_address_type'];
    }

    /**
     * Sets residential_address_type
     *
     * @param string|null $residential_address_type 
     *
     * @return self
     */
    public function setResidentialAddressType($residential_address_type)
    {
        if (is_null($residential_address_type)) {
            throw new \InvalidArgumentException('non-nullable residential_address_type cannot be null');
        }
        $allowedValues = $this->getResidentialAddressTypeAllowableValues();
        if (!in_array($residential_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'residential_address_type', must be one of '%s'",
                    $residential_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['residential_address_type'] = $residential_address_type;

        return $this;
    }

    /**
     * Gets residential_block_number
     *
     * @return string|null
     */
    public function getResidentialBlockNumber()
    {
        return $this->container['residential_block_number'];
    }

    /**
     * Sets residential_block_number
     *
     * @param string|null $residential_block_number 
     *
     * @return self
     */
    public function setResidentialBlockNumber($residential_block_number)
    {
        if (is_null($residential_block_number)) {
            throw new \InvalidArgumentException('non-nullable residential_block_number cannot be null');
        }
        $this->container['residential_block_number'] = $residential_block_number;

        return $this;
    }

    /**
     * Gets residential_level_number
     *
     * @return string|null
     */
    public function getResidentialLevelNumber()
    {
        return $this->container['residential_level_number'];
    }

    /**
     * Sets residential_level_number
     *
     * @param string|null $residential_level_number 
     *
     * @return self
     */
    public function setResidentialLevelNumber($residential_level_number)
    {
        if (is_null($residential_level_number)) {
            throw new \InvalidArgumentException('non-nullable residential_level_number cannot be null');
        }
        $this->container['residential_level_number'] = $residential_level_number;

        return $this;
    }

    /**
     * Gets residential_unit_number
     *
     * @return string|null
     */
    public function getResidentialUnitNumber()
    {
        return $this->container['residential_unit_number'];
    }

    /**
     * Sets residential_unit_number
     *
     * @param string|null $residential_unit_number 
     *
     * @return self
     */
    public function setResidentialUnitNumber($residential_unit_number)
    {
        if (is_null($residential_unit_number)) {
            throw new \InvalidArgumentException('non-nullable residential_unit_number cannot be null');
        }
        $this->container['residential_unit_number'] = $residential_unit_number;

        return $this;
    }

    /**
     * Gets residential_street_name
     *
     * @return string|null
     */
    public function getResidentialStreetName()
    {
        return $this->container['residential_street_name'];
    }

    /**
     * Sets residential_street_name
     *
     * @param string|null $residential_street_name 
     *
     * @return self
     */
    public function setResidentialStreetName($residential_street_name)
    {
        if (is_null($residential_street_name)) {
            throw new \InvalidArgumentException('non-nullable residential_street_name cannot be null');
        }
        $this->container['residential_street_name'] = $residential_street_name;

        return $this;
    }

    /**
     * Gets residential_address_line3
     *
     * @return string|null
     */
    public function getResidentialAddressLine3()
    {
        return $this->container['residential_address_line3'];
    }

    /**
     * Sets residential_address_line3
     *
     * @param string|null $residential_address_line3 
     *
     * @return self
     */
    public function setResidentialAddressLine3($residential_address_line3)
    {
        if (is_null($residential_address_line3)) {
            throw new \InvalidArgumentException('non-nullable residential_address_line3 cannot be null');
        }
        $this->container['residential_address_line3'] = $residential_address_line3;

        return $this;
    }

    /**
     * Gets postal_street_address
     *
     * @return string|null
     */
    public function getPostalStreetAddress()
    {
        return $this->container['postal_street_address'];
    }

    /**
     * Sets postal_street_address
     *
     * @param string|null $postal_street_address 
     *
     * @return self
     */
    public function setPostalStreetAddress($postal_street_address)
    {
        if (is_null($postal_street_address)) {
            throw new \InvalidArgumentException('non-nullable postal_street_address cannot be null');
        }
        $this->container['postal_street_address'] = $postal_street_address;

        return $this;
    }

    /**
     * Gets postal_address_line2
     *
     * @return string|null
     */
    public function getPostalAddressLine2()
    {
        return $this->container['postal_address_line2'];
    }

    /**
     * Sets postal_address_line2
     *
     * @param string|null $postal_address_line2 
     *
     * @return self
     */
    public function setPostalAddressLine2($postal_address_line2)
    {
        if (is_null($postal_address_line2)) {
            throw new \InvalidArgumentException('non-nullable postal_address_line2 cannot be null');
        }
        $this->container['postal_address_line2'] = $postal_address_line2;

        return $this;
    }

    /**
     * Gets postal_suburb_id
     *
     * @return int|null
     */
    public function getPostalSuburbId()
    {
        return $this->container['postal_suburb_id'];
    }

    /**
     * Sets postal_suburb_id
     *
     * @param int|null $postal_suburb_id 
     *
     * @return self
     */
    public function setPostalSuburbId($postal_suburb_id)
    {
        if (is_null($postal_suburb_id)) {
            throw new \InvalidArgumentException('non-nullable postal_suburb_id cannot be null');
        }
        $this->container['postal_suburb_id'] = $postal_suburb_id;

        return $this;
    }

    /**
     * Gets postal_suburb
     *
     * @return string|null
     */
    public function getPostalSuburb()
    {
        return $this->container['postal_suburb'];
    }

    /**
     * Sets postal_suburb
     *
     * @param string|null $postal_suburb 
     *
     * @return self
     */
    public function setPostalSuburb($postal_suburb)
    {
        if (is_null($postal_suburb)) {
            throw new \InvalidArgumentException('non-nullable postal_suburb cannot be null');
        }
        $this->container['postal_suburb'] = $postal_suburb;

        return $this;
    }

    /**
     * Gets postal_state
     *
     * @return string|null
     */
    public function getPostalState()
    {
        return $this->container['postal_state'];
    }

    /**
     * Sets postal_state
     *
     * @param string|null $postal_state 
     *
     * @return self
     */
    public function setPostalState($postal_state)
    {
        if (is_null($postal_state)) {
            throw new \InvalidArgumentException('non-nullable postal_state cannot be null');
        }
        $this->container['postal_state'] = $postal_state;

        return $this;
    }

    /**
     * Gets postal_postcode
     *
     * @return string|null
     */
    public function getPostalPostcode()
    {
        return $this->container['postal_postcode'];
    }

    /**
     * Sets postal_postcode
     *
     * @param string|null $postal_postcode 
     *
     * @return self
     */
    public function setPostalPostcode($postal_postcode)
    {
        if (is_null($postal_postcode)) {
            throw new \InvalidArgumentException('non-nullable postal_postcode cannot be null');
        }
        $this->container['postal_postcode'] = $postal_postcode;

        return $this;
    }

    /**
     * Gets postal_country
     *
     * @return string|null
     */
    public function getPostalCountry()
    {
        return $this->container['postal_country'];
    }

    /**
     * Sets postal_country
     *
     * @param string|null $postal_country 
     *
     * @return self
     */
    public function setPostalCountry($postal_country)
    {
        if (is_null($postal_country)) {
            throw new \InvalidArgumentException('non-nullable postal_country cannot be null');
        }
        $this->container['postal_country'] = $postal_country;

        return $this;
    }

    /**
     * Gets postal_country_id
     *
     * @return string|null
     */
    public function getPostalCountryId()
    {
        return $this->container['postal_country_id'];
    }

    /**
     * Sets postal_country_id
     *
     * @param string|null $postal_country_id 
     *
     * @return self
     */
    public function setPostalCountryId($postal_country_id)
    {
        if (is_null($postal_country_id)) {
            throw new \InvalidArgumentException('non-nullable postal_country_id cannot be null');
        }
        $this->container['postal_country_id'] = $postal_country_id;

        return $this;
    }

    /**
     * Gets is_overseas_postal_address
     *
     * @return bool|null
     */
    public function getIsOverseasPostalAddress()
    {
        return $this->container['is_overseas_postal_address'];
    }

    /**
     * Sets is_overseas_postal_address
     *
     * @param bool|null $is_overseas_postal_address 
     *
     * @return self
     */
    public function setIsOverseasPostalAddress($is_overseas_postal_address)
    {
        if (is_null($is_overseas_postal_address)) {
            throw new \InvalidArgumentException('non-nullable is_overseas_postal_address cannot be null');
        }
        $this->container['is_overseas_postal_address'] = $is_overseas_postal_address;

        return $this;
    }

    /**
     * Gets postal_address_type
     *
     * @return string|null
     */
    public function getPostalAddressType()
    {
        return $this->container['postal_address_type'];
    }

    /**
     * Sets postal_address_type
     *
     * @param string|null $postal_address_type 
     *
     * @return self
     */
    public function setPostalAddressType($postal_address_type)
    {
        if (is_null($postal_address_type)) {
            throw new \InvalidArgumentException('non-nullable postal_address_type cannot be null');
        }
        $allowedValues = $this->getPostalAddressTypeAllowableValues();
        if (!in_array($postal_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'postal_address_type', must be one of '%s'",
                    $postal_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['postal_address_type'] = $postal_address_type;

        return $this;
    }

    /**
     * Gets postal_block_number
     *
     * @return string|null
     */
    public function getPostalBlockNumber()
    {
        return $this->container['postal_block_number'];
    }

    /**
     * Sets postal_block_number
     *
     * @param string|null $postal_block_number 
     *
     * @return self
     */
    public function setPostalBlockNumber($postal_block_number)
    {
        if (is_null($postal_block_number)) {
            throw new \InvalidArgumentException('non-nullable postal_block_number cannot be null');
        }
        $this->container['postal_block_number'] = $postal_block_number;

        return $this;
    }

    /**
     * Gets postal_level_number
     *
     * @return string|null
     */
    public function getPostalLevelNumber()
    {
        return $this->container['postal_level_number'];
    }

    /**
     * Sets postal_level_number
     *
     * @param string|null $postal_level_number 
     *
     * @return self
     */
    public function setPostalLevelNumber($postal_level_number)
    {
        if (is_null($postal_level_number)) {
            throw new \InvalidArgumentException('non-nullable postal_level_number cannot be null');
        }
        $this->container['postal_level_number'] = $postal_level_number;

        return $this;
    }

    /**
     * Gets postal_unit_number
     *
     * @return string|null
     */
    public function getPostalUnitNumber()
    {
        return $this->container['postal_unit_number'];
    }

    /**
     * Sets postal_unit_number
     *
     * @param string|null $postal_unit_number 
     *
     * @return self
     */
    public function setPostalUnitNumber($postal_unit_number)
    {
        if (is_null($postal_unit_number)) {
            throw new \InvalidArgumentException('non-nullable postal_unit_number cannot be null');
        }
        $this->container['postal_unit_number'] = $postal_unit_number;

        return $this;
    }

    /**
     * Gets postal_street_name
     *
     * @return string|null
     */
    public function getPostalStreetName()
    {
        return $this->container['postal_street_name'];
    }

    /**
     * Sets postal_street_name
     *
     * @param string|null $postal_street_name 
     *
     * @return self
     */
    public function setPostalStreetName($postal_street_name)
    {
        if (is_null($postal_street_name)) {
            throw new \InvalidArgumentException('non-nullable postal_street_name cannot be null');
        }
        $this->container['postal_street_name'] = $postal_street_name;

        return $this;
    }

    /**
     * Gets postal_address_line3
     *
     * @return string|null
     */
    public function getPostalAddressLine3()
    {
        return $this->container['postal_address_line3'];
    }

    /**
     * Sets postal_address_line3
     *
     * @param string|null $postal_address_line3 
     *
     * @return self
     */
    public function setPostalAddressLine3($postal_address_line3)
    {
        if (is_null($postal_address_line3)) {
            throw new \InvalidArgumentException('non-nullable postal_address_line3 cannot be null');
        }
        $this->container['postal_address_line3'] = $postal_address_line3;

        return $this;
    }

    /**
     * Gets is_postal_address_same_as_residential
     *
     * @return bool|null
     */
    public function getIsPostalAddressSameAsResidential()
    {
        return $this->container['is_postal_address_same_as_residential'];
    }

    /**
     * Sets is_postal_address_same_as_residential
     *
     * @param bool|null $is_postal_address_same_as_residential 
     *
     * @return self
     */
    public function setIsPostalAddressSameAsResidential($is_postal_address_same_as_residential)
    {
        if (is_null($is_postal_address_same_as_residential)) {
            throw new \InvalidArgumentException('non-nullable is_postal_address_same_as_residential cannot be null');
        }
        $this->container['is_postal_address_same_as_residential'] = $is_postal_address_same_as_residential;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone 
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone 
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone 
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


