<?php
/**
 * TimesheetArray
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TimesheetArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimesheetArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimesheetArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee' => 'int',
        'employee_history' => 'int',
        'employee_agreement' => 'int',
        'date' => 'string',
        'start_time' => 'int',
        'end_time' => 'int',
        'mealbreak' => 'string',
        'total_time' => 'float',
        'total_time_inv' => 'float',
        'cost' => 'float',
        'roster' => 'int',
        'employee_comment' => 'string',
        'supervisor_comment' => 'string',
        'supervisor' => 'string',
        'disputed' => 'bool',
        'time_approved' => 'bool',
        'time_approver' => 'int',
        'discarded' => 'bool',
        'validation_flag' => 'int',
        'operational_unit' => 'int',
        'is_in_progress' => 'bool',
        'is_leave' => 'bool',
        'leave_id' => 'int',
        'leave_rule' => 'int',
        'invoiced' => 'bool',
        'invoice_comment' => 'string',
        'pay_rule_approved' => 'bool',
        'exported' => 'bool',
        'staging_id' => 'int',
        'pay_staged' => 'bool',
        'paycycle_id' => 'int',
        'file' => 'string',
        'creator' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'start_time_localized' => 'string',
        'end_time_localized' => 'string',
        'timesheet_pay_return_array' => '\OpenAPI\Client\Model\TimesheetPayReturnArray[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'employee' => 'int32',
        'employee_history' => 'int32',
        'employee_agreement' => 'int32',
        'date' => null,
        'start_time' => 'int32',
        'end_time' => 'int32',
        'mealbreak' => null,
        'total_time' => 'double',
        'total_time_inv' => 'double',
        'cost' => 'double',
        'roster' => 'int32',
        'employee_comment' => null,
        'supervisor_comment' => null,
        'supervisor' => null,
        'disputed' => null,
        'time_approved' => null,
        'time_approver' => 'int32',
        'discarded' => null,
        'validation_flag' => 'int32',
        'operational_unit' => 'int32',
        'is_in_progress' => null,
        'is_leave' => null,
        'leave_id' => 'int32',
        'leave_rule' => 'int32',
        'invoiced' => null,
        'invoice_comment' => null,
        'pay_rule_approved' => null,
        'exported' => null,
        'staging_id' => 'int32',
        'pay_staged' => null,
        'paycycle_id' => 'int32',
        'file' => null,
        'creator' => 'int32',
        'created' => 'date-time',
        'modified' => 'date-time',
        'start_time_localized' => null,
        'end_time_localized' => null,
        'timesheet_pay_return_array' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'employee' => false,
		'employee_history' => false,
		'employee_agreement' => false,
		'date' => false,
		'start_time' => false,
		'end_time' => false,
		'mealbreak' => false,
		'total_time' => false,
		'total_time_inv' => false,
		'cost' => false,
		'roster' => false,
		'employee_comment' => false,
		'supervisor_comment' => false,
		'supervisor' => false,
		'disputed' => false,
		'time_approved' => false,
		'time_approver' => false,
		'discarded' => false,
		'validation_flag' => false,
		'operational_unit' => false,
		'is_in_progress' => false,
		'is_leave' => false,
		'leave_id' => false,
		'leave_rule' => false,
		'invoiced' => false,
		'invoice_comment' => false,
		'pay_rule_approved' => false,
		'exported' => false,
		'staging_id' => false,
		'pay_staged' => false,
		'paycycle_id' => false,
		'file' => false,
		'creator' => false,
		'created' => false,
		'modified' => false,
		'start_time_localized' => false,
		'end_time_localized' => false,
		'timesheet_pay_return_array' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee' => 'employee',
        'employee_history' => 'employeeHistory',
        'employee_agreement' => 'employeeAgreement',
        'date' => 'date',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'mealbreak' => 'mealbreak',
        'total_time' => 'totalTime',
        'total_time_inv' => 'totalTimeInv',
        'cost' => 'cost',
        'roster' => 'roster',
        'employee_comment' => 'employeeComment',
        'supervisor_comment' => 'supervisorComment',
        'supervisor' => 'supervisor',
        'disputed' => 'disputed',
        'time_approved' => 'timeApproved',
        'time_approver' => 'timeApprover',
        'discarded' => 'discarded',
        'validation_flag' => 'validationFlag',
        'operational_unit' => 'operationalUnit',
        'is_in_progress' => 'isInProgress',
        'is_leave' => 'isLeave',
        'leave_id' => 'leaveId',
        'leave_rule' => 'leaveRule',
        'invoiced' => 'invoiced',
        'invoice_comment' => 'invoiceComment',
        'pay_rule_approved' => 'payRuleApproved',
        'exported' => 'exported',
        'staging_id' => 'stagingId',
        'pay_staged' => 'payStaged',
        'paycycle_id' => 'paycycleId',
        'file' => 'file',
        'creator' => 'creator',
        'created' => 'created',
        'modified' => 'modified',
        'start_time_localized' => 'startTimeLocalized',
        'end_time_localized' => 'endTimeLocalized',
        'timesheet_pay_return_array' => 'timesheetPayReturnArray'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee' => 'setEmployee',
        'employee_history' => 'setEmployeeHistory',
        'employee_agreement' => 'setEmployeeAgreement',
        'date' => 'setDate',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'mealbreak' => 'setMealbreak',
        'total_time' => 'setTotalTime',
        'total_time_inv' => 'setTotalTimeInv',
        'cost' => 'setCost',
        'roster' => 'setRoster',
        'employee_comment' => 'setEmployeeComment',
        'supervisor_comment' => 'setSupervisorComment',
        'supervisor' => 'setSupervisor',
        'disputed' => 'setDisputed',
        'time_approved' => 'setTimeApproved',
        'time_approver' => 'setTimeApprover',
        'discarded' => 'setDiscarded',
        'validation_flag' => 'setValidationFlag',
        'operational_unit' => 'setOperationalUnit',
        'is_in_progress' => 'setIsInProgress',
        'is_leave' => 'setIsLeave',
        'leave_id' => 'setLeaveId',
        'leave_rule' => 'setLeaveRule',
        'invoiced' => 'setInvoiced',
        'invoice_comment' => 'setInvoiceComment',
        'pay_rule_approved' => 'setPayRuleApproved',
        'exported' => 'setExported',
        'staging_id' => 'setStagingId',
        'pay_staged' => 'setPayStaged',
        'paycycle_id' => 'setPaycycleId',
        'file' => 'setFile',
        'creator' => 'setCreator',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'start_time_localized' => 'setStartTimeLocalized',
        'end_time_localized' => 'setEndTimeLocalized',
        'timesheet_pay_return_array' => 'setTimesheetPayReturnArray'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee' => 'getEmployee',
        'employee_history' => 'getEmployeeHistory',
        'employee_agreement' => 'getEmployeeAgreement',
        'date' => 'getDate',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'mealbreak' => 'getMealbreak',
        'total_time' => 'getTotalTime',
        'total_time_inv' => 'getTotalTimeInv',
        'cost' => 'getCost',
        'roster' => 'getRoster',
        'employee_comment' => 'getEmployeeComment',
        'supervisor_comment' => 'getSupervisorComment',
        'supervisor' => 'getSupervisor',
        'disputed' => 'getDisputed',
        'time_approved' => 'getTimeApproved',
        'time_approver' => 'getTimeApprover',
        'discarded' => 'getDiscarded',
        'validation_flag' => 'getValidationFlag',
        'operational_unit' => 'getOperationalUnit',
        'is_in_progress' => 'getIsInProgress',
        'is_leave' => 'getIsLeave',
        'leave_id' => 'getLeaveId',
        'leave_rule' => 'getLeaveRule',
        'invoiced' => 'getInvoiced',
        'invoice_comment' => 'getInvoiceComment',
        'pay_rule_approved' => 'getPayRuleApproved',
        'exported' => 'getExported',
        'staging_id' => 'getStagingId',
        'pay_staged' => 'getPayStaged',
        'paycycle_id' => 'getPaycycleId',
        'file' => 'getFile',
        'creator' => 'getCreator',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'start_time_localized' => 'getStartTimeLocalized',
        'end_time_localized' => 'getEndTimeLocalized',
        'timesheet_pay_return_array' => 'getTimesheetPayReturnArray'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('employee_history', $data ?? [], null);
        $this->setIfExists('employee_agreement', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('mealbreak', $data ?? [], null);
        $this->setIfExists('total_time', $data ?? [], null);
        $this->setIfExists('total_time_inv', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('roster', $data ?? [], null);
        $this->setIfExists('employee_comment', $data ?? [], null);
        $this->setIfExists('supervisor_comment', $data ?? [], null);
        $this->setIfExists('supervisor', $data ?? [], null);
        $this->setIfExists('disputed', $data ?? [], null);
        $this->setIfExists('time_approved', $data ?? [], null);
        $this->setIfExists('time_approver', $data ?? [], null);
        $this->setIfExists('discarded', $data ?? [], null);
        $this->setIfExists('validation_flag', $data ?? [], null);
        $this->setIfExists('operational_unit', $data ?? [], null);
        $this->setIfExists('is_in_progress', $data ?? [], null);
        $this->setIfExists('is_leave', $data ?? [], null);
        $this->setIfExists('leave_id', $data ?? [], null);
        $this->setIfExists('leave_rule', $data ?? [], null);
        $this->setIfExists('invoiced', $data ?? [], null);
        $this->setIfExists('invoice_comment', $data ?? [], null);
        $this->setIfExists('pay_rule_approved', $data ?? [], null);
        $this->setIfExists('exported', $data ?? [], null);
        $this->setIfExists('staging_id', $data ?? [], null);
        $this->setIfExists('pay_staged', $data ?? [], null);
        $this->setIfExists('paycycle_id', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('start_time_localized', $data ?? [], null);
        $this->setIfExists('end_time_localized', $data ?? [], null);
        $this->setIfExists('timesheet_pay_return_array', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return int|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param int|null $employee 
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets employee_history
     *
     * @return int|null
     */
    public function getEmployeeHistory()
    {
        return $this->container['employee_history'];
    }

    /**
     * Sets employee_history
     *
     * @param int|null $employee_history 
     *
     * @return self
     */
    public function setEmployeeHistory($employee_history)
    {
        if (is_null($employee_history)) {
            throw new \InvalidArgumentException('non-nullable employee_history cannot be null');
        }
        $this->container['employee_history'] = $employee_history;

        return $this;
    }

    /**
     * Gets employee_agreement
     *
     * @return int|null
     */
    public function getEmployeeAgreement()
    {
        return $this->container['employee_agreement'];
    }

    /**
     * Sets employee_agreement
     *
     * @param int|null $employee_agreement 
     *
     * @return self
     */
    public function setEmployeeAgreement($employee_agreement)
    {
        if (is_null($employee_agreement)) {
            throw new \InvalidArgumentException('non-nullable employee_agreement cannot be null');
        }
        $this->container['employee_agreement'] = $employee_agreement;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date 
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int|null $start_time 
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int|null $end_time 
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets mealbreak
     *
     * @return string|null
     */
    public function getMealbreak()
    {
        return $this->container['mealbreak'];
    }

    /**
     * Sets mealbreak
     *
     * @param string|null $mealbreak 
     *
     * @return self
     */
    public function setMealbreak($mealbreak)
    {
        if (is_null($mealbreak)) {
            throw new \InvalidArgumentException('non-nullable mealbreak cannot be null');
        }
        $this->container['mealbreak'] = $mealbreak;

        return $this;
    }

    /**
     * Gets total_time
     *
     * @return float|null
     */
    public function getTotalTime()
    {
        return $this->container['total_time'];
    }

    /**
     * Sets total_time
     *
     * @param float|null $total_time 
     *
     * @return self
     */
    public function setTotalTime($total_time)
    {
        if (is_null($total_time)) {
            throw new \InvalidArgumentException('non-nullable total_time cannot be null');
        }
        $this->container['total_time'] = $total_time;

        return $this;
    }

    /**
     * Gets total_time_inv
     *
     * @return float|null
     */
    public function getTotalTimeInv()
    {
        return $this->container['total_time_inv'];
    }

    /**
     * Sets total_time_inv
     *
     * @param float|null $total_time_inv 
     *
     * @return self
     */
    public function setTotalTimeInv($total_time_inv)
    {
        if (is_null($total_time_inv)) {
            throw new \InvalidArgumentException('non-nullable total_time_inv cannot be null');
        }
        $this->container['total_time_inv'] = $total_time_inv;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost 
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets roster
     *
     * @return int|null
     */
    public function getRoster()
    {
        return $this->container['roster'];
    }

    /**
     * Sets roster
     *
     * @param int|null $roster 
     *
     * @return self
     */
    public function setRoster($roster)
    {
        if (is_null($roster)) {
            throw new \InvalidArgumentException('non-nullable roster cannot be null');
        }
        $this->container['roster'] = $roster;

        return $this;
    }

    /**
     * Gets employee_comment
     *
     * @return string|null
     */
    public function getEmployeeComment()
    {
        return $this->container['employee_comment'];
    }

    /**
     * Sets employee_comment
     *
     * @param string|null $employee_comment 
     *
     * @return self
     */
    public function setEmployeeComment($employee_comment)
    {
        if (is_null($employee_comment)) {
            throw new \InvalidArgumentException('non-nullable employee_comment cannot be null');
        }
        $this->container['employee_comment'] = $employee_comment;

        return $this;
    }

    /**
     * Gets supervisor_comment
     *
     * @return string|null
     */
    public function getSupervisorComment()
    {
        return $this->container['supervisor_comment'];
    }

    /**
     * Sets supervisor_comment
     *
     * @param string|null $supervisor_comment 
     *
     * @return self
     */
    public function setSupervisorComment($supervisor_comment)
    {
        if (is_null($supervisor_comment)) {
            throw new \InvalidArgumentException('non-nullable supervisor_comment cannot be null');
        }
        $this->container['supervisor_comment'] = $supervisor_comment;

        return $this;
    }

    /**
     * Gets supervisor
     *
     * @return string|null
     */
    public function getSupervisor()
    {
        return $this->container['supervisor'];
    }

    /**
     * Sets supervisor
     *
     * @param string|null $supervisor 
     *
     * @return self
     */
    public function setSupervisor($supervisor)
    {
        if (is_null($supervisor)) {
            throw new \InvalidArgumentException('non-nullable supervisor cannot be null');
        }
        $this->container['supervisor'] = $supervisor;

        return $this;
    }

    /**
     * Gets disputed
     *
     * @return bool|null
     */
    public function getDisputed()
    {
        return $this->container['disputed'];
    }

    /**
     * Sets disputed
     *
     * @param bool|null $disputed 
     *
     * @return self
     */
    public function setDisputed($disputed)
    {
        if (is_null($disputed)) {
            throw new \InvalidArgumentException('non-nullable disputed cannot be null');
        }
        $this->container['disputed'] = $disputed;

        return $this;
    }

    /**
     * Gets time_approved
     *
     * @return bool|null
     */
    public function getTimeApproved()
    {
        return $this->container['time_approved'];
    }

    /**
     * Sets time_approved
     *
     * @param bool|null $time_approved 
     *
     * @return self
     */
    public function setTimeApproved($time_approved)
    {
        if (is_null($time_approved)) {
            throw new \InvalidArgumentException('non-nullable time_approved cannot be null');
        }
        $this->container['time_approved'] = $time_approved;

        return $this;
    }

    /**
     * Gets time_approver
     *
     * @return int|null
     */
    public function getTimeApprover()
    {
        return $this->container['time_approver'];
    }

    /**
     * Sets time_approver
     *
     * @param int|null $time_approver 
     *
     * @return self
     */
    public function setTimeApprover($time_approver)
    {
        if (is_null($time_approver)) {
            throw new \InvalidArgumentException('non-nullable time_approver cannot be null');
        }
        $this->container['time_approver'] = $time_approver;

        return $this;
    }

    /**
     * Gets discarded
     *
     * @return bool|null
     */
    public function getDiscarded()
    {
        return $this->container['discarded'];
    }

    /**
     * Sets discarded
     *
     * @param bool|null $discarded 
     *
     * @return self
     */
    public function setDiscarded($discarded)
    {
        if (is_null($discarded)) {
            throw new \InvalidArgumentException('non-nullable discarded cannot be null');
        }
        $this->container['discarded'] = $discarded;

        return $this;
    }

    /**
     * Gets validation_flag
     *
     * @return int|null
     */
    public function getValidationFlag()
    {
        return $this->container['validation_flag'];
    }

    /**
     * Sets validation_flag
     *
     * @param int|null $validation_flag 
     *
     * @return self
     */
    public function setValidationFlag($validation_flag)
    {
        if (is_null($validation_flag)) {
            throw new \InvalidArgumentException('non-nullable validation_flag cannot be null');
        }
        $this->container['validation_flag'] = $validation_flag;

        return $this;
    }

    /**
     * Gets operational_unit
     *
     * @return int|null
     */
    public function getOperationalUnit()
    {
        return $this->container['operational_unit'];
    }

    /**
     * Sets operational_unit
     *
     * @param int|null $operational_unit 
     *
     * @return self
     */
    public function setOperationalUnit($operational_unit)
    {
        if (is_null($operational_unit)) {
            throw new \InvalidArgumentException('non-nullable operational_unit cannot be null');
        }
        $this->container['operational_unit'] = $operational_unit;

        return $this;
    }

    /**
     * Gets is_in_progress
     *
     * @return bool|null
     */
    public function getIsInProgress()
    {
        return $this->container['is_in_progress'];
    }

    /**
     * Sets is_in_progress
     *
     * @param bool|null $is_in_progress 
     *
     * @return self
     */
    public function setIsInProgress($is_in_progress)
    {
        if (is_null($is_in_progress)) {
            throw new \InvalidArgumentException('non-nullable is_in_progress cannot be null');
        }
        $this->container['is_in_progress'] = $is_in_progress;

        return $this;
    }

    /**
     * Gets is_leave
     *
     * @return bool|null
     */
    public function getIsLeave()
    {
        return $this->container['is_leave'];
    }

    /**
     * Sets is_leave
     *
     * @param bool|null $is_leave 
     *
     * @return self
     */
    public function setIsLeave($is_leave)
    {
        if (is_null($is_leave)) {
            throw new \InvalidArgumentException('non-nullable is_leave cannot be null');
        }
        $this->container['is_leave'] = $is_leave;

        return $this;
    }

    /**
     * Gets leave_id
     *
     * @return int|null
     */
    public function getLeaveId()
    {
        return $this->container['leave_id'];
    }

    /**
     * Sets leave_id
     *
     * @param int|null $leave_id 
     *
     * @return self
     */
    public function setLeaveId($leave_id)
    {
        if (is_null($leave_id)) {
            throw new \InvalidArgumentException('non-nullable leave_id cannot be null');
        }
        $this->container['leave_id'] = $leave_id;

        return $this;
    }

    /**
     * Gets leave_rule
     *
     * @return int|null
     */
    public function getLeaveRule()
    {
        return $this->container['leave_rule'];
    }

    /**
     * Sets leave_rule
     *
     * @param int|null $leave_rule 
     *
     * @return self
     */
    public function setLeaveRule($leave_rule)
    {
        if (is_null($leave_rule)) {
            throw new \InvalidArgumentException('non-nullable leave_rule cannot be null');
        }
        $this->container['leave_rule'] = $leave_rule;

        return $this;
    }

    /**
     * Gets invoiced
     *
     * @return bool|null
     */
    public function getInvoiced()
    {
        return $this->container['invoiced'];
    }

    /**
     * Sets invoiced
     *
     * @param bool|null $invoiced 
     *
     * @return self
     */
    public function setInvoiced($invoiced)
    {
        if (is_null($invoiced)) {
            throw new \InvalidArgumentException('non-nullable invoiced cannot be null');
        }
        $this->container['invoiced'] = $invoiced;

        return $this;
    }

    /**
     * Gets invoice_comment
     *
     * @return string|null
     */
    public function getInvoiceComment()
    {
        return $this->container['invoice_comment'];
    }

    /**
     * Sets invoice_comment
     *
     * @param string|null $invoice_comment 
     *
     * @return self
     */
    public function setInvoiceComment($invoice_comment)
    {
        if (is_null($invoice_comment)) {
            throw new \InvalidArgumentException('non-nullable invoice_comment cannot be null');
        }
        $this->container['invoice_comment'] = $invoice_comment;

        return $this;
    }

    /**
     * Gets pay_rule_approved
     *
     * @return bool|null
     */
    public function getPayRuleApproved()
    {
        return $this->container['pay_rule_approved'];
    }

    /**
     * Sets pay_rule_approved
     *
     * @param bool|null $pay_rule_approved 
     *
     * @return self
     */
    public function setPayRuleApproved($pay_rule_approved)
    {
        if (is_null($pay_rule_approved)) {
            throw new \InvalidArgumentException('non-nullable pay_rule_approved cannot be null');
        }
        $this->container['pay_rule_approved'] = $pay_rule_approved;

        return $this;
    }

    /**
     * Gets exported
     *
     * @return bool|null
     */
    public function getExported()
    {
        return $this->container['exported'];
    }

    /**
     * Sets exported
     *
     * @param bool|null $exported 
     *
     * @return self
     */
    public function setExported($exported)
    {
        if (is_null($exported)) {
            throw new \InvalidArgumentException('non-nullable exported cannot be null');
        }
        $this->container['exported'] = $exported;

        return $this;
    }

    /**
     * Gets staging_id
     *
     * @return int|null
     */
    public function getStagingId()
    {
        return $this->container['staging_id'];
    }

    /**
     * Sets staging_id
     *
     * @param int|null $staging_id 
     *
     * @return self
     */
    public function setStagingId($staging_id)
    {
        if (is_null($staging_id)) {
            throw new \InvalidArgumentException('non-nullable staging_id cannot be null');
        }
        $this->container['staging_id'] = $staging_id;

        return $this;
    }

    /**
     * Gets pay_staged
     *
     * @return bool|null
     */
    public function getPayStaged()
    {
        return $this->container['pay_staged'];
    }

    /**
     * Sets pay_staged
     *
     * @param bool|null $pay_staged 
     *
     * @return self
     */
    public function setPayStaged($pay_staged)
    {
        if (is_null($pay_staged)) {
            throw new \InvalidArgumentException('non-nullable pay_staged cannot be null');
        }
        $this->container['pay_staged'] = $pay_staged;

        return $this;
    }

    /**
     * Gets paycycle_id
     *
     * @return int|null
     */
    public function getPaycycleId()
    {
        return $this->container['paycycle_id'];
    }

    /**
     * Sets paycycle_id
     *
     * @param int|null $paycycle_id 
     *
     * @return self
     */
    public function setPaycycleId($paycycle_id)
    {
        if (is_null($paycycle_id)) {
            throw new \InvalidArgumentException('non-nullable paycycle_id cannot be null');
        }
        $this->container['paycycle_id'] = $paycycle_id;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string|null $file 
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return int|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param int|null $creator 
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException('non-nullable creator cannot be null');
        }
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created 
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified 
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets start_time_localized
     *
     * @return string|null
     */
    public function getStartTimeLocalized()
    {
        return $this->container['start_time_localized'];
    }

    /**
     * Sets start_time_localized
     *
     * @param string|null $start_time_localized 
     *
     * @return self
     */
    public function setStartTimeLocalized($start_time_localized)
    {
        if (is_null($start_time_localized)) {
            throw new \InvalidArgumentException('non-nullable start_time_localized cannot be null');
        }
        $this->container['start_time_localized'] = $start_time_localized;

        return $this;
    }

    /**
     * Gets end_time_localized
     *
     * @return string|null
     */
    public function getEndTimeLocalized()
    {
        return $this->container['end_time_localized'];
    }

    /**
     * Sets end_time_localized
     *
     * @param string|null $end_time_localized 
     *
     * @return self
     */
    public function setEndTimeLocalized($end_time_localized)
    {
        if (is_null($end_time_localized)) {
            throw new \InvalidArgumentException('non-nullable end_time_localized cannot be null');
        }
        $this->container['end_time_localized'] = $end_time_localized;

        return $this;
    }

    /**
     * Gets timesheet_pay_return_array
     *
     * @return \OpenAPI\Client\Model\TimesheetPayReturnArray[]|null
     */
    public function getTimesheetPayReturnArray()
    {
        return $this->container['timesheet_pay_return_array'];
    }

    /**
     * Sets timesheet_pay_return_array
     *
     * @param \OpenAPI\Client\Model\TimesheetPayReturnArray[]|null $timesheet_pay_return_array 
     *
     * @return self
     */
    public function setTimesheetPayReturnArray($timesheet_pay_return_array)
    {
        if (is_null($timesheet_pay_return_array)) {
            throw new \InvalidArgumentException('non-nullable timesheet_pay_return_array cannot be null');
        }
        $this->container['timesheet_pay_return_array'] = $timesheet_pay_return_array;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


