<?php
/**
 * ManagerTimesheetLineModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ManagerTimesheetLineModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ManagerTimesheetLineModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ManagerTimesheetLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_location_id' => 'int',
        'default_location_name' => 'string',
        'pay_schedule_id' => 'int',
        'pay_schedule_name' => 'string',
        'employee_groups' => '\OpenAPI\Client\Model\ManagerEmployeeGroup[]',
        'shift_conditions' => '\OpenAPI\Client\Model\ShiftCondition[]',
        'cost_formatted' => 'string',
        'can_delete' => 'bool',
        'can_edit' => 'bool',
        'can_edit_notes_only' => 'bool',
        'can_view_costs' => 'bool',
        'can_approve' => 'bool',
        'termination_date' => '\DateTime',
        'employee_start_date' => '\DateTime',
        'dimension_values' => '\OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]',
        'classification' => '\OpenAPI\Client\Model\ClassificationSelection',
        'employee_name' => 'string',
        'id' => 'int',
        'employee_id' => 'int',
        'location_id' => 'int',
        'work_type_id' => 'int',
        'work_type_name' => 'string',
        'location_name' => 'string',
        'unit_type' => 'string',
        'is_unit_based_work_type' => 'bool',
        'pay_run_id' => 'int',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'submitted_start' => '\DateTime',
        'submitted_end' => '\DateTime',
        'units' => 'float',
        'status' => 'string',
        'pay_slip_url' => 'string',
        'breaks' => '\OpenAPI\Client\Model\TimesheetBreakManagerModel[]',
        'comments' => 'string',
        'rate' => 'float',
        'external_reference_id' => 'string',
        'source' => 'string',
        'pay_category_id' => 'int',
        'leave_category_id' => 'int',
        'leave_request_id' => 'int',
        'is_locked' => 'bool',
        'cost' => 'float',
        'discard' => 'bool',
        'attachment' => '\OpenAPI\Client\Model\AttachmentModel',
        'is_overlapping' => 'bool',
        'overdraws_leave' => 'bool',
        'reviewed_by' => 'string',
        'duration_override' => 'string',
        'auto_approved_by_roster_shift_id' => 'int',
        'work_duration_in_minutes' => 'float',
        'breaks_duration_in_minutes' => 'float',
        'total_duration_in_minutes' => 'float',
        'hidden_comments' => 'string',
        'read_only' => 'bool',
        'ignore_rounding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_location_id' => 'int32',
        'default_location_name' => null,
        'pay_schedule_id' => 'int32',
        'pay_schedule_name' => null,
        'employee_groups' => null,
        'shift_conditions' => null,
        'cost_formatted' => null,
        'can_delete' => null,
        'can_edit' => null,
        'can_edit_notes_only' => null,
        'can_view_costs' => null,
        'can_approve' => null,
        'termination_date' => 'date-time',
        'employee_start_date' => 'date-time',
        'dimension_values' => null,
        'classification' => null,
        'employee_name' => null,
        'id' => 'int32',
        'employee_id' => 'int32',
        'location_id' => 'int32',
        'work_type_id' => 'int32',
        'work_type_name' => null,
        'location_name' => null,
        'unit_type' => null,
        'is_unit_based_work_type' => null,
        'pay_run_id' => 'int32',
        'start' => 'date-time',
        'end' => 'date-time',
        'submitted_start' => 'date-time',
        'submitted_end' => 'date-time',
        'units' => 'double',
        'status' => null,
        'pay_slip_url' => null,
        'breaks' => null,
        'comments' => null,
        'rate' => 'double',
        'external_reference_id' => null,
        'source' => null,
        'pay_category_id' => 'int32',
        'leave_category_id' => 'int32',
        'leave_request_id' => 'int32',
        'is_locked' => null,
        'cost' => 'double',
        'discard' => null,
        'attachment' => null,
        'is_overlapping' => null,
        'overdraws_leave' => null,
        'reviewed_by' => null,
        'duration_override' => null,
        'auto_approved_by_roster_shift_id' => 'int32',
        'work_duration_in_minutes' => 'double',
        'breaks_duration_in_minutes' => 'double',
        'total_duration_in_minutes' => 'double',
        'hidden_comments' => null,
        'read_only' => null,
        'ignore_rounding' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_location_id' => false,
		'default_location_name' => false,
		'pay_schedule_id' => false,
		'pay_schedule_name' => false,
		'employee_groups' => false,
		'shift_conditions' => false,
		'cost_formatted' => false,
		'can_delete' => false,
		'can_edit' => false,
		'can_edit_notes_only' => false,
		'can_view_costs' => false,
		'can_approve' => false,
		'termination_date' => false,
		'employee_start_date' => false,
		'dimension_values' => false,
		'classification' => false,
		'employee_name' => false,
		'id' => false,
		'employee_id' => false,
		'location_id' => false,
		'work_type_id' => false,
		'work_type_name' => false,
		'location_name' => false,
		'unit_type' => false,
		'is_unit_based_work_type' => false,
		'pay_run_id' => false,
		'start' => false,
		'end' => false,
		'submitted_start' => false,
		'submitted_end' => false,
		'units' => false,
		'status' => false,
		'pay_slip_url' => false,
		'breaks' => false,
		'comments' => false,
		'rate' => false,
		'external_reference_id' => false,
		'source' => false,
		'pay_category_id' => false,
		'leave_category_id' => false,
		'leave_request_id' => false,
		'is_locked' => false,
		'cost' => false,
		'discard' => false,
		'attachment' => false,
		'is_overlapping' => false,
		'overdraws_leave' => false,
		'reviewed_by' => false,
		'duration_override' => false,
		'auto_approved_by_roster_shift_id' => false,
		'work_duration_in_minutes' => false,
		'breaks_duration_in_minutes' => false,
		'total_duration_in_minutes' => false,
		'hidden_comments' => false,
		'read_only' => false,
		'ignore_rounding' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_location_id' => 'defaultLocationId',
        'default_location_name' => 'defaultLocationName',
        'pay_schedule_id' => 'payScheduleId',
        'pay_schedule_name' => 'payScheduleName',
        'employee_groups' => 'employeeGroups',
        'shift_conditions' => 'shiftConditions',
        'cost_formatted' => 'costFormatted',
        'can_delete' => 'canDelete',
        'can_edit' => 'canEdit',
        'can_edit_notes_only' => 'canEditNotesOnly',
        'can_view_costs' => 'canViewCosts',
        'can_approve' => 'canApprove',
        'termination_date' => 'terminationDate',
        'employee_start_date' => 'employeeStartDate',
        'dimension_values' => 'dimensionValues',
        'classification' => 'classification',
        'employee_name' => 'employeeName',
        'id' => 'id',
        'employee_id' => 'employeeId',
        'location_id' => 'locationId',
        'work_type_id' => 'workTypeId',
        'work_type_name' => 'workTypeName',
        'location_name' => 'locationName',
        'unit_type' => 'unitType',
        'is_unit_based_work_type' => 'isUnitBasedWorkType',
        'pay_run_id' => 'payRunId',
        'start' => 'start',
        'end' => 'end',
        'submitted_start' => 'submittedStart',
        'submitted_end' => 'submittedEnd',
        'units' => 'units',
        'status' => 'status',
        'pay_slip_url' => 'paySlipUrl',
        'breaks' => 'breaks',
        'comments' => 'comments',
        'rate' => 'rate',
        'external_reference_id' => 'externalReferenceId',
        'source' => 'source',
        'pay_category_id' => 'payCategoryId',
        'leave_category_id' => 'leaveCategoryId',
        'leave_request_id' => 'leaveRequestId',
        'is_locked' => 'isLocked',
        'cost' => 'cost',
        'discard' => 'discard',
        'attachment' => 'attachment',
        'is_overlapping' => 'isOverlapping',
        'overdraws_leave' => 'overdrawsLeave',
        'reviewed_by' => 'reviewedBy',
        'duration_override' => 'durationOverride',
        'auto_approved_by_roster_shift_id' => 'autoApprovedByRosterShiftId',
        'work_duration_in_minutes' => 'workDurationInMinutes',
        'breaks_duration_in_minutes' => 'breaksDurationInMinutes',
        'total_duration_in_minutes' => 'totalDurationInMinutes',
        'hidden_comments' => 'hiddenComments',
        'read_only' => 'readOnly',
        'ignore_rounding' => 'ignoreRounding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_location_id' => 'setDefaultLocationId',
        'default_location_name' => 'setDefaultLocationName',
        'pay_schedule_id' => 'setPayScheduleId',
        'pay_schedule_name' => 'setPayScheduleName',
        'employee_groups' => 'setEmployeeGroups',
        'shift_conditions' => 'setShiftConditions',
        'cost_formatted' => 'setCostFormatted',
        'can_delete' => 'setCanDelete',
        'can_edit' => 'setCanEdit',
        'can_edit_notes_only' => 'setCanEditNotesOnly',
        'can_view_costs' => 'setCanViewCosts',
        'can_approve' => 'setCanApprove',
        'termination_date' => 'setTerminationDate',
        'employee_start_date' => 'setEmployeeStartDate',
        'dimension_values' => 'setDimensionValues',
        'classification' => 'setClassification',
        'employee_name' => 'setEmployeeName',
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'location_id' => 'setLocationId',
        'work_type_id' => 'setWorkTypeId',
        'work_type_name' => 'setWorkTypeName',
        'location_name' => 'setLocationName',
        'unit_type' => 'setUnitType',
        'is_unit_based_work_type' => 'setIsUnitBasedWorkType',
        'pay_run_id' => 'setPayRunId',
        'start' => 'setStart',
        'end' => 'setEnd',
        'submitted_start' => 'setSubmittedStart',
        'submitted_end' => 'setSubmittedEnd',
        'units' => 'setUnits',
        'status' => 'setStatus',
        'pay_slip_url' => 'setPaySlipUrl',
        'breaks' => 'setBreaks',
        'comments' => 'setComments',
        'rate' => 'setRate',
        'external_reference_id' => 'setExternalReferenceId',
        'source' => 'setSource',
        'pay_category_id' => 'setPayCategoryId',
        'leave_category_id' => 'setLeaveCategoryId',
        'leave_request_id' => 'setLeaveRequestId',
        'is_locked' => 'setIsLocked',
        'cost' => 'setCost',
        'discard' => 'setDiscard',
        'attachment' => 'setAttachment',
        'is_overlapping' => 'setIsOverlapping',
        'overdraws_leave' => 'setOverdrawsLeave',
        'reviewed_by' => 'setReviewedBy',
        'duration_override' => 'setDurationOverride',
        'auto_approved_by_roster_shift_id' => 'setAutoApprovedByRosterShiftId',
        'work_duration_in_minutes' => 'setWorkDurationInMinutes',
        'breaks_duration_in_minutes' => 'setBreaksDurationInMinutes',
        'total_duration_in_minutes' => 'setTotalDurationInMinutes',
        'hidden_comments' => 'setHiddenComments',
        'read_only' => 'setReadOnly',
        'ignore_rounding' => 'setIgnoreRounding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_location_id' => 'getDefaultLocationId',
        'default_location_name' => 'getDefaultLocationName',
        'pay_schedule_id' => 'getPayScheduleId',
        'pay_schedule_name' => 'getPayScheduleName',
        'employee_groups' => 'getEmployeeGroups',
        'shift_conditions' => 'getShiftConditions',
        'cost_formatted' => 'getCostFormatted',
        'can_delete' => 'getCanDelete',
        'can_edit' => 'getCanEdit',
        'can_edit_notes_only' => 'getCanEditNotesOnly',
        'can_view_costs' => 'getCanViewCosts',
        'can_approve' => 'getCanApprove',
        'termination_date' => 'getTerminationDate',
        'employee_start_date' => 'getEmployeeStartDate',
        'dimension_values' => 'getDimensionValues',
        'classification' => 'getClassification',
        'employee_name' => 'getEmployeeName',
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'location_id' => 'getLocationId',
        'work_type_id' => 'getWorkTypeId',
        'work_type_name' => 'getWorkTypeName',
        'location_name' => 'getLocationName',
        'unit_type' => 'getUnitType',
        'is_unit_based_work_type' => 'getIsUnitBasedWorkType',
        'pay_run_id' => 'getPayRunId',
        'start' => 'getStart',
        'end' => 'getEnd',
        'submitted_start' => 'getSubmittedStart',
        'submitted_end' => 'getSubmittedEnd',
        'units' => 'getUnits',
        'status' => 'getStatus',
        'pay_slip_url' => 'getPaySlipUrl',
        'breaks' => 'getBreaks',
        'comments' => 'getComments',
        'rate' => 'getRate',
        'external_reference_id' => 'getExternalReferenceId',
        'source' => 'getSource',
        'pay_category_id' => 'getPayCategoryId',
        'leave_category_id' => 'getLeaveCategoryId',
        'leave_request_id' => 'getLeaveRequestId',
        'is_locked' => 'getIsLocked',
        'cost' => 'getCost',
        'discard' => 'getDiscard',
        'attachment' => 'getAttachment',
        'is_overlapping' => 'getIsOverlapping',
        'overdraws_leave' => 'getOverdrawsLeave',
        'reviewed_by' => 'getReviewedBy',
        'duration_override' => 'getDurationOverride',
        'auto_approved_by_roster_shift_id' => 'getAutoApprovedByRosterShiftId',
        'work_duration_in_minutes' => 'getWorkDurationInMinutes',
        'breaks_duration_in_minutes' => 'getBreaksDurationInMinutes',
        'total_duration_in_minutes' => 'getTotalDurationInMinutes',
        'hidden_comments' => 'getHiddenComments',
        'read_only' => 'getReadOnly',
        'ignore_rounding' => 'getIgnoreRounding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_MISSING = 'Missing';
    public const STATUS_SUBMITTED = 'Submitted';
    public const STATUS_APPROVED = 'Approved';
    public const STATUS_REJECTED = 'Rejected';
    public const STATUS_PROCESSED = 'Processed';
    public const SOURCE_NONE = 'None';
    public const SOURCE_SAASU = 'Saasu';
    public const SOURCE_XERO = 'Xero';
    public const SOURCE_MYOB = 'MYOB';
    public const SOURCE_DEPUTY = 'Deputy';
    public const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    public const SOURCE_CLICK_SUPER = 'ClickSuper';
    public const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    public const SOURCE_FILE_IMPORT = 'FileImport';
    public const SOURCE_FILE_EXPORT = 'FileExport';
    public const SOURCE_QUICK_BOOKS = 'QuickBooks';
    public const SOURCE_HARMONY = 'Harmony';
    public const SOURCE_AWARD_STORE = 'AwardStore';
    public const SOURCE_ATTACHE = 'Attache';
    public const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    public const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    public const SOURCE_API = 'API';
    public const SOURCE_MICRO_POWER = 'MicroPower';
    public const SOURCE_ROSTER_LIVE = 'RosterLive';
    public const SOURCE_NET_SUITE = 'NetSuite';
    public const SOURCE_KOUNTA = 'Kounta';
    public const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    public const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    public const SOURCE_JONAS_PREMIER = 'JonasPremier';
    public const SOURCE_WAGE_EASY = 'WageEasy';
    public const SOURCE_MAESTRANO = 'Maestrano';
    public const SOURCE_WORK_ZONE = 'WorkZone';
    public const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    public const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    public const SOURCE_ONBOARDING = 'Onboarding';
    public const SOURCE_ADMIN = 'Admin';
    public const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    public const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    public const SOURCE_SAGE50 = 'Sage50';
    public const SOURCE_PENSION_SYNC = 'PensionSync';
    public const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    public const SOURCE_PRONTO_XI = 'ProntoXI';
    public const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    public const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    public const SOURCE_BEAM = 'Beam';
    public const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    public const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    public const SOURCE_WIISE = 'Wiise';
    public const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    public const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    public const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    public const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    public const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    public const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    public const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    public const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    public const SOURCE_O_AUTH = 'OAuth';
    public const SOURCE_FRESH_BOOKS = 'FreshBooks';
    public const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    public const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    public const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    public const SOURCE_TELLEROO = 'Telleroo';
    public const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    public const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    public const SOURCE_PAYTRON = 'Paytron';
    public const SOURCE_ACCESS_FINANCIALS = 'AccessFinancials';
    public const SOURCE_COMMA = 'Comma';
    public const SOURCE_ZOHO = 'Zoho';
    public const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    public const SOURCE_TWINFIELD = 'Twinfield';
    public const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    public const SOURCE_SQUARE = 'Square';
    public const SOURCE_QUICKFILE = 'Quickfile';
    public const SOURCE_TIDE = 'Tide';
    public const SOURCE_TIDE_SSO = 'TideSso';
    public const SOURCE_FREE_AGENT = 'FreeAgent';
    public const SOURCE_AKAHU = 'Akahu';
    public const SOURCE_INSTA_PAY = 'InstaPay';
    public const SOURCE_ZEPTO = 'Zepto';
    public const SOURCE_SLACK = 'Slack';
    public const SOURCE_CAXTON = 'Caxton';
    public const SOURCE_QUICKBOOKS_STANDALONE_PAYROLL = 'QuickbooksStandalonePayroll';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_MISSING,
            self::STATUS_SUBMITTED,
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_PROCESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ACCESS_FINANCIALS,
            self::SOURCE_COMMA,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
            self::SOURCE_SQUARE,
            self::SOURCE_QUICKFILE,
            self::SOURCE_TIDE,
            self::SOURCE_TIDE_SSO,
            self::SOURCE_FREE_AGENT,
            self::SOURCE_AKAHU,
            self::SOURCE_INSTA_PAY,
            self::SOURCE_ZEPTO,
            self::SOURCE_SLACK,
            self::SOURCE_CAXTON,
            self::SOURCE_QUICKBOOKS_STANDALONE_PAYROLL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_location_id', $data ?? [], null);
        $this->setIfExists('default_location_name', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('pay_schedule_name', $data ?? [], null);
        $this->setIfExists('employee_groups', $data ?? [], null);
        $this->setIfExists('shift_conditions', $data ?? [], null);
        $this->setIfExists('cost_formatted', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_edit_notes_only', $data ?? [], null);
        $this->setIfExists('can_view_costs', $data ?? [], null);
        $this->setIfExists('can_approve', $data ?? [], null);
        $this->setIfExists('termination_date', $data ?? [], null);
        $this->setIfExists('employee_start_date', $data ?? [], null);
        $this->setIfExists('dimension_values', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('work_type_id', $data ?? [], null);
        $this->setIfExists('work_type_name', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('is_unit_based_work_type', $data ?? [], null);
        $this->setIfExists('pay_run_id', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
        $this->setIfExists('submitted_start', $data ?? [], null);
        $this->setIfExists('submitted_end', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('pay_slip_url', $data ?? [], null);
        $this->setIfExists('breaks', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('pay_category_id', $data ?? [], null);
        $this->setIfExists('leave_category_id', $data ?? [], null);
        $this->setIfExists('leave_request_id', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('discard', $data ?? [], null);
        $this->setIfExists('attachment', $data ?? [], null);
        $this->setIfExists('is_overlapping', $data ?? [], null);
        $this->setIfExists('overdraws_leave', $data ?? [], null);
        $this->setIfExists('reviewed_by', $data ?? [], null);
        $this->setIfExists('duration_override', $data ?? [], null);
        $this->setIfExists('auto_approved_by_roster_shift_id', $data ?? [], null);
        $this->setIfExists('work_duration_in_minutes', $data ?? [], null);
        $this->setIfExists('breaks_duration_in_minutes', $data ?? [], null);
        $this->setIfExists('total_duration_in_minutes', $data ?? [], null);
        $this->setIfExists('hidden_comments', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('ignore_rounding', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_location_id
     *
     * @return int|null
     */
    public function getDefaultLocationId()
    {
        return $this->container['default_location_id'];
    }

    /**
     * Sets default_location_id
     *
     * @param int|null $default_location_id 
     *
     * @return self
     */
    public function setDefaultLocationId($default_location_id)
    {
        if (is_null($default_location_id)) {
            throw new \InvalidArgumentException('non-nullable default_location_id cannot be null');
        }
        $this->container['default_location_id'] = $default_location_id;

        return $this;
    }

    /**
     * Gets default_location_name
     *
     * @return string|null
     */
    public function getDefaultLocationName()
    {
        return $this->container['default_location_name'];
    }

    /**
     * Sets default_location_name
     *
     * @param string|null $default_location_name 
     *
     * @return self
     */
    public function setDefaultLocationName($default_location_name)
    {
        if (is_null($default_location_name)) {
            throw new \InvalidArgumentException('non-nullable default_location_name cannot be null');
        }
        $this->container['default_location_name'] = $default_location_name;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id 
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets pay_schedule_name
     *
     * @return string|null
     */
    public function getPayScheduleName()
    {
        return $this->container['pay_schedule_name'];
    }

    /**
     * Sets pay_schedule_name
     *
     * @param string|null $pay_schedule_name 
     *
     * @return self
     */
    public function setPayScheduleName($pay_schedule_name)
    {
        if (is_null($pay_schedule_name)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_name cannot be null');
        }
        $this->container['pay_schedule_name'] = $pay_schedule_name;

        return $this;
    }

    /**
     * Gets employee_groups
     *
     * @return \OpenAPI\Client\Model\ManagerEmployeeGroup[]|null
     */
    public function getEmployeeGroups()
    {
        return $this->container['employee_groups'];
    }

    /**
     * Sets employee_groups
     *
     * @param \OpenAPI\Client\Model\ManagerEmployeeGroup[]|null $employee_groups 
     *
     * @return self
     */
    public function setEmployeeGroups($employee_groups)
    {
        if (is_null($employee_groups)) {
            throw new \InvalidArgumentException('non-nullable employee_groups cannot be null');
        }
        $this->container['employee_groups'] = $employee_groups;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \OpenAPI\Client\Model\ShiftCondition[]|null
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \OpenAPI\Client\Model\ShiftCondition[]|null $shift_conditions 
     *
     * @return self
     */
    public function setShiftConditions($shift_conditions)
    {
        if (is_null($shift_conditions)) {
            throw new \InvalidArgumentException('non-nullable shift_conditions cannot be null');
        }
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets cost_formatted
     *
     * @return string|null
     */
    public function getCostFormatted()
    {
        return $this->container['cost_formatted'];
    }

    /**
     * Sets cost_formatted
     *
     * @param string|null $cost_formatted 
     *
     * @return self
     */
    public function setCostFormatted($cost_formatted)
    {
        if (is_null($cost_formatted)) {
            throw new \InvalidArgumentException('non-nullable cost_formatted cannot be null');
        }
        $this->container['cost_formatted'] = $cost_formatted;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete 
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit 
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_edit_notes_only
     *
     * @return bool|null
     */
    public function getCanEditNotesOnly()
    {
        return $this->container['can_edit_notes_only'];
    }

    /**
     * Sets can_edit_notes_only
     *
     * @param bool|null $can_edit_notes_only 
     *
     * @return self
     */
    public function setCanEditNotesOnly($can_edit_notes_only)
    {
        if (is_null($can_edit_notes_only)) {
            throw new \InvalidArgumentException('non-nullable can_edit_notes_only cannot be null');
        }
        $this->container['can_edit_notes_only'] = $can_edit_notes_only;

        return $this;
    }

    /**
     * Gets can_view_costs
     *
     * @return bool|null
     */
    public function getCanViewCosts()
    {
        return $this->container['can_view_costs'];
    }

    /**
     * Sets can_view_costs
     *
     * @param bool|null $can_view_costs 
     *
     * @return self
     */
    public function setCanViewCosts($can_view_costs)
    {
        if (is_null($can_view_costs)) {
            throw new \InvalidArgumentException('non-nullable can_view_costs cannot be null');
        }
        $this->container['can_view_costs'] = $can_view_costs;

        return $this;
    }

    /**
     * Gets can_approve
     *
     * @return bool|null
     */
    public function getCanApprove()
    {
        return $this->container['can_approve'];
    }

    /**
     * Sets can_approve
     *
     * @param bool|null $can_approve 
     *
     * @return self
     */
    public function setCanApprove($can_approve)
    {
        if (is_null($can_approve)) {
            throw new \InvalidArgumentException('non-nullable can_approve cannot be null');
        }
        $this->container['can_approve'] = $can_approve;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date 
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        if (is_null($termination_date)) {
            throw new \InvalidArgumentException('non-nullable termination_date cannot be null');
        }
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets employee_start_date
     *
     * @return \DateTime|null
     */
    public function getEmployeeStartDate()
    {
        return $this->container['employee_start_date'];
    }

    /**
     * Sets employee_start_date
     *
     * @param \DateTime|null $employee_start_date 
     *
     * @return self
     */
    public function setEmployeeStartDate($employee_start_date)
    {
        if (is_null($employee_start_date)) {
            throw new \InvalidArgumentException('non-nullable employee_start_date cannot be null');
        }
        $this->container['employee_start_date'] = $employee_start_date;

        return $this;
    }

    /**
     * Gets dimension_values
     *
     * @return \OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]|null
     */
    public function getDimensionValues()
    {
        return $this->container['dimension_values'];
    }

    /**
     * Sets dimension_values
     *
     * @param \OpenAPI\Client\Model\ReportingDimensionValueBaseApiModel[]|null $dimension_values 
     *
     * @return self
     */
    public function setDimensionValues($dimension_values)
    {
        if (is_null($dimension_values)) {
            throw new \InvalidArgumentException('non-nullable dimension_values cannot be null');
        }
        $this->container['dimension_values'] = $dimension_values;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return \OpenAPI\Client\Model\ClassificationSelection|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param \OpenAPI\Client\Model\ClassificationSelection|null $classification classification
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int|null
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int|null $work_type_id 
     *
     * @return self
     */
    public function setWorkTypeId($work_type_id)
    {
        if (is_null($work_type_id)) {
            throw new \InvalidArgumentException('non-nullable work_type_id cannot be null');
        }
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets work_type_name
     *
     * @return string|null
     */
    public function getWorkTypeName()
    {
        return $this->container['work_type_name'];
    }

    /**
     * Sets work_type_name
     *
     * @param string|null $work_type_name 
     *
     * @return self
     */
    public function setWorkTypeName($work_type_name)
    {
        if (is_null($work_type_name)) {
            throw new \InvalidArgumentException('non-nullable work_type_name cannot be null');
        }
        $this->container['work_type_name'] = $work_type_name;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type 
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets is_unit_based_work_type
     *
     * @return bool|null
     */
    public function getIsUnitBasedWorkType()
    {
        return $this->container['is_unit_based_work_type'];
    }

    /**
     * Sets is_unit_based_work_type
     *
     * @param bool|null $is_unit_based_work_type 
     *
     * @return self
     */
    public function setIsUnitBasedWorkType($is_unit_based_work_type)
    {
        if (is_null($is_unit_based_work_type)) {
            throw new \InvalidArgumentException('non-nullable is_unit_based_work_type cannot be null');
        }
        $this->container['is_unit_based_work_type'] = $is_unit_based_work_type;

        return $this;
    }

    /**
     * Gets pay_run_id
     *
     * @return int|null
     */
    public function getPayRunId()
    {
        return $this->container['pay_run_id'];
    }

    /**
     * Sets pay_run_id
     *
     * @param int|null $pay_run_id 
     *
     * @return self
     */
    public function setPayRunId($pay_run_id)
    {
        if (is_null($pay_run_id)) {
            throw new \InvalidArgumentException('non-nullable pay_run_id cannot be null');
        }
        $this->container['pay_run_id'] = $pay_run_id;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime|null $start 
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime|null $end 
     *
     * @return self
     */
    public function setEnd($end)
    {
        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets submitted_start
     *
     * @return \DateTime|null
     */
    public function getSubmittedStart()
    {
        return $this->container['submitted_start'];
    }

    /**
     * Sets submitted_start
     *
     * @param \DateTime|null $submitted_start 
     *
     * @return self
     */
    public function setSubmittedStart($submitted_start)
    {
        if (is_null($submitted_start)) {
            throw new \InvalidArgumentException('non-nullable submitted_start cannot be null');
        }
        $this->container['submitted_start'] = $submitted_start;

        return $this;
    }

    /**
     * Gets submitted_end
     *
     * @return \DateTime|null
     */
    public function getSubmittedEnd()
    {
        return $this->container['submitted_end'];
    }

    /**
     * Sets submitted_end
     *
     * @param \DateTime|null $submitted_end 
     *
     * @return self
     */
    public function setSubmittedEnd($submitted_end)
    {
        if (is_null($submitted_end)) {
            throw new \InvalidArgumentException('non-nullable submitted_end cannot be null');
        }
        $this->container['submitted_end'] = $submitted_end;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float|null $units 
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pay_slip_url
     *
     * @return string|null
     */
    public function getPaySlipUrl()
    {
        return $this->container['pay_slip_url'];
    }

    /**
     * Sets pay_slip_url
     *
     * @param string|null $pay_slip_url 
     *
     * @return self
     */
    public function setPaySlipUrl($pay_slip_url)
    {
        if (is_null($pay_slip_url)) {
            throw new \InvalidArgumentException('non-nullable pay_slip_url cannot be null');
        }
        $this->container['pay_slip_url'] = $pay_slip_url;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \OpenAPI\Client\Model\TimesheetBreakManagerModel[]|null
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \OpenAPI\Client\Model\TimesheetBreakManagerModel[]|null $breaks 
     *
     * @return self
     */
    public function setBreaks($breaks)
    {
        if (is_null($breaks)) {
            throw new \InvalidArgumentException('non-nullable breaks cannot be null');
        }
        $this->container['breaks'] = $breaks;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments 
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate 
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source 
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int|null
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int|null $pay_category_id 
     *
     * @return self
     */
    public function setPayCategoryId($pay_category_id)
    {
        if (is_null($pay_category_id)) {
            throw new \InvalidArgumentException('non-nullable pay_category_id cannot be null');
        }
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int|null
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int|null $leave_category_id 
     *
     * @return self
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        if (is_null($leave_category_id)) {
            throw new \InvalidArgumentException('non-nullable leave_category_id cannot be null');
        }
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets leave_request_id
     *
     * @return int|null
     */
    public function getLeaveRequestId()
    {
        return $this->container['leave_request_id'];
    }

    /**
     * Sets leave_request_id
     *
     * @param int|null $leave_request_id 
     *
     * @return self
     */
    public function setLeaveRequestId($leave_request_id)
    {
        if (is_null($leave_request_id)) {
            throw new \InvalidArgumentException('non-nullable leave_request_id cannot be null');
        }
        $this->container['leave_request_id'] = $leave_request_id;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked 
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {
        if (is_null($is_locked)) {
            throw new \InvalidArgumentException('non-nullable is_locked cannot be null');
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost 
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets discard
     *
     * @return bool|null
     */
    public function getDiscard()
    {
        return $this->container['discard'];
    }

    /**
     * Sets discard
     *
     * @param bool|null $discard 
     *
     * @return self
     */
    public function setDiscard($discard)
    {
        if (is_null($discard)) {
            throw new \InvalidArgumentException('non-nullable discard cannot be null');
        }
        $this->container['discard'] = $discard;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \OpenAPI\Client\Model\AttachmentModel|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \OpenAPI\Client\Model\AttachmentModel|null $attachment attachment
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets is_overlapping
     *
     * @return bool|null
     */
    public function getIsOverlapping()
    {
        return $this->container['is_overlapping'];
    }

    /**
     * Sets is_overlapping
     *
     * @param bool|null $is_overlapping 
     *
     * @return self
     */
    public function setIsOverlapping($is_overlapping)
    {
        if (is_null($is_overlapping)) {
            throw new \InvalidArgumentException('non-nullable is_overlapping cannot be null');
        }
        $this->container['is_overlapping'] = $is_overlapping;

        return $this;
    }

    /**
     * Gets overdraws_leave
     *
     * @return bool|null
     */
    public function getOverdrawsLeave()
    {
        return $this->container['overdraws_leave'];
    }

    /**
     * Sets overdraws_leave
     *
     * @param bool|null $overdraws_leave 
     *
     * @return self
     */
    public function setOverdrawsLeave($overdraws_leave)
    {
        if (is_null($overdraws_leave)) {
            throw new \InvalidArgumentException('non-nullable overdraws_leave cannot be null');
        }
        $this->container['overdraws_leave'] = $overdraws_leave;

        return $this;
    }

    /**
     * Gets reviewed_by
     *
     * @return string|null
     */
    public function getReviewedBy()
    {
        return $this->container['reviewed_by'];
    }

    /**
     * Sets reviewed_by
     *
     * @param string|null $reviewed_by 
     *
     * @return self
     */
    public function setReviewedBy($reviewed_by)
    {
        if (is_null($reviewed_by)) {
            throw new \InvalidArgumentException('non-nullable reviewed_by cannot be null');
        }
        $this->container['reviewed_by'] = $reviewed_by;

        return $this;
    }

    /**
     * Gets duration_override
     *
     * @return string|null
     */
    public function getDurationOverride()
    {
        return $this->container['duration_override'];
    }

    /**
     * Sets duration_override
     *
     * @param string|null $duration_override 
     *
     * @return self
     */
    public function setDurationOverride($duration_override)
    {
        if (is_null($duration_override)) {
            throw new \InvalidArgumentException('non-nullable duration_override cannot be null');
        }
        $this->container['duration_override'] = $duration_override;

        return $this;
    }

    /**
     * Gets auto_approved_by_roster_shift_id
     *
     * @return int|null
     */
    public function getAutoApprovedByRosterShiftId()
    {
        return $this->container['auto_approved_by_roster_shift_id'];
    }

    /**
     * Sets auto_approved_by_roster_shift_id
     *
     * @param int|null $auto_approved_by_roster_shift_id 
     *
     * @return self
     */
    public function setAutoApprovedByRosterShiftId($auto_approved_by_roster_shift_id)
    {
        if (is_null($auto_approved_by_roster_shift_id)) {
            throw new \InvalidArgumentException('non-nullable auto_approved_by_roster_shift_id cannot be null');
        }
        $this->container['auto_approved_by_roster_shift_id'] = $auto_approved_by_roster_shift_id;

        return $this;
    }

    /**
     * Gets work_duration_in_minutes
     *
     * @return float|null
     */
    public function getWorkDurationInMinutes()
    {
        return $this->container['work_duration_in_minutes'];
    }

    /**
     * Sets work_duration_in_minutes
     *
     * @param float|null $work_duration_in_minutes 
     *
     * @return self
     */
    public function setWorkDurationInMinutes($work_duration_in_minutes)
    {
        if (is_null($work_duration_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable work_duration_in_minutes cannot be null');
        }
        $this->container['work_duration_in_minutes'] = $work_duration_in_minutes;

        return $this;
    }

    /**
     * Gets breaks_duration_in_minutes
     *
     * @return float|null
     */
    public function getBreaksDurationInMinutes()
    {
        return $this->container['breaks_duration_in_minutes'];
    }

    /**
     * Sets breaks_duration_in_minutes
     *
     * @param float|null $breaks_duration_in_minutes 
     *
     * @return self
     */
    public function setBreaksDurationInMinutes($breaks_duration_in_minutes)
    {
        if (is_null($breaks_duration_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable breaks_duration_in_minutes cannot be null');
        }
        $this->container['breaks_duration_in_minutes'] = $breaks_duration_in_minutes;

        return $this;
    }

    /**
     * Gets total_duration_in_minutes
     *
     * @return float|null
     */
    public function getTotalDurationInMinutes()
    {
        return $this->container['total_duration_in_minutes'];
    }

    /**
     * Sets total_duration_in_minutes
     *
     * @param float|null $total_duration_in_minutes 
     *
     * @return self
     */
    public function setTotalDurationInMinutes($total_duration_in_minutes)
    {
        if (is_null($total_duration_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable total_duration_in_minutes cannot be null');
        }
        $this->container['total_duration_in_minutes'] = $total_duration_in_minutes;

        return $this;
    }

    /**
     * Gets hidden_comments
     *
     * @return string|null
     */
    public function getHiddenComments()
    {
        return $this->container['hidden_comments'];
    }

    /**
     * Sets hidden_comments
     *
     * @param string|null $hidden_comments 
     *
     * @return self
     */
    public function setHiddenComments($hidden_comments)
    {
        if (is_null($hidden_comments)) {
            throw new \InvalidArgumentException('non-nullable hidden_comments cannot be null');
        }
        $this->container['hidden_comments'] = $hidden_comments;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only 
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets ignore_rounding
     *
     * @return bool|null
     */
    public function getIgnoreRounding()
    {
        return $this->container['ignore_rounding'];
    }

    /**
     * Sets ignore_rounding
     *
     * @param bool|null $ignore_rounding 
     *
     * @return self
     */
    public function setIgnoreRounding($ignore_rounding)
    {
        if (is_null($ignore_rounding)) {
            throw new \InvalidArgumentException('non-nullable ignore_rounding cannot be null');
        }
        $this->container['ignore_rounding'] = $ignore_rounding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


