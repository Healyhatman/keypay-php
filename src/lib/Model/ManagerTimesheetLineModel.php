<?php
/**
 * ManagerTimesheetLineModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ManagerTimesheetLineModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManagerTimesheetLineModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ManagerTimesheetLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_location_id' => 'int',
        'default_location_name' => 'string',
        'pay_schedule_id' => 'int',
        'pay_schedule_name' => 'string',
        'employee_groups' => '\Swagger\Client\Model\ManagerEmployeeGroup[]',
        'shift_conditions' => '\Swagger\Client\Model\ShiftCondition[]',
        'cost_formatted' => 'string',
        'can_delete' => 'bool',
        'can_edit' => 'bool',
        'can_edit_notes_only' => 'bool',
        'can_view_costs' => 'bool',
        'can_approve' => 'bool',
        'termination_date' => '\DateTime',
        'employee_start_date' => '\DateTime',
        'employee_name' => 'string',
        'id' => 'int',
        'employee_id' => 'int',
        'location_id' => 'int',
        'work_type_id' => 'int',
        'work_type_name' => 'string',
        'location_name' => 'string',
        'unit_type' => 'string',
        'is_unit_based_work_type' => 'bool',
        'pay_run_id' => 'int',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'submitted_start' => '\DateTime',
        'submitted_end' => '\DateTime',
        'units' => 'double',
        'status' => 'string',
        'pay_slip_url' => 'string',
        'breaks' => '\Swagger\Client\Model\TimesheetBreakManagerModel[]',
        'comments' => 'string',
        'rate' => 'double',
        'external_reference_id' => 'string',
        'source' => 'string',
        'pay_category_id' => 'int',
        'leave_category_id' => 'int',
        'leave_request_id' => 'int',
        'is_locked' => 'bool',
        'cost' => 'double',
        'discard' => 'bool',
        'attachment' => '\Swagger\Client\Model\AttachmentModel',
        'is_overlapping' => 'bool',
        'overdraws_leave' => 'bool',
        'reviewed_by' => 'string',
        'duration_override' => 'string',
        'work_duration_in_minutes' => 'double',
        'breaks_duration_in_minutes' => 'double',
        'total_duration_in_minutes' => 'double',
        'hidden_comments' => 'string',
        'read_only' => 'bool',
        'ignore_rounding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_location_id' => 'int32',
        'default_location_name' => null,
        'pay_schedule_id' => 'int32',
        'pay_schedule_name' => null,
        'employee_groups' => null,
        'shift_conditions' => null,
        'cost_formatted' => null,
        'can_delete' => null,
        'can_edit' => null,
        'can_edit_notes_only' => null,
        'can_view_costs' => null,
        'can_approve' => null,
        'termination_date' => 'date-time',
        'employee_start_date' => 'date-time',
        'employee_name' => null,
        'id' => 'int32',
        'employee_id' => 'int32',
        'location_id' => 'int32',
        'work_type_id' => 'int32',
        'work_type_name' => null,
        'location_name' => null,
        'unit_type' => null,
        'is_unit_based_work_type' => null,
        'pay_run_id' => 'int32',
        'start' => 'date-time',
        'end' => 'date-time',
        'submitted_start' => 'date-time',
        'submitted_end' => 'date-time',
        'units' => 'double',
        'status' => null,
        'pay_slip_url' => null,
        'breaks' => null,
        'comments' => null,
        'rate' => 'double',
        'external_reference_id' => null,
        'source' => null,
        'pay_category_id' => 'int32',
        'leave_category_id' => 'int32',
        'leave_request_id' => 'int32',
        'is_locked' => null,
        'cost' => 'double',
        'discard' => null,
        'attachment' => null,
        'is_overlapping' => null,
        'overdraws_leave' => null,
        'reviewed_by' => null,
        'duration_override' => null,
        'work_duration_in_minutes' => 'double',
        'breaks_duration_in_minutes' => 'double',
        'total_duration_in_minutes' => 'double',
        'hidden_comments' => null,
        'read_only' => null,
        'ignore_rounding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_location_id' => 'defaultLocationId',
        'default_location_name' => 'defaultLocationName',
        'pay_schedule_id' => 'payScheduleId',
        'pay_schedule_name' => 'payScheduleName',
        'employee_groups' => 'employeeGroups',
        'shift_conditions' => 'shiftConditions',
        'cost_formatted' => 'costFormatted',
        'can_delete' => 'canDelete',
        'can_edit' => 'canEdit',
        'can_edit_notes_only' => 'canEditNotesOnly',
        'can_view_costs' => 'canViewCosts',
        'can_approve' => 'canApprove',
        'termination_date' => 'terminationDate',
        'employee_start_date' => 'employeeStartDate',
        'employee_name' => 'employeeName',
        'id' => 'id',
        'employee_id' => 'employeeId',
        'location_id' => 'locationId',
        'work_type_id' => 'workTypeId',
        'work_type_name' => 'workTypeName',
        'location_name' => 'locationName',
        'unit_type' => 'unitType',
        'is_unit_based_work_type' => 'isUnitBasedWorkType',
        'pay_run_id' => 'payRunId',
        'start' => 'start',
        'end' => 'end',
        'submitted_start' => 'submittedStart',
        'submitted_end' => 'submittedEnd',
        'units' => 'units',
        'status' => 'status',
        'pay_slip_url' => 'paySlipUrl',
        'breaks' => 'breaks',
        'comments' => 'comments',
        'rate' => 'rate',
        'external_reference_id' => 'externalReferenceId',
        'source' => 'source',
        'pay_category_id' => 'payCategoryId',
        'leave_category_id' => 'leaveCategoryId',
        'leave_request_id' => 'leaveRequestId',
        'is_locked' => 'isLocked',
        'cost' => 'cost',
        'discard' => 'discard',
        'attachment' => 'attachment',
        'is_overlapping' => 'isOverlapping',
        'overdraws_leave' => 'overdrawsLeave',
        'reviewed_by' => 'reviewedBy',
        'duration_override' => 'durationOverride',
        'work_duration_in_minutes' => 'workDurationInMinutes',
        'breaks_duration_in_minutes' => 'breaksDurationInMinutes',
        'total_duration_in_minutes' => 'totalDurationInMinutes',
        'hidden_comments' => 'hiddenComments',
        'read_only' => 'readOnly',
        'ignore_rounding' => 'ignoreRounding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_location_id' => 'setDefaultLocationId',
        'default_location_name' => 'setDefaultLocationName',
        'pay_schedule_id' => 'setPayScheduleId',
        'pay_schedule_name' => 'setPayScheduleName',
        'employee_groups' => 'setEmployeeGroups',
        'shift_conditions' => 'setShiftConditions',
        'cost_formatted' => 'setCostFormatted',
        'can_delete' => 'setCanDelete',
        'can_edit' => 'setCanEdit',
        'can_edit_notes_only' => 'setCanEditNotesOnly',
        'can_view_costs' => 'setCanViewCosts',
        'can_approve' => 'setCanApprove',
        'termination_date' => 'setTerminationDate',
        'employee_start_date' => 'setEmployeeStartDate',
        'employee_name' => 'setEmployeeName',
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'location_id' => 'setLocationId',
        'work_type_id' => 'setWorkTypeId',
        'work_type_name' => 'setWorkTypeName',
        'location_name' => 'setLocationName',
        'unit_type' => 'setUnitType',
        'is_unit_based_work_type' => 'setIsUnitBasedWorkType',
        'pay_run_id' => 'setPayRunId',
        'start' => 'setStart',
        'end' => 'setEnd',
        'submitted_start' => 'setSubmittedStart',
        'submitted_end' => 'setSubmittedEnd',
        'units' => 'setUnits',
        'status' => 'setStatus',
        'pay_slip_url' => 'setPaySlipUrl',
        'breaks' => 'setBreaks',
        'comments' => 'setComments',
        'rate' => 'setRate',
        'external_reference_id' => 'setExternalReferenceId',
        'source' => 'setSource',
        'pay_category_id' => 'setPayCategoryId',
        'leave_category_id' => 'setLeaveCategoryId',
        'leave_request_id' => 'setLeaveRequestId',
        'is_locked' => 'setIsLocked',
        'cost' => 'setCost',
        'discard' => 'setDiscard',
        'attachment' => 'setAttachment',
        'is_overlapping' => 'setIsOverlapping',
        'overdraws_leave' => 'setOverdrawsLeave',
        'reviewed_by' => 'setReviewedBy',
        'duration_override' => 'setDurationOverride',
        'work_duration_in_minutes' => 'setWorkDurationInMinutes',
        'breaks_duration_in_minutes' => 'setBreaksDurationInMinutes',
        'total_duration_in_minutes' => 'setTotalDurationInMinutes',
        'hidden_comments' => 'setHiddenComments',
        'read_only' => 'setReadOnly',
        'ignore_rounding' => 'setIgnoreRounding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_location_id' => 'getDefaultLocationId',
        'default_location_name' => 'getDefaultLocationName',
        'pay_schedule_id' => 'getPayScheduleId',
        'pay_schedule_name' => 'getPayScheduleName',
        'employee_groups' => 'getEmployeeGroups',
        'shift_conditions' => 'getShiftConditions',
        'cost_formatted' => 'getCostFormatted',
        'can_delete' => 'getCanDelete',
        'can_edit' => 'getCanEdit',
        'can_edit_notes_only' => 'getCanEditNotesOnly',
        'can_view_costs' => 'getCanViewCosts',
        'can_approve' => 'getCanApprove',
        'termination_date' => 'getTerminationDate',
        'employee_start_date' => 'getEmployeeStartDate',
        'employee_name' => 'getEmployeeName',
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'location_id' => 'getLocationId',
        'work_type_id' => 'getWorkTypeId',
        'work_type_name' => 'getWorkTypeName',
        'location_name' => 'getLocationName',
        'unit_type' => 'getUnitType',
        'is_unit_based_work_type' => 'getIsUnitBasedWorkType',
        'pay_run_id' => 'getPayRunId',
        'start' => 'getStart',
        'end' => 'getEnd',
        'submitted_start' => 'getSubmittedStart',
        'submitted_end' => 'getSubmittedEnd',
        'units' => 'getUnits',
        'status' => 'getStatus',
        'pay_slip_url' => 'getPaySlipUrl',
        'breaks' => 'getBreaks',
        'comments' => 'getComments',
        'rate' => 'getRate',
        'external_reference_id' => 'getExternalReferenceId',
        'source' => 'getSource',
        'pay_category_id' => 'getPayCategoryId',
        'leave_category_id' => 'getLeaveCategoryId',
        'leave_request_id' => 'getLeaveRequestId',
        'is_locked' => 'getIsLocked',
        'cost' => 'getCost',
        'discard' => 'getDiscard',
        'attachment' => 'getAttachment',
        'is_overlapping' => 'getIsOverlapping',
        'overdraws_leave' => 'getOverdrawsLeave',
        'reviewed_by' => 'getReviewedBy',
        'duration_override' => 'getDurationOverride',
        'work_duration_in_minutes' => 'getWorkDurationInMinutes',
        'breaks_duration_in_minutes' => 'getBreaksDurationInMinutes',
        'total_duration_in_minutes' => 'getTotalDurationInMinutes',
        'hidden_comments' => 'getHiddenComments',
        'read_only' => 'getReadOnly',
        'ignore_rounding' => 'getIgnoreRounding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_MISSING = 'Missing';
    const STATUS_SUBMITTED = 'Submitted';
    const STATUS_APPROVED = 'Approved';
    const STATUS_REJECTED = 'Rejected';
    const STATUS_PROCESSED = 'Processed';
    const SOURCE_NONE = 'None';
    const SOURCE_SAASU = 'Saasu';
    const SOURCE_XERO = 'Xero';
    const SOURCE_MYOB = 'MYOB';
    const SOURCE_DEPUTY = 'Deputy';
    const SOURCE_EMPLOYEE_TIME_PUNCH = 'EmployeeTimePunch';
    const SOURCE_CLICK_SUPER = 'ClickSuper';
    const SOURCE_INTEGRATED_TIMESHEETS = 'IntegratedTimesheets';
    const SOURCE_FILE_IMPORT = 'FileImport';
    const SOURCE_FILE_EXPORT = 'FileExport';
    const SOURCE_QUICK_BOOKS = 'QuickBooks';
    const SOURCE_HARMONY = 'Harmony';
    const SOURCE_AWARD_STORE = 'AwardStore';
    const SOURCE_ATTACHE = 'Attache';
    const SOURCE_INTEGRATED_ROSTERING = 'IntegratedRostering';
    const SOURCE_RECKON_ACCOUNTS = 'ReckonAccounts';
    const SOURCE_API = 'API';
    const SOURCE_MICRO_POWER = 'MicroPower';
    const SOURCE_ROSTER_LIVE = 'RosterLive';
    const SOURCE_NET_SUITE = 'NetSuite';
    const SOURCE_KOUNTA = 'Kounta';
    const SOURCE_TIME_AND_ATTENDANCE_KIOSK = 'TimeAndAttendanceKiosk';
    const SOURCE_DETAILED_FILE_EXPORT = 'DetailedFileExport';
    const SOURCE_JONAS_PREMIER = 'JonasPremier';
    const SOURCE_WAGE_EASY = 'WageEasy';
    const SOURCE_MAESTRANO = 'Maestrano';
    const SOURCE_WORK_ZONE = 'WorkZone';
    const SOURCE_EMPLOYEE_PORTAL = 'EmployeePortal';
    const SOURCE_ROSTER_TEMPLATE = 'RosterTemplate';
    const SOURCE_ONBOARDING = 'Onboarding';
    const SOURCE_ADMIN = 'Admin';
    const SOURCE_WORK_ZONE_CLOCK_ON_OFF = 'WorkZoneClockOnOff';
    const SOURCE_NET_SUITE_ONE_WORLD = 'NetSuiteOneWorld';
    const SOURCE_SAGE50 = 'Sage50';
    const SOURCE_PENSION_SYNC = 'PensionSync';
    const SOURCE_FINANCIALS_OFFICE = 'FinancialsOffice';
    const SOURCE_PRONTO_XI = 'ProntoXI';
    const SOURCE_PAY_RUN_DEFAULT = 'PayRunDefault';
    const SOURCE_STANDARD_WORK_DAY = 'StandardWorkDay';
    const SOURCE_BEAM = 'Beam';
    const SOURCE_PAY_RUN_AUTOMATION = 'PayRunAutomation';
    const SOURCE_BUREAU_DASHBOARD = 'BureauDashboard';
    const SOURCE_WIISE = 'Wiise';
    const SOURCE_QBO_MIGRATION_TOOL = 'QBOMigrationTool';
    const SOURCE_ABRIDGED_FILE_IMPORT = 'AbridgedFileImport';
    const SOURCE_QBO_FORCED_MIGRATION = 'QBOForcedMigration';
    const SOURCE_HMRC_DPS_UPDATE = 'HmrcDpsUpdate';
    const SOURCE_HMRC_DPS_STUDENT_LOAN = 'HmrcDpsStudentLoan';
    const SOURCE_HMRC_DPS_POST_GRAD_LOAN = 'HmrcDpsPostGradLoan';
    const SOURCE_SAGE50_FILE_IMPORTER = 'Sage50FileImporter';
    const SOURCE_FPS_FILE_IMPORTER = 'FPSFileImporter';
    const SOURCE_O_AUTH = 'OAuth';
    const SOURCE_FRESH_BOOKS = 'FreshBooks';
    const SOURCE_STAR_FILE_IMPORTER = 'StarFileImporter';
    const SOURCE_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    const SOURCE_SUMMARY_AND_DETAILS_EXPORT = 'SummaryAndDetailsExport';
    const SOURCE_TELLEROO = 'Telleroo';
    const SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD = 'EmployeeAdvancedHoursUpload';
    const SOURCE_BUSINESS_CENTRAL = 'BusinessCentral';
    const SOURCE_PAYTRON = 'Paytron';
    const SOURCE_ZOHO = 'Zoho';
    const SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER = 'FlatFileEmployeeImporter';
    const SOURCE_TWINFIELD = 'Twinfield';
    const SOURCE_SAGE_ACCOUNTING = 'SageAccounting';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_MISSING,
            self::STATUS_SUBMITTED,
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_PROCESSED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_NONE,
            self::SOURCE_SAASU,
            self::SOURCE_XERO,
            self::SOURCE_MYOB,
            self::SOURCE_DEPUTY,
            self::SOURCE_EMPLOYEE_TIME_PUNCH,
            self::SOURCE_CLICK_SUPER,
            self::SOURCE_INTEGRATED_TIMESHEETS,
            self::SOURCE_FILE_IMPORT,
            self::SOURCE_FILE_EXPORT,
            self::SOURCE_QUICK_BOOKS,
            self::SOURCE_HARMONY,
            self::SOURCE_AWARD_STORE,
            self::SOURCE_ATTACHE,
            self::SOURCE_INTEGRATED_ROSTERING,
            self::SOURCE_RECKON_ACCOUNTS,
            self::SOURCE_API,
            self::SOURCE_MICRO_POWER,
            self::SOURCE_ROSTER_LIVE,
            self::SOURCE_NET_SUITE,
            self::SOURCE_KOUNTA,
            self::SOURCE_TIME_AND_ATTENDANCE_KIOSK,
            self::SOURCE_DETAILED_FILE_EXPORT,
            self::SOURCE_JONAS_PREMIER,
            self::SOURCE_WAGE_EASY,
            self::SOURCE_MAESTRANO,
            self::SOURCE_WORK_ZONE,
            self::SOURCE_EMPLOYEE_PORTAL,
            self::SOURCE_ROSTER_TEMPLATE,
            self::SOURCE_ONBOARDING,
            self::SOURCE_ADMIN,
            self::SOURCE_WORK_ZONE_CLOCK_ON_OFF,
            self::SOURCE_NET_SUITE_ONE_WORLD,
            self::SOURCE_SAGE50,
            self::SOURCE_PENSION_SYNC,
            self::SOURCE_FINANCIALS_OFFICE,
            self::SOURCE_PRONTO_XI,
            self::SOURCE_PAY_RUN_DEFAULT,
            self::SOURCE_STANDARD_WORK_DAY,
            self::SOURCE_BEAM,
            self::SOURCE_PAY_RUN_AUTOMATION,
            self::SOURCE_BUREAU_DASHBOARD,
            self::SOURCE_WIISE,
            self::SOURCE_QBO_MIGRATION_TOOL,
            self::SOURCE_ABRIDGED_FILE_IMPORT,
            self::SOURCE_QBO_FORCED_MIGRATION,
            self::SOURCE_HMRC_DPS_UPDATE,
            self::SOURCE_HMRC_DPS_STUDENT_LOAN,
            self::SOURCE_HMRC_DPS_POST_GRAD_LOAN,
            self::SOURCE_SAGE50_FILE_IMPORTER,
            self::SOURCE_FPS_FILE_IMPORTER,
            self::SOURCE_O_AUTH,
            self::SOURCE_FRESH_BOOKS,
            self::SOURCE_STAR_FILE_IMPORTER,
            self::SOURCE_ACTIVE_CAMPAIGN,
            self::SOURCE_SUMMARY_AND_DETAILS_EXPORT,
            self::SOURCE_TELLEROO,
            self::SOURCE_EMPLOYEE_ADVANCED_HOURS_UPLOAD,
            self::SOURCE_BUSINESS_CENTRAL,
            self::SOURCE_PAYTRON,
            self::SOURCE_ZOHO,
            self::SOURCE_FLAT_FILE_EMPLOYEE_IMPORTER,
            self::SOURCE_TWINFIELD,
            self::SOURCE_SAGE_ACCOUNTING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_location_id'] = isset($data['default_location_id']) ? $data['default_location_id'] : null;
        $this->container['default_location_name'] = isset($data['default_location_name']) ? $data['default_location_name'] : null;
        $this->container['pay_schedule_id'] = isset($data['pay_schedule_id']) ? $data['pay_schedule_id'] : null;
        $this->container['pay_schedule_name'] = isset($data['pay_schedule_name']) ? $data['pay_schedule_name'] : null;
        $this->container['employee_groups'] = isset($data['employee_groups']) ? $data['employee_groups'] : null;
        $this->container['shift_conditions'] = isset($data['shift_conditions']) ? $data['shift_conditions'] : null;
        $this->container['cost_formatted'] = isset($data['cost_formatted']) ? $data['cost_formatted'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_edit_notes_only'] = isset($data['can_edit_notes_only']) ? $data['can_edit_notes_only'] : null;
        $this->container['can_view_costs'] = isset($data['can_view_costs']) ? $data['can_view_costs'] : null;
        $this->container['can_approve'] = isset($data['can_approve']) ? $data['can_approve'] : null;
        $this->container['termination_date'] = isset($data['termination_date']) ? $data['termination_date'] : null;
        $this->container['employee_start_date'] = isset($data['employee_start_date']) ? $data['employee_start_date'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['work_type_id'] = isset($data['work_type_id']) ? $data['work_type_id'] : null;
        $this->container['work_type_name'] = isset($data['work_type_name']) ? $data['work_type_name'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['is_unit_based_work_type'] = isset($data['is_unit_based_work_type']) ? $data['is_unit_based_work_type'] : null;
        $this->container['pay_run_id'] = isset($data['pay_run_id']) ? $data['pay_run_id'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['submitted_start'] = isset($data['submitted_start']) ? $data['submitted_start'] : null;
        $this->container['submitted_end'] = isset($data['submitted_end']) ? $data['submitted_end'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['pay_slip_url'] = isset($data['pay_slip_url']) ? $data['pay_slip_url'] : null;
        $this->container['breaks'] = isset($data['breaks']) ? $data['breaks'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['external_reference_id'] = isset($data['external_reference_id']) ? $data['external_reference_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['pay_category_id'] = isset($data['pay_category_id']) ? $data['pay_category_id'] : null;
        $this->container['leave_category_id'] = isset($data['leave_category_id']) ? $data['leave_category_id'] : null;
        $this->container['leave_request_id'] = isset($data['leave_request_id']) ? $data['leave_request_id'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['discard'] = isset($data['discard']) ? $data['discard'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['is_overlapping'] = isset($data['is_overlapping']) ? $data['is_overlapping'] : null;
        $this->container['overdraws_leave'] = isset($data['overdraws_leave']) ? $data['overdraws_leave'] : null;
        $this->container['reviewed_by'] = isset($data['reviewed_by']) ? $data['reviewed_by'] : null;
        $this->container['duration_override'] = isset($data['duration_override']) ? $data['duration_override'] : null;
        $this->container['work_duration_in_minutes'] = isset($data['work_duration_in_minutes']) ? $data['work_duration_in_minutes'] : null;
        $this->container['breaks_duration_in_minutes'] = isset($data['breaks_duration_in_minutes']) ? $data['breaks_duration_in_minutes'] : null;
        $this->container['total_duration_in_minutes'] = isset($data['total_duration_in_minutes']) ? $data['total_duration_in_minutes'] : null;
        $this->container['hidden_comments'] = isset($data['hidden_comments']) ? $data['hidden_comments'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['ignore_rounding'] = isset($data['ignore_rounding']) ? $data['ignore_rounding'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_location_id
     *
     * @return int
     */
    public function getDefaultLocationId()
    {
        return $this->container['default_location_id'];
    }

    /**
     * Sets default_location_id
     *
     * @param int $default_location_id 
     *
     * @return $this
     */
    public function setDefaultLocationId($default_location_id)
    {
        $this->container['default_location_id'] = $default_location_id;

        return $this;
    }

    /**
     * Gets default_location_name
     *
     * @return string
     */
    public function getDefaultLocationName()
    {
        return $this->container['default_location_name'];
    }

    /**
     * Sets default_location_name
     *
     * @param string $default_location_name 
     *
     * @return $this
     */
    public function setDefaultLocationName($default_location_name)
    {
        $this->container['default_location_name'] = $default_location_name;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int $pay_schedule_id 
     *
     * @return $this
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets pay_schedule_name
     *
     * @return string
     */
    public function getPayScheduleName()
    {
        return $this->container['pay_schedule_name'];
    }

    /**
     * Sets pay_schedule_name
     *
     * @param string $pay_schedule_name 
     *
     * @return $this
     */
    public function setPayScheduleName($pay_schedule_name)
    {
        $this->container['pay_schedule_name'] = $pay_schedule_name;

        return $this;
    }

    /**
     * Gets employee_groups
     *
     * @return \Swagger\Client\Model\ManagerEmployeeGroup[]
     */
    public function getEmployeeGroups()
    {
        return $this->container['employee_groups'];
    }

    /**
     * Sets employee_groups
     *
     * @param \Swagger\Client\Model\ManagerEmployeeGroup[] $employee_groups 
     *
     * @return $this
     */
    public function setEmployeeGroups($employee_groups)
    {
        $this->container['employee_groups'] = $employee_groups;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \Swagger\Client\Model\ShiftCondition[]
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \Swagger\Client\Model\ShiftCondition[] $shift_conditions 
     *
     * @return $this
     */
    public function setShiftConditions($shift_conditions)
    {
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets cost_formatted
     *
     * @return string
     */
    public function getCostFormatted()
    {
        return $this->container['cost_formatted'];
    }

    /**
     * Sets cost_formatted
     *
     * @param string $cost_formatted 
     *
     * @return $this
     */
    public function setCostFormatted($cost_formatted)
    {
        $this->container['cost_formatted'] = $cost_formatted;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete 
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit 
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_edit_notes_only
     *
     * @return bool
     */
    public function getCanEditNotesOnly()
    {
        return $this->container['can_edit_notes_only'];
    }

    /**
     * Sets can_edit_notes_only
     *
     * @param bool $can_edit_notes_only 
     *
     * @return $this
     */
    public function setCanEditNotesOnly($can_edit_notes_only)
    {
        $this->container['can_edit_notes_only'] = $can_edit_notes_only;

        return $this;
    }

    /**
     * Gets can_view_costs
     *
     * @return bool
     */
    public function getCanViewCosts()
    {
        return $this->container['can_view_costs'];
    }

    /**
     * Sets can_view_costs
     *
     * @param bool $can_view_costs 
     *
     * @return $this
     */
    public function setCanViewCosts($can_view_costs)
    {
        $this->container['can_view_costs'] = $can_view_costs;

        return $this;
    }

    /**
     * Gets can_approve
     *
     * @return bool
     */
    public function getCanApprove()
    {
        return $this->container['can_approve'];
    }

    /**
     * Sets can_approve
     *
     * @param bool $can_approve 
     *
     * @return $this
     */
    public function setCanApprove($can_approve)
    {
        $this->container['can_approve'] = $can_approve;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime $termination_date 
     *
     * @return $this
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets employee_start_date
     *
     * @return \DateTime
     */
    public function getEmployeeStartDate()
    {
        return $this->container['employee_start_date'];
    }

    /**
     * Sets employee_start_date
     *
     * @param \DateTime $employee_start_date 
     *
     * @return $this
     */
    public function setEmployeeStartDate($employee_start_date)
    {
        $this->container['employee_start_date'] = $employee_start_date;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name 
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id 
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int $work_type_id 
     *
     * @return $this
     */
    public function setWorkTypeId($work_type_id)
    {
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets work_type_name
     *
     * @return string
     */
    public function getWorkTypeName()
    {
        return $this->container['work_type_name'];
    }

    /**
     * Sets work_type_name
     *
     * @param string $work_type_name 
     *
     * @return $this
     */
    public function setWorkTypeName($work_type_name)
    {
        $this->container['work_type_name'] = $work_type_name;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name 
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type 
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets is_unit_based_work_type
     *
     * @return bool
     */
    public function getIsUnitBasedWorkType()
    {
        return $this->container['is_unit_based_work_type'];
    }

    /**
     * Sets is_unit_based_work_type
     *
     * @param bool $is_unit_based_work_type 
     *
     * @return $this
     */
    public function setIsUnitBasedWorkType($is_unit_based_work_type)
    {
        $this->container['is_unit_based_work_type'] = $is_unit_based_work_type;

        return $this;
    }

    /**
     * Gets pay_run_id
     *
     * @return int
     */
    public function getPayRunId()
    {
        return $this->container['pay_run_id'];
    }

    /**
     * Sets pay_run_id
     *
     * @param int $pay_run_id 
     *
     * @return $this
     */
    public function setPayRunId($pay_run_id)
    {
        $this->container['pay_run_id'] = $pay_run_id;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start 
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end 
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets submitted_start
     *
     * @return \DateTime
     */
    public function getSubmittedStart()
    {
        return $this->container['submitted_start'];
    }

    /**
     * Sets submitted_start
     *
     * @param \DateTime $submitted_start 
     *
     * @return $this
     */
    public function setSubmittedStart($submitted_start)
    {
        $this->container['submitted_start'] = $submitted_start;

        return $this;
    }

    /**
     * Gets submitted_end
     *
     * @return \DateTime
     */
    public function getSubmittedEnd()
    {
        return $this->container['submitted_end'];
    }

    /**
     * Sets submitted_end
     *
     * @param \DateTime $submitted_end 
     *
     * @return $this
     */
    public function setSubmittedEnd($submitted_end)
    {
        $this->container['submitted_end'] = $submitted_end;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units 
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pay_slip_url
     *
     * @return string
     */
    public function getPaySlipUrl()
    {
        return $this->container['pay_slip_url'];
    }

    /**
     * Sets pay_slip_url
     *
     * @param string $pay_slip_url 
     *
     * @return $this
     */
    public function setPaySlipUrl($pay_slip_url)
    {
        $this->container['pay_slip_url'] = $pay_slip_url;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \Swagger\Client\Model\TimesheetBreakManagerModel[]
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \Swagger\Client\Model\TimesheetBreakManagerModel[] $breaks 
     *
     * @return $this
     */
    public function setBreaks($breaks)
    {
        $this->container['breaks'] = $breaks;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments 
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate 
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string $external_reference_id 
     *
     * @return $this
     */
    public function setExternalReferenceId($external_reference_id)
    {
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source 
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int $pay_category_id 
     *
     * @return $this
     */
    public function setPayCategoryId($pay_category_id)
    {
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int $leave_category_id 
     *
     * @return $this
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets leave_request_id
     *
     * @return int
     */
    public function getLeaveRequestId()
    {
        return $this->container['leave_request_id'];
    }

    /**
     * Sets leave_request_id
     *
     * @param int $leave_request_id 
     *
     * @return $this
     */
    public function setLeaveRequestId($leave_request_id)
    {
        $this->container['leave_request_id'] = $leave_request_id;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked 
     *
     * @return $this
     */
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost 
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets discard
     *
     * @return bool
     */
    public function getDiscard()
    {
        return $this->container['discard'];
    }

    /**
     * Sets discard
     *
     * @param bool $discard 
     *
     * @return $this
     */
    public function setDiscard($discard)
    {
        $this->container['discard'] = $discard;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \Swagger\Client\Model\AttachmentModel
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \Swagger\Client\Model\AttachmentModel $attachment 
     *
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets is_overlapping
     *
     * @return bool
     */
    public function getIsOverlapping()
    {
        return $this->container['is_overlapping'];
    }

    /**
     * Sets is_overlapping
     *
     * @param bool $is_overlapping 
     *
     * @return $this
     */
    public function setIsOverlapping($is_overlapping)
    {
        $this->container['is_overlapping'] = $is_overlapping;

        return $this;
    }

    /**
     * Gets overdraws_leave
     *
     * @return bool
     */
    public function getOverdrawsLeave()
    {
        return $this->container['overdraws_leave'];
    }

    /**
     * Sets overdraws_leave
     *
     * @param bool $overdraws_leave 
     *
     * @return $this
     */
    public function setOverdrawsLeave($overdraws_leave)
    {
        $this->container['overdraws_leave'] = $overdraws_leave;

        return $this;
    }

    /**
     * Gets reviewed_by
     *
     * @return string
     */
    public function getReviewedBy()
    {
        return $this->container['reviewed_by'];
    }

    /**
     * Sets reviewed_by
     *
     * @param string $reviewed_by 
     *
     * @return $this
     */
    public function setReviewedBy($reviewed_by)
    {
        $this->container['reviewed_by'] = $reviewed_by;

        return $this;
    }

    /**
     * Gets duration_override
     *
     * @return string
     */
    public function getDurationOverride()
    {
        return $this->container['duration_override'];
    }

    /**
     * Sets duration_override
     *
     * @param string $duration_override 
     *
     * @return $this
     */
    public function setDurationOverride($duration_override)
    {
        $this->container['duration_override'] = $duration_override;

        return $this;
    }

    /**
     * Gets work_duration_in_minutes
     *
     * @return double
     */
    public function getWorkDurationInMinutes()
    {
        return $this->container['work_duration_in_minutes'];
    }

    /**
     * Sets work_duration_in_minutes
     *
     * @param double $work_duration_in_minutes 
     *
     * @return $this
     */
    public function setWorkDurationInMinutes($work_duration_in_minutes)
    {
        $this->container['work_duration_in_minutes'] = $work_duration_in_minutes;

        return $this;
    }

    /**
     * Gets breaks_duration_in_minutes
     *
     * @return double
     */
    public function getBreaksDurationInMinutes()
    {
        return $this->container['breaks_duration_in_minutes'];
    }

    /**
     * Sets breaks_duration_in_minutes
     *
     * @param double $breaks_duration_in_minutes 
     *
     * @return $this
     */
    public function setBreaksDurationInMinutes($breaks_duration_in_minutes)
    {
        $this->container['breaks_duration_in_minutes'] = $breaks_duration_in_minutes;

        return $this;
    }

    /**
     * Gets total_duration_in_minutes
     *
     * @return double
     */
    public function getTotalDurationInMinutes()
    {
        return $this->container['total_duration_in_minutes'];
    }

    /**
     * Sets total_duration_in_minutes
     *
     * @param double $total_duration_in_minutes 
     *
     * @return $this
     */
    public function setTotalDurationInMinutes($total_duration_in_minutes)
    {
        $this->container['total_duration_in_minutes'] = $total_duration_in_minutes;

        return $this;
    }

    /**
     * Gets hidden_comments
     *
     * @return string
     */
    public function getHiddenComments()
    {
        return $this->container['hidden_comments'];
    }

    /**
     * Sets hidden_comments
     *
     * @param string $hidden_comments 
     *
     * @return $this
     */
    public function setHiddenComments($hidden_comments)
    {
        $this->container['hidden_comments'] = $hidden_comments;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only 
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets ignore_rounding
     *
     * @return bool
     */
    public function getIgnoreRounding()
    {
        return $this->container['ignore_rounding'];
    }

    /**
     * Sets ignore_rounding
     *
     * @param bool $ignore_rounding 
     *
     * @return $this
     */
    public function setIgnoreRounding($ignore_rounding)
    {
        $this->container['ignore_rounding'] = $ignore_rounding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


