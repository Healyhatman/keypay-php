<?php
/**
 * AuManagerRosterShiftModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuManagerRosterShiftModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuManagerRosterShiftModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuManagerRosterShiftModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'classification_id' => 'int',
        'classification_name' => 'string',
        'employee_phone_number' => 'string',
        'cost' => 'float',
        'cost_formatted' => 'string',
        'warnings' => 'string[]',
        'is_leave_based_roster_shift' => 'bool',
        'current_shift' => '\OpenAPI\Client\Model\ManagerCurrentRosterShift',
        'id' => 'int',
        'token' => 'string',
        'qualifications' => '\OpenAPI\Client\Model\QualificationModel[]',
        'breaks' => '\OpenAPI\Client\Model\RosterShiftBreakApiModel[]',
        'employee_id' => 'int',
        'employee_name' => 'string',
        'location_id' => 'int',
        'location_name' => 'string',
        'work_type_id' => 'int',
        'work_type_name' => 'string',
        'role' => '\OpenAPI\Client\Model\RosterShiftRole',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'notes' => 'string',
        'published' => 'bool',
        'accepted' => 'bool',
        'pending_swap' => '\OpenAPI\Client\Model\RosterShiftSwapModel',
        'date_published' => '\DateTime',
        'biddable' => 'bool',
        'shift_swap_cutoff_time' => '\DateTime',
        'shift_assignment_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'classification_id' => 'int32',
        'classification_name' => null,
        'employee_phone_number' => null,
        'cost' => 'double',
        'cost_formatted' => null,
        'warnings' => null,
        'is_leave_based_roster_shift' => null,
        'current_shift' => null,
        'id' => 'int32',
        'token' => null,
        'qualifications' => null,
        'breaks' => null,
        'employee_id' => 'int32',
        'employee_name' => null,
        'location_id' => 'int32',
        'location_name' => null,
        'work_type_id' => 'int32',
        'work_type_name' => null,
        'role' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'notes' => null,
        'published' => null,
        'accepted' => null,
        'pending_swap' => null,
        'date_published' => 'date-time',
        'biddable' => null,
        'shift_swap_cutoff_time' => 'date-time',
        'shift_assignment_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'classification_id' => false,
		'classification_name' => false,
		'employee_phone_number' => false,
		'cost' => false,
		'cost_formatted' => false,
		'warnings' => false,
		'is_leave_based_roster_shift' => false,
		'current_shift' => false,
		'id' => false,
		'token' => false,
		'qualifications' => false,
		'breaks' => false,
		'employee_id' => false,
		'employee_name' => false,
		'location_id' => false,
		'location_name' => false,
		'work_type_id' => false,
		'work_type_name' => false,
		'role' => false,
		'start_time' => false,
		'end_time' => false,
		'notes' => false,
		'published' => false,
		'accepted' => false,
		'pending_swap' => false,
		'date_published' => false,
		'biddable' => false,
		'shift_swap_cutoff_time' => false,
		'shift_assignment_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classification_id' => 'classificationId',
        'classification_name' => 'classificationName',
        'employee_phone_number' => 'employeePhoneNumber',
        'cost' => 'cost',
        'cost_formatted' => 'costFormatted',
        'warnings' => 'warnings',
        'is_leave_based_roster_shift' => 'isLeaveBasedRosterShift',
        'current_shift' => 'currentShift',
        'id' => 'id',
        'token' => 'token',
        'qualifications' => 'qualifications',
        'breaks' => 'breaks',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'work_type_id' => 'workTypeId',
        'work_type_name' => 'workTypeName',
        'role' => 'role',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'notes' => 'notes',
        'published' => 'published',
        'accepted' => 'accepted',
        'pending_swap' => 'pendingSwap',
        'date_published' => 'datePublished',
        'biddable' => 'biddable',
        'shift_swap_cutoff_time' => 'shiftSwapCutoffTime',
        'shift_assignment_status' => 'shiftAssignmentStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classification_id' => 'setClassificationId',
        'classification_name' => 'setClassificationName',
        'employee_phone_number' => 'setEmployeePhoneNumber',
        'cost' => 'setCost',
        'cost_formatted' => 'setCostFormatted',
        'warnings' => 'setWarnings',
        'is_leave_based_roster_shift' => 'setIsLeaveBasedRosterShift',
        'current_shift' => 'setCurrentShift',
        'id' => 'setId',
        'token' => 'setToken',
        'qualifications' => 'setQualifications',
        'breaks' => 'setBreaks',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'work_type_id' => 'setWorkTypeId',
        'work_type_name' => 'setWorkTypeName',
        'role' => 'setRole',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'notes' => 'setNotes',
        'published' => 'setPublished',
        'accepted' => 'setAccepted',
        'pending_swap' => 'setPendingSwap',
        'date_published' => 'setDatePublished',
        'biddable' => 'setBiddable',
        'shift_swap_cutoff_time' => 'setShiftSwapCutoffTime',
        'shift_assignment_status' => 'setShiftAssignmentStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classification_id' => 'getClassificationId',
        'classification_name' => 'getClassificationName',
        'employee_phone_number' => 'getEmployeePhoneNumber',
        'cost' => 'getCost',
        'cost_formatted' => 'getCostFormatted',
        'warnings' => 'getWarnings',
        'is_leave_based_roster_shift' => 'getIsLeaveBasedRosterShift',
        'current_shift' => 'getCurrentShift',
        'id' => 'getId',
        'token' => 'getToken',
        'qualifications' => 'getQualifications',
        'breaks' => 'getBreaks',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'work_type_id' => 'getWorkTypeId',
        'work_type_name' => 'getWorkTypeName',
        'role' => 'getRole',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'notes' => 'getNotes',
        'published' => 'getPublished',
        'accepted' => 'getAccepted',
        'pending_swap' => 'getPendingSwap',
        'date_published' => 'getDatePublished',
        'biddable' => 'getBiddable',
        'shift_swap_cutoff_time' => 'getShiftSwapCutoffTime',
        'shift_assignment_status' => 'getShiftAssignmentStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIFT_ASSIGNMENT_STATUS_PENDING = 'Pending';
    public const SHIFT_ASSIGNMENT_STATUS_ASSIGNED = 'Assigned';
    public const SHIFT_ASSIGNMENT_STATUS_BIDDING = 'Bidding';
    public const SHIFT_ASSIGNMENT_STATUS_PENDING_SHIFT_SWAP = 'PendingShiftSwap';
    public const SHIFT_ASSIGNMENT_STATUS_PENDING_SHIFT_SWAP_AWAITING_APPROVAL = 'PendingShiftSwapAwaitingApproval';
    public const SHIFT_ASSIGNMENT_STATUS_PROPOSED_SHIFT_SWAP = 'ProposedShiftSwap';
    public const SHIFT_ASSIGNMENT_STATUS_PROPOSED_SHIFT_SWAP_AWAITING_APPROVAL = 'ProposedShiftSwapAwaitingApproval';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftAssignmentStatusAllowableValues()
    {
        return [
            self::SHIFT_ASSIGNMENT_STATUS_PENDING,
            self::SHIFT_ASSIGNMENT_STATUS_ASSIGNED,
            self::SHIFT_ASSIGNMENT_STATUS_BIDDING,
            self::SHIFT_ASSIGNMENT_STATUS_PENDING_SHIFT_SWAP,
            self::SHIFT_ASSIGNMENT_STATUS_PENDING_SHIFT_SWAP_AWAITING_APPROVAL,
            self::SHIFT_ASSIGNMENT_STATUS_PROPOSED_SHIFT_SWAP,
            self::SHIFT_ASSIGNMENT_STATUS_PROPOSED_SHIFT_SWAP_AWAITING_APPROVAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('classification_id', $data ?? [], null);
        $this->setIfExists('classification_name', $data ?? [], null);
        $this->setIfExists('employee_phone_number', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('cost_formatted', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('is_leave_based_roster_shift', $data ?? [], null);
        $this->setIfExists('current_shift', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('qualifications', $data ?? [], null);
        $this->setIfExists('breaks', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('work_type_id', $data ?? [], null);
        $this->setIfExists('work_type_name', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('pending_swap', $data ?? [], null);
        $this->setIfExists('date_published', $data ?? [], null);
        $this->setIfExists('biddable', $data ?? [], null);
        $this->setIfExists('shift_swap_cutoff_time', $data ?? [], null);
        $this->setIfExists('shift_assignment_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShiftAssignmentStatusAllowableValues();
        if (!is_null($this->container['shift_assignment_status']) && !in_array($this->container['shift_assignment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shift_assignment_status', must be one of '%s'",
                $this->container['shift_assignment_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets classification_id
     *
     * @return int|null
     */
    public function getClassificationId()
    {
        return $this->container['classification_id'];
    }

    /**
     * Sets classification_id
     *
     * @param int|null $classification_id 
     *
     * @return self
     */
    public function setClassificationId($classification_id)
    {
        if (is_null($classification_id)) {
            throw new \InvalidArgumentException('non-nullable classification_id cannot be null');
        }
        $this->container['classification_id'] = $classification_id;

        return $this;
    }

    /**
     * Gets classification_name
     *
     * @return string|null
     */
    public function getClassificationName()
    {
        return $this->container['classification_name'];
    }

    /**
     * Sets classification_name
     *
     * @param string|null $classification_name 
     *
     * @return self
     */
    public function setClassificationName($classification_name)
    {
        if (is_null($classification_name)) {
            throw new \InvalidArgumentException('non-nullable classification_name cannot be null');
        }
        $this->container['classification_name'] = $classification_name;

        return $this;
    }

    /**
     * Gets employee_phone_number
     *
     * @return string|null
     */
    public function getEmployeePhoneNumber()
    {
        return $this->container['employee_phone_number'];
    }

    /**
     * Sets employee_phone_number
     *
     * @param string|null $employee_phone_number 
     *
     * @return self
     */
    public function setEmployeePhoneNumber($employee_phone_number)
    {
        if (is_null($employee_phone_number)) {
            throw new \InvalidArgumentException('non-nullable employee_phone_number cannot be null');
        }
        $this->container['employee_phone_number'] = $employee_phone_number;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost 
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets cost_formatted
     *
     * @return string|null
     */
    public function getCostFormatted()
    {
        return $this->container['cost_formatted'];
    }

    /**
     * Sets cost_formatted
     *
     * @param string|null $cost_formatted 
     *
     * @return self
     */
    public function setCostFormatted($cost_formatted)
    {
        if (is_null($cost_formatted)) {
            throw new \InvalidArgumentException('non-nullable cost_formatted cannot be null');
        }
        $this->container['cost_formatted'] = $cost_formatted;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[]|null $warnings 
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets is_leave_based_roster_shift
     *
     * @return bool|null
     */
    public function getIsLeaveBasedRosterShift()
    {
        return $this->container['is_leave_based_roster_shift'];
    }

    /**
     * Sets is_leave_based_roster_shift
     *
     * @param bool|null $is_leave_based_roster_shift 
     *
     * @return self
     */
    public function setIsLeaveBasedRosterShift($is_leave_based_roster_shift)
    {
        if (is_null($is_leave_based_roster_shift)) {
            throw new \InvalidArgumentException('non-nullable is_leave_based_roster_shift cannot be null');
        }
        $this->container['is_leave_based_roster_shift'] = $is_leave_based_roster_shift;

        return $this;
    }

    /**
     * Gets current_shift
     *
     * @return \OpenAPI\Client\Model\ManagerCurrentRosterShift|null
     */
    public function getCurrentShift()
    {
        return $this->container['current_shift'];
    }

    /**
     * Sets current_shift
     *
     * @param \OpenAPI\Client\Model\ManagerCurrentRosterShift|null $current_shift current_shift
     *
     * @return self
     */
    public function setCurrentShift($current_shift)
    {
        if (is_null($current_shift)) {
            throw new \InvalidArgumentException('non-nullable current_shift cannot be null');
        }
        $this->container['current_shift'] = $current_shift;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token 
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets qualifications
     *
     * @return \OpenAPI\Client\Model\QualificationModel[]|null
     */
    public function getQualifications()
    {
        return $this->container['qualifications'];
    }

    /**
     * Sets qualifications
     *
     * @param \OpenAPI\Client\Model\QualificationModel[]|null $qualifications 
     *
     * @return self
     */
    public function setQualifications($qualifications)
    {
        if (is_null($qualifications)) {
            throw new \InvalidArgumentException('non-nullable qualifications cannot be null');
        }
        $this->container['qualifications'] = $qualifications;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \OpenAPI\Client\Model\RosterShiftBreakApiModel[]|null
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \OpenAPI\Client\Model\RosterShiftBreakApiModel[]|null $breaks 
     *
     * @return self
     */
    public function setBreaks($breaks)
    {
        if (is_null($breaks)) {
            throw new \InvalidArgumentException('non-nullable breaks cannot be null');
        }
        $this->container['breaks'] = $breaks;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id 
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name 
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id 
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets work_type_id
     *
     * @return int|null
     */
    public function getWorkTypeId()
    {
        return $this->container['work_type_id'];
    }

    /**
     * Sets work_type_id
     *
     * @param int|null $work_type_id 
     *
     * @return self
     */
    public function setWorkTypeId($work_type_id)
    {
        if (is_null($work_type_id)) {
            throw new \InvalidArgumentException('non-nullable work_type_id cannot be null');
        }
        $this->container['work_type_id'] = $work_type_id;

        return $this;
    }

    /**
     * Gets work_type_name
     *
     * @return string|null
     */
    public function getWorkTypeName()
    {
        return $this->container['work_type_name'];
    }

    /**
     * Sets work_type_name
     *
     * @param string|null $work_type_name 
     *
     * @return self
     */
    public function setWorkTypeName($work_type_name)
    {
        if (is_null($work_type_name)) {
            throw new \InvalidArgumentException('non-nullable work_type_name cannot be null');
        }
        $this->container['work_type_name'] = $work_type_name;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\RosterShiftRole|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\RosterShiftRole|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time 
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time 
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes 
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published 
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            throw new \InvalidArgumentException('non-nullable published cannot be null');
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool|null
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool|null $accepted 
     *
     * @return self
     */
    public function setAccepted($accepted)
    {
        if (is_null($accepted)) {
            throw new \InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets pending_swap
     *
     * @return \OpenAPI\Client\Model\RosterShiftSwapModel|null
     */
    public function getPendingSwap()
    {
        return $this->container['pending_swap'];
    }

    /**
     * Sets pending_swap
     *
     * @param \OpenAPI\Client\Model\RosterShiftSwapModel|null $pending_swap pending_swap
     *
     * @return self
     */
    public function setPendingSwap($pending_swap)
    {
        if (is_null($pending_swap)) {
            throw new \InvalidArgumentException('non-nullable pending_swap cannot be null');
        }
        $this->container['pending_swap'] = $pending_swap;

        return $this;
    }

    /**
     * Gets date_published
     *
     * @return \DateTime|null
     */
    public function getDatePublished()
    {
        return $this->container['date_published'];
    }

    /**
     * Sets date_published
     *
     * @param \DateTime|null $date_published 
     *
     * @return self
     */
    public function setDatePublished($date_published)
    {
        if (is_null($date_published)) {
            throw new \InvalidArgumentException('non-nullable date_published cannot be null');
        }
        $this->container['date_published'] = $date_published;

        return $this;
    }

    /**
     * Gets biddable
     *
     * @return bool|null
     */
    public function getBiddable()
    {
        return $this->container['biddable'];
    }

    /**
     * Sets biddable
     *
     * @param bool|null $biddable 
     *
     * @return self
     */
    public function setBiddable($biddable)
    {
        if (is_null($biddable)) {
            throw new \InvalidArgumentException('non-nullable biddable cannot be null');
        }
        $this->container['biddable'] = $biddable;

        return $this;
    }

    /**
     * Gets shift_swap_cutoff_time
     *
     * @return \DateTime|null
     */
    public function getShiftSwapCutoffTime()
    {
        return $this->container['shift_swap_cutoff_time'];
    }

    /**
     * Sets shift_swap_cutoff_time
     *
     * @param \DateTime|null $shift_swap_cutoff_time 
     *
     * @return self
     */
    public function setShiftSwapCutoffTime($shift_swap_cutoff_time)
    {
        if (is_null($shift_swap_cutoff_time)) {
            throw new \InvalidArgumentException('non-nullable shift_swap_cutoff_time cannot be null');
        }
        $this->container['shift_swap_cutoff_time'] = $shift_swap_cutoff_time;

        return $this;
    }

    /**
     * Gets shift_assignment_status
     *
     * @return string|null
     */
    public function getShiftAssignmentStatus()
    {
        return $this->container['shift_assignment_status'];
    }

    /**
     * Sets shift_assignment_status
     *
     * @param string|null $shift_assignment_status 
     *
     * @return self
     */
    public function setShiftAssignmentStatus($shift_assignment_status)
    {
        if (is_null($shift_assignment_status)) {
            throw new \InvalidArgumentException('non-nullable shift_assignment_status cannot be null');
        }
        $allowedValues = $this->getShiftAssignmentStatusAllowableValues();
        if (!in_array($shift_assignment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shift_assignment_status', must be one of '%s'",
                    $shift_assignment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_assignment_status'] = $shift_assignment_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


