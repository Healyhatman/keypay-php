<?php
/**
 * WhiteLabelFunctionsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WhiteLabelFunctionsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhiteLabelFunctionsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhiteLabelFunctionsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'function_create_business' => 'bool',
        'function_enable_business_level_key_pay_access' => 'bool',
        'function_enable_accounting_services' => 'bool',
        'function_beam_available' => 'bool',
        'function_enable_sms' => 'bool',
        'function_enable_business_external_id' => 'bool',
        'function_disable_co_a_journals' => 'bool',
        'function_enable_standard_days_and_weeks_unit_allowance' => 'bool',
        'function_enable_sso_user2_fa' => 'bool',
        'function_enable_super_choice_marketplace' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'function_create_business' => null,
        'function_enable_business_level_key_pay_access' => null,
        'function_enable_accounting_services' => null,
        'function_beam_available' => null,
        'function_enable_sms' => null,
        'function_enable_business_external_id' => null,
        'function_disable_co_a_journals' => null,
        'function_enable_standard_days_and_weeks_unit_allowance' => null,
        'function_enable_sso_user2_fa' => null,
        'function_enable_super_choice_marketplace' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'function_create_business' => false,
		'function_enable_business_level_key_pay_access' => false,
		'function_enable_accounting_services' => false,
		'function_beam_available' => false,
		'function_enable_sms' => false,
		'function_enable_business_external_id' => false,
		'function_disable_co_a_journals' => false,
		'function_enable_standard_days_and_weeks_unit_allowance' => false,
		'function_enable_sso_user2_fa' => false,
		'function_enable_super_choice_marketplace' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'function_create_business' => 'functionCreateBusiness',
        'function_enable_business_level_key_pay_access' => 'functionEnableBusinessLevelKeyPayAccess',
        'function_enable_accounting_services' => 'functionEnableAccountingServices',
        'function_beam_available' => 'functionBeamAvailable',
        'function_enable_sms' => 'functionEnableSms',
        'function_enable_business_external_id' => 'functionEnableBusinessExternalId',
        'function_disable_co_a_journals' => 'functionDisableCoAJournals',
        'function_enable_standard_days_and_weeks_unit_allowance' => 'functionEnableStandardDaysAndWeeksUnitAllowance',
        'function_enable_sso_user2_fa' => 'functionEnableSsoUser2FA',
        'function_enable_super_choice_marketplace' => 'functionEnableSuperChoiceMarketplace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'function_create_business' => 'setFunctionCreateBusiness',
        'function_enable_business_level_key_pay_access' => 'setFunctionEnableBusinessLevelKeyPayAccess',
        'function_enable_accounting_services' => 'setFunctionEnableAccountingServices',
        'function_beam_available' => 'setFunctionBeamAvailable',
        'function_enable_sms' => 'setFunctionEnableSms',
        'function_enable_business_external_id' => 'setFunctionEnableBusinessExternalId',
        'function_disable_co_a_journals' => 'setFunctionDisableCoAJournals',
        'function_enable_standard_days_and_weeks_unit_allowance' => 'setFunctionEnableStandardDaysAndWeeksUnitAllowance',
        'function_enable_sso_user2_fa' => 'setFunctionEnableSsoUser2Fa',
        'function_enable_super_choice_marketplace' => 'setFunctionEnableSuperChoiceMarketplace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'function_create_business' => 'getFunctionCreateBusiness',
        'function_enable_business_level_key_pay_access' => 'getFunctionEnableBusinessLevelKeyPayAccess',
        'function_enable_accounting_services' => 'getFunctionEnableAccountingServices',
        'function_beam_available' => 'getFunctionBeamAvailable',
        'function_enable_sms' => 'getFunctionEnableSms',
        'function_enable_business_external_id' => 'getFunctionEnableBusinessExternalId',
        'function_disable_co_a_journals' => 'getFunctionDisableCoAJournals',
        'function_enable_standard_days_and_weeks_unit_allowance' => 'getFunctionEnableStandardDaysAndWeeksUnitAllowance',
        'function_enable_sso_user2_fa' => 'getFunctionEnableSsoUser2Fa',
        'function_enable_super_choice_marketplace' => 'getFunctionEnableSuperChoiceMarketplace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('function_create_business', $data ?? [], null);
        $this->setIfExists('function_enable_business_level_key_pay_access', $data ?? [], null);
        $this->setIfExists('function_enable_accounting_services', $data ?? [], null);
        $this->setIfExists('function_beam_available', $data ?? [], null);
        $this->setIfExists('function_enable_sms', $data ?? [], null);
        $this->setIfExists('function_enable_business_external_id', $data ?? [], null);
        $this->setIfExists('function_disable_co_a_journals', $data ?? [], null);
        $this->setIfExists('function_enable_standard_days_and_weeks_unit_allowance', $data ?? [], null);
        $this->setIfExists('function_enable_sso_user2_fa', $data ?? [], null);
        $this->setIfExists('function_enable_super_choice_marketplace', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets function_create_business
     *
     * @return bool|null
     */
    public function getFunctionCreateBusiness()
    {
        return $this->container['function_create_business'];
    }

    /**
     * Sets function_create_business
     *
     * @param bool|null $function_create_business 
     *
     * @return self
     */
    public function setFunctionCreateBusiness($function_create_business)
    {
        if (is_null($function_create_business)) {
            throw new \InvalidArgumentException('non-nullable function_create_business cannot be null');
        }
        $this->container['function_create_business'] = $function_create_business;

        return $this;
    }

    /**
     * Gets function_enable_business_level_key_pay_access
     *
     * @return bool|null
     */
    public function getFunctionEnableBusinessLevelKeyPayAccess()
    {
        return $this->container['function_enable_business_level_key_pay_access'];
    }

    /**
     * Sets function_enable_business_level_key_pay_access
     *
     * @param bool|null $function_enable_business_level_key_pay_access 
     *
     * @return self
     */
    public function setFunctionEnableBusinessLevelKeyPayAccess($function_enable_business_level_key_pay_access)
    {
        if (is_null($function_enable_business_level_key_pay_access)) {
            throw new \InvalidArgumentException('non-nullable function_enable_business_level_key_pay_access cannot be null');
        }
        $this->container['function_enable_business_level_key_pay_access'] = $function_enable_business_level_key_pay_access;

        return $this;
    }

    /**
     * Gets function_enable_accounting_services
     *
     * @return bool|null
     */
    public function getFunctionEnableAccountingServices()
    {
        return $this->container['function_enable_accounting_services'];
    }

    /**
     * Sets function_enable_accounting_services
     *
     * @param bool|null $function_enable_accounting_services 
     *
     * @return self
     */
    public function setFunctionEnableAccountingServices($function_enable_accounting_services)
    {
        if (is_null($function_enable_accounting_services)) {
            throw new \InvalidArgumentException('non-nullable function_enable_accounting_services cannot be null');
        }
        $this->container['function_enable_accounting_services'] = $function_enable_accounting_services;

        return $this;
    }

    /**
     * Gets function_beam_available
     *
     * @return bool|null
     */
    public function getFunctionBeamAvailable()
    {
        return $this->container['function_beam_available'];
    }

    /**
     * Sets function_beam_available
     *
     * @param bool|null $function_beam_available 
     *
     * @return self
     */
    public function setFunctionBeamAvailable($function_beam_available)
    {
        if (is_null($function_beam_available)) {
            throw new \InvalidArgumentException('non-nullable function_beam_available cannot be null');
        }
        $this->container['function_beam_available'] = $function_beam_available;

        return $this;
    }

    /**
     * Gets function_enable_sms
     *
     * @return bool|null
     */
    public function getFunctionEnableSms()
    {
        return $this->container['function_enable_sms'];
    }

    /**
     * Sets function_enable_sms
     *
     * @param bool|null $function_enable_sms 
     *
     * @return self
     */
    public function setFunctionEnableSms($function_enable_sms)
    {
        if (is_null($function_enable_sms)) {
            throw new \InvalidArgumentException('non-nullable function_enable_sms cannot be null');
        }
        $this->container['function_enable_sms'] = $function_enable_sms;

        return $this;
    }

    /**
     * Gets function_enable_business_external_id
     *
     * @return bool|null
     */
    public function getFunctionEnableBusinessExternalId()
    {
        return $this->container['function_enable_business_external_id'];
    }

    /**
     * Sets function_enable_business_external_id
     *
     * @param bool|null $function_enable_business_external_id 
     *
     * @return self
     */
    public function setFunctionEnableBusinessExternalId($function_enable_business_external_id)
    {
        if (is_null($function_enable_business_external_id)) {
            throw new \InvalidArgumentException('non-nullable function_enable_business_external_id cannot be null');
        }
        $this->container['function_enable_business_external_id'] = $function_enable_business_external_id;

        return $this;
    }

    /**
     * Gets function_disable_co_a_journals
     *
     * @return bool|null
     */
    public function getFunctionDisableCoAJournals()
    {
        return $this->container['function_disable_co_a_journals'];
    }

    /**
     * Sets function_disable_co_a_journals
     *
     * @param bool|null $function_disable_co_a_journals 
     *
     * @return self
     */
    public function setFunctionDisableCoAJournals($function_disable_co_a_journals)
    {
        if (is_null($function_disable_co_a_journals)) {
            throw new \InvalidArgumentException('non-nullable function_disable_co_a_journals cannot be null');
        }
        $this->container['function_disable_co_a_journals'] = $function_disable_co_a_journals;

        return $this;
    }

    /**
     * Gets function_enable_standard_days_and_weeks_unit_allowance
     *
     * @return bool|null
     */
    public function getFunctionEnableStandardDaysAndWeeksUnitAllowance()
    {
        return $this->container['function_enable_standard_days_and_weeks_unit_allowance'];
    }

    /**
     * Sets function_enable_standard_days_and_weeks_unit_allowance
     *
     * @param bool|null $function_enable_standard_days_and_weeks_unit_allowance 
     *
     * @return self
     */
    public function setFunctionEnableStandardDaysAndWeeksUnitAllowance($function_enable_standard_days_and_weeks_unit_allowance)
    {
        if (is_null($function_enable_standard_days_and_weeks_unit_allowance)) {
            throw new \InvalidArgumentException('non-nullable function_enable_standard_days_and_weeks_unit_allowance cannot be null');
        }
        $this->container['function_enable_standard_days_and_weeks_unit_allowance'] = $function_enable_standard_days_and_weeks_unit_allowance;

        return $this;
    }

    /**
     * Gets function_enable_sso_user2_fa
     *
     * @return bool|null
     */
    public function getFunctionEnableSsoUser2Fa()
    {
        return $this->container['function_enable_sso_user2_fa'];
    }

    /**
     * Sets function_enable_sso_user2_fa
     *
     * @param bool|null $function_enable_sso_user2_fa 
     *
     * @return self
     */
    public function setFunctionEnableSsoUser2Fa($function_enable_sso_user2_fa)
    {
        if (is_null($function_enable_sso_user2_fa)) {
            throw new \InvalidArgumentException('non-nullable function_enable_sso_user2_fa cannot be null');
        }
        $this->container['function_enable_sso_user2_fa'] = $function_enable_sso_user2_fa;

        return $this;
    }

    /**
     * Gets function_enable_super_choice_marketplace
     *
     * @return bool|null
     */
    public function getFunctionEnableSuperChoiceMarketplace()
    {
        return $this->container['function_enable_super_choice_marketplace'];
    }

    /**
     * Sets function_enable_super_choice_marketplace
     *
     * @param bool|null $function_enable_super_choice_marketplace 
     *
     * @return self
     */
    public function setFunctionEnableSuperChoiceMarketplace($function_enable_super_choice_marketplace)
    {
        if (is_null($function_enable_super_choice_marketplace)) {
            throw new \InvalidArgumentException('non-nullable function_enable_super_choice_marketplace cannot be null');
        }
        $this->container['function_enable_super_choice_marketplace'] = $function_enable_super_choice_marketplace;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


