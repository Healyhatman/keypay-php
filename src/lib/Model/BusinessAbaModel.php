<?php
/**
 * BusinessAbaModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BusinessAbaModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessAbaModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessAbaModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'bsb' => 'string',
        'account_number' => 'string',
        'account_name' => 'string',
        'financial_institution_code' => 'string',
        'lodgement_reference' => 'string',
        'user_name' => 'string',
        'user_id' => 'string',
        'include_self_balancing_transaction' => 'bool',
        'merge_multiple_account_payments' => 'bool',
        'balance_lodgement_reference' => 'string',
        'payment_additional_content' => 'string',
        'balance_additional_content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'bsb' => null,
        'account_number' => null,
        'account_name' => null,
        'financial_institution_code' => null,
        'lodgement_reference' => null,
        'user_name' => null,
        'user_id' => null,
        'include_self_balancing_transaction' => null,
        'merge_multiple_account_payments' => null,
        'balance_lodgement_reference' => null,
        'payment_additional_content' => null,
        'balance_additional_content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bsb' => 'bsb',
        'account_number' => 'accountNumber',
        'account_name' => 'accountName',
        'financial_institution_code' => 'financialInstitutionCode',
        'lodgement_reference' => 'lodgementReference',
        'user_name' => 'userName',
        'user_id' => 'userId',
        'include_self_balancing_transaction' => 'includeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'mergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'balanceLodgementReference',
        'payment_additional_content' => 'paymentAdditionalContent',
        'balance_additional_content' => 'balanceAdditionalContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bsb' => 'setBsb',
        'account_number' => 'setAccountNumber',
        'account_name' => 'setAccountName',
        'financial_institution_code' => 'setFinancialInstitutionCode',
        'lodgement_reference' => 'setLodgementReference',
        'user_name' => 'setUserName',
        'user_id' => 'setUserId',
        'include_self_balancing_transaction' => 'setIncludeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'setMergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'setBalanceLodgementReference',
        'payment_additional_content' => 'setPaymentAdditionalContent',
        'balance_additional_content' => 'setBalanceAdditionalContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bsb' => 'getBsb',
        'account_number' => 'getAccountNumber',
        'account_name' => 'getAccountName',
        'financial_institution_code' => 'getFinancialInstitutionCode',
        'lodgement_reference' => 'getLodgementReference',
        'user_name' => 'getUserName',
        'user_id' => 'getUserId',
        'include_self_balancing_transaction' => 'getIncludeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'getMergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'getBalanceLodgementReference',
        'payment_additional_content' => 'getPaymentAdditionalContent',
        'balance_additional_content' => 'getBalanceAdditionalContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_ADDITIONAL_CONTENT_NONE = 'None';
    const PAYMENT_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE = 'PeriodEndingDate';
    const PAYMENT_ADDITIONAL_CONTENT_PAYMENT_DATE = 'PaymentDate';
    const PAYMENT_ADDITIONAL_CONTENT_EMPLOYEE_ID = 'EmployeeId';
    const PAYMENT_ADDITIONAL_CONTENT_PAY_RUN_ID = 'PayRunId';
    const BALANCE_ADDITIONAL_CONTENT_NONE = 'None';
    const BALANCE_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE = 'PeriodEndingDate';
    const BALANCE_ADDITIONAL_CONTENT_PAYMENT_DATE = 'PaymentDate';
    const BALANCE_ADDITIONAL_CONTENT_PAY_RUN_ID = 'PayRunId';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAdditionalContentAllowableValues()
    {
        return [
            self::PAYMENT_ADDITIONAL_CONTENT_NONE,
            self::PAYMENT_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE,
            self::PAYMENT_ADDITIONAL_CONTENT_PAYMENT_DATE,
            self::PAYMENT_ADDITIONAL_CONTENT_EMPLOYEE_ID,
            self::PAYMENT_ADDITIONAL_CONTENT_PAY_RUN_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalanceAdditionalContentAllowableValues()
    {
        return [
            self::BALANCE_ADDITIONAL_CONTENT_NONE,
            self::BALANCE_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE,
            self::BALANCE_ADDITIONAL_CONTENT_PAYMENT_DATE,
            self::BALANCE_ADDITIONAL_CONTENT_PAY_RUN_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['bsb'] = isset($data['bsb']) ? $data['bsb'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['financial_institution_code'] = isset($data['financial_institution_code']) ? $data['financial_institution_code'] : null;
        $this->container['lodgement_reference'] = isset($data['lodgement_reference']) ? $data['lodgement_reference'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['include_self_balancing_transaction'] = isset($data['include_self_balancing_transaction']) ? $data['include_self_balancing_transaction'] : null;
        $this->container['merge_multiple_account_payments'] = isset($data['merge_multiple_account_payments']) ? $data['merge_multiple_account_payments'] : null;
        $this->container['balance_lodgement_reference'] = isset($data['balance_lodgement_reference']) ? $data['balance_lodgement_reference'] : null;
        $this->container['payment_additional_content'] = isset($data['payment_additional_content']) ? $data['payment_additional_content'] : null;
        $this->container['balance_additional_content'] = isset($data['balance_additional_content']) ? $data['balance_additional_content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentAdditionalContentAllowableValues();
        if (!is_null($this->container['payment_additional_content']) && !in_array($this->container['payment_additional_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_additional_content', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBalanceAdditionalContentAllowableValues();
        if (!is_null($this->container['balance_additional_content']) && !in_array($this->container['balance_additional_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'balance_additional_content', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bsb
     *
     * @return string
     */
    public function getBsb()
    {
        return $this->container['bsb'];
    }

    /**
     * Sets bsb
     *
     * @param string $bsb 
     *
     * @return $this
     */
    public function setBsb($bsb)
    {
        $this->container['bsb'] = $bsb;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number 
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name 
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets financial_institution_code
     *
     * @return string
     */
    public function getFinancialInstitutionCode()
    {
        return $this->container['financial_institution_code'];
    }

    /**
     * Sets financial_institution_code
     *
     * @param string $financial_institution_code 
     *
     * @return $this
     */
    public function setFinancialInstitutionCode($financial_institution_code)
    {
        $this->container['financial_institution_code'] = $financial_institution_code;

        return $this;
    }

    /**
     * Gets lodgement_reference
     *
     * @return string
     */
    public function getLodgementReference()
    {
        return $this->container['lodgement_reference'];
    }

    /**
     * Sets lodgement_reference
     *
     * @param string $lodgement_reference 
     *
     * @return $this
     */
    public function setLodgementReference($lodgement_reference)
    {
        $this->container['lodgement_reference'] = $lodgement_reference;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name 
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id 
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets include_self_balancing_transaction
     *
     * @return bool
     */
    public function getIncludeSelfBalancingTransaction()
    {
        return $this->container['include_self_balancing_transaction'];
    }

    /**
     * Sets include_self_balancing_transaction
     *
     * @param bool $include_self_balancing_transaction 
     *
     * @return $this
     */
    public function setIncludeSelfBalancingTransaction($include_self_balancing_transaction)
    {
        $this->container['include_self_balancing_transaction'] = $include_self_balancing_transaction;

        return $this;
    }

    /**
     * Gets merge_multiple_account_payments
     *
     * @return bool
     */
    public function getMergeMultipleAccountPayments()
    {
        return $this->container['merge_multiple_account_payments'];
    }

    /**
     * Sets merge_multiple_account_payments
     *
     * @param bool $merge_multiple_account_payments 
     *
     * @return $this
     */
    public function setMergeMultipleAccountPayments($merge_multiple_account_payments)
    {
        $this->container['merge_multiple_account_payments'] = $merge_multiple_account_payments;

        return $this;
    }

    /**
     * Gets balance_lodgement_reference
     *
     * @return string
     */
    public function getBalanceLodgementReference()
    {
        return $this->container['balance_lodgement_reference'];
    }

    /**
     * Sets balance_lodgement_reference
     *
     * @param string $balance_lodgement_reference 
     *
     * @return $this
     */
    public function setBalanceLodgementReference($balance_lodgement_reference)
    {
        $this->container['balance_lodgement_reference'] = $balance_lodgement_reference;

        return $this;
    }

    /**
     * Gets payment_additional_content
     *
     * @return string
     */
    public function getPaymentAdditionalContent()
    {
        return $this->container['payment_additional_content'];
    }

    /**
     * Sets payment_additional_content
     *
     * @param string $payment_additional_content 
     *
     * @return $this
     */
    public function setPaymentAdditionalContent($payment_additional_content)
    {
        $allowedValues = $this->getPaymentAdditionalContentAllowableValues();
        if (!is_null($payment_additional_content) && !in_array($payment_additional_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_additional_content', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_additional_content'] = $payment_additional_content;

        return $this;
    }

    /**
     * Gets balance_additional_content
     *
     * @return string
     */
    public function getBalanceAdditionalContent()
    {
        return $this->container['balance_additional_content'];
    }

    /**
     * Sets balance_additional_content
     *
     * @param string $balance_additional_content 
     *
     * @return $this
     */
    public function setBalanceAdditionalContent($balance_additional_content)
    {
        $allowedValues = $this->getBalanceAdditionalContentAllowableValues();
        if (!is_null($balance_additional_content) && !in_array($balance_additional_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'balance_additional_content', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balance_additional_content'] = $balance_additional_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


