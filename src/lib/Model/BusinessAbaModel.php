<?php
/**
 * BusinessAbaModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BusinessAbaModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BusinessAbaModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BusinessAbaModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'bsb' => 'string',
        'account_number' => 'string',
        'account_name' => 'string',
        'financial_institution_code' => 'string',
        'lodgement_reference' => 'string',
        'user_name' => 'string',
        'user_id' => 'string',
        'include_self_balancing_transaction' => 'bool',
        'merge_multiple_account_payments' => 'bool',
        'balance_lodgement_reference' => 'string',
        'payment_additional_content' => 'string',
        'balance_additional_content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'bsb' => null,
        'account_number' => null,
        'account_name' => null,
        'financial_institution_code' => null,
        'lodgement_reference' => null,
        'user_name' => null,
        'user_id' => null,
        'include_self_balancing_transaction' => null,
        'merge_multiple_account_payments' => null,
        'balance_lodgement_reference' => null,
        'payment_additional_content' => null,
        'balance_additional_content' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'bsb' => false,
		'account_number' => false,
		'account_name' => false,
		'financial_institution_code' => false,
		'lodgement_reference' => false,
		'user_name' => false,
		'user_id' => false,
		'include_self_balancing_transaction' => false,
		'merge_multiple_account_payments' => false,
		'balance_lodgement_reference' => false,
		'payment_additional_content' => false,
		'balance_additional_content' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bsb' => 'bsb',
        'account_number' => 'accountNumber',
        'account_name' => 'accountName',
        'financial_institution_code' => 'financialInstitutionCode',
        'lodgement_reference' => 'lodgementReference',
        'user_name' => 'userName',
        'user_id' => 'userId',
        'include_self_balancing_transaction' => 'includeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'mergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'balanceLodgementReference',
        'payment_additional_content' => 'paymentAdditionalContent',
        'balance_additional_content' => 'balanceAdditionalContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bsb' => 'setBsb',
        'account_number' => 'setAccountNumber',
        'account_name' => 'setAccountName',
        'financial_institution_code' => 'setFinancialInstitutionCode',
        'lodgement_reference' => 'setLodgementReference',
        'user_name' => 'setUserName',
        'user_id' => 'setUserId',
        'include_self_balancing_transaction' => 'setIncludeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'setMergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'setBalanceLodgementReference',
        'payment_additional_content' => 'setPaymentAdditionalContent',
        'balance_additional_content' => 'setBalanceAdditionalContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bsb' => 'getBsb',
        'account_number' => 'getAccountNumber',
        'account_name' => 'getAccountName',
        'financial_institution_code' => 'getFinancialInstitutionCode',
        'lodgement_reference' => 'getLodgementReference',
        'user_name' => 'getUserName',
        'user_id' => 'getUserId',
        'include_self_balancing_transaction' => 'getIncludeSelfBalancingTransaction',
        'merge_multiple_account_payments' => 'getMergeMultipleAccountPayments',
        'balance_lodgement_reference' => 'getBalanceLodgementReference',
        'payment_additional_content' => 'getPaymentAdditionalContent',
        'balance_additional_content' => 'getBalanceAdditionalContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_ADDITIONAL_CONTENT_NONE = 'None';
    public const PAYMENT_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE = 'PeriodEndingDate';
    public const PAYMENT_ADDITIONAL_CONTENT_PAYMENT_DATE = 'PaymentDate';
    public const PAYMENT_ADDITIONAL_CONTENT_EMPLOYEE_ID = 'EmployeeId';
    public const PAYMENT_ADDITIONAL_CONTENT_PAY_RUN_ID = 'PayRunId';
    public const BALANCE_ADDITIONAL_CONTENT_NONE = 'None';
    public const BALANCE_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE = 'PeriodEndingDate';
    public const BALANCE_ADDITIONAL_CONTENT_PAYMENT_DATE = 'PaymentDate';
    public const BALANCE_ADDITIONAL_CONTENT_PAY_RUN_ID = 'PayRunId';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAdditionalContentAllowableValues()
    {
        return [
            self::PAYMENT_ADDITIONAL_CONTENT_NONE,
            self::PAYMENT_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE,
            self::PAYMENT_ADDITIONAL_CONTENT_PAYMENT_DATE,
            self::PAYMENT_ADDITIONAL_CONTENT_EMPLOYEE_ID,
            self::PAYMENT_ADDITIONAL_CONTENT_PAY_RUN_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalanceAdditionalContentAllowableValues()
    {
        return [
            self::BALANCE_ADDITIONAL_CONTENT_NONE,
            self::BALANCE_ADDITIONAL_CONTENT_PERIOD_ENDING_DATE,
            self::BALANCE_ADDITIONAL_CONTENT_PAYMENT_DATE,
            self::BALANCE_ADDITIONAL_CONTENT_PAY_RUN_ID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bsb', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('financial_institution_code', $data ?? [], null);
        $this->setIfExists('lodgement_reference', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('include_self_balancing_transaction', $data ?? [], null);
        $this->setIfExists('merge_multiple_account_payments', $data ?? [], null);
        $this->setIfExists('balance_lodgement_reference', $data ?? [], null);
        $this->setIfExists('payment_additional_content', $data ?? [], null);
        $this->setIfExists('balance_additional_content', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentAdditionalContentAllowableValues();
        if (!is_null($this->container['payment_additional_content']) && !in_array($this->container['payment_additional_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_additional_content', must be one of '%s'",
                $this->container['payment_additional_content'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBalanceAdditionalContentAllowableValues();
        if (!is_null($this->container['balance_additional_content']) && !in_array($this->container['balance_additional_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'balance_additional_content', must be one of '%s'",
                $this->container['balance_additional_content'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bsb
     *
     * @return string|null
     */
    public function getBsb()
    {
        return $this->container['bsb'];
    }

    /**
     * Sets bsb
     *
     * @param string|null $bsb 
     *
     * @return self
     */
    public function setBsb($bsb)
    {
        if (is_null($bsb)) {
            throw new \InvalidArgumentException('non-nullable bsb cannot be null');
        }
        $this->container['bsb'] = $bsb;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number 
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name 
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets financial_institution_code
     *
     * @return string|null
     */
    public function getFinancialInstitutionCode()
    {
        return $this->container['financial_institution_code'];
    }

    /**
     * Sets financial_institution_code
     *
     * @param string|null $financial_institution_code 
     *
     * @return self
     */
    public function setFinancialInstitutionCode($financial_institution_code)
    {
        if (is_null($financial_institution_code)) {
            throw new \InvalidArgumentException('non-nullable financial_institution_code cannot be null');
        }
        $this->container['financial_institution_code'] = $financial_institution_code;

        return $this;
    }

    /**
     * Gets lodgement_reference
     *
     * @return string|null
     */
    public function getLodgementReference()
    {
        return $this->container['lodgement_reference'];
    }

    /**
     * Sets lodgement_reference
     *
     * @param string|null $lodgement_reference 
     *
     * @return self
     */
    public function setLodgementReference($lodgement_reference)
    {
        if (is_null($lodgement_reference)) {
            throw new \InvalidArgumentException('non-nullable lodgement_reference cannot be null');
        }
        $this->container['lodgement_reference'] = $lodgement_reference;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name 
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id 
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets include_self_balancing_transaction
     *
     * @return bool|null
     */
    public function getIncludeSelfBalancingTransaction()
    {
        return $this->container['include_self_balancing_transaction'];
    }

    /**
     * Sets include_self_balancing_transaction
     *
     * @param bool|null $include_self_balancing_transaction 
     *
     * @return self
     */
    public function setIncludeSelfBalancingTransaction($include_self_balancing_transaction)
    {
        if (is_null($include_self_balancing_transaction)) {
            throw new \InvalidArgumentException('non-nullable include_self_balancing_transaction cannot be null');
        }
        $this->container['include_self_balancing_transaction'] = $include_self_balancing_transaction;

        return $this;
    }

    /**
     * Gets merge_multiple_account_payments
     *
     * @return bool|null
     */
    public function getMergeMultipleAccountPayments()
    {
        return $this->container['merge_multiple_account_payments'];
    }

    /**
     * Sets merge_multiple_account_payments
     *
     * @param bool|null $merge_multiple_account_payments 
     *
     * @return self
     */
    public function setMergeMultipleAccountPayments($merge_multiple_account_payments)
    {
        if (is_null($merge_multiple_account_payments)) {
            throw new \InvalidArgumentException('non-nullable merge_multiple_account_payments cannot be null');
        }
        $this->container['merge_multiple_account_payments'] = $merge_multiple_account_payments;

        return $this;
    }

    /**
     * Gets balance_lodgement_reference
     *
     * @return string|null
     */
    public function getBalanceLodgementReference()
    {
        return $this->container['balance_lodgement_reference'];
    }

    /**
     * Sets balance_lodgement_reference
     *
     * @param string|null $balance_lodgement_reference 
     *
     * @return self
     */
    public function setBalanceLodgementReference($balance_lodgement_reference)
    {
        if (is_null($balance_lodgement_reference)) {
            throw new \InvalidArgumentException('non-nullable balance_lodgement_reference cannot be null');
        }
        $this->container['balance_lodgement_reference'] = $balance_lodgement_reference;

        return $this;
    }

    /**
     * Gets payment_additional_content
     *
     * @return string|null
     */
    public function getPaymentAdditionalContent()
    {
        return $this->container['payment_additional_content'];
    }

    /**
     * Sets payment_additional_content
     *
     * @param string|null $payment_additional_content 
     *
     * @return self
     */
    public function setPaymentAdditionalContent($payment_additional_content)
    {
        if (is_null($payment_additional_content)) {
            throw new \InvalidArgumentException('non-nullable payment_additional_content cannot be null');
        }
        $allowedValues = $this->getPaymentAdditionalContentAllowableValues();
        if (!in_array($payment_additional_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_additional_content', must be one of '%s'",
                    $payment_additional_content,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_additional_content'] = $payment_additional_content;

        return $this;
    }

    /**
     * Gets balance_additional_content
     *
     * @return string|null
     */
    public function getBalanceAdditionalContent()
    {
        return $this->container['balance_additional_content'];
    }

    /**
     * Sets balance_additional_content
     *
     * @param string|null $balance_additional_content 
     *
     * @return self
     */
    public function setBalanceAdditionalContent($balance_additional_content)
    {
        if (is_null($balance_additional_content)) {
            throw new \InvalidArgumentException('non-nullable balance_additional_content cannot be null');
        }
        $allowedValues = $this->getBalanceAdditionalContentAllowableValues();
        if (!in_array($balance_additional_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'balance_additional_content', must be one of '%s'",
                    $balance_additional_content,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balance_additional_content'] = $balance_additional_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


