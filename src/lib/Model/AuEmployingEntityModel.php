<?php
/**
 * AuEmployingEntityModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuEmployingEntityModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuEmployingEntityModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuEmployingEntityModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abn' => 'string',
        'suburb' => 'string',
        'state' => 'string',
        'branch_code' => 'string',
        'is_exempt_from_fringe_benefits_tax' => 'bool',
        'has_separate_entertainment_fringe_benefits_cap' => 'bool',
        'fbt_exempt_organisation_type' => 'string',
        'is_foreign_entity' => 'bool',
        'foreign_entity_country' => 'string',
        'id' => 'int',
        'name' => 'string',
        'contact_name' => 'string',
        'signatory_name' => 'string',
        'contact_email_address' => 'string',
        'contact_phone_number' => 'string',
        'contact_fax_number' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'postcode' => 'string',
        'external_reference_id' => 'string',
        'pay_slip_from_email_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abn' => null,
        'suburb' => null,
        'state' => null,
        'branch_code' => null,
        'is_exempt_from_fringe_benefits_tax' => null,
        'has_separate_entertainment_fringe_benefits_cap' => null,
        'fbt_exempt_organisation_type' => null,
        'is_foreign_entity' => null,
        'foreign_entity_country' => null,
        'id' => 'int32',
        'name' => null,
        'contact_name' => null,
        'signatory_name' => null,
        'contact_email_address' => null,
        'contact_phone_number' => null,
        'contact_fax_number' => null,
        'address_line1' => null,
        'address_line2' => null,
        'postcode' => null,
        'external_reference_id' => null,
        'pay_slip_from_email_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abn' => false,
		'suburb' => false,
		'state' => false,
		'branch_code' => false,
		'is_exempt_from_fringe_benefits_tax' => false,
		'has_separate_entertainment_fringe_benefits_cap' => false,
		'fbt_exempt_organisation_type' => false,
		'is_foreign_entity' => false,
		'foreign_entity_country' => false,
		'id' => false,
		'name' => false,
		'contact_name' => false,
		'signatory_name' => false,
		'contact_email_address' => false,
		'contact_phone_number' => false,
		'contact_fax_number' => false,
		'address_line1' => false,
		'address_line2' => false,
		'postcode' => false,
		'external_reference_id' => false,
		'pay_slip_from_email_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abn' => 'abn',
        'suburb' => 'suburb',
        'state' => 'state',
        'branch_code' => 'branchCode',
        'is_exempt_from_fringe_benefits_tax' => 'isExemptFromFringeBenefitsTax',
        'has_separate_entertainment_fringe_benefits_cap' => 'hasSeparateEntertainmentFringeBenefitsCap',
        'fbt_exempt_organisation_type' => 'fbtExemptOrganisationType',
        'is_foreign_entity' => 'isForeignEntity',
        'foreign_entity_country' => 'foreignEntityCountry',
        'id' => 'id',
        'name' => 'name',
        'contact_name' => 'contactName',
        'signatory_name' => 'signatoryName',
        'contact_email_address' => 'contactEmailAddress',
        'contact_phone_number' => 'contactPhoneNumber',
        'contact_fax_number' => 'contactFaxNumber',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'postcode' => 'postcode',
        'external_reference_id' => 'externalReferenceId',
        'pay_slip_from_email_address' => 'paySlipFromEmailAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abn' => 'setAbn',
        'suburb' => 'setSuburb',
        'state' => 'setState',
        'branch_code' => 'setBranchCode',
        'is_exempt_from_fringe_benefits_tax' => 'setIsExemptFromFringeBenefitsTax',
        'has_separate_entertainment_fringe_benefits_cap' => 'setHasSeparateEntertainmentFringeBenefitsCap',
        'fbt_exempt_organisation_type' => 'setFbtExemptOrganisationType',
        'is_foreign_entity' => 'setIsForeignEntity',
        'foreign_entity_country' => 'setForeignEntityCountry',
        'id' => 'setId',
        'name' => 'setName',
        'contact_name' => 'setContactName',
        'signatory_name' => 'setSignatoryName',
        'contact_email_address' => 'setContactEmailAddress',
        'contact_phone_number' => 'setContactPhoneNumber',
        'contact_fax_number' => 'setContactFaxNumber',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'postcode' => 'setPostcode',
        'external_reference_id' => 'setExternalReferenceId',
        'pay_slip_from_email_address' => 'setPaySlipFromEmailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abn' => 'getAbn',
        'suburb' => 'getSuburb',
        'state' => 'getState',
        'branch_code' => 'getBranchCode',
        'is_exempt_from_fringe_benefits_tax' => 'getIsExemptFromFringeBenefitsTax',
        'has_separate_entertainment_fringe_benefits_cap' => 'getHasSeparateEntertainmentFringeBenefitsCap',
        'fbt_exempt_organisation_type' => 'getFbtExemptOrganisationType',
        'is_foreign_entity' => 'getIsForeignEntity',
        'foreign_entity_country' => 'getForeignEntityCountry',
        'id' => 'getId',
        'name' => 'getName',
        'contact_name' => 'getContactName',
        'signatory_name' => 'getSignatoryName',
        'contact_email_address' => 'getContactEmailAddress',
        'contact_phone_number' => 'getContactPhoneNumber',
        'contact_fax_number' => 'getContactFaxNumber',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'postcode' => 'getPostcode',
        'external_reference_id' => 'getExternalReferenceId',
        'pay_slip_from_email_address' => 'getPaySlipFromEmailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_BENEVOLENT_INSTITUTION = 'PublicBenevolentInstitution';
    public const FBT_EXEMPT_ORGANISATION_TYPE_HEALTH_PROMOTION_CHARITY = 'HealthPromotionCharity';
    public const FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_AND_NON_PROFIT_HOSPITAL = 'PublicAndNonProfitHospital';
    public const FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_AMBULANCE_SERVICE = 'PublicAmbulanceService';
    public const FBT_EXEMPT_ORGANISATION_TYPE_POVERTY_RELIEF = 'PovertyRelief';
    public const FBT_EXEMPT_ORGANISATION_TYPE_EDUCATION_ADVANCEMENT = 'EducationAdvancement';
    public const FBT_EXEMPT_ORGANISATION_TYPE_RELIGION_ADVANCEMENT = 'ReligionAdvancement';
    public const FBT_EXEMPT_ORGANISATION_TYPE_COMMUNITY_BENEFIT = 'CommunityBenefit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFbtExemptOrganisationTypeAllowableValues()
    {
        return [
            self::FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_BENEVOLENT_INSTITUTION,
            self::FBT_EXEMPT_ORGANISATION_TYPE_HEALTH_PROMOTION_CHARITY,
            self::FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_AND_NON_PROFIT_HOSPITAL,
            self::FBT_EXEMPT_ORGANISATION_TYPE_PUBLIC_AMBULANCE_SERVICE,
            self::FBT_EXEMPT_ORGANISATION_TYPE_POVERTY_RELIEF,
            self::FBT_EXEMPT_ORGANISATION_TYPE_EDUCATION_ADVANCEMENT,
            self::FBT_EXEMPT_ORGANISATION_TYPE_RELIGION_ADVANCEMENT,
            self::FBT_EXEMPT_ORGANISATION_TYPE_COMMUNITY_BENEFIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abn', $data ?? [], null);
        $this->setIfExists('suburb', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('branch_code', $data ?? [], null);
        $this->setIfExists('is_exempt_from_fringe_benefits_tax', $data ?? [], null);
        $this->setIfExists('has_separate_entertainment_fringe_benefits_cap', $data ?? [], null);
        $this->setIfExists('fbt_exempt_organisation_type', $data ?? [], null);
        $this->setIfExists('is_foreign_entity', $data ?? [], null);
        $this->setIfExists('foreign_entity_country', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('signatory_name', $data ?? [], null);
        $this->setIfExists('contact_email_address', $data ?? [], null);
        $this->setIfExists('contact_phone_number', $data ?? [], null);
        $this->setIfExists('contact_fax_number', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('pay_slip_from_email_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFbtExemptOrganisationTypeAllowableValues();
        if (!is_null($this->container['fbt_exempt_organisation_type']) && !in_array($this->container['fbt_exempt_organisation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fbt_exempt_organisation_type', must be one of '%s'",
                $this->container['fbt_exempt_organisation_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn 
     *
     * @return self
     */
    public function setAbn($abn)
    {
        if (is_null($abn)) {
            throw new \InvalidArgumentException('non-nullable abn cannot be null');
        }
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string|null
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string|null $suburb 
     *
     * @return self
     */
    public function setSuburb($suburb)
    {
        if (is_null($suburb)) {
            throw new \InvalidArgumentException('non-nullable suburb cannot be null');
        }
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state 
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return string|null
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param string|null $branch_code 
     *
     * @return self
     */
    public function setBranchCode($branch_code)
    {
        if (is_null($branch_code)) {
            throw new \InvalidArgumentException('non-nullable branch_code cannot be null');
        }
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets is_exempt_from_fringe_benefits_tax
     *
     * @return bool|null
     */
    public function getIsExemptFromFringeBenefitsTax()
    {
        return $this->container['is_exempt_from_fringe_benefits_tax'];
    }

    /**
     * Sets is_exempt_from_fringe_benefits_tax
     *
     * @param bool|null $is_exempt_from_fringe_benefits_tax 
     *
     * @return self
     */
    public function setIsExemptFromFringeBenefitsTax($is_exempt_from_fringe_benefits_tax)
    {
        if (is_null($is_exempt_from_fringe_benefits_tax)) {
            throw new \InvalidArgumentException('non-nullable is_exempt_from_fringe_benefits_tax cannot be null');
        }
        $this->container['is_exempt_from_fringe_benefits_tax'] = $is_exempt_from_fringe_benefits_tax;

        return $this;
    }

    /**
     * Gets has_separate_entertainment_fringe_benefits_cap
     *
     * @return bool|null
     */
    public function getHasSeparateEntertainmentFringeBenefitsCap()
    {
        return $this->container['has_separate_entertainment_fringe_benefits_cap'];
    }

    /**
     * Sets has_separate_entertainment_fringe_benefits_cap
     *
     * @param bool|null $has_separate_entertainment_fringe_benefits_cap 
     *
     * @return self
     */
    public function setHasSeparateEntertainmentFringeBenefitsCap($has_separate_entertainment_fringe_benefits_cap)
    {
        if (is_null($has_separate_entertainment_fringe_benefits_cap)) {
            throw new \InvalidArgumentException('non-nullable has_separate_entertainment_fringe_benefits_cap cannot be null');
        }
        $this->container['has_separate_entertainment_fringe_benefits_cap'] = $has_separate_entertainment_fringe_benefits_cap;

        return $this;
    }

    /**
     * Gets fbt_exempt_organisation_type
     *
     * @return string|null
     */
    public function getFbtExemptOrganisationType()
    {
        return $this->container['fbt_exempt_organisation_type'];
    }

    /**
     * Sets fbt_exempt_organisation_type
     *
     * @param string|null $fbt_exempt_organisation_type 
     *
     * @return self
     */
    public function setFbtExemptOrganisationType($fbt_exempt_organisation_type)
    {
        if (is_null($fbt_exempt_organisation_type)) {
            throw new \InvalidArgumentException('non-nullable fbt_exempt_organisation_type cannot be null');
        }
        $allowedValues = $this->getFbtExemptOrganisationTypeAllowableValues();
        if (!in_array($fbt_exempt_organisation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fbt_exempt_organisation_type', must be one of '%s'",
                    $fbt_exempt_organisation_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fbt_exempt_organisation_type'] = $fbt_exempt_organisation_type;

        return $this;
    }

    /**
     * Gets is_foreign_entity
     *
     * @return bool|null
     */
    public function getIsForeignEntity()
    {
        return $this->container['is_foreign_entity'];
    }

    /**
     * Sets is_foreign_entity
     *
     * @param bool|null $is_foreign_entity 
     *
     * @return self
     */
    public function setIsForeignEntity($is_foreign_entity)
    {
        if (is_null($is_foreign_entity)) {
            throw new \InvalidArgumentException('non-nullable is_foreign_entity cannot be null');
        }
        $this->container['is_foreign_entity'] = $is_foreign_entity;

        return $this;
    }

    /**
     * Gets foreign_entity_country
     *
     * @return string|null
     */
    public function getForeignEntityCountry()
    {
        return $this->container['foreign_entity_country'];
    }

    /**
     * Sets foreign_entity_country
     *
     * @param string|null $foreign_entity_country 
     *
     * @return self
     */
    public function setForeignEntityCountry($foreign_entity_country)
    {
        if (is_null($foreign_entity_country)) {
            throw new \InvalidArgumentException('non-nullable foreign_entity_country cannot be null');
        }
        $this->container['foreign_entity_country'] = $foreign_entity_country;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name 
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets signatory_name
     *
     * @return string|null
     */
    public function getSignatoryName()
    {
        return $this->container['signatory_name'];
    }

    /**
     * Sets signatory_name
     *
     * @param string|null $signatory_name 
     *
     * @return self
     */
    public function setSignatoryName($signatory_name)
    {
        if (is_null($signatory_name)) {
            throw new \InvalidArgumentException('non-nullable signatory_name cannot be null');
        }
        $this->container['signatory_name'] = $signatory_name;

        return $this;
    }

    /**
     * Gets contact_email_address
     *
     * @return string|null
     */
    public function getContactEmailAddress()
    {
        return $this->container['contact_email_address'];
    }

    /**
     * Sets contact_email_address
     *
     * @param string|null $contact_email_address 
     *
     * @return self
     */
    public function setContactEmailAddress($contact_email_address)
    {
        if (is_null($contact_email_address)) {
            throw new \InvalidArgumentException('non-nullable contact_email_address cannot be null');
        }
        $this->container['contact_email_address'] = $contact_email_address;

        return $this;
    }

    /**
     * Gets contact_phone_number
     *
     * @return string|null
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     *
     * @param string|null $contact_phone_number 
     *
     * @return self
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        if (is_null($contact_phone_number)) {
            throw new \InvalidArgumentException('non-nullable contact_phone_number cannot be null');
        }
        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets contact_fax_number
     *
     * @return string|null
     */
    public function getContactFaxNumber()
    {
        return $this->container['contact_fax_number'];
    }

    /**
     * Sets contact_fax_number
     *
     * @param string|null $contact_fax_number 
     *
     * @return self
     */
    public function setContactFaxNumber($contact_fax_number)
    {
        if (is_null($contact_fax_number)) {
            throw new \InvalidArgumentException('non-nullable contact_fax_number cannot be null');
        }
        $this->container['contact_fax_number'] = $contact_fax_number;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            throw new \InvalidArgumentException('non-nullable address_line2 cannot be null');
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode 
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        if (is_null($postcode)) {
            throw new \InvalidArgumentException('non-nullable postcode cannot be null');
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string|null
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string|null $external_reference_id 
     *
     * @return self
     */
    public function setExternalReferenceId($external_reference_id)
    {
        if (is_null($external_reference_id)) {
            throw new \InvalidArgumentException('non-nullable external_reference_id cannot be null');
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets pay_slip_from_email_address
     *
     * @return string|null
     */
    public function getPaySlipFromEmailAddress()
    {
        return $this->container['pay_slip_from_email_address'];
    }

    /**
     * Sets pay_slip_from_email_address
     *
     * @param string|null $pay_slip_from_email_address 
     *
     * @return self
     */
    public function setPaySlipFromEmailAddress($pay_slip_from_email_address)
    {
        if (is_null($pay_slip_from_email_address)) {
            throw new \InvalidArgumentException('non-nullable pay_slip_from_email_address cannot be null');
        }
        $this->container['pay_slip_from_email_address'] = $pay_slip_from_email_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


