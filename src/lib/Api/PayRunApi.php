<?php
/**
 * PayRunApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PayRunApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayRunApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auJournalGet' => [
            'application/json',
        ],
        'auPayRunAbaFile' => [
            'application/json',
        ],
        'auPayRunAsync' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunBulkApplyLeaveRequests' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunCreationStatus' => [
            'application/json',
        ],
        'auPayRunDeductionsDelete' => [
            'application/json',
        ],
        'auPayRunDeductionsGet' => [
            'application/json',
        ],
        'auPayRunDeductionsGetByEmployee' => [
            'application/json',
        ],
        'auPayRunDeductionsPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunDelete' => [
            'application/json',
        ],
        'auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation' => [
            'application/json',
        ],
        'auPayRunEarningsLineDelete' => [
            'application/json',
        ],
        'auPayRunEarningsLineGet' => [
            'application/json',
        ],
        'auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId' => [
            'application/json',
        ],
        'auPayRunEarningsLinePost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunGet' => [
            'application/json',
        ],
        'auPayRunGetPayRunSummaries' => [
            'application/json',
        ],
        'auPayRunGetPayRunSummary' => [
            'application/json',
        ],
        'auPayRunGetPayRuns' => [
            'application/json',
        ],
        'auPayRunGetWarnings' => [
            'application/json',
        ],
        'auPayRunIncludeEmployee' => [
            'application/json',
        ],
        'auPayRunNetToGross' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunNotation' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunPaySlipFile' => [
            'application/json',
        ],
        'auPayRunPaySlipGet' => [
            'application/json',
        ],
        'auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId' => [
            'application/json',
        ],
        'auPayRunPayments' => [
            'application/json',
        ],
        'auPayRunPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunRecalculate' => [
            'application/json',
        ],
        'auPayRunRemoveEmployee' => [
            'application/json',
        ],
        'auPayRunTaxAdjustmentsDelete' => [
            'application/json',
        ],
        'auPayRunTaxAdjustmentsGet' => [
            'application/json',
        ],
        'auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId' => [
            'application/json',
        ],
        'auPayRunTaxAdjustmentsPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunTerminatePost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId' => [
            'application/json',
        ],
        'auPayRunTotalsGet' => [
            'application/json',
        ],
        'auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId' => [
            'application/json',
        ],
        'auPayRunTotalsNotation' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'employeePayRunTotalGet' => [
            'application/json',
        ],
        'payRunApprovalStartApprovalProcess' => [
            'application/json',
        ],
        'payRunEmployeeExpensesDelete' => [
            'application/json',
        ],
        'payRunEmployeeExpensesGet' => [
            'application/json',
        ],
        'payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId' => [
            'application/json',
        ],
        'payRunEmployeeExpensesPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunEmployerLiabilitiesDelete' => [
            'application/json',
        ],
        'payRunEmployerLiabilitiesGet' => [
            'application/json',
        ],
        'payRunEmployerLiabilitiesGetAll' => [
            'application/json',
        ],
        'payRunEmployerLiabilitiesPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunFinalisePost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunLeaveAccruedDelete' => [
            'application/json',
        ],
        'payRunLeaveAccruedGet' => [
            'application/json',
        ],
        'payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId' => [
            'application/json',
        ],
        'payRunLeaveAccruedPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunSuperAdjustmentsDelete' => [
            'application/json',
        ],
        'payRunSuperAdjustmentsGet' => [
            'application/json',
        ],
        'payRunSuperAdjustmentsGetAll' => [
            'application/json',
        ],
        'payRunSuperAdjustmentsPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunUnlockPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payRunUnlockStatePost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auJournalGet
     *
     * Get Journal Details
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auJournalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuJournalItemResponse[]
     */
    public function auJournalGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auJournalGet'][0])
    {
        list($response) = $this->auJournalGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auJournalGetWithHttpInfo
     *
     * Get Journal Details
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auJournalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuJournalItemResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auJournalGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auJournalGet'][0])
    {
        $request = $this->auJournalGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuJournalItemResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuJournalItemResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuJournalItemResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuJournalItemResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuJournalItemResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auJournalGetAsync
     *
     * Get Journal Details
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auJournalGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auJournalGet'][0])
    {
        return $this->auJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auJournalGetAsyncWithHttpInfo
     *
     * Get Journal Details
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auJournalGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuJournalItemResponse[]';
        $request = $this->auJournalGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auJournalGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auJournalGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auJournalGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auJournalGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auJournalGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/journal/{payRunId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunAbaFile
     *
     * Get ABA File
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $aba_id aba_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAbaFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function auPayRunAbaFile($pay_run_id, $aba_id, $business_id, string $contentType = self::contentTypes['auPayRunAbaFile'][0])
    {
        list($response) = $this->auPayRunAbaFileWithHttpInfo($pay_run_id, $aba_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunAbaFileWithHttpInfo
     *
     * Get ABA File
     *
     * @param  int $pay_run_id (required)
     * @param  int $aba_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAbaFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunAbaFileWithHttpInfo($pay_run_id, $aba_id, $business_id, string $contentType = self::contentTypes['auPayRunAbaFile'][0])
    {
        $request = $this->auPayRunAbaFileRequest($pay_run_id, $aba_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunAbaFileAsync
     *
     * Get ABA File
     *
     * @param  int $pay_run_id (required)
     * @param  int $aba_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAbaFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunAbaFileAsync($pay_run_id, $aba_id, $business_id, string $contentType = self::contentTypes['auPayRunAbaFile'][0])
    {
        return $this->auPayRunAbaFileAsyncWithHttpInfo($pay_run_id, $aba_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunAbaFileAsyncWithHttpInfo
     *
     * Get ABA File
     *
     * @param  int $pay_run_id (required)
     * @param  int $aba_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAbaFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunAbaFileAsyncWithHttpInfo($pay_run_id, $aba_id, $business_id, string $contentType = self::contentTypes['auPayRunAbaFile'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->auPayRunAbaFileRequest($pay_run_id, $aba_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunAbaFile'
     *
     * @param  int $pay_run_id (required)
     * @param  int $aba_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAbaFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunAbaFileRequest($pay_run_id, $aba_id, $business_id, string $contentType = self::contentTypes['auPayRunAbaFile'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunAbaFile'
            );
        }

        // verify the required parameter 'aba_id' is set
        if ($aba_id === null || (is_array($aba_id) && count($aba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aba_id when calling auPayRunAbaFile'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunAbaFile'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/file/aba/{abaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($aba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'abaId' . '}',
                ObjectSerializer::toPathValue($aba_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunAsync
     *
     * Create Pay Run (Async)
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunJobModel
     */
    public function auPayRunAsync($business_id, $request, string $contentType = self::contentTypes['auPayRunAsync'][0])
    {
        list($response) = $this->auPayRunAsyncWithHttpInfo($business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunAsyncWithHttpInfo
     *
     * Create Pay Run (Async)
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAsync'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunJobModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunAsyncWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auPayRunAsync'][0])
    {
        $request = $this->auPayRunAsyncRequest($business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunJobModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunJobModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunJobModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunJobModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunJobModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunAsyncAsync
     *
     * Create Pay Run (Async)
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunAsyncAsync($business_id, $request, string $contentType = self::contentTypes['auPayRunAsync'][0])
    {
        return $this->auPayRunAsyncAsyncWithHttpInfo($business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunAsyncAsyncWithHttpInfo
     *
     * Create Pay Run (Async)
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunAsyncAsyncWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auPayRunAsync'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunJobModel';
        $request = $this->auPayRunAsyncRequest($business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunAsync'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunAsync'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunAsyncRequest($business_id, $request, string $contentType = self::contentTypes['auPayRunAsync'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunAsync'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunAsync'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/async';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunBulkApplyLeaveRequests
     *
     * Bulk Apply Leave Requests
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\BulkApplyLeaveRequestModel $bulk_apply_leave_request_model bulk_apply_leave_request_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunBulkApplyLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApplyLeaveRequestResult
     */
    public function auPayRunBulkApplyLeaveRequests($pay_run_id, $business_id, $bulk_apply_leave_request_model, string $contentType = self::contentTypes['auPayRunBulkApplyLeaveRequests'][0])
    {
        list($response) = $this->auPayRunBulkApplyLeaveRequestsWithHttpInfo($pay_run_id, $business_id, $bulk_apply_leave_request_model, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunBulkApplyLeaveRequestsWithHttpInfo
     *
     * Bulk Apply Leave Requests
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\BulkApplyLeaveRequestModel $bulk_apply_leave_request_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunBulkApplyLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApplyLeaveRequestResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunBulkApplyLeaveRequestsWithHttpInfo($pay_run_id, $business_id, $bulk_apply_leave_request_model, string $contentType = self::contentTypes['auPayRunBulkApplyLeaveRequests'][0])
    {
        $request = $this->auPayRunBulkApplyLeaveRequestsRequest($pay_run_id, $business_id, $bulk_apply_leave_request_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ApplyLeaveRequestResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApplyLeaveRequestResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApplyLeaveRequestResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApplyLeaveRequestResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApplyLeaveRequestResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunBulkApplyLeaveRequestsAsync
     *
     * Bulk Apply Leave Requests
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\BulkApplyLeaveRequestModel $bulk_apply_leave_request_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunBulkApplyLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunBulkApplyLeaveRequestsAsync($pay_run_id, $business_id, $bulk_apply_leave_request_model, string $contentType = self::contentTypes['auPayRunBulkApplyLeaveRequests'][0])
    {
        return $this->auPayRunBulkApplyLeaveRequestsAsyncWithHttpInfo($pay_run_id, $business_id, $bulk_apply_leave_request_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunBulkApplyLeaveRequestsAsyncWithHttpInfo
     *
     * Bulk Apply Leave Requests
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\BulkApplyLeaveRequestModel $bulk_apply_leave_request_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunBulkApplyLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunBulkApplyLeaveRequestsAsyncWithHttpInfo($pay_run_id, $business_id, $bulk_apply_leave_request_model, string $contentType = self::contentTypes['auPayRunBulkApplyLeaveRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ApplyLeaveRequestResult';
        $request = $this->auPayRunBulkApplyLeaveRequestsRequest($pay_run_id, $business_id, $bulk_apply_leave_request_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunBulkApplyLeaveRequests'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\BulkApplyLeaveRequestModel $bulk_apply_leave_request_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunBulkApplyLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunBulkApplyLeaveRequestsRequest($pay_run_id, $business_id, $bulk_apply_leave_request_model, string $contentType = self::contentTypes['auPayRunBulkApplyLeaveRequests'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunBulkApplyLeaveRequests'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunBulkApplyLeaveRequests'
            );
        }

        // verify the required parameter 'bulk_apply_leave_request_model' is set
        if ($bulk_apply_leave_request_model === null || (is_array($bulk_apply_leave_request_model) && count($bulk_apply_leave_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_apply_leave_request_model when calling auPayRunBulkApplyLeaveRequests'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/bulkapplyleaverequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_apply_leave_request_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_apply_leave_request_model));
            } else {
                $httpBody = $bulk_apply_leave_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunCreationStatus
     *
     * Get Creation Status
     *
     * @param  string $job_id job_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunCreationStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunJobStatusModel
     */
    public function auPayRunCreationStatus($job_id, $business_id, string $contentType = self::contentTypes['auPayRunCreationStatus'][0])
    {
        list($response) = $this->auPayRunCreationStatusWithHttpInfo($job_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunCreationStatusWithHttpInfo
     *
     * Get Creation Status
     *
     * @param  string $job_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunCreationStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunJobStatusModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunCreationStatusWithHttpInfo($job_id, $business_id, string $contentType = self::contentTypes['auPayRunCreationStatus'][0])
    {
        $request = $this->auPayRunCreationStatusRequest($job_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunJobStatusModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunJobStatusModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunJobStatusModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunJobStatusModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunJobStatusModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunCreationStatusAsync
     *
     * Get Creation Status
     *
     * @param  string $job_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunCreationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunCreationStatusAsync($job_id, $business_id, string $contentType = self::contentTypes['auPayRunCreationStatus'][0])
    {
        return $this->auPayRunCreationStatusAsyncWithHttpInfo($job_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunCreationStatusAsyncWithHttpInfo
     *
     * Get Creation Status
     *
     * @param  string $job_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunCreationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunCreationStatusAsyncWithHttpInfo($job_id, $business_id, string $contentType = self::contentTypes['auPayRunCreationStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunJobStatusModel';
        $request = $this->auPayRunCreationStatusRequest($job_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunCreationStatus'
     *
     * @param  string $job_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunCreationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunCreationStatusRequest($job_id, $business_id, string $contentType = self::contentTypes['auPayRunCreationStatus'][0])
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling auPayRunCreationStatus'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunCreationStatus'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/creationstatus/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDeductionsDelete
     *
     * Delete Deduction
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunDeductionsDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsDelete'][0])
    {
        $this->auPayRunDeductionsDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunDeductionsDeleteWithHttpInfo
     *
     * Delete Deduction
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeductionsDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsDelete'][0])
    {
        $request = $this->auPayRunDeductionsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeductionsDeleteAsync
     *
     * Delete Deduction
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsDelete'][0])
    {
        return $this->auPayRunDeductionsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeductionsDeleteAsyncWithHttpInfo
     *
     * Delete Deduction
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsDelete'][0])
    {
        $returnType = '';
        $request = $this->auPayRunDeductionsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDeductionsDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeductionsDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDeductionsDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auPayRunDeductionsDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDeductionsDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/deductions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDeductionsGet
     *
     * List Deductions
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunDeductionResponse
     */
    public function auPayRunDeductionsGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGet'][0])
    {
        list($response) = $this->auPayRunDeductionsGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunDeductionsGetWithHttpInfo
     *
     * List Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunDeductionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeductionsGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGet'][0])
    {
        $request = $this->auPayRunDeductionsGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunDeductionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunDeductionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunDeductionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunDeductionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunDeductionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeductionsGetAsync
     *
     * List Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGet'][0])
    {
        return $this->auPayRunDeductionsGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeductionsGetAsyncWithHttpInfo
     *
     * List Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunDeductionResponse';
        $request = $this->auPayRunDeductionsGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDeductionsGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeductionsGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDeductionsGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDeductionsGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/deductions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDeductionsGetByEmployee
     *
     * Get Deductions by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGetByEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunDeductionResponse
     */
    public function auPayRunDeductionsGetByEmployee($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGetByEmployee'][0])
    {
        list($response) = $this->auPayRunDeductionsGetByEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunDeductionsGetByEmployeeWithHttpInfo
     *
     * Get Deductions by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGetByEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunDeductionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeductionsGetByEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGetByEmployee'][0])
    {
        $request = $this->auPayRunDeductionsGetByEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunDeductionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunDeductionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunDeductionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunDeductionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunDeductionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeductionsGetByEmployeeAsync
     *
     * Get Deductions by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGetByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsGetByEmployeeAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGetByEmployee'][0])
    {
        return $this->auPayRunDeductionsGetByEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeductionsGetByEmployeeAsyncWithHttpInfo
     *
     * Get Deductions by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGetByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsGetByEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGetByEmployee'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunDeductionResponse';
        $request = $this->auPayRunDeductionsGetByEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDeductionsGetByEmployee'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsGetByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeductionsGetByEmployeeRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunDeductionsGetByEmployee'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDeductionsGetByEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunDeductionsGetByEmployee'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDeductionsGetByEmployee'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/deductions/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDeductionsPost
     *
     * Create Deductions
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunDeductionRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunDeductionsPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunDeductionsPost'][0])
    {
        $this->auPayRunDeductionsPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation auPayRunDeductionsPostWithHttpInfo
     *
     * Create Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunDeductionRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeductionsPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunDeductionsPost'][0])
    {
        $request = $this->auPayRunDeductionsPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeductionsPostAsync
     *
     * Create Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunDeductionRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunDeductionsPost'][0])
    {
        return $this->auPayRunDeductionsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeductionsPostAsyncWithHttpInfo
     *
     * Create Deductions
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunDeductionRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeductionsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunDeductionsPost'][0])
    {
        $returnType = '';
        $request = $this->auPayRunDeductionsPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDeductionsPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunDeductionRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeductionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeductionsPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunDeductionsPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDeductionsPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDeductionsPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunDeductionsPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/deductions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDelete
     *
     * Delete Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunDelete($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDelete'][0])
    {
        $this->auPayRunDeleteWithHttpInfo($pay_run_id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunDeleteWithHttpInfo
     *
     * Delete Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeleteWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDelete'][0])
    {
        $request = $this->auPayRunDeleteRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeleteAsync
     *
     * Delete Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeleteAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDelete'][0])
    {
        return $this->auPayRunDeleteAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeleteAsyncWithHttpInfo
     *
     * Delete Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeleteAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDelete'][0])
    {
        $returnType = '';
        $request = $this->auPayRunDeleteRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeleteRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation
     *
     * Delete Pay Run Notation
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'][0])
    {
        $this->auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationWithHttpInfo($pay_run_id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationWithHttpInfo
     *
     * Delete Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'][0])
    {
        $request = $this->auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationAsync
     *
     * Delete Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'][0])
    {
        return $this->auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationAsyncWithHttpInfo
     *
     * Delete Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'][0])
    {
        $returnType = '';
        $request = $this->auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotation'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/notation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunEarningsLineDelete
     *
     * Delete Earnings Line
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunEarningsLineDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineDelete'][0])
    {
        $this->auPayRunEarningsLineDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunEarningsLineDeleteWithHttpInfo
     *
     * Delete Earnings Line
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunEarningsLineDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineDelete'][0])
    {
        $request = $this->auPayRunEarningsLineDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunEarningsLineDeleteAsync
     *
     * Delete Earnings Line
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineDelete'][0])
    {
        return $this->auPayRunEarningsLineDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunEarningsLineDeleteAsyncWithHttpInfo
     *
     * Delete Earnings Line
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineDelete'][0])
    {
        $returnType = '';
        $request = $this->auPayRunEarningsLineDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunEarningsLineDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunEarningsLineDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunEarningsLineDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auPayRunEarningsLineDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunEarningsLineDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/earningslines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunEarningsLineGet
     *
     * List Earnings Lines
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel
     */
    public function auPayRunEarningsLineGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGet'][0])
    {
        list($response) = $this->auPayRunEarningsLineGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunEarningsLineGetWithHttpInfo
     *
     * List Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunEarningsLineGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGet'][0])
    {
        $request = $this->auPayRunEarningsLineGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunEarningsLineGetAsync
     *
     * List Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGet'][0])
    {
        return $this->auPayRunEarningsLineGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunEarningsLineGetAsyncWithHttpInfo
     *
     * List Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel';
        $request = $this->auPayRunEarningsLineGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunEarningsLineGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunEarningsLineGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunEarningsLineGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunEarningsLineGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/earningslines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId
     *
     * Get Earnings Lines by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel
     */
    public function auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'][0])
    {
        list($response) = $this->auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdWithHttpInfo
     *
     * Get Earnings Lines by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'][0])
    {
        $request = $this->auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdAsync
     *
     * Get Earnings Lines by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'][0])
    {
        return $this->auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdAsyncWithHttpInfo
     *
     * Get Earnings Lines by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunEarningsLineResponseModel';
        $request = $this->auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunEarningsLineGetApiV2BusinessByBusinessIdPayrunByPayRunIdEarningslinesByEmployeeId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/earningslines/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunEarningsLinePost
     *
     * Create Earnings Lines
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuSubmitPayRunEarningsLineRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLinePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunEarningsLinePost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunEarningsLinePost'][0])
    {
        $this->auPayRunEarningsLinePostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation auPayRunEarningsLinePostWithHttpInfo
     *
     * Create Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuSubmitPayRunEarningsLineRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLinePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunEarningsLinePostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunEarningsLinePost'][0])
    {
        $request = $this->auPayRunEarningsLinePostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunEarningsLinePostAsync
     *
     * Create Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuSubmitPayRunEarningsLineRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLinePostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunEarningsLinePost'][0])
    {
        return $this->auPayRunEarningsLinePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunEarningsLinePostAsyncWithHttpInfo
     *
     * Create Earnings Lines
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuSubmitPayRunEarningsLineRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunEarningsLinePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunEarningsLinePost'][0])
    {
        $returnType = '';
        $request = $this->auPayRunEarningsLinePostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunEarningsLinePost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuSubmitPayRunEarningsLineRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunEarningsLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunEarningsLinePostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunEarningsLinePost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunEarningsLinePost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunEarningsLinePost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunEarningsLinePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/earningslines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunGet
     *
     * Get Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunModel
     */
    public function auPayRunGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGet'][0])
    {
        list($response) = $this->auPayRunGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunGetWithHttpInfo
     *
     * Get Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGet'][0])
    {
        $request = $this->auPayRunGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunGetAsync
     *
     * Get Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGet'][0])
    {
        return $this->auPayRunGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunGetAsyncWithHttpInfo
     *
     * Get Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunModel';
        $request = $this->auPayRunGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunGetPayRunSummaries
     *
     * List Pay Runs Summaries
     *
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummaries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunSummaryModel[]
     */
    public function auPayRunGetPayRunSummaries($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRunSummaries'][0])
    {
        list($response) = $this->auPayRunGetPayRunSummariesWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunGetPayRunSummariesWithHttpInfo
     *
     * List Pay Runs Summaries
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummaries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunSummaryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunGetPayRunSummariesWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRunSummaries'][0])
    {
        $request = $this->auPayRunGetPayRunSummariesRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunSummaryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunSummaryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunSummaryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunSummaryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunSummaryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunGetPayRunSummariesAsync
     *
     * List Pay Runs Summaries
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunSummariesAsync($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRunSummaries'][0])
    {
        return $this->auPayRunGetPayRunSummariesAsyncWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunGetPayRunSummariesAsyncWithHttpInfo
     *
     * List Pay Runs Summaries
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunSummariesAsyncWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRunSummaries'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunSummaryModel[]';
        $request = $this->auPayRunGetPayRunSummariesRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunGetPayRunSummaries'
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunGetPayRunSummariesRequest($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRunSummaries'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunGetPayRunSummaries'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/payrun/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunGetPayRunSummary
     *
     * Get Pay Run Summary
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunSummaryModel
     */
    public function auPayRunGetPayRunSummary($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetPayRunSummary'][0])
    {
        list($response) = $this->auPayRunGetPayRunSummaryWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunGetPayRunSummaryWithHttpInfo
     *
     * Get Pay Run Summary
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunGetPayRunSummaryWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetPayRunSummary'][0])
    {
        $request = $this->auPayRunGetPayRunSummaryRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunSummaryModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunSummaryModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunSummaryModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunSummaryModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunGetPayRunSummaryAsync
     *
     * Get Pay Run Summary
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunSummaryAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetPayRunSummary'][0])
    {
        return $this->auPayRunGetPayRunSummaryAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunGetPayRunSummaryAsyncWithHttpInfo
     *
     * Get Pay Run Summary
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunSummaryAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetPayRunSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunSummaryModel';
        $request = $this->auPayRunGetPayRunSummaryRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunGetPayRunSummary'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRunSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunGetPayRunSummaryRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetPayRunSummary'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunGetPayRunSummary'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunGetPayRunSummary'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunGetPayRuns
     *
     * List Pay Runs
     *
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRuns'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunModel[]
     */
    public function auPayRunGetPayRuns($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRuns'][0])
    {
        list($response) = $this->auPayRunGetPayRunsWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunGetPayRunsWithHttpInfo
     *
     * List Pay Runs
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRuns'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunGetPayRunsWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRuns'][0])
    {
        $request = $this->auPayRunGetPayRunsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunGetPayRunsAsync
     *
     * List Pay Runs
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRuns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunsAsync($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRuns'][0])
    {
        return $this->auPayRunGetPayRunsAsyncWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunGetPayRunsAsyncWithHttpInfo
     *
     * List Pay Runs
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRuns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetPayRunsAsyncWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRuns'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunModel[]';
        $request = $this->auPayRunGetPayRunsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunGetPayRuns'
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetPayRuns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunGetPayRunsRequest($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auPayRunGetPayRuns'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunGetPayRuns'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/payrun';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunGetWarnings
     *
     * List Pay Run Warnings
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetWarnings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DetailedPayRunWarningModel[]
     */
    public function auPayRunGetWarnings($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetWarnings'][0])
    {
        list($response) = $this->auPayRunGetWarningsWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunGetWarningsWithHttpInfo
     *
     * List Pay Run Warnings
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetWarnings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DetailedPayRunWarningModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunGetWarningsWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetWarnings'][0])
    {
        $request = $this->auPayRunGetWarningsRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DetailedPayRunWarningModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DetailedPayRunWarningModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DetailedPayRunWarningModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DetailedPayRunWarningModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DetailedPayRunWarningModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunGetWarningsAsync
     *
     * List Pay Run Warnings
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetWarnings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetWarningsAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetWarnings'][0])
    {
        return $this->auPayRunGetWarningsAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunGetWarningsAsyncWithHttpInfo
     *
     * List Pay Run Warnings
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetWarnings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunGetWarningsAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetWarnings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DetailedPayRunWarningModel[]';
        $request = $this->auPayRunGetWarningsRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunGetWarnings'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunGetWarnings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunGetWarningsRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunGetWarnings'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunGetWarnings'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunGetWarnings'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/warnings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunIncludeEmployee
     *
     * Include Employee
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunIncludeEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunTotalModel
     */
    public function auPayRunIncludeEmployee($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunIncludeEmployee'][0])
    {
        list($response) = $this->auPayRunIncludeEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunIncludeEmployeeWithHttpInfo
     *
     * Include Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunIncludeEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunTotalModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunIncludeEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunIncludeEmployee'][0])
    {
        $request = $this->auPayRunIncludeEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunTotalModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunTotalModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunTotalModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunTotalModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunTotalModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunIncludeEmployeeAsync
     *
     * Include Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunIncludeEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunIncludeEmployeeAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunIncludeEmployee'][0])
    {
        return $this->auPayRunIncludeEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunIncludeEmployeeAsyncWithHttpInfo
     *
     * Include Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunIncludeEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunIncludeEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunIncludeEmployee'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunTotalModel';
        $request = $this->auPayRunIncludeEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunIncludeEmployee'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunIncludeEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunIncludeEmployeeRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunIncludeEmployee'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunIncludeEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunIncludeEmployee'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunIncludeEmployee'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunNetToGross
     *
     * Net to Gross
     *
     * @param  string $business_id business_id (required)
     * @param  string $pay_run_id pay_run_id (required)
     * @param  \OpenAPI\Client\Model\NetToGrossRequest $net_to_gross_request net_to_gross_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNetToGross'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\NetToGrossModel
     */
    public function auPayRunNetToGross($business_id, $pay_run_id, $net_to_gross_request, string $contentType = self::contentTypes['auPayRunNetToGross'][0])
    {
        list($response) = $this->auPayRunNetToGrossWithHttpInfo($business_id, $pay_run_id, $net_to_gross_request, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunNetToGrossWithHttpInfo
     *
     * Net to Gross
     *
     * @param  string $business_id (required)
     * @param  string $pay_run_id (required)
     * @param  \OpenAPI\Client\Model\NetToGrossRequest $net_to_gross_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNetToGross'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NetToGrossModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunNetToGrossWithHttpInfo($business_id, $pay_run_id, $net_to_gross_request, string $contentType = self::contentTypes['auPayRunNetToGross'][0])
    {
        $request = $this->auPayRunNetToGrossRequest($business_id, $pay_run_id, $net_to_gross_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\NetToGrossModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NetToGrossModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NetToGrossModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NetToGrossModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NetToGrossModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunNetToGrossAsync
     *
     * Net to Gross
     *
     * @param  string $business_id (required)
     * @param  string $pay_run_id (required)
     * @param  \OpenAPI\Client\Model\NetToGrossRequest $net_to_gross_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNetToGross'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunNetToGrossAsync($business_id, $pay_run_id, $net_to_gross_request, string $contentType = self::contentTypes['auPayRunNetToGross'][0])
    {
        return $this->auPayRunNetToGrossAsyncWithHttpInfo($business_id, $pay_run_id, $net_to_gross_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunNetToGrossAsyncWithHttpInfo
     *
     * Net to Gross
     *
     * @param  string $business_id (required)
     * @param  string $pay_run_id (required)
     * @param  \OpenAPI\Client\Model\NetToGrossRequest $net_to_gross_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNetToGross'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunNetToGrossAsyncWithHttpInfo($business_id, $pay_run_id, $net_to_gross_request, string $contentType = self::contentTypes['auPayRunNetToGross'][0])
    {
        $returnType = '\OpenAPI\Client\Model\NetToGrossModel';
        $request = $this->auPayRunNetToGrossRequest($business_id, $pay_run_id, $net_to_gross_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunNetToGross'
     *
     * @param  string $business_id (required)
     * @param  string $pay_run_id (required)
     * @param  \OpenAPI\Client\Model\NetToGrossRequest $net_to_gross_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNetToGross'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunNetToGrossRequest($business_id, $pay_run_id, $net_to_gross_request, string $contentType = self::contentTypes['auPayRunNetToGross'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunNetToGross'
            );
        }

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunNetToGross'
            );
        }

        // verify the required parameter 'net_to_gross_request' is set
        if ($net_to_gross_request === null || (is_array($net_to_gross_request) && count($net_to_gross_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $net_to_gross_request when calling auPayRunNetToGross'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/nettogross';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($net_to_gross_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($net_to_gross_request));
            } else {
                $httpBody = $net_to_gross_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunNotation
     *
     * Set Pay Run Notation
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunNotationModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunNotation($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunNotation'][0])
    {
        $this->auPayRunNotationWithHttpInfo($pay_run_id, $business_id, $model, $contentType);
    }

    /**
     * Operation auPayRunNotationWithHttpInfo
     *
     * Set Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunNotationWithHttpInfo($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunNotation'][0])
    {
        $request = $this->auPayRunNotationRequest($pay_run_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunNotationAsync
     *
     * Set Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunNotationAsync($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunNotation'][0])
    {
        return $this->auPayRunNotationAsyncWithHttpInfo($pay_run_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunNotationAsyncWithHttpInfo
     *
     * Set Pay Run Notation
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunNotationAsyncWithHttpInfo($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunNotation'][0])
    {
        $returnType = '';
        $request = $this->auPayRunNotationRequest($pay_run_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunNotation'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunNotationRequest($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunNotation'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunNotation'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunNotation'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auPayRunNotation'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/notation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunPaySlipFile
     *
     * Get Pay Slip File
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function auPayRunPaySlipFile($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunPaySlipFile'][0])
    {
        list($response) = $this->auPayRunPaySlipFileWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunPaySlipFileWithHttpInfo
     *
     * Get Pay Slip File
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipFile'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunPaySlipFileWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunPaySlipFile'][0])
    {
        $request = $this->auPayRunPaySlipFileRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunPaySlipFileAsync
     *
     * Get Pay Slip File
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipFileAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunPaySlipFile'][0])
    {
        return $this->auPayRunPaySlipFileAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunPaySlipFileAsyncWithHttpInfo
     *
     * Get Pay Slip File
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipFileAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunPaySlipFile'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->auPayRunPaySlipFileRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunPaySlipFile'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunPaySlipFileRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunPaySlipFile'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunPaySlipFile'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunPaySlipFile'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunPaySlipFile'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/file/payslip/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunPaySlipGet
     *
     * List Pay Slip Data
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  bool $show_all_data show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>
     */
    public function auPayRunPaySlipGet($pay_run_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGet'][0])
    {
        list($response) = $this->auPayRunPaySlipGetWithHttpInfo($pay_run_id, $business_id, $show_all_data, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunPaySlipGetWithHttpInfo
     *
     * List Pay Slip Data
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunPaySlipGetWithHttpInfo($pay_run_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGet'][0])
    {
        $request = $this->auPayRunPaySlipGetRequest($pay_run_id, $business_id, $show_all_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunPaySlipGetAsync
     *
     * List Pay Slip Data
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipGetAsync($pay_run_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGet'][0])
    {
        return $this->auPayRunPaySlipGetAsyncWithHttpInfo($pay_run_id, $business_id, $show_all_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunPaySlipGetAsyncWithHttpInfo
     *
     * List Pay Slip Data
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipGetAsyncWithHttpInfo($pay_run_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGet'][0])
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\AuApiPaySlipModel>';
        $request = $this->auPayRunPaySlipGetRequest($pay_run_id, $business_id, $show_all_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunPaySlipGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunPaySlipGetRequest($pay_run_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunPaySlipGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunPaySlipGet'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/payslips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_all_data,
            'showAllData', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId
     *
     * Get Pay Slip Data by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  bool $show_all_data show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuApiPaySlipModel
     */
    public function auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId($pay_run_id, $employee_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'][0])
    {
        list($response) = $this->auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $show_all_data, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdWithHttpInfo
     *
     * Get Pay Slip Data by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuApiPaySlipModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'][0])
    {
        $request = $this->auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $show_all_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuApiPaySlipModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuApiPaySlipModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuApiPaySlipModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuApiPaySlipModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuApiPaySlipModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdAsync
     *
     * Get Pay Slip Data by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'][0])
    {
        return $this->auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $show_all_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdAsyncWithHttpInfo
     *
     * Get Pay Slip Data by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuApiPaySlipModel';
        $request = $this->auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $show_all_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $show_all_data (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $show_all_data = false, string $contentType = self::contentTypes['auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunPaySlipGetApiV2BusinessByBusinessIdPayrunByPayRunIdPayslipsByEmployeeId'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/payslips/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_all_data,
            'showAllData', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunPayments
     *
     * Get pay run payments
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPayments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuBankPaymentModel[]
     */
    public function auPayRunPayments($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunPayments'][0])
    {
        list($response) = $this->auPayRunPaymentsWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunPaymentsWithHttpInfo
     *
     * Get pay run payments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPayments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuBankPaymentModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunPaymentsWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunPayments'][0])
    {
        $request = $this->auPayRunPaymentsRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuBankPaymentModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuBankPaymentModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuBankPaymentModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuBankPaymentModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuBankPaymentModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunPaymentsAsync
     *
     * Get pay run payments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaymentsAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunPayments'][0])
    {
        return $this->auPayRunPaymentsAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunPaymentsAsyncWithHttpInfo
     *
     * Get pay run payments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPaymentsAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunPayments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuBankPaymentModel[]';
        $request = $this->auPayRunPaymentsRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunPayments'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunPaymentsRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunPayments'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunPayments'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunPayments'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunPost
     *
     * Create Pay Run
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunModel
     */
    public function auPayRunPost($business_id, $request, string $contentType = self::contentTypes['auPayRunPost'][0])
    {
        list($response) = $this->auPayRunPostWithHttpInfo($business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunPostWithHttpInfo
     *
     * Create Pay Run
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunPostWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auPayRunPost'][0])
    {
        $request = $this->auPayRunPostRequest($business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunPostAsync
     *
     * Create Pay Run
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPostAsync($business_id, $request, string $contentType = self::contentTypes['auPayRunPost'][0])
    {
        return $this->auPayRunPostAsyncWithHttpInfo($business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunPostAsyncWithHttpInfo
     *
     * Create Pay Run
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunPostAsyncWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auPayRunPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunModel';
        $request = $this->auPayRunPostRequest($business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunPost'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunCreateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunPostRequest($business_id, $request, string $contentType = self::contentTypes['auPayRunPost'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunRecalculate
     *
     * Recalculate
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRecalculate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunRecalculate($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunRecalculate'][0])
    {
        $this->auPayRunRecalculateWithHttpInfo($pay_run_id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunRecalculateWithHttpInfo
     *
     * Recalculate
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRecalculate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunRecalculateWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunRecalculate'][0])
    {
        $request = $this->auPayRunRecalculateRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunRecalculateAsync
     *
     * Recalculate
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRecalculate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunRecalculateAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunRecalculate'][0])
    {
        return $this->auPayRunRecalculateAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunRecalculateAsyncWithHttpInfo
     *
     * Recalculate
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRecalculate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunRecalculateAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunRecalculate'][0])
    {
        $returnType = '';
        $request = $this->auPayRunRecalculateRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunRecalculate'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRecalculate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunRecalculateRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunRecalculate'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunRecalculate'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunRecalculate'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/recalculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunRemoveEmployee
     *
     * Remove Employee from Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRemoveEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunRemoveEmployee($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunRemoveEmployee'][0])
    {
        $this->auPayRunRemoveEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunRemoveEmployeeWithHttpInfo
     *
     * Remove Employee from Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRemoveEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunRemoveEmployeeWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunRemoveEmployee'][0])
    {
        $request = $this->auPayRunRemoveEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunRemoveEmployeeAsync
     *
     * Remove Employee from Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRemoveEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunRemoveEmployeeAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunRemoveEmployee'][0])
    {
        return $this->auPayRunRemoveEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunRemoveEmployeeAsyncWithHttpInfo
     *
     * Remove Employee from Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRemoveEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunRemoveEmployeeAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunRemoveEmployee'][0])
    {
        $returnType = '';
        $request = $this->auPayRunRemoveEmployeeRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunRemoveEmployee'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunRemoveEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunRemoveEmployeeRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunRemoveEmployee'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunRemoveEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunRemoveEmployee'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunRemoveEmployee'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTaxAdjustmentsDelete
     *
     * Delete PAYG Adjustment
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunTaxAdjustmentsDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsDelete'][0])
    {
        $this->auPayRunTaxAdjustmentsDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunTaxAdjustmentsDeleteWithHttpInfo
     *
     * Delete PAYG Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTaxAdjustmentsDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsDelete'][0])
    {
        $request = $this->auPayRunTaxAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTaxAdjustmentsDeleteAsync
     *
     * Delete PAYG Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsDelete'][0])
    {
        return $this->auPayRunTaxAdjustmentsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTaxAdjustmentsDeleteAsyncWithHttpInfo
     *
     * Delete PAYG Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsDelete'][0])
    {
        $returnType = '';
        $request = $this->auPayRunTaxAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTaxAdjustmentsDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTaxAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTaxAdjustmentsDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auPayRunTaxAdjustmentsDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTaxAdjustmentsDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/paygadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTaxAdjustmentsGet
     *
     * List PAYG Adjustments
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunPaygAdjustmentResponse
     */
    public function auPayRunTaxAdjustmentsGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGet'][0])
    {
        list($response) = $this->auPayRunTaxAdjustmentsGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetWithHttpInfo
     *
     * List PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunPaygAdjustmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTaxAdjustmentsGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGet'][0])
    {
        $request = $this->auPayRunTaxAdjustmentsGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetAsync
     *
     * List PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGet'][0])
    {
        return $this->auPayRunTaxAdjustmentsGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetAsyncWithHttpInfo
     *
     * List PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse';
        $request = $this->auPayRunTaxAdjustmentsGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTaxAdjustmentsGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTaxAdjustmentsGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTaxAdjustmentsGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTaxAdjustmentsGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/paygadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId
     *
     * Get PAYG Adjustments by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunPaygAdjustmentResponse
     */
    public function auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'][0])
    {
        list($response) = $this->auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdWithHttpInfo
     *
     * Get PAYG Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunPaygAdjustmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'][0])
    {
        $request = $this->auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdAsync
     *
     * Get PAYG Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'][0])
    {
        return $this->auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdAsyncWithHttpInfo
     *
     * Get PAYG Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunPaygAdjustmentResponse';
        $request = $this->auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTaxAdjustmentsGetApiV2BusinessByBusinessIdPayrunByPayRunIdPaygadjustmentsByEmployeeId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/paygadjustments/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTaxAdjustmentsPost
     *
     * Create PAYG Adjustments
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunPaygAdjustmentRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunTaxAdjustmentsPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsPost'][0])
    {
        $this->auPayRunTaxAdjustmentsPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation auPayRunTaxAdjustmentsPostWithHttpInfo
     *
     * Create PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunPaygAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTaxAdjustmentsPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsPost'][0])
    {
        $request = $this->auPayRunTaxAdjustmentsPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTaxAdjustmentsPostAsync
     *
     * Create PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunPaygAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsPost'][0])
    {
        return $this->auPayRunTaxAdjustmentsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTaxAdjustmentsPostAsyncWithHttpInfo
     *
     * Create PAYG Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunPaygAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTaxAdjustmentsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsPost'][0])
    {
        $returnType = '';
        $request = $this->auPayRunTaxAdjustmentsPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTaxAdjustmentsPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunPaygAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTaxAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTaxAdjustmentsPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTaxAdjustmentsPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTaxAdjustmentsPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTaxAdjustmentsPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunTaxAdjustmentsPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/paygadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTerminatePost
     *
     * Terminate Employee in Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\TerminateEmployeeRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTerminatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunTerminatePost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTerminatePost'][0])
    {
        $this->auPayRunTerminatePostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation auPayRunTerminatePostWithHttpInfo
     *
     * Terminate Employee in Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TerminateEmployeeRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTerminatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTerminatePostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTerminatePost'][0])
    {
        $request = $this->auPayRunTerminatePostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTerminatePostAsync
     *
     * Terminate Employee in Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TerminateEmployeeRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTerminatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTerminatePostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTerminatePost'][0])
    {
        return $this->auPayRunTerminatePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTerminatePostAsyncWithHttpInfo
     *
     * Terminate Employee in Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TerminateEmployeeRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTerminatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTerminatePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTerminatePost'][0])
    {
        $returnType = '';
        $request = $this->auPayRunTerminatePostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTerminatePost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TerminateEmployeeRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTerminatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTerminatePostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['auPayRunTerminatePost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTerminatePost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTerminatePost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auPayRunTerminatePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/terminate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId
     *
     * Delete Note for Employee
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'][0])
    {
        $this->auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
    }

    /**
     * Operation auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdWithHttpInfo
     *
     * Delete Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'][0])
    {
        $request = $this->auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdAsync
     *
     * Delete Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'][0])
    {
        return $this->auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdAsyncWithHttpInfo
     *
     * Delete Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'][0])
    {
        $returnType = '';
        $request = $this->auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTotalsDeleteApiV2BusinessByBusinessIdPayrunByPayRunIdNotationByEmployeeId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/notation/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTotalsGet
     *
     * List Pay Run Totals
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunTotalResponse
     */
    public function auPayRunTotalsGet($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGet'][0])
    {
        list($response) = $this->auPayRunTotalsGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunTotalsGetWithHttpInfo
     *
     * List Pay Run Totals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunTotalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTotalsGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGet'][0])
    {
        $request = $this->auPayRunTotalsGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunTotalResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunTotalResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunTotalResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunTotalResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunTotalResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTotalsGetAsync
     *
     * List Pay Run Totals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGet'][0])
    {
        return $this->auPayRunTotalsGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTotalsGetAsyncWithHttpInfo
     *
     * List Pay Run Totals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunTotalResponse';
        $request = $this->auPayRunTotalsGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTotalsGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTotalsGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTotalsGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTotalsGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/totals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId
     *
     * Get Pay Run Totals by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunTotalResponse
     */
    public function auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'][0])
    {
        list($response) = $this->auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdWithHttpInfo
     *
     * Get Pay Run Totals by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunTotalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'][0])
    {
        $request = $this->auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunTotalResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunTotalResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunTotalResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunTotalResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunTotalResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdAsync
     *
     * Get Pay Run Totals by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'][0])
    {
        return $this->auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdAsyncWithHttpInfo
     *
     * Get Pay Run Totals by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunTotalResponse';
        $request = $this->auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTotalsGetApiV2BusinessByBusinessIdPayrunByPayRunIdTotalsByEmployeeId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/totals/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPayRunTotalsNotation
     *
     * Create Note for Employee
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunTotalNotationModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunTotalNotationModel
     */
    public function auPayRunTotalsNotation($pay_run_id, $employee_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunTotalsNotation'][0])
    {
        list($response) = $this->auPayRunTotalsNotationWithHttpInfo($pay_run_id, $employee_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auPayRunTotalsNotationWithHttpInfo
     *
     * Create Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunTotalNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsNotation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunTotalNotationModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunTotalsNotationWithHttpInfo($pay_run_id, $employee_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunTotalsNotation'][0])
    {
        $request = $this->auPayRunTotalsNotationRequest($pay_run_id, $employee_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunTotalNotationModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunTotalNotationModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunTotalNotationModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunTotalNotationModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunTotalNotationModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunTotalsNotationAsync
     *
     * Create Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunTotalNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsNotationAsync($pay_run_id, $employee_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunTotalsNotation'][0])
    {
        return $this->auPayRunTotalsNotationAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunTotalsNotationAsyncWithHttpInfo
     *
     * Create Note for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunTotalNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunTotalsNotationAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunTotalsNotation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunTotalNotationModel';
        $request = $this->auPayRunTotalsNotationRequest($pay_run_id, $employee_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunTotalsNotation'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunTotalNotationModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auPayRunTotalsNotation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auPayRunTotalsNotationRequest($pay_run_id, $employee_id, $business_id, $model, string $contentType = self::contentTypes['auPayRunTotalsNotation'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunTotalsNotation'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auPayRunTotalsNotation'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunTotalsNotation'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auPayRunTotalsNotation'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/notation/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeePayRunTotalGet
     *
     * List Pay Run Totals for Employee
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeePayRunTotalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunTotalModel[]
     */
    public function employeePayRunTotalGet($employee_id, $business_id, string $contentType = self::contentTypes['employeePayRunTotalGet'][0])
    {
        list($response) = $this->employeePayRunTotalGetWithHttpInfo($employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation employeePayRunTotalGetWithHttpInfo
     *
     * List Pay Run Totals for Employee
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeePayRunTotalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunTotalModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeePayRunTotalGetWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['employeePayRunTotalGet'][0])
    {
        $request = $this->employeePayRunTotalGetRequest($employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunTotalModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunTotalModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunTotalModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunTotalModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunTotalModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeePayRunTotalGetAsync
     *
     * List Pay Run Totals for Employee
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeePayRunTotalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeePayRunTotalGetAsync($employee_id, $business_id, string $contentType = self::contentTypes['employeePayRunTotalGet'][0])
    {
        return $this->employeePayRunTotalGetAsyncWithHttpInfo($employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeePayRunTotalGetAsyncWithHttpInfo
     *
     * List Pay Run Totals for Employee
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeePayRunTotalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeePayRunTotalGetAsyncWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['employeePayRunTotalGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunTotalModel[]';
        $request = $this->employeePayRunTotalGetRequest($employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeePayRunTotalGet'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeePayRunTotalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeePayRunTotalGetRequest($employee_id, $business_id, string $contentType = self::contentTypes['employeePayRunTotalGet'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling employeePayRunTotalGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling employeePayRunTotalGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/payruntotals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunApprovalStartApprovalProcess
     *
     * Start Approval Process
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunApprovalStartApprovalProcess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunApprovalStartApprovalProcess($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunApprovalStartApprovalProcess'][0])
    {
        $this->payRunApprovalStartApprovalProcessWithHttpInfo($pay_run_id, $business_id, $contentType);
    }

    /**
     * Operation payRunApprovalStartApprovalProcessWithHttpInfo
     *
     * Start Approval Process
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunApprovalStartApprovalProcess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunApprovalStartApprovalProcessWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunApprovalStartApprovalProcess'][0])
    {
        $request = $this->payRunApprovalStartApprovalProcessRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunApprovalStartApprovalProcessAsync
     *
     * Start Approval Process
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunApprovalStartApprovalProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunApprovalStartApprovalProcessAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunApprovalStartApprovalProcess'][0])
    {
        return $this->payRunApprovalStartApprovalProcessAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunApprovalStartApprovalProcessAsyncWithHttpInfo
     *
     * Start Approval Process
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunApprovalStartApprovalProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunApprovalStartApprovalProcessAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunApprovalStartApprovalProcess'][0])
    {
        $returnType = '';
        $request = $this->payRunApprovalStartApprovalProcessRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunApprovalStartApprovalProcess'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunApprovalStartApprovalProcess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunApprovalStartApprovalProcessRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunApprovalStartApprovalProcess'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunApprovalStartApprovalProcess'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunApprovalStartApprovalProcess'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/approval/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployeeExpensesDelete
     *
     * Delete Employee Expense
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunEmployeeExpensesDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesDelete'][0])
    {
        $this->payRunEmployeeExpensesDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation payRunEmployeeExpensesDeleteWithHttpInfo
     *
     * Delete Employee Expense
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployeeExpensesDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesDelete'][0])
    {
        $request = $this->payRunEmployeeExpensesDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployeeExpensesDeleteAsync
     *
     * Delete Employee Expense
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesDelete'][0])
    {
        return $this->payRunEmployeeExpensesDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployeeExpensesDeleteAsyncWithHttpInfo
     *
     * Delete Employee Expense
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesDelete'][0])
    {
        $returnType = '';
        $request = $this->payRunEmployeeExpensesDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployeeExpensesDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployeeExpensesDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployeeExpensesDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payRunEmployeeExpensesDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployeeExpensesDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/EmployeeExpenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployeeExpensesGet
     *
     * List Employee Expenses
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunEmployeeExpenseResponse
     */
    public function payRunEmployeeExpensesGet($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGet'][0])
    {
        list($response) = $this->payRunEmployeeExpensesGetWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunEmployeeExpensesGetWithHttpInfo
     *
     * List Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunEmployeeExpenseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployeeExpensesGetWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGet'][0])
    {
        $request = $this->payRunEmployeeExpensesGetRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployeeExpensesGetAsync
     *
     * List Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesGetAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGet'][0])
    {
        return $this->payRunEmployeeExpensesGetAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployeeExpensesGetAsyncWithHttpInfo
     *
     * List Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesGetAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse';
        $request = $this->payRunEmployeeExpensesGetRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployeeExpensesGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployeeExpensesGetRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployeeExpensesGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployeeExpensesGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/EmployeeExpenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId
     *
     * Get Employee Expenses by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunEmployeeExpenseResponse
     */
    public function payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'][0])
    {
        list($response) = $this->payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdWithHttpInfo
     *
     * Get Employee Expenses by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunEmployeeExpenseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'][0])
    {
        $request = $this->payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdAsync
     *
     * Get Employee Expenses by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'][0])
    {
        return $this->payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdAsyncWithHttpInfo
     *
     * Get Employee Expenses by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunEmployeeExpenseResponse';
        $request = $this->payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployeeExpensesGetApiV2BusinessByBusinessIdPayrunByPayRunIdEmployeeExpensesByEmployeeId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/EmployeeExpenses/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployeeExpensesPost
     *
     * Create Employee Expenses
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployeeExpenseRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunEmployeeExpensesPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployeeExpensesPost'][0])
    {
        $this->payRunEmployeeExpensesPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation payRunEmployeeExpensesPostWithHttpInfo
     *
     * Create Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployeeExpenseRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployeeExpensesPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployeeExpensesPost'][0])
    {
        $request = $this->payRunEmployeeExpensesPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployeeExpensesPostAsync
     *
     * Create Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployeeExpenseRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployeeExpensesPost'][0])
    {
        return $this->payRunEmployeeExpensesPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployeeExpensesPostAsyncWithHttpInfo
     *
     * Create Employee Expenses
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployeeExpenseRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployeeExpensesPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployeeExpensesPost'][0])
    {
        $returnType = '';
        $request = $this->payRunEmployeeExpensesPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployeeExpensesPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployeeExpenseRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployeeExpensesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployeeExpensesPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployeeExpensesPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployeeExpensesPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployeeExpensesPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling payRunEmployeeExpensesPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/EmployeeExpenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployerLiabilitiesDelete
     *
     * Delete Employer Liability
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunEmployerLiabilitiesDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesDelete'][0])
    {
        $this->payRunEmployerLiabilitiesDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation payRunEmployerLiabilitiesDeleteWithHttpInfo
     *
     * Delete Employer Liability
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployerLiabilitiesDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesDelete'][0])
    {
        $request = $this->payRunEmployerLiabilitiesDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployerLiabilitiesDeleteAsync
     *
     * Delete Employer Liability
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesDelete'][0])
    {
        return $this->payRunEmployerLiabilitiesDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployerLiabilitiesDeleteAsyncWithHttpInfo
     *
     * Delete Employer Liability
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesDelete'][0])
    {
        $returnType = '';
        $request = $this->payRunEmployerLiabilitiesDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployerLiabilitiesDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployerLiabilitiesDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployerLiabilitiesDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payRunEmployerLiabilitiesDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployerLiabilitiesDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employerliabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployerLiabilitiesGet
     *
     * Get Employer Liabilities by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunEmployerLiabilityResponse
     */
    public function payRunEmployerLiabilitiesGet($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGet'][0])
    {
        list($response) = $this->payRunEmployerLiabilitiesGetWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunEmployerLiabilitiesGetWithHttpInfo
     *
     * Get Employer Liabilities by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunEmployerLiabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployerLiabilitiesGetWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGet'][0])
    {
        $request = $this->payRunEmployerLiabilitiesGetRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAsync
     *
     * Get Employer Liabilities by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesGetAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGet'][0])
    {
        return $this->payRunEmployerLiabilitiesGetAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAsyncWithHttpInfo
     *
     * Get Employer Liabilities by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesGetAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse';
        $request = $this->payRunEmployerLiabilitiesGetRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployerLiabilitiesGet'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployerLiabilitiesGetRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployerLiabilitiesGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling payRunEmployerLiabilitiesGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployerLiabilitiesGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employerliabilities/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAll
     *
     * List Employer Liabilities
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunEmployerLiabilityResponse
     */
    public function payRunEmployerLiabilitiesGetAll($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGetAll'][0])
    {
        list($response) = $this->payRunEmployerLiabilitiesGetAllWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAllWithHttpInfo
     *
     * List Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunEmployerLiabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployerLiabilitiesGetAllWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGetAll'][0])
    {
        $request = $this->payRunEmployerLiabilitiesGetAllRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAllAsync
     *
     * List Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesGetAllAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGetAll'][0])
    {
        return $this->payRunEmployerLiabilitiesGetAllAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployerLiabilitiesGetAllAsyncWithHttpInfo
     *
     * List Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesGetAllAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGetAll'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunEmployerLiabilityResponse';
        $request = $this->payRunEmployerLiabilitiesGetAllRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployerLiabilitiesGetAll'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployerLiabilitiesGetAllRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunEmployerLiabilitiesGetAll'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployerLiabilitiesGetAll'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployerLiabilitiesGetAll'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employerliabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunEmployerLiabilitiesPost
     *
     * Create Employer Liabilities
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployerLiabilityRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunEmployerLiabilitiesPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployerLiabilitiesPost'][0])
    {
        $this->payRunEmployerLiabilitiesPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation payRunEmployerLiabilitiesPostWithHttpInfo
     *
     * Create Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployerLiabilityRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunEmployerLiabilitiesPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployerLiabilitiesPost'][0])
    {
        $request = $this->payRunEmployerLiabilitiesPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunEmployerLiabilitiesPostAsync
     *
     * Create Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployerLiabilityRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployerLiabilitiesPost'][0])
    {
        return $this->payRunEmployerLiabilitiesPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunEmployerLiabilitiesPostAsyncWithHttpInfo
     *
     * Create Employer Liabilities
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployerLiabilityRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunEmployerLiabilitiesPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployerLiabilitiesPost'][0])
    {
        $returnType = '';
        $request = $this->payRunEmployerLiabilitiesPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunEmployerLiabilitiesPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunEmployerLiabilityRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunEmployerLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunEmployerLiabilitiesPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunEmployerLiabilitiesPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunEmployerLiabilitiesPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunEmployerLiabilitiesPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling payRunEmployerLiabilitiesPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/employerliabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunFinalisePost
     *
     * Finalise Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\FinalisePayRunOptions $options options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunFinalisePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunFinaliseResult
     */
    public function payRunFinalisePost($pay_run_id, $business_id, $options, string $contentType = self::contentTypes['payRunFinalisePost'][0])
    {
        list($response) = $this->payRunFinalisePostWithHttpInfo($pay_run_id, $business_id, $options, $contentType);
        return $response;
    }

    /**
     * Operation payRunFinalisePostWithHttpInfo
     *
     * Finalise Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\FinalisePayRunOptions $options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunFinalisePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunFinaliseResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunFinalisePostWithHttpInfo($pay_run_id, $business_id, $options, string $contentType = self::contentTypes['payRunFinalisePost'][0])
    {
        $request = $this->payRunFinalisePostRequest($pay_run_id, $business_id, $options, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunFinaliseResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunFinaliseResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunFinaliseResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunFinaliseResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunFinaliseResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunFinalisePostAsync
     *
     * Finalise Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\FinalisePayRunOptions $options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunFinalisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunFinalisePostAsync($pay_run_id, $business_id, $options, string $contentType = self::contentTypes['payRunFinalisePost'][0])
    {
        return $this->payRunFinalisePostAsyncWithHttpInfo($pay_run_id, $business_id, $options, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunFinalisePostAsyncWithHttpInfo
     *
     * Finalise Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\FinalisePayRunOptions $options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunFinalisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunFinalisePostAsyncWithHttpInfo($pay_run_id, $business_id, $options, string $contentType = self::contentTypes['payRunFinalisePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunFinaliseResult';
        $request = $this->payRunFinalisePostRequest($pay_run_id, $business_id, $options, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunFinalisePost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\FinalisePayRunOptions $options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunFinalisePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunFinalisePostRequest($pay_run_id, $business_id, $options, string $contentType = self::contentTypes['payRunFinalisePost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunFinalisePost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunFinalisePost'
            );
        }

        // verify the required parameter 'options' is set
        if ($options === null || (is_array($options) && count($options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $options when calling payRunFinalisePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/finalise';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($options));
            } else {
                $httpBody = $options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunLeaveAccruedDelete
     *
     * Delete Leave Accrual
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunLeaveAccruedDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunLeaveAccruedDelete'][0])
    {
        $this->payRunLeaveAccruedDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation payRunLeaveAccruedDeleteWithHttpInfo
     *
     * Delete Leave Accrual
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunLeaveAccruedDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunLeaveAccruedDelete'][0])
    {
        $request = $this->payRunLeaveAccruedDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunLeaveAccruedDeleteAsync
     *
     * Delete Leave Accrual
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunLeaveAccruedDelete'][0])
    {
        return $this->payRunLeaveAccruedDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunLeaveAccruedDeleteAsyncWithHttpInfo
     *
     * Delete Leave Accrual
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunLeaveAccruedDelete'][0])
    {
        $returnType = '';
        $request = $this->payRunLeaveAccruedDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunLeaveAccruedDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunLeaveAccruedDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunLeaveAccruedDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunLeaveAccruedDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payRunLeaveAccruedDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunLeaveAccruedDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/leaveaccrued';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunLeaveAccruedGet
     *
     * Get Leave Accruals
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  bool $include_leave_taken include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LeaveAccrualResponse
     */
    public function payRunLeaveAccruedGet($pay_run_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGet'][0])
    {
        list($response) = $this->payRunLeaveAccruedGetWithHttpInfo($pay_run_id, $business_id, $include_leave_taken, $contentType);
        return $response;
    }

    /**
     * Operation payRunLeaveAccruedGetWithHttpInfo
     *
     * Get Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LeaveAccrualResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunLeaveAccruedGetWithHttpInfo($pay_run_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGet'][0])
    {
        $request = $this->payRunLeaveAccruedGetRequest($pay_run_id, $business_id, $include_leave_taken, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LeaveAccrualResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LeaveAccrualResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LeaveAccrualResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LeaveAccrualResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LeaveAccrualResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunLeaveAccruedGetAsync
     *
     * Get Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedGetAsync($pay_run_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGet'][0])
    {
        return $this->payRunLeaveAccruedGetAsyncWithHttpInfo($pay_run_id, $business_id, $include_leave_taken, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunLeaveAccruedGetAsyncWithHttpInfo
     *
     * Get Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedGetAsyncWithHttpInfo($pay_run_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LeaveAccrualResponse';
        $request = $this->payRunLeaveAccruedGetRequest($pay_run_id, $business_id, $include_leave_taken, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunLeaveAccruedGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunLeaveAccruedGetRequest($pay_run_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunLeaveAccruedGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunLeaveAccruedGet'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/leaveaccrued';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_leave_taken,
            'includeLeaveTaken', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId
     *
     * Get Leave Accruals for Employee
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  bool $include_leave_taken include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LeaveAccrualResponse
     */
    public function payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId($pay_run_id, $employee_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'][0])
    {
        list($response) = $this->payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $include_leave_taken, $contentType);
        return $response;
    }

    /**
     * Operation payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdWithHttpInfo
     *
     * Get Leave Accruals for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LeaveAccrualResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdWithHttpInfo($pay_run_id, $employee_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'][0])
    {
        $request = $this->payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $include_leave_taken, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LeaveAccrualResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LeaveAccrualResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LeaveAccrualResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LeaveAccrualResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LeaveAccrualResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdAsync
     *
     * Get Leave Accruals for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdAsync($pay_run_id, $employee_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'][0])
    {
        return $this->payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $include_leave_taken, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdAsyncWithHttpInfo
     *
     * Get Leave Accruals for Employee
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LeaveAccrualResponse';
        $request = $this->payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $include_leave_taken, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_leave_taken (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeIdRequest($pay_run_id, $employee_id, $business_id, $include_leave_taken = false, string $contentType = self::contentTypes['payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunLeaveAccruedGetApiV2BusinessByBusinessIdPayrunByPayRunIdLeaveaccruedByEmployeeId'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/leaveaccrued/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_leave_taken,
            'includeLeaveTaken', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunLeaveAccruedPost
     *
     * Save Leave Accruals
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitLeaveAccrualsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunLeaveAccruedPost($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['payRunLeaveAccruedPost'][0])
    {
        $this->payRunLeaveAccruedPostWithHttpInfo($pay_run_id, $business_id, $model, $contentType);
    }

    /**
     * Operation payRunLeaveAccruedPostWithHttpInfo
     *
     * Save Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitLeaveAccrualsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunLeaveAccruedPostWithHttpInfo($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['payRunLeaveAccruedPost'][0])
    {
        $request = $this->payRunLeaveAccruedPostRequest($pay_run_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunLeaveAccruedPostAsync
     *
     * Save Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitLeaveAccrualsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedPostAsync($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['payRunLeaveAccruedPost'][0])
    {
        return $this->payRunLeaveAccruedPostAsyncWithHttpInfo($pay_run_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunLeaveAccruedPostAsyncWithHttpInfo
     *
     * Save Leave Accruals
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitLeaveAccrualsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunLeaveAccruedPostAsyncWithHttpInfo($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['payRunLeaveAccruedPost'][0])
    {
        $returnType = '';
        $request = $this->payRunLeaveAccruedPostRequest($pay_run_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunLeaveAccruedPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitLeaveAccrualsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunLeaveAccruedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunLeaveAccruedPostRequest($pay_run_id, $business_id, $model, string $contentType = self::contentTypes['payRunLeaveAccruedPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunLeaveAccruedPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunLeaveAccruedPost'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling payRunLeaveAccruedPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/leaveaccrued';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunSuperAdjustmentsDelete
     *
     * Delete Super Adjustment
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunSuperAdjustmentsDelete($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsDelete'][0])
    {
        $this->payRunSuperAdjustmentsDeleteWithHttpInfo($pay_run_id, $id, $business_id, $contentType);
    }

    /**
     * Operation payRunSuperAdjustmentsDeleteWithHttpInfo
     *
     * Delete Super Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunSuperAdjustmentsDeleteWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsDelete'][0])
    {
        $request = $this->payRunSuperAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunSuperAdjustmentsDeleteAsync
     *
     * Delete Super Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsDeleteAsync($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsDelete'][0])
    {
        return $this->payRunSuperAdjustmentsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunSuperAdjustmentsDeleteAsyncWithHttpInfo
     *
     * Delete Super Adjustment
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsDeleteAsyncWithHttpInfo($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsDelete'][0])
    {
        $returnType = '';
        $request = $this->payRunSuperAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunSuperAdjustmentsDelete'
     *
     * @param  int $pay_run_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunSuperAdjustmentsDeleteRequest($pay_run_id, $id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsDelete'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunSuperAdjustmentsDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payRunSuperAdjustmentsDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunSuperAdjustmentsDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/superadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunSuperAdjustmentsGet
     *
     * Get Super Adjustments by Employee ID
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunSuperAdjustmentResponse
     */
    public function payRunSuperAdjustmentsGet($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGet'][0])
    {
        list($response) = $this->payRunSuperAdjustmentsGetWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunSuperAdjustmentsGetWithHttpInfo
     *
     * Get Super Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunSuperAdjustmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunSuperAdjustmentsGetWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGet'][0])
    {
        $request = $this->payRunSuperAdjustmentsGetRequest($pay_run_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunSuperAdjustmentsGetAsync
     *
     * Get Super Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsGetAsync($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGet'][0])
    {
        return $this->payRunSuperAdjustmentsGetAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunSuperAdjustmentsGetAsyncWithHttpInfo
     *
     * Get Super Adjustments by Employee ID
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsGetAsyncWithHttpInfo($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse';
        $request = $this->payRunSuperAdjustmentsGetRequest($pay_run_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunSuperAdjustmentsGet'
     *
     * @param  int $pay_run_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunSuperAdjustmentsGetRequest($pay_run_id, $employee_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunSuperAdjustmentsGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling payRunSuperAdjustmentsGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunSuperAdjustmentsGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/superadjustments/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunSuperAdjustmentsGetAll
     *
     * List Super Adjustments
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayRunSuperAdjustmentResponse
     */
    public function payRunSuperAdjustmentsGetAll($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGetAll'][0])
    {
        list($response) = $this->payRunSuperAdjustmentsGetAllWithHttpInfo($pay_run_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation payRunSuperAdjustmentsGetAllWithHttpInfo
     *
     * List Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayRunSuperAdjustmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunSuperAdjustmentsGetAllWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGetAll'][0])
    {
        $request = $this->payRunSuperAdjustmentsGetAllRequest($pay_run_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payRunSuperAdjustmentsGetAllAsync
     *
     * List Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsGetAllAsync($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGetAll'][0])
    {
        return $this->payRunSuperAdjustmentsGetAllAsyncWithHttpInfo($pay_run_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunSuperAdjustmentsGetAllAsyncWithHttpInfo
     *
     * List Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsGetAllAsyncWithHttpInfo($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGetAll'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayRunSuperAdjustmentResponse';
        $request = $this->payRunSuperAdjustmentsGetAllRequest($pay_run_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunSuperAdjustmentsGetAll'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunSuperAdjustmentsGetAllRequest($pay_run_id, $business_id, string $contentType = self::contentTypes['payRunSuperAdjustmentsGetAll'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunSuperAdjustmentsGetAll'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunSuperAdjustmentsGetAll'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/superadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunSuperAdjustmentsPost
     *
     * Create Super Adjustments
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunSuperAdjustmentRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunSuperAdjustmentsPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunSuperAdjustmentsPost'][0])
    {
        $this->payRunSuperAdjustmentsPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation payRunSuperAdjustmentsPostWithHttpInfo
     *
     * Create Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunSuperAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunSuperAdjustmentsPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunSuperAdjustmentsPost'][0])
    {
        $request = $this->payRunSuperAdjustmentsPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunSuperAdjustmentsPostAsync
     *
     * Create Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunSuperAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunSuperAdjustmentsPost'][0])
    {
        return $this->payRunSuperAdjustmentsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunSuperAdjustmentsPostAsyncWithHttpInfo
     *
     * Create Super Adjustments
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunSuperAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunSuperAdjustmentsPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunSuperAdjustmentsPost'][0])
    {
        $returnType = '';
        $request = $this->payRunSuperAdjustmentsPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunSuperAdjustmentsPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SubmitPayRunSuperAdjustmentRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunSuperAdjustmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunSuperAdjustmentsPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunSuperAdjustmentsPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunSuperAdjustmentsPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunSuperAdjustmentsPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling payRunSuperAdjustmentsPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/superadjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunUnlockPost
     *
     * Unlock Pay Run
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunUnlockRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunUnlockPost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockPost'][0])
    {
        $this->payRunUnlockPostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation payRunUnlockPostWithHttpInfo
     *
     * Unlock Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunUnlockRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunUnlockPostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockPost'][0])
    {
        $request = $this->payRunUnlockPostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunUnlockPostAsync
     *
     * Unlock Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunUnlockRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunUnlockPostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockPost'][0])
    {
        return $this->payRunUnlockPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunUnlockPostAsyncWithHttpInfo
     *
     * Unlock Pay Run
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunUnlockRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunUnlockPostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockPost'][0])
    {
        $returnType = '';
        $request = $this->payRunUnlockPostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunUnlockPost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\PayRunUnlockRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunUnlockPostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockPost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunUnlockPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunUnlockPost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling payRunUnlockPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/unlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payRunUnlockStatePost
     *
     * Set UI Unlock enabled
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\SetPayRunUIUnlockStateRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockStatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function payRunUnlockStatePost($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockStatePost'][0])
    {
        $this->payRunUnlockStatePostWithHttpInfo($pay_run_id, $business_id, $request, $contentType);
    }

    /**
     * Operation payRunUnlockStatePostWithHttpInfo
     *
     * Set UI Unlock enabled
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SetPayRunUIUnlockStateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockStatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function payRunUnlockStatePostWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockStatePost'][0])
    {
        $request = $this->payRunUnlockStatePostRequest($pay_run_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation payRunUnlockStatePostAsync
     *
     * Set UI Unlock enabled
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SetPayRunUIUnlockStateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockStatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunUnlockStatePostAsync($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockStatePost'][0])
    {
        return $this->payRunUnlockStatePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payRunUnlockStatePostAsyncWithHttpInfo
     *
     * Set UI Unlock enabled
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SetPayRunUIUnlockStateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockStatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payRunUnlockStatePostAsyncWithHttpInfo($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockStatePost'][0])
    {
        $returnType = '';
        $request = $this->payRunUnlockStatePostRequest($pay_run_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payRunUnlockStatePost'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\SetPayRunUIUnlockStateRequest $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payRunUnlockStatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payRunUnlockStatePostRequest($pay_run_id, $business_id, $request, string $contentType = self::contentTypes['payRunUnlockStatePost'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling payRunUnlockStatePost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling payRunUnlockStatePost'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling payRunUnlockStatePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/setuiunlockstate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
