<?php
/**
 * WhiteLabelApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WhiteLabelApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WhiteLabelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auWhiteLabelActiveEmployeeReportGet' => [
            'application/json',
        ],
        'whiteLabelGet' => [
            'application/json',
        ],
        'whiteLabelGetWhiteLabels' => [
            'application/json',
        ],
        'whiteLabelReportGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auWhiteLabelActiveEmployeeReportGet
     *
     * Active Employees Report
     *
     * @param  int $white_label_id white_label_id (required)
     * @param  string $request_email_addresses request_email_addresses (optional)
     * @param  bool $request_include_inactive_businesses request_include_inactive_businesses (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auWhiteLabelActiveEmployeeReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuActiveEmployeesModel[]
     */
    public function auWhiteLabelActiveEmployeeReportGet($white_label_id, $request_email_addresses = null, $request_include_inactive_businesses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auWhiteLabelActiveEmployeeReportGet'][0])
    {
        list($response) = $this->auWhiteLabelActiveEmployeeReportGetWithHttpInfo($white_label_id, $request_email_addresses, $request_include_inactive_businesses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auWhiteLabelActiveEmployeeReportGetWithHttpInfo
     *
     * Active Employees Report
     *
     * @param  int $white_label_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  bool $request_include_inactive_businesses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auWhiteLabelActiveEmployeeReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuActiveEmployeesModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auWhiteLabelActiveEmployeeReportGetWithHttpInfo($white_label_id, $request_email_addresses = null, $request_include_inactive_businesses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auWhiteLabelActiveEmployeeReportGet'][0])
    {
        $request = $this->auWhiteLabelActiveEmployeeReportGetRequest($white_label_id, $request_email_addresses, $request_include_inactive_businesses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuActiveEmployeesModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuActiveEmployeesModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuActiveEmployeesModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuActiveEmployeesModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuActiveEmployeesModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auWhiteLabelActiveEmployeeReportGetAsync
     *
     * Active Employees Report
     *
     * @param  int $white_label_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  bool $request_include_inactive_businesses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auWhiteLabelActiveEmployeeReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auWhiteLabelActiveEmployeeReportGetAsync($white_label_id, $request_email_addresses = null, $request_include_inactive_businesses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auWhiteLabelActiveEmployeeReportGet'][0])
    {
        return $this->auWhiteLabelActiveEmployeeReportGetAsyncWithHttpInfo($white_label_id, $request_email_addresses, $request_include_inactive_businesses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auWhiteLabelActiveEmployeeReportGetAsyncWithHttpInfo
     *
     * Active Employees Report
     *
     * @param  int $white_label_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  bool $request_include_inactive_businesses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auWhiteLabelActiveEmployeeReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auWhiteLabelActiveEmployeeReportGetAsyncWithHttpInfo($white_label_id, $request_email_addresses = null, $request_include_inactive_businesses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auWhiteLabelActiveEmployeeReportGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuActiveEmployeesModel[]';
        $request = $this->auWhiteLabelActiveEmployeeReportGetRequest($white_label_id, $request_email_addresses, $request_include_inactive_businesses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auWhiteLabelActiveEmployeeReportGet'
     *
     * @param  int $white_label_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  bool $request_include_inactive_businesses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auWhiteLabelActiveEmployeeReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auWhiteLabelActiveEmployeeReportGetRequest($white_label_id, $request_email_addresses = null, $request_include_inactive_businesses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auWhiteLabelActiveEmployeeReportGet'][0])
    {

        // verify the required parameter 'white_label_id' is set
        if ($white_label_id === null || (is_array($white_label_id) && count($white_label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $white_label_id when calling auWhiteLabelActiveEmployeeReportGet'
            );
        }








        $resourcePath = '/api/v2/whitelabel/{whiteLabelId}/reports/activeemployees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_email_addresses,
            'request.emailAddresses', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_inactive_businesses,
            'request.includeInactiveBusinesses', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($white_label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'whiteLabelId' . '}',
                ObjectSerializer::toPathValue($white_label_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation whiteLabelGet
     *
     * Get White Label by ID
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WhiteLabelModel
     */
    public function whiteLabelGet($id, string $contentType = self::contentTypes['whiteLabelGet'][0])
    {
        list($response) = $this->whiteLabelGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation whiteLabelGetWithHttpInfo
     *
     * Get White Label by ID
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WhiteLabelModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function whiteLabelGetWithHttpInfo($id, string $contentType = self::contentTypes['whiteLabelGet'][0])
    {
        $request = $this->whiteLabelGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WhiteLabelModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WhiteLabelModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WhiteLabelModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WhiteLabelModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WhiteLabelModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation whiteLabelGetAsync
     *
     * Get White Label by ID
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelGetAsync($id, string $contentType = self::contentTypes['whiteLabelGet'][0])
    {
        return $this->whiteLabelGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation whiteLabelGetAsyncWithHttpInfo
     *
     * Get White Label by ID
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['whiteLabelGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WhiteLabelModel';
        $request = $this->whiteLabelGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'whiteLabelGet'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function whiteLabelGetRequest($id, string $contentType = self::contentTypes['whiteLabelGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling whiteLabelGet'
            );
        }


        $resourcePath = '/api/v2/whitelabel/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation whiteLabelGetWhiteLabels
     *
     * List White Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGetWhiteLabels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WhiteLabelModel[]
     */
    public function whiteLabelGetWhiteLabels(string $contentType = self::contentTypes['whiteLabelGetWhiteLabels'][0])
    {
        list($response) = $this->whiteLabelGetWhiteLabelsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation whiteLabelGetWhiteLabelsWithHttpInfo
     *
     * List White Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGetWhiteLabels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WhiteLabelModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function whiteLabelGetWhiteLabelsWithHttpInfo(string $contentType = self::contentTypes['whiteLabelGetWhiteLabels'][0])
    {
        $request = $this->whiteLabelGetWhiteLabelsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WhiteLabelModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WhiteLabelModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WhiteLabelModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WhiteLabelModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WhiteLabelModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation whiteLabelGetWhiteLabelsAsync
     *
     * List White Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGetWhiteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelGetWhiteLabelsAsync(string $contentType = self::contentTypes['whiteLabelGetWhiteLabels'][0])
    {
        return $this->whiteLabelGetWhiteLabelsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation whiteLabelGetWhiteLabelsAsyncWithHttpInfo
     *
     * List White Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGetWhiteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelGetWhiteLabelsAsyncWithHttpInfo(string $contentType = self::contentTypes['whiteLabelGetWhiteLabels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WhiteLabelModel[]';
        $request = $this->whiteLabelGetWhiteLabelsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'whiteLabelGetWhiteLabels'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelGetWhiteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function whiteLabelGetWhiteLabelsRequest(string $contentType = self::contentTypes['whiteLabelGetWhiteLabels'][0])
    {


        $resourcePath = '/api/v2/whitelabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation whiteLabelReportGet
     *
     * Signup Report
     *
     * @param  int $whitelabel_id whitelabel_id (required)
     * @param  string $request_email_addresses request_email_addresses (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SignupModel[]
     */
    public function whiteLabelReportGet($whitelabel_id, $request_email_addresses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['whiteLabelReportGet'][0])
    {
        list($response) = $this->whiteLabelReportGetWithHttpInfo($whitelabel_id, $request_email_addresses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation whiteLabelReportGetWithHttpInfo
     *
     * Signup Report
     *
     * @param  int $whitelabel_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SignupModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function whiteLabelReportGetWithHttpInfo($whitelabel_id, $request_email_addresses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['whiteLabelReportGet'][0])
    {
        $request = $this->whiteLabelReportGetRequest($whitelabel_id, $request_email_addresses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SignupModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SignupModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SignupModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SignupModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SignupModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation whiteLabelReportGetAsync
     *
     * Signup Report
     *
     * @param  int $whitelabel_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelReportGetAsync($whitelabel_id, $request_email_addresses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['whiteLabelReportGet'][0])
    {
        return $this->whiteLabelReportGetAsyncWithHttpInfo($whitelabel_id, $request_email_addresses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation whiteLabelReportGetAsyncWithHttpInfo
     *
     * Signup Report
     *
     * @param  int $whitelabel_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function whiteLabelReportGetAsyncWithHttpInfo($whitelabel_id, $request_email_addresses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['whiteLabelReportGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SignupModel[]';
        $request = $this->whiteLabelReportGetRequest($whitelabel_id, $request_email_addresses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'whiteLabelReportGet'
     *
     * @param  int $whitelabel_id (required)
     * @param  string $request_email_addresses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['whiteLabelReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function whiteLabelReportGetRequest($whitelabel_id, $request_email_addresses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['whiteLabelReportGet'][0])
    {

        // verify the required parameter 'whitelabel_id' is set
        if ($whitelabel_id === null || (is_array($whitelabel_id) && count($whitelabel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whitelabel_id when calling whiteLabelReportGet'
            );
        }







        $resourcePath = '/api/v2/whitelabel/{whitelabelId}/reports/signups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_email_addresses,
            'request.emailAddresses', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($whitelabel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'whitelabelId' . '}',
                ObjectSerializer::toPathValue($whitelabel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
