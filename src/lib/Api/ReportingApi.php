<?php
/**
 * ReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auReportsCostingGet' => [
            'application/json',
        ],
        'auReportsDetailedActivityGet' => [
            'application/json',
        ],
        'auReportsEmployeeDetailsFieldsGet' => [
            'application/json',
        ],
        'auReportsEmployeePaymentHistoryGet' => [
            'application/json',
        ],
        'auReportsGrossToNetGet' => [
            'application/json',
        ],
        'auReportsLeaveBalancesGet' => [
            'application/json',
        ],
        'auReportsLeaveHistoryReportGet' => [
            'application/json',
        ],
        'auReportsLeaveLiabilityGet' => [
            'application/json',
        ],
        'auReportsOrdinaryTimeEarningsGet' => [
            'application/json',
        ],
        'auReportsPayCategoriesGet' => [
            'application/json',
        ],
        'auReportsPayRunActivityGet' => [
            'application/json',
        ],
        'auReportsPayRunInclusionsGet' => [
            'application/json',
        ],
        'auReportsPaygGet' => [
            'application/json',
        ],
        'auReportsPayrollTaxGet' => [
            'application/json',
        ],
        'auReportsRosterTimesheetComparisonGet' => [
            'application/json',
        ],
        'auReportsSuperContributionsByEmployee' => [
            'application/json',
        ],
        'auReportsSuperContributionsBySuperFund' => [
            'application/json',
        ],
        'auReportsTimesheetGet' => [
            'application/json',
        ],
        'reportsBirthdayGet' => [
            'application/json',
        ],
        'reportsDeductionsGet' => [
            'application/json',
        ],
        'reportsDocumentAcknowledgementsGet' => [
            'application/json',
        ],
        'reportsEmployeeAuditGet' => [
            'application/json',
        ],
        'reportsEmployeeDetailsGet' => [
            'application/json',
        ],
        'reportsEmployeeDetailsPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'reportsJournalGet' => [
            'application/json',
        ],
        'reportsPaySlipGet' => [
            'application/json',
        ],
        'reportsShiftSwappingGet' => [
            'application/json',
        ],
        'reportsTasksReportGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auReportsCostingGet
     *
     * Costing Report
     *
     * @param  string $business_id business_id (required)
     * @param  bool $request_show_zero_pay_categories request_show_zero_pay_categories (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsCostingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuCostingReportApiModel[]
     */
    public function auReportsCostingGet($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsCostingGet'][0])
    {
        list($response) = $this->auReportsCostingGetWithHttpInfo($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsCostingGetWithHttpInfo
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsCostingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuCostingReportApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsCostingGetWithHttpInfo($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsCostingGet'][0])
    {
        $request = $this->auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuCostingReportApiModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuCostingReportApiModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuCostingReportApiModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuCostingReportApiModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuCostingReportApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsCostingGetAsync
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsCostingGetAsync($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsCostingGet'][0])
    {
        return $this->auReportsCostingGetAsyncWithHttpInfo($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsCostingGetAsyncWithHttpInfo
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsCostingGetAsyncWithHttpInfo($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsCostingGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuCostingReportApiModel[]';
        $request = $this->auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsCostingGet'
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsCostingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsCostingGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsCostingGet'
            );
        }









        $resourcePath = '/api/v2/business/{businessId}/report/costing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_show_zero_pay_categories,
            'request.showZeroPayCategories', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsDetailedActivityGet
     *
     * Detailed Activity Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsDetailedActivityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]
     */
    public function auReportsDetailedActivityGet($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsDetailedActivityGet'][0])
    {
        list($response) = $this->auReportsDetailedActivityGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsDetailedActivityGetWithHttpInfo
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsDetailedActivityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuDetailedActivityReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsDetailedActivityGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsDetailedActivityGet'][0])
    {
        $request = $this->auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsDetailedActivityGetAsync
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsDetailedActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsDetailedActivityGetAsync($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsDetailedActivityGet'][0])
    {
        return $this->auReportsDetailedActivityGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsDetailedActivityGetAsyncWithHttpInfo
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsDetailedActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsDetailedActivityGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsDetailedActivityGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuDetailedActivityReportExportModel[]';
        $request = $this->auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsDetailedActivityGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsDetailedActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsDetailedActivityGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsDetailedActivityGet'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/report/detailedactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGet
     *
     * Employee Details Report Fields
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeeDetailsFieldsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeDetailsReportField[]
     */
    public function auReportsEmployeeDetailsFieldsGet($business_id, string $contentType = self::contentTypes['auReportsEmployeeDetailsFieldsGet'][0])
    {
        list($response) = $this->auReportsEmployeeDetailsFieldsGetWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetWithHttpInfo
     *
     * Employee Details Report Fields
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeeDetailsFieldsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeDetailsReportField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsEmployeeDetailsFieldsGetWithHttpInfo($business_id, string $contentType = self::contentTypes['auReportsEmployeeDetailsFieldsGet'][0])
    {
        $request = $this->auReportsEmployeeDetailsFieldsGetRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeDetailsReportField[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeDetailsReportField[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeDetailsReportField[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeDetailsReportField[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeDetailsReportField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetAsync
     *
     * Employee Details Report Fields
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeeDetailsFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeeDetailsFieldsGetAsync($business_id, string $contentType = self::contentTypes['auReportsEmployeeDetailsFieldsGet'][0])
    {
        return $this->auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo
     *
     * Employee Details Report Fields
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeeDetailsFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['auReportsEmployeeDetailsFieldsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeDetailsReportField[]';
        $request = $this->auReportsEmployeeDetailsFieldsGetRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsEmployeeDetailsFieldsGet'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeeDetailsFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsEmployeeDetailsFieldsGetRequest($business_id, string $contentType = self::contentTypes['auReportsEmployeeDetailsFieldsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsEmployeeDetailsFieldsGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGet
     *
     * Employee Payment History Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeePaymentHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPaymentHistoryModel[]
     */
    public function auReportsEmployeePaymentHistoryGet($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsEmployeePaymentHistoryGet'][0])
    {
        list($response) = $this->auReportsEmployeePaymentHistoryGetWithHttpInfo($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetWithHttpInfo
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeePaymentHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPaymentHistoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsEmployeePaymentHistoryGetWithHttpInfo($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsEmployeePaymentHistoryGet'][0])
    {
        $request = $this->auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPaymentHistoryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPaymentHistoryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPaymentHistoryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPaymentHistoryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPaymentHistoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetAsync
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeePaymentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeePaymentHistoryGetAsync($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsEmployeePaymentHistoryGet'][0])
    {
        return $this->auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeePaymentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsEmployeePaymentHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPaymentHistoryModel[]';
        $request = $this->auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsEmployeePaymentHistoryGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsEmployeePaymentHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsEmployeePaymentHistoryGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsEmployeePaymentHistoryGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/paymenthistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsGrossToNetGet
     *
     * Gross To Net Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  int[] $request_pay_category_ids request_pay_category_ids (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsGrossToNetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuGrossToNetResponseModel[]
     */
    public function auReportsGrossToNetGet($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsGrossToNetGet'][0])
    {
        list($response) = $this->auReportsGrossToNetGetWithHttpInfo($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsGrossToNetGetWithHttpInfo
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int[] $request_pay_category_ids (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsGrossToNetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuGrossToNetResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsGrossToNetGetWithHttpInfo($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsGrossToNetGet'][0])
    {
        $request = $this->auReportsGrossToNetGetRequest($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuGrossToNetResponseModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuGrossToNetResponseModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuGrossToNetResponseModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuGrossToNetResponseModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuGrossToNetResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsGrossToNetGetAsync
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int[] $request_pay_category_ids (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsGrossToNetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsGrossToNetGetAsync($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsGrossToNetGet'][0])
    {
        return $this->auReportsGrossToNetGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsGrossToNetGetAsyncWithHttpInfo
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int[] $request_pay_category_ids (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsGrossToNetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsGrossToNetGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsGrossToNetGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuGrossToNetResponseModel[]';
        $request = $this->auReportsGrossToNetGetRequest($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsGrossToNetGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int[] $request_pay_category_ids (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsGrossToNetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsGrossToNetGetRequest($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsGrossToNetGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsGrossToNetGet'
            );
        }










        $resourcePath = '/api/v2/business/{businessId}/report/grosstonet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_category_ids,
            'request.payCategoryIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveBalancesGet
     *
     * Leave Balances Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_leave_type_id request_leave_type_id (optional)
     * @param  string $request_group_by request_group_by (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  \DateTime $request_as_at_date request_as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveBalancesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuLeaveBalancesExportModel[]
     */
    public function auReportsLeaveBalancesGet($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null, string $contentType = self::contentTypes['auReportsLeaveBalancesGet'][0])
    {
        list($response) = $this->auReportsLeaveBalancesGetWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date, $contentType);
        return $response;
    }

    /**
     * Operation auReportsLeaveBalancesGetWithHttpInfo
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  string $request_group_by (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveBalancesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuLeaveBalancesExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveBalancesGetWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null, string $contentType = self::contentTypes['auReportsLeaveBalancesGet'][0])
    {
        $request = $this->auReportsLeaveBalancesGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveBalancesGetAsync
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  string $request_group_by (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveBalancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveBalancesGetAsync($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null, string $contentType = self::contentTypes['auReportsLeaveBalancesGet'][0])
    {
        return $this->auReportsLeaveBalancesGetAsyncWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveBalancesGetAsyncWithHttpInfo
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  string $request_group_by (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveBalancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveBalancesGetAsyncWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null, string $contentType = self::contentTypes['auReportsLeaveBalancesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuLeaveBalancesExportModel[]';
        $request = $this->auReportsLeaveBalancesGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveBalancesGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  string $request_group_by (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveBalancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsLeaveBalancesGetRequest($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null, string $contentType = self::contentTypes['auReportsLeaveBalancesGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveBalancesGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/leavebalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_leave_type_id,
            'request.leaveTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_group_by,
            'request.groupBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_as_at_date,
            'request.asAtDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveHistoryReportGet
     *
     * Leave History Report
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $model_from_date model_from_date (optional)
     * @param  \DateTime $model_to_date model_to_date (optional)
     * @param  int $model_pay_schedule_id model_pay_schedule_id (optional)
     * @param  int $model_location_id model_location_id (optional)
     * @param  string[] $model_employee_id model_employee_id (optional)
     * @param  int $model_leave_category_id model_leave_category_id (optional)
     * @param  int $model_employing_entity_id model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveHistoryReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]
     */
    public function auReportsLeaveHistoryReportGet($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveHistoryReportGet'][0])
    {
        list($response) = $this->auReportsLeaveHistoryReportGetWithHttpInfo($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsLeaveHistoryReportGetWithHttpInfo
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date (optional)
     * @param  \DateTime $model_to_date (optional)
     * @param  int $model_pay_schedule_id (optional)
     * @param  int $model_location_id (optional)
     * @param  string[] $model_employee_id (optional)
     * @param  int $model_leave_category_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveHistoryReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LeaveHistoryReportGroupModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveHistoryReportGetWithHttpInfo($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveHistoryReportGet'][0])
    {
        $request = $this->auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveHistoryReportGetAsync
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date (optional)
     * @param  \DateTime $model_to_date (optional)
     * @param  int $model_pay_schedule_id (optional)
     * @param  int $model_location_id (optional)
     * @param  string[] $model_employee_id (optional)
     * @param  int $model_leave_category_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveHistoryReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveHistoryReportGetAsync($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveHistoryReportGet'][0])
    {
        return $this->auReportsLeaveHistoryReportGetAsyncWithHttpInfo($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveHistoryReportGetAsyncWithHttpInfo
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date (optional)
     * @param  \DateTime $model_to_date (optional)
     * @param  int $model_pay_schedule_id (optional)
     * @param  int $model_location_id (optional)
     * @param  string[] $model_employee_id (optional)
     * @param  int $model_leave_category_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveHistoryReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveHistoryReportGetAsyncWithHttpInfo($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveHistoryReportGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LeaveHistoryReportGroupModel[]';
        $request = $this->auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveHistoryReportGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date (optional)
     * @param  \DateTime $model_to_date (optional)
     * @param  int $model_pay_schedule_id (optional)
     * @param  int $model_location_id (optional)
     * @param  string[] $model_employee_id (optional)
     * @param  int $model_leave_category_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveHistoryReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveHistoryReportGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveHistoryReportGet'
            );
        }









        $resourcePath = '/api/v2/business/{businessId}/report/leavehistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_from_date,
            'model.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_to_date,
            'model.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_pay_schedule_id,
            'model.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_location_id,
            'model.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employee_id,
            'model.employeeId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_leave_category_id,
            'model.leaveCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employing_entity_id,
            'model.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveLiabilityGet
     *
     * Leave Liability Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_leave_type_id request_leave_type_id (optional)
     * @param  bool $request_include_approved_leave request_include_approved_leave (optional)
     * @param  \DateTime $request_as_at_date request_as_at_date (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveLiabilityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]
     */
    public function auReportsLeaveLiabilityGet($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveLiabilityGet'][0])
    {
        list($response) = $this->auReportsLeaveLiabilityGetWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsLeaveLiabilityGetWithHttpInfo
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  bool $request_include_approved_leave (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveLiabilityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuLeaveLiabilityExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveLiabilityGetWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveLiabilityGet'][0])
    {
        $request = $this->auReportsLeaveLiabilityGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveLiabilityGetAsync
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  bool $request_include_approved_leave (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveLiabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveLiabilityGetAsync($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveLiabilityGet'][0])
    {
        return $this->auReportsLeaveLiabilityGetAsyncWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveLiabilityGetAsyncWithHttpInfo
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  bool $request_include_approved_leave (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveLiabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveLiabilityGetAsyncWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveLiabilityGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuLeaveLiabilityExportModel[]';
        $request = $this->auReportsLeaveLiabilityGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveLiabilityGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id (optional)
     * @param  int $request_leave_type_id (optional)
     * @param  bool $request_include_approved_leave (optional)
     * @param  \DateTime $request_as_at_date (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsLeaveLiabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsLeaveLiabilityGetRequest($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsLeaveLiabilityGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveLiabilityGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/leaveliability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_leave_type_id,
            'request.leaveTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_approved_leave,
            'request.includeApprovedLeave', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_as_at_date,
            'request.asAtDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGet
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  int $request_financial_year_ending request_financial_year_ending (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsOrdinaryTimeEarningsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]
     */
    public function auReportsOrdinaryTimeEarningsGet($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null, string $contentType = self::contentTypes['auReportsOrdinaryTimeEarningsGet'][0])
    {
        list($response) = $this->auReportsOrdinaryTimeEarningsGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending, $contentType);
        return $response;
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetWithHttpInfo
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  int $request_financial_year_ending (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsOrdinaryTimeEarningsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsOrdinaryTimeEarningsGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null, string $contentType = self::contentTypes['auReportsOrdinaryTimeEarningsGet'][0])
    {
        $request = $this->auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetAsync
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  int $request_financial_year_ending (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsOrdinaryTimeEarningsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsOrdinaryTimeEarningsGetAsync($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null, string $contentType = self::contentTypes['auReportsOrdinaryTimeEarningsGet'][0])
    {
        return $this->auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  int $request_financial_year_ending (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsOrdinaryTimeEarningsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null, string $contentType = self::contentTypes['auReportsOrdinaryTimeEarningsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuOrdinaryTimeEarningsApiModel[]';
        $request = $this->auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsOrdinaryTimeEarningsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  int $request_financial_year_ending (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsOrdinaryTimeEarningsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null, string $contentType = self::contentTypes['auReportsOrdinaryTimeEarningsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsOrdinaryTimeEarningsGet'
            );
        }





        $resourcePath = '/api/v2/business/{businessId}/report/ordinarytimeearnings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_financial_year_ending,
            'request.financialYearEnding', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayCategoriesGet
     *
     * Pay Categories Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  bool $request_group_by_earnings_location request_group_by_earnings_location (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayCategoriesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayCategoriesModel[]
     */
    public function auReportsPayCategoriesGet($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayCategoriesGet'][0])
    {
        list($response) = $this->auReportsPayCategoriesGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsPayCategoriesGetWithHttpInfo
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_group_by_earnings_location (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayCategoriesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayCategoriesModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayCategoriesGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayCategoriesGet'][0])
    {
        $request = $this->auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayCategoriesModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayCategoriesModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayCategoriesModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayCategoriesModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayCategoriesModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsPayCategoriesGetAsync
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_group_by_earnings_location (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayCategoriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayCategoriesGetAsync($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayCategoriesGet'][0])
    {
        return $this->auReportsPayCategoriesGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayCategoriesGetAsyncWithHttpInfo
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_group_by_earnings_location (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayCategoriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayCategoriesGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayCategoriesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayCategoriesModel[]';
        $request = $this->auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayCategoriesGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_group_by_earnings_location (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayCategoriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayCategoriesGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayCategoriesGet'
            );
        }









        $resourcePath = '/api/v2/business/{businessId}/report/paycategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_group_by_earnings_location,
            'request.groupByEarningsLocation', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayRunActivityGet
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $business_id business_id (required)
     * @param  int $pay_schedule_id pay_schedule_id (optional, default to 0)
     * @param  int $location_id location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunActivityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ActivityReportExportModel[]
     */
    public function auReportsPayRunActivityGet($from_date, $to_date, $business_id, $pay_schedule_id = 0, $location_id = 0, string $contentType = self::contentTypes['auReportsPayRunActivityGet'][0])
    {
        list($response) = $this->auReportsPayRunActivityGetWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id, $location_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsPayRunActivityGetWithHttpInfo
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunActivityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ActivityReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayRunActivityGetWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id = 0, $location_id = 0, string $contentType = self::contentTypes['auReportsPayRunActivityGet'][0])
    {
        $request = $this->auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id, $location_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ActivityReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ActivityReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ActivityReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ActivityReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ActivityReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsPayRunActivityGetAsync
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunActivityGetAsync($from_date, $to_date, $business_id, $pay_schedule_id = 0, $location_id = 0, string $contentType = self::contentTypes['auReportsPayRunActivityGet'][0])
    {
        return $this->auReportsPayRunActivityGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id, $location_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayRunActivityGetAsyncWithHttpInfo
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunActivityGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id = 0, $location_id = 0, string $contentType = self::contentTypes['auReportsPayRunActivityGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ActivityReportExportModel[]';
        $request = $this->auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id, $location_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayRunActivityGet'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunActivityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id = 0, $location_id = 0, string $contentType = self::contentTypes['auReportsPayRunActivityGet'][0])
    {

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling auReportsPayRunActivityGet'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling auReportsPayRunActivityGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayRunActivityGet'
            );
        }




        $resourcePath = '/api/v2/business/{businessId}/report/payrunactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pay_schedule_id,
            'payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_id,
            'locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayRunInclusionsGet
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  string $request_status request_status (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunInclusionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuPayRunInclusionExportModel[]
     */
    public function auReportsPayRunInclusionsGet($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayRunInclusionsGet'][0])
    {
        list($response) = $this->auReportsPayRunInclusionsGetWithHttpInfo($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsPayRunInclusionsGetWithHttpInfo
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_status (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunInclusionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuPayRunInclusionExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayRunInclusionsGetWithHttpInfo($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayRunInclusionsGet'][0])
    {
        $request = $this->auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsPayRunInclusionsGetAsync
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_status (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunInclusionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunInclusionsGetAsync($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayRunInclusionsGet'][0])
    {
        return $this->auReportsPayRunInclusionsGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayRunInclusionsGetAsyncWithHttpInfo
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_status (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunInclusionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunInclusionsGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayRunInclusionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuPayRunInclusionExportModel[]';
        $request = $this->auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayRunInclusionsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_status (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayRunInclusionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayRunInclusionsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayRunInclusionsGet'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/report/payruninclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_status,
            'request.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPaygGet
     *
     * PAYG Report
     *
     * @param  string $business_id business_id (required)
     * @param  string $request_state request_state (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPaygGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaygReportExportModel[]
     */
    public function auReportsPaygGet($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPaygGet'][0])
    {
        list($response) = $this->auReportsPaygGetWithHttpInfo($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsPaygGetWithHttpInfo
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPaygGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaygReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPaygGetWithHttpInfo($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPaygGet'][0])
    {
        $request = $this->auReportsPaygGetRequest($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaygReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaygReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaygReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaygReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaygReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsPaygGetAsync
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPaygGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPaygGetAsync($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPaygGet'][0])
    {
        return $this->auReportsPaygGetAsyncWithHttpInfo($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPaygGetAsyncWithHttpInfo
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPaygGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPaygGetAsyncWithHttpInfo($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPaygGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaygReportExportModel[]';
        $request = $this->auReportsPaygGetRequest($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPaygGet'
     *
     * @param  string $business_id (required)
     * @param  string $request_state (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPaygGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsPaygGetRequest($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPaygGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPaygGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/payg';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_state,
            'request.state', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayrollTaxGet
     *
     * Payroll Tax Report
     *
     * @param  string $business_id business_id (required)
     * @param  string $request_group_by request_group_by (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayrollTaxGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayrollTaxReportExportModel[]
     */
    public function auReportsPayrollTaxGet($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayrollTaxGet'][0])
    {
        list($response) = $this->auReportsPayrollTaxGetWithHttpInfo($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsPayrollTaxGetWithHttpInfo
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayrollTaxGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayrollTaxReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayrollTaxGetWithHttpInfo($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayrollTaxGet'][0])
    {
        $request = $this->auReportsPayrollTaxGetRequest($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PayrollTaxReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PayrollTaxReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PayrollTaxReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PayrollTaxReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayrollTaxReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsPayrollTaxGetAsync
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayrollTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayrollTaxGetAsync($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayrollTaxGet'][0])
    {
        return $this->auReportsPayrollTaxGetAsyncWithHttpInfo($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayrollTaxGetAsyncWithHttpInfo
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayrollTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayrollTaxGetAsyncWithHttpInfo($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayrollTaxGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayrollTaxReportExportModel[]';
        $request = $this->auReportsPayrollTaxGetRequest($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayrollTaxGet'
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsPayrollTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsPayrollTaxGetRequest($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsPayrollTaxGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayrollTaxGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/payrolltax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_group_by,
            'request.groupBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGet
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employment_type_id request_employment_type_id (optional)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  bool $request_include_costs request_include_costs (optional)
     * @param  string[] $request_timesheet_statuses request_timesheet_statuses (optional)
     * @param  int $request_work_type_id request_work_type_id (optional)
     * @param  int $request_roster_location_id request_roster_location_id (optional)
     * @param  int $request_timesheet_location_id request_timesheet_location_id (optional)
     * @param  string[] $request_roster_statuses request_roster_statuses (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsRosterTimesheetComparisonGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]
     */
    public function auReportsRosterTimesheetComparisonGet($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsRosterTimesheetComparisonGet'][0])
    {
        list($response) = $this->auReportsRosterTimesheetComparisonGetWithHttpInfo($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetWithHttpInfo
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_timesheet_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_roster_location_id (optional)
     * @param  int $request_timesheet_location_id (optional)
     * @param  string[] $request_roster_statuses (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsRosterTimesheetComparisonGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsRosterTimesheetComparisonGetWithHttpInfo($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsRosterTimesheetComparisonGet'][0])
    {
        $request = $this->auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetAsync
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_timesheet_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_roster_location_id (optional)
     * @param  int $request_timesheet_location_id (optional)
     * @param  string[] $request_roster_statuses (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsRosterTimesheetComparisonGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsRosterTimesheetComparisonGetAsync($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsRosterTimesheetComparisonGet'][0])
    {
        return $this->auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_timesheet_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_roster_location_id (optional)
     * @param  int $request_timesheet_location_id (optional)
     * @param  string[] $request_roster_statuses (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsRosterTimesheetComparisonGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsRosterTimesheetComparisonGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterTimesheetComparisonReportExportModel[]';
        $request = $this->auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsRosterTimesheetComparisonGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id (optional)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_timesheet_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_roster_location_id (optional)
     * @param  int $request_timesheet_location_id (optional)
     * @param  string[] $request_roster_statuses (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsRosterTimesheetComparisonGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsRosterTimesheetComparisonGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsRosterTimesheetComparisonGet'
            );
        }
















        $resourcePath = '/api/v2/business/{businessId}/report/rostertimesheetcomparison';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employment_type_id,
            'request.employmentTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_costs,
            'request.includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_timesheet_statuses,
            'request.timesheetStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_work_type_id,
            'request.workTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_roster_location_id,
            'request.rosterLocationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_timesheet_location_id,
            'request.timesheetLocationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_roster_statuses,
            'request.rosterStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsSuperContributionsByEmployee
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsByEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuperAccrualExportModel[]
     */
    public function auReportsSuperContributionsByEmployee($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsByEmployee'][0])
    {
        list($response) = $this->auReportsSuperContributionsByEmployeeWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeWithHttpInfo
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsByEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuperAccrualExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsSuperContributionsByEmployeeWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsByEmployee'][0])
    {
        $request = $this->auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuperAccrualExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuperAccrualExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuperAccrualExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuperAccrualExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuperAccrualExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeAsync
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsByEmployeeAsync($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsByEmployee'][0])
    {
        return $this->auReportsSuperContributionsByEmployeeAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeAsyncWithHttpInfo
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsByEmployeeAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsByEmployee'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuperAccrualExportModel[]';
        $request = $this->auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsSuperContributionsByEmployee'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsByEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsByEmployee'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsSuperContributionsByEmployee'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/report/supercontributions/byemployee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsSuperContributionsBySuperFund
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsBySuperFund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuperContributionsReportExportModel[]
     */
    public function auReportsSuperContributionsBySuperFund($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsBySuperFund'][0])
    {
        list($response) = $this->auReportsSuperContributionsBySuperFundWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundWithHttpInfo
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsBySuperFund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuperContributionsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsSuperContributionsBySuperFundWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsBySuperFund'][0])
    {
        $request = $this->auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuperContributionsReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuperContributionsReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuperContributionsReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuperContributionsReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuperContributionsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundAsync
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsBySuperFund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsBySuperFundAsync($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsBySuperFund'][0])
    {
        return $this->auReportsSuperContributionsBySuperFundAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundAsyncWithHttpInfo
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsBySuperFund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsBySuperFundAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsBySuperFund'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuperContributionsReportExportModel[]';
        $request = $this->auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsSuperContributionsBySuperFund'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsSuperContributionsBySuperFund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsSuperContributionsBySuperFund'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsSuperContributionsBySuperFund'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/report/supercontributions/bysuperfund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsTimesheetGet
     *
     * Timesheet Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  bool $request_include_costs request_include_costs (optional)
     * @param  string[] $request_statuses request_statuses (optional)
     * @param  int $request_work_type_id request_work_type_id (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimesheetExportModel[]
     */
    public function auReportsTimesheetGet($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsTimesheetGet'][0])
    {
        list($response) = $this->auReportsTimesheetGetWithHttpInfo($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation auReportsTimesheetGetWithHttpInfo
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimesheetExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsTimesheetGetWithHttpInfo($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsTimesheetGet'][0])
    {
        $request = $this->auReportsTimesheetGetRequest($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimesheetExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimesheetExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimesheetExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimesheetExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimesheetExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auReportsTimesheetGetAsync
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsTimesheetGetAsync($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsTimesheetGet'][0])
    {
        return $this->auReportsTimesheetGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsTimesheetGetAsyncWithHttpInfo
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsTimesheetGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsTimesheetGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimesheetExportModel[]';
        $request = $this->auReportsTimesheetGetRequest($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsTimesheetGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  int $request_work_type_id (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auReportsTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auReportsTimesheetGetRequest($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['auReportsTimesheetGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsTimesheetGet'
            );
        }












        $resourcePath = '/api/v2/business/{businessId}/report/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_costs,
            'request.includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_statuses,
            'request.statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_work_type_id,
            'request.workTypeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsBirthdayGet
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $business_id business_id (required)
     * @param  int $location_id location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsBirthdayGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BirthdayReportExportModel[]
     */
    public function reportsBirthdayGet($from_date, $to_date, $business_id, $location_id = 0, string $contentType = self::contentTypes['reportsBirthdayGet'][0])
    {
        list($response) = $this->reportsBirthdayGetWithHttpInfo($from_date, $to_date, $business_id, $location_id, $contentType);
        return $response;
    }

    /**
     * Operation reportsBirthdayGetWithHttpInfo
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsBirthdayGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BirthdayReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsBirthdayGetWithHttpInfo($from_date, $to_date, $business_id, $location_id = 0, string $contentType = self::contentTypes['reportsBirthdayGet'][0])
    {
        $request = $this->reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BirthdayReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BirthdayReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BirthdayReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BirthdayReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BirthdayReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsBirthdayGetAsync
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsBirthdayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBirthdayGetAsync($from_date, $to_date, $business_id, $location_id = 0, string $contentType = self::contentTypes['reportsBirthdayGet'][0])
    {
        return $this->reportsBirthdayGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $location_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsBirthdayGetAsyncWithHttpInfo
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsBirthdayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBirthdayGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $location_id = 0, string $contentType = self::contentTypes['reportsBirthdayGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BirthdayReportExportModel[]';
        $request = $this->reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsBirthdayGet'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsBirthdayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id = 0, string $contentType = self::contentTypes['reportsBirthdayGet'][0])
    {

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling reportsBirthdayGet'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling reportsBirthdayGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsBirthdayGet'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/report/birthday';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_id,
            'locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsDeductionsGet
     *
     * Deductions Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  int $request_deduction_category_id request_deduction_category_id (optional)
     * @param  bool $request_disable_rollup_reporting request_disable_rollup_reporting (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDeductionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DeductionsReportExportModel[]
     */
    public function reportsDeductionsGet($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsDeductionsGet'][0])
    {
        list($response) = $this->reportsDeductionsGetWithHttpInfo($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation reportsDeductionsGetWithHttpInfo
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_deduction_category_id (optional)
     * @param  bool $request_disable_rollup_reporting (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDeductionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DeductionsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsDeductionsGetWithHttpInfo($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsDeductionsGet'][0])
    {
        $request = $this->reportsDeductionsGetRequest($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DeductionsReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DeductionsReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DeductionsReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DeductionsReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DeductionsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsDeductionsGetAsync
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_deduction_category_id (optional)
     * @param  bool $request_disable_rollup_reporting (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDeductionsGetAsync($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsDeductionsGet'][0])
    {
        return $this->reportsDeductionsGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsDeductionsGetAsyncWithHttpInfo
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_deduction_category_id (optional)
     * @param  bool $request_disable_rollup_reporting (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDeductionsGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsDeductionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DeductionsReportExportModel[]';
        $request = $this->reportsDeductionsGetRequest($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsDeductionsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_deduction_category_id (optional)
     * @param  bool $request_disable_rollup_reporting (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDeductionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsDeductionsGetRequest($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsDeductionsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsDeductionsGet'
            );
        }











        $resourcePath = '/api/v2/business/{businessId}/report/deductions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_deduction_category_id,
            'request.deductionCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_disable_rollup_reporting,
            'request.disableRollupReporting', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsDocumentAcknowledgementsGet
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $document_id document_id (optional)
     * @param  int[] $employee_ids employee_ids (optional)
     * @param  int $document_status document_status (optional, default to 0)
     * @param  int $employing_entity_id employing_entity_id (optional, default to 0)
     * @param  int $location_id location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDocumentAcknowledgementsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]
     */
    public function reportsDocumentAcknowledgementsGet($business_id, $document_id = null, $employee_ids = null, $document_status = 0, $employing_entity_id = 0, $location_id = 0, string $contentType = self::contentTypes['reportsDocumentAcknowledgementsGet'][0])
    {
        list($response) = $this->reportsDocumentAcknowledgementsGetWithHttpInfo($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id, $contentType);
        return $response;
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetWithHttpInfo
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDocumentAcknowledgementsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsDocumentAcknowledgementsGetWithHttpInfo($business_id, $document_id = null, $employee_ids = null, $document_status = 0, $employing_entity_id = 0, $location_id = 0, string $contentType = self::contentTypes['reportsDocumentAcknowledgementsGet'][0])
    {
        $request = $this->reportsDocumentAcknowledgementsGetRequest($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetAsync
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDocumentAcknowledgementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDocumentAcknowledgementsGetAsync($business_id, $document_id = null, $employee_ids = null, $document_status = 0, $employing_entity_id = 0, $location_id = 0, string $contentType = self::contentTypes['reportsDocumentAcknowledgementsGet'][0])
    {
        return $this->reportsDocumentAcknowledgementsGetAsyncWithHttpInfo($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetAsyncWithHttpInfo
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDocumentAcknowledgementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDocumentAcknowledgementsGetAsyncWithHttpInfo($business_id, $document_id = null, $employee_ids = null, $document_status = 0, $employing_entity_id = 0, $location_id = 0, string $contentType = self::contentTypes['reportsDocumentAcknowledgementsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DocumentAcknowledgementsReportExportModel[]';
        $request = $this->reportsDocumentAcknowledgementsGetRequest($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsDocumentAcknowledgementsGet'
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsDocumentAcknowledgementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsDocumentAcknowledgementsGetRequest($business_id, $document_id = null, $employee_ids = null, $document_status = 0, $employing_entity_id = 0, $location_id = 0, string $contentType = self::contentTypes['reportsDocumentAcknowledgementsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsDocumentAcknowledgementsGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/documentAcknowledgements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_id,
            'documentId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_ids,
            'employeeIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_status,
            'documentStatus', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employing_entity_id,
            'employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_id,
            'locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeAuditGet
     *
     * Employee Audit Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  string $request_section request_section (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeAuditGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]
     */
    public function reportsEmployeeAuditGet($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsEmployeeAuditGet'][0])
    {
        list($response) = $this->reportsEmployeeAuditGetWithHttpInfo($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation reportsEmployeeAuditGetWithHttpInfo
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_section (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeAuditGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeAuditGetWithHttpInfo($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsEmployeeAuditGet'][0])
    {
        $request = $this->reportsEmployeeAuditGetRequest($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeAuditGetAsync
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_section (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeAuditGetAsync($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsEmployeeAuditGet'][0])
    {
        return $this->reportsEmployeeAuditGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeAuditGetAsyncWithHttpInfo
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_section (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeAuditGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsEmployeeAuditGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeDetailsAuditReportApiModel[]';
        $request = $this->reportsEmployeeAuditGetRequest($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_include_post_tax_deductions, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeAuditGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  string $request_section (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  bool $request_include_post_tax_deductions (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsEmployeeAuditGetRequest($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_include_post_tax_deductions = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsEmployeeAuditGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeAuditGet'
            );
        }










        $resourcePath = '/api/v2/business/{businessId}/report/employeeaudit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_section,
            'request.section', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_post_tax_deductions,
            'request.includePostTaxDeductions', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeDetailsGet
     *
     * Employee Details Report
     *
     * @param  string $business_id business_id (required)
     * @param  string[] $selected_columns selected_columns (optional)
     * @param  int $location_id location_id (optional, default to 0)
     * @param  int $employing_entity_id employing_entity_id (optional)
     * @param  bool $include_active include_active (optional, default to true)
     * @param  bool $include_inactive include_inactive (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function reportsEmployeeDetailsGet($business_id, $selected_columns = null, $location_id = 0, $employing_entity_id = null, $include_active = true, $include_inactive = true, string $contentType = self::contentTypes['reportsEmployeeDetailsGet'][0])
    {
        list($response) = $this->reportsEmployeeDetailsGetWithHttpInfo($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive, $contentType);
        return $response;
    }

    /**
     * Operation reportsEmployeeDetailsGetWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeDetailsGetWithHttpInfo($business_id, $selected_columns = null, $location_id = 0, $employing_entity_id = null, $include_active = true, $include_inactive = true, string $contentType = self::contentTypes['reportsEmployeeDetailsGet'][0])
    {
        $request = $this->reportsEmployeeDetailsGetRequest($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeDetailsGetAsync
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsGetAsync($business_id, $selected_columns = null, $location_id = 0, $employing_entity_id = null, $include_active = true, $include_inactive = true, string $contentType = self::contentTypes['reportsEmployeeDetailsGet'][0])
    {
        return $this->reportsEmployeeDetailsGetAsyncWithHttpInfo($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeDetailsGetAsyncWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsGetAsyncWithHttpInfo($business_id, $selected_columns = null, $location_id = 0, $employing_entity_id = null, $include_active = true, $include_inactive = true, string $contentType = self::contentTypes['reportsEmployeeDetailsGet'][0])
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsGetRequest($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeDetailsGet'
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsEmployeeDetailsGetRequest($business_id, $selected_columns = null, $location_id = 0, $employing_entity_id = null, $include_active = true, $include_inactive = true, string $contentType = self::contentTypes['reportsEmployeeDetailsGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeDetailsGet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $selected_columns,
            'selectedColumns', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_id,
            'locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employing_entity_id,
            'employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_active,
            'includeActive', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_inactive,
            'includeInactive', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeDetailsPost
     *
     * Employee Details Report
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeDetailsReportRequestModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function reportsEmployeeDetailsPost($business_id, $model, string $contentType = self::contentTypes['reportsEmployeeDetailsPost'][0])
    {
        list($response) = $this->reportsEmployeeDetailsPostWithHttpInfo($business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation reportsEmployeeDetailsPostWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeDetailsPostWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['reportsEmployeeDetailsPost'][0])
    {
        $request = $this->reportsEmployeeDetailsPostRequest($business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeDetailsPostAsync
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsPostAsync($business_id, $model, string $contentType = self::contentTypes['reportsEmployeeDetailsPost'][0])
    {
        return $this->reportsEmployeeDetailsPostAsyncWithHttpInfo($business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeDetailsPostAsyncWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsPostAsyncWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['reportsEmployeeDetailsPost'][0])
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsPostRequest($business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeDetailsPost'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsEmployeeDetailsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsEmployeeDetailsPostRequest($business_id, $model, string $contentType = self::contentTypes['reportsEmployeeDetailsPost'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeDetailsPost'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling reportsEmployeeDetailsPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsJournalGet
     *
     * Journal Report
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $journal_view journal_view (optional, default to '0')
     * @param  string $journal_service journal_service (optional, default to '9')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsJournalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportsJournalGet($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9', string $contentType = self::contentTypes['reportsJournalGet'][0])
    {
        $this->reportsJournalGetWithHttpInfo($pay_run_id, $business_id, $journal_view, $journal_service, $contentType);
    }

    /**
     * Operation reportsJournalGetWithHttpInfo
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to '0')
     * @param  string $journal_service (optional, default to '9')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsJournalGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsJournalGetWithHttpInfo($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9', string $contentType = self::contentTypes['reportsJournalGet'][0])
    {
        $request = $this->reportsJournalGetRequest($pay_run_id, $business_id, $journal_view, $journal_service, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportsJournalGetAsync
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to '0')
     * @param  string $journal_service (optional, default to '9')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsJournalGetAsync($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9', string $contentType = self::contentTypes['reportsJournalGet'][0])
    {
        return $this->reportsJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, $journal_view, $journal_service, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsJournalGetAsyncWithHttpInfo
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to '0')
     * @param  string $journal_service (optional, default to '9')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9', string $contentType = self::contentTypes['reportsJournalGet'][0])
    {
        $returnType = '';
        $request = $this->reportsJournalGetRequest($pay_run_id, $business_id, $journal_view, $journal_service, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsJournalGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to '0')
     * @param  string $journal_service (optional, default to '9')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsJournalGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsJournalGetRequest($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9', string $contentType = self::contentTypes['reportsJournalGet'][0])
    {

        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling reportsJournalGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsJournalGet'
            );
        }




        $resourcePath = '/api/v2/business/{businessId}/report/journal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pay_run_id,
            'payRunId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $journal_view,
            'journalView', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $journal_service,
            'journalService', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsPaySlipGet
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id business_id (required)
     * @param  int $model_pay_run_id model_pay_run_id (optional)
     * @param  int $model_employee_id model_employee_id (optional)
     * @param  int $model_location_id model_location_id (optional)
     * @param  int $model_employing_entity_id model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsPaySlipGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportsPaySlipGet($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['reportsPaySlipGet'][0])
    {
        $this->reportsPaySlipGetWithHttpInfo($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id, $contentType);
    }

    /**
     * Operation reportsPaySlipGetWithHttpInfo
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id (optional)
     * @param  int $model_employee_id (optional)
     * @param  int $model_location_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsPaySlipGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsPaySlipGetWithHttpInfo($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['reportsPaySlipGet'][0])
    {
        $request = $this->reportsPaySlipGetRequest($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportsPaySlipGetAsync
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id (optional)
     * @param  int $model_employee_id (optional)
     * @param  int $model_location_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaySlipGetAsync($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['reportsPaySlipGet'][0])
    {
        return $this->reportsPaySlipGetAsyncWithHttpInfo($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsPaySlipGetAsyncWithHttpInfo
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id (optional)
     * @param  int $model_employee_id (optional)
     * @param  int $model_location_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaySlipGetAsyncWithHttpInfo($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['reportsPaySlipGet'][0])
    {
        $returnType = '';
        $request = $this->reportsPaySlipGetRequest($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsPaySlipGet'
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id (optional)
     * @param  int $model_employee_id (optional)
     * @param  int $model_location_id (optional)
     * @param  int $model_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsPaySlipGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsPaySlipGetRequest($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null, string $contentType = self::contentTypes['reportsPaySlipGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsPaySlipGet'
            );
        }






        $resourcePath = '/api/v2/business/{businessId}/report/payslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_pay_run_id,
            'model.payRunId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employee_id,
            'model.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_location_id,
            'model.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employing_entity_id,
            'model.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsShiftSwappingGet
     *
     * Get shift swapping report by business id
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_from_employee_id request_from_employee_id (optional)
     * @param  int $request_to_employee_id request_to_employee_id (optional)
     * @param  bool $request_include_costs request_include_costs (optional)
     * @param  string[] $request_statuses request_statuses (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_location_id request_location_id (optional)
     * @param  int $request_employing_entity_id request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsShiftSwappingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ShiftSwappingReportExportModel[]
     */
    public function reportsShiftSwappingGet($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsShiftSwappingGet'][0])
    {
        list($response) = $this->reportsShiftSwappingGetWithHttpInfo($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);
        return $response;
    }

    /**
     * Operation reportsShiftSwappingGetWithHttpInfo
     *
     * Get shift swapping report by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id (optional)
     * @param  int $request_to_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsShiftSwappingGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ShiftSwappingReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsShiftSwappingGetWithHttpInfo($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsShiftSwappingGet'][0])
    {
        $request = $this->reportsShiftSwappingGetRequest($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsShiftSwappingGetAsync
     *
     * Get shift swapping report by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id (optional)
     * @param  int $request_to_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsShiftSwappingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsShiftSwappingGetAsync($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsShiftSwappingGet'][0])
    {
        return $this->reportsShiftSwappingGetAsyncWithHttpInfo($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsShiftSwappingGetAsyncWithHttpInfo
     *
     * Get shift swapping report by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id (optional)
     * @param  int $request_to_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsShiftSwappingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsShiftSwappingGetAsyncWithHttpInfo($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsShiftSwappingGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ShiftSwappingReportExportModel[]';
        $request = $this->reportsShiftSwappingGetRequest($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsShiftSwappingGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id (optional)
     * @param  int $request_to_employee_id (optional)
     * @param  bool $request_include_costs (optional)
     * @param  string[] $request_statuses (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_location_id (optional)
     * @param  int $request_employing_entity_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsShiftSwappingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsShiftSwappingGetRequest($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null, string $contentType = self::contentTypes['reportsShiftSwappingGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsShiftSwappingGet'
            );
        }










        $resourcePath = '/api/v2/business/{businessId}/report/shiftswapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_employee_id,
            'request.fromEmployeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_employee_id,
            'request.toEmployeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_include_costs,
            'request.includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_statuses,
            'request.statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_location_id,
            'request.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employing_entity_id,
            'request.employingEntityId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsTasksReportGet
     *
     * Get tasks by business id
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id request_employee_id (optional)
     * @param  int $request_pay_run_id request_pay_run_id (optional)
     * @param  \DateTime $request_from_date request_from_date (optional)
     * @param  \DateTime $request_to_date request_to_date (optional)
     * @param  int $request_pay_schedule_id request_pay_schedule_id (optional)
     * @param  string $request_status request_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsTasksReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TasksReportExportModel[]
     */
    public function reportsTasksReportGet($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null, string $contentType = self::contentTypes['reportsTasksReportGet'][0])
    {
        list($response) = $this->reportsTasksReportGetWithHttpInfo($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status, $contentType);
        return $response;
    }

    /**
     * Operation reportsTasksReportGetWithHttpInfo
     *
     * Get tasks by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_pay_run_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  string $request_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsTasksReportGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TasksReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsTasksReportGetWithHttpInfo($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null, string $contentType = self::contentTypes['reportsTasksReportGet'][0])
    {
        $request = $this->reportsTasksReportGetRequest($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TasksReportExportModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TasksReportExportModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TasksReportExportModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TasksReportExportModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TasksReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsTasksReportGetAsync
     *
     * Get tasks by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_pay_run_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  string $request_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsTasksReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsTasksReportGetAsync($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null, string $contentType = self::contentTypes['reportsTasksReportGet'][0])
    {
        return $this->reportsTasksReportGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsTasksReportGetAsyncWithHttpInfo
     *
     * Get tasks by business id
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_pay_run_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  string $request_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsTasksReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsTasksReportGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null, string $contentType = self::contentTypes['reportsTasksReportGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TasksReportExportModel[]';
        $request = $this->reportsTasksReportGetRequest($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsTasksReportGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id (optional)
     * @param  int $request_pay_run_id (optional)
     * @param  \DateTime $request_from_date (optional)
     * @param  \DateTime $request_to_date (optional)
     * @param  int $request_pay_schedule_id (optional)
     * @param  string $request_status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportsTasksReportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportsTasksReportGetRequest($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null, string $contentType = self::contentTypes['reportsTasksReportGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsTasksReportGet'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/report/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_employee_id,
            'request.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_run_id,
            'request.payRunId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_pay_schedule_id,
            'request.payScheduleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_status,
            'request.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
