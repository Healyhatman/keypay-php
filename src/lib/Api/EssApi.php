<?php
/**
 * EssApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EssApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EssApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auEssBankAccountDelete' => [
            'application/json',
        ],
        'auEssBankAccountGet' => [
            'application/json',
        ],
        'auEssBankAccountList' => [
            'application/json',
        ],
        'auEssBankAccountPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssBankAccountPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssDocumentAcknowledgeDocument' => [
            'application/json',
        ],
        'auEssDocumentDownloadDocument' => [
            'application/json',
        ],
        'auEssDocumentGetDocumentById' => [
            'application/json',
        ],
        'auEssDocumentGetPayslip' => [
            'application/json',
        ],
        'auEssDocumentListDocuments' => [
            'application/json',
        ],
        'auEssDocumentListPayslips' => [
            'application/json',
        ],
        'auEssDocumentPaymentSummaries' => [
            'application/json',
        ],
        'auEssDocumentPaymentSummary' => [
            'application/json',
        ],
        'auEssEmployeeFeatures' => [
            'application/json',
        ],
        'auEssEmployeeGetDashboard' => [
            'application/json',
        ],
        'auEssEmployeeGetDetails' => [
            'application/json',
        ],
        'auEssEmployeeGetEmergencyContacts' => [
            'application/json',
        ],
        'auEssEmployeeGetEssDetails' => [
            'application/json',
        ],
        'auEssEmployeeGetPublicHolidays' => [
            'application/json',
        ],
        'auEssEmployeeGetSatisfactionSurveys' => [
            'application/json',
        ],
        'auEssEmployeeSaveDetails' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssEmployeeSaveEmergencyContacts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssEmployeeSaveSatisfaction' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssEmployeeUpdateDetails' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssEmployeeUpdateEmergencyContacts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssLookupAddresses' => [
            'application/json',
        ],
        'auEssLookupLocation' => [
            'application/json',
        ],
        'auEssLookupShiftCondition' => [
            'application/json',
        ],
        'auEssLookupSuburb' => [
            'application/json',
        ],
        'auEssLookupSuburbs' => [
            'application/json',
        ],
        'auEssLookupTitle' => [
            'application/json',
        ],
        'auEssLookupWorkType' => [
            'application/json',
        ],
        'auEssSelfManagedSuperFundGet' => [
            'application/json',
        ],
        'auEssSelfManagedSuperFundGetFunds' => [
            'application/json',
        ],
        'auEssSelfManagedSuperFundPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssSelfManagedSuperFundPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftAcceptRosterShift' => [
            'application/json',
        ],
        'auEssShiftAcceptRosterShiftSwap' => [
            'application/json',
        ],
        'auEssShiftAcceptRosterShiftSwaps' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftAcceptRosterShifts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftCancelRosterShiftSwap' => [
            'application/json',
        ],
        'auEssShiftCancelRosterShiftSwaps' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftDeclineRosterShift' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftDeclineRosterShiftSwap' => [
            'application/json',
        ],
        'auEssShiftDeclineRosterShiftSwaps' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftDeclineRosterShifts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssShiftEmployeesEligibleForShiftSwap' => [
            'application/json',
        ],
        'auEssShiftGetShift' => [
            'application/json',
        ],
        'auEssShiftGetShifts' => [
            'application/json',
        ],
        'auEssShiftMatchingClockOffRosterShift' => [
            'application/json',
        ],
        'auEssShiftMatchingClockOnRosterShift' => [
            'application/json',
        ],
        'auEssShiftNearbyRosterShifts' => [
            'application/json',
        ],
        'auEssShiftProposeRosterShiftSwap' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssSuperFundDelete' => [
            'application/json',
        ],
        'auEssSuperFundGet' => [
            'application/json',
        ],
        'auEssSuperFundList' => [
            'application/json',
        ],
        'auEssSuperFundPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssSuperFundProductSearch' => [
            'application/json',
        ],
        'auEssSuperFundPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceAddShiftNote' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceClockOffEmployee' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceClockOn' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceDiscardCurrentShift' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceEndShiftBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceGetLookupData' => [
            'application/json',
        ],
        'auEssTimeAndAttendanceGetShiftNotes' => [
            'application/json',
        ],
        'auEssTimeAndAttendanceGetShifts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceMarkShiftNotesRead' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimeAndAttendanceStartShiftBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimesheetData' => [
            'application/json',
        ],
        'auEssTimesheetDelete' => [
            'application/json',
        ],
        'auEssTimesheetEdit' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auEssTimesheetList' => [
            'application/json',
        ],
        'auEssTimesheetSave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essDeviceTokenRegister' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essDeviceTokenUnregister' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essExpenseCancelExpenseRequest' => [
            'application/json',
        ],
        'essExpenseCreateExpenseRequest' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essExpenseExpenseCategories' => [
            'application/json',
        ],
        'essExpenseGetExpenseRequest' => [
            'application/json',
        ],
        'essExpenseGetExpenseRequests' => [
            'application/json',
        ],
        'essExpenseSummary' => [
            'application/json',
        ],
        'essExpenseTaxCodes' => [
            'application/json',
        ],
        'essExpenseUpdateExpenseRequest' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essExpenseUploadAttachment' => [
            'application/json',
        ],
        'essLeaveApplyForLeave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essLeaveBalances' => [
            'application/json',
        ],
        'essLeaveCancel' => [
            'application/json',
        ],
        'essLeaveDeleteAttachment' => [
            'application/json',
        ],
        'essLeaveEditLeave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essLeaveEstimate' => [
            'application/json',
        ],
        'essLeaveLeaveCategories' => [
            'application/json',
        ],
        'essLeaveLeaveRequest' => [
            'application/json',
        ],
        'essLeaveLeaveRequests' => [
            'application/json',
        ],
        'essLeaveUpload' => [
            'application/json',
        ],
        'essProfileImageDelete' => [
            'application/json',
        ],
        'essProfileImageGetImage' => [
            'application/json',
        ],
        'essProfileImagePost' => [
            'application/json',
        ],
        'essQualificationDelete' => [
            'application/json',
        ],
        'essQualificationDeleteAttachment' => [
            'application/json',
        ],
        'essQualificationGet' => [
            'application/json',
        ],
        'essQualificationGetQualifications' => [
            'application/json',
        ],
        'essQualificationPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essQualificationPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essQualificationUploadAttachment' => [
            'application/json',
        ],
        'essSecurityEmployees' => [
            'application/json',
        ],
        'essSecurityForgottenPassword' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essUnavailabilityCreate' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'essUnavailabilityDelete' => [
            'application/json',
        ],
        'essUnavailabilityGet' => [
            'application/json',
        ],
        'essUnavailabilityList' => [
            'application/json',
        ],
        'essUnavailabilitySave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auEssBankAccountDelete
     *
     * Delete Bank Account
     *
     * @param  int $bank_account_id bank_account_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel
     */
    public function auEssBankAccountDelete($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountDelete'][0])
    {
        list($response) = $this->auEssBankAccountDeleteWithHttpInfo($bank_account_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssBankAccountDeleteWithHttpInfo
     *
     * Delete Bank Account
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssBankAccountDeleteWithHttpInfo($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountDelete'][0])
    {
        $request = $this->auEssBankAccountDeleteRequest($bank_account_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssBankAccountDeleteAsync
     *
     * Delete Bank Account
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountDeleteAsync($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountDelete'][0])
    {
        return $this->auEssBankAccountDeleteAsyncWithHttpInfo($bank_account_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssBankAccountDeleteAsyncWithHttpInfo
     *
     * Delete Bank Account
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountDeleteAsyncWithHttpInfo($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
        $request = $this->auEssBankAccountDeleteRequest($bank_account_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssBankAccountDelete'
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssBankAccountDeleteRequest($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountDelete'][0])
    {

        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling auEssBankAccountDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssBankAccountDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssBankAccountGet
     *
     * Get Bank Account by ID
     *
     * @param  int $bank_account_id bank_account_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssBankAccountModel
     */
    public function auEssBankAccountGet($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountGet'][0])
    {
        list($response) = $this->auEssBankAccountGetWithHttpInfo($bank_account_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssBankAccountGetWithHttpInfo
     *
     * Get Bank Account by ID
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssBankAccountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssBankAccountGetWithHttpInfo($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountGet'][0])
    {
        $request = $this->auEssBankAccountGetRequest($bank_account_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssBankAccountModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssBankAccountModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssBankAccountModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssBankAccountModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssBankAccountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssBankAccountGetAsync
     *
     * Get Bank Account by ID
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountGetAsync($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountGet'][0])
    {
        return $this->auEssBankAccountGetAsyncWithHttpInfo($bank_account_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssBankAccountGetAsyncWithHttpInfo
     *
     * Get Bank Account by ID
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountGetAsyncWithHttpInfo($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssBankAccountModel';
        $request = $this->auEssBankAccountGetRequest($bank_account_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssBankAccountGet'
     *
     * @param  int $bank_account_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssBankAccountGetRequest($bank_account_id, $employee_id, string $contentType = self::contentTypes['auEssBankAccountGet'][0])
    {

        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling auEssBankAccountGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssBankAccountGet'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssBankAccountList
     *
     * List Bank Accounts
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssBankAccountModel[]
     */
    public function auEssBankAccountList($employee_id, string $contentType = self::contentTypes['auEssBankAccountList'][0])
    {
        list($response) = $this->auEssBankAccountListWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssBankAccountListWithHttpInfo
     *
     * List Bank Accounts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssBankAccountModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssBankAccountListWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssBankAccountList'][0])
    {
        $request = $this->auEssBankAccountListRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssBankAccountModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssBankAccountModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssBankAccountModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssBankAccountModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssBankAccountModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssBankAccountListAsync
     *
     * List Bank Accounts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountListAsync($employee_id, string $contentType = self::contentTypes['auEssBankAccountList'][0])
    {
        return $this->auEssBankAccountListAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssBankAccountListAsyncWithHttpInfo
     *
     * List Bank Accounts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountListAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssBankAccountList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssBankAccountModel[]';
        $request = $this->auEssBankAccountListRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssBankAccountList'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssBankAccountListRequest($employee_id, string $contentType = self::contentTypes['auEssBankAccountList'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssBankAccountList'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/bankaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssBankAccountPost
     *
     * Create Bank Account
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel
     */
    public function auEssBankAccountPost($employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPost'][0])
    {
        list($response) = $this->auEssBankAccountPostWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssBankAccountPostWithHttpInfo
     *
     * Create Bank Account
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssBankAccountPostWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPost'][0])
    {
        $request = $this->auEssBankAccountPostRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssBankAccountPostAsync
     *
     * Create Bank Account
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountPostAsync($employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPost'][0])
    {
        return $this->auEssBankAccountPostAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssBankAccountPostAsyncWithHttpInfo
     *
     * Create Bank Account
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountPostAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
        $request = $this->auEssBankAccountPostRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssBankAccountPost'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssBankAccountPostRequest($employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPost'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssBankAccountPost'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssBankAccountPost'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/bankaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssBankAccountPut
     *
     * Update Bank Account
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel
     */
    public function auEssBankAccountPut($id, $employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPut'][0])
    {
        list($response) = $this->auEssBankAccountPutWithHttpInfo($id, $employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssBankAccountPutWithHttpInfo
     *
     * Update Bank Account
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssBankAccountPutWithHttpInfo($id, $employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPut'][0])
    {
        $request = $this->auEssBankAccountPutRequest($id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssBankAccountPutAsync
     *
     * Update Bank Account
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountPutAsync($id, $employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPut'][0])
    {
        return $this->auEssBankAccountPutAsyncWithHttpInfo($id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssBankAccountPutAsyncWithHttpInfo
     *
     * Update Bank Account
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssBankAccountPutAsyncWithHttpInfo($id, $employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssSaveBankAccountResponseModel';
        $request = $this->auEssBankAccountPutRequest($id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssBankAccountPut'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssBankAccountModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssBankAccountPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssBankAccountPutRequest($id, $employee_id, $model, string $contentType = self::contentTypes['auEssBankAccountPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auEssBankAccountPut'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssBankAccountPut'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssBankAccountPut'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/bankaccounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentAcknowledgeDocument
     *
     * Acknowledge Document
     *
     * @param  string $document_id document_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentAcknowledgeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssDocumentModel
     */
    public function auEssDocumentAcknowledgeDocument($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentAcknowledgeDocument'][0])
    {
        list($response) = $this->auEssDocumentAcknowledgeDocumentWithHttpInfo($document_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentAcknowledgeDocumentWithHttpInfo
     *
     * Acknowledge Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentAcknowledgeDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssDocumentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentAcknowledgeDocumentWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentAcknowledgeDocument'][0])
    {
        $request = $this->auEssDocumentAcknowledgeDocumentRequest($document_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssDocumentModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssDocumentModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssDocumentModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssDocumentModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssDocumentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentAcknowledgeDocumentAsync
     *
     * Acknowledge Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentAcknowledgeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentAcknowledgeDocumentAsync($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentAcknowledgeDocument'][0])
    {
        return $this->auEssDocumentAcknowledgeDocumentAsyncWithHttpInfo($document_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentAcknowledgeDocumentAsyncWithHttpInfo
     *
     * Acknowledge Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentAcknowledgeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentAcknowledgeDocumentAsyncWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentAcknowledgeDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssDocumentModel';
        $request = $this->auEssDocumentAcknowledgeDocumentRequest($document_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentAcknowledgeDocument'
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentAcknowledgeDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentAcknowledgeDocumentRequest($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentAcknowledgeDocument'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling auEssDocumentAcknowledgeDocument'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentAcknowledgeDocument'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/acknowledge/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentDownloadDocument
     *
     * Download Document
     *
     * @param  string $document_id document_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentDownloadDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function auEssDocumentDownloadDocument($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentDownloadDocument'][0])
    {
        list($response) = $this->auEssDocumentDownloadDocumentWithHttpInfo($document_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentDownloadDocumentWithHttpInfo
     *
     * Download Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentDownloadDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentDownloadDocumentWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentDownloadDocument'][0])
    {
        $request = $this->auEssDocumentDownloadDocumentRequest($document_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentDownloadDocumentAsync
     *
     * Download Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentDownloadDocumentAsync($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentDownloadDocument'][0])
    {
        return $this->auEssDocumentDownloadDocumentAsyncWithHttpInfo($document_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentDownloadDocumentAsyncWithHttpInfo
     *
     * Download Document
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentDownloadDocumentAsyncWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentDownloadDocument'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->auEssDocumentDownloadDocumentRequest($document_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentDownloadDocument'
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentDownloadDocumentRequest($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentDownloadDocument'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling auEssDocumentDownloadDocument'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentDownloadDocument'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/download/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentGetDocumentById
     *
     * Get Document Details by ID
     *
     * @param  string $document_id document_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetDocumentById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssDocumentModel
     */
    public function auEssDocumentGetDocumentById($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetDocumentById'][0])
    {
        list($response) = $this->auEssDocumentGetDocumentByIdWithHttpInfo($document_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentGetDocumentByIdWithHttpInfo
     *
     * Get Document Details by ID
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetDocumentById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssDocumentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentGetDocumentByIdWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetDocumentById'][0])
    {
        $request = $this->auEssDocumentGetDocumentByIdRequest($document_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssDocumentModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssDocumentModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssDocumentModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssDocumentModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssDocumentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentGetDocumentByIdAsync
     *
     * Get Document Details by ID
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentGetDocumentByIdAsync($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetDocumentById'][0])
    {
        return $this->auEssDocumentGetDocumentByIdAsyncWithHttpInfo($document_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentGetDocumentByIdAsyncWithHttpInfo
     *
     * Get Document Details by ID
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentGetDocumentByIdAsyncWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetDocumentById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssDocumentModel';
        $request = $this->auEssDocumentGetDocumentByIdRequest($document_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentGetDocumentById'
     *
     * @param  string $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetDocumentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentGetDocumentByIdRequest($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetDocumentById'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling auEssDocumentGetDocumentById'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentGetDocumentById'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentGetPayslip
     *
     * Get Pay Slip by Pay Run ID
     *
     * @param  int $payrun_id payrun_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetPayslip'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function auEssDocumentGetPayslip($payrun_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetPayslip'][0])
    {
        list($response) = $this->auEssDocumentGetPayslipWithHttpInfo($payrun_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentGetPayslipWithHttpInfo
     *
     * Get Pay Slip by Pay Run ID
     *
     * @param  int $payrun_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetPayslip'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentGetPayslipWithHttpInfo($payrun_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetPayslip'][0])
    {
        $request = $this->auEssDocumentGetPayslipRequest($payrun_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentGetPayslipAsync
     *
     * Get Pay Slip by Pay Run ID
     *
     * @param  int $payrun_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetPayslip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentGetPayslipAsync($payrun_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetPayslip'][0])
    {
        return $this->auEssDocumentGetPayslipAsyncWithHttpInfo($payrun_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentGetPayslipAsyncWithHttpInfo
     *
     * Get Pay Slip by Pay Run ID
     *
     * @param  int $payrun_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetPayslip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentGetPayslipAsyncWithHttpInfo($payrun_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetPayslip'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->auEssDocumentGetPayslipRequest($payrun_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentGetPayslip'
     *
     * @param  int $payrun_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentGetPayslip'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentGetPayslipRequest($payrun_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentGetPayslip'][0])
    {

        // verify the required parameter 'payrun_id' is set
        if ($payrun_id === null || (is_array($payrun_id) && count($payrun_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payrun_id when calling auEssDocumentGetPayslip'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentGetPayslip'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/payslip/{payrunId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payrun_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payrunId' . '}',
                ObjectSerializer::toPathValue($payrun_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentListDocuments
     *
     * List all Documents
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssDocumentModel[]
     */
    public function auEssDocumentListDocuments($employee_id, string $contentType = self::contentTypes['auEssDocumentListDocuments'][0])
    {
        list($response) = $this->auEssDocumentListDocumentsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentListDocumentsWithHttpInfo
     *
     * List all Documents
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssDocumentModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentListDocumentsWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentListDocuments'][0])
    {
        $request = $this->auEssDocumentListDocumentsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssDocumentModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssDocumentModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssDocumentModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssDocumentModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssDocumentModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentListDocumentsAsync
     *
     * List all Documents
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentListDocumentsAsync($employee_id, string $contentType = self::contentTypes['auEssDocumentListDocuments'][0])
    {
        return $this->auEssDocumentListDocumentsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentListDocumentsAsyncWithHttpInfo
     *
     * List all Documents
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentListDocumentsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentListDocuments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssDocumentModel[]';
        $request = $this->auEssDocumentListDocumentsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentListDocuments'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentListDocumentsRequest($employee_id, string $contentType = self::contentTypes['auEssDocumentListDocuments'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentListDocuments'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentListPayslips
     *
     * List Pay Slips
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListPayslips'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssPayslipModel[]
     */
    public function auEssDocumentListPayslips($employee_id, string $contentType = self::contentTypes['auEssDocumentListPayslips'][0])
    {
        list($response) = $this->auEssDocumentListPayslipsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentListPayslipsWithHttpInfo
     *
     * List Pay Slips
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListPayslips'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssPayslipModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentListPayslipsWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentListPayslips'][0])
    {
        $request = $this->auEssDocumentListPayslipsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssPayslipModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssPayslipModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssPayslipModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssPayslipModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssPayslipModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentListPayslipsAsync
     *
     * List Pay Slips
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListPayslips'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentListPayslipsAsync($employee_id, string $contentType = self::contentTypes['auEssDocumentListPayslips'][0])
    {
        return $this->auEssDocumentListPayslipsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentListPayslipsAsyncWithHttpInfo
     *
     * List Pay Slips
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListPayslips'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentListPayslipsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentListPayslips'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssPayslipModel[]';
        $request = $this->auEssDocumentListPayslipsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentListPayslips'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentListPayslips'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentListPayslipsRequest($employee_id, string $contentType = self::contentTypes['auEssDocumentListPayslips'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentListPayslips'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/payslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentPaymentSummaries
     *
     * Get Payment Summaries
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummaries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssPaymentSummaryModel[]
     */
    public function auEssDocumentPaymentSummaries($employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummaries'][0])
    {
        list($response) = $this->auEssDocumentPaymentSummariesWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentPaymentSummariesWithHttpInfo
     *
     * Get Payment Summaries
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummaries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssPaymentSummaryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentPaymentSummariesWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummaries'][0])
    {
        $request = $this->auEssDocumentPaymentSummariesRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssPaymentSummaryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssPaymentSummaryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssPaymentSummaryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssPaymentSummaryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssPaymentSummaryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentPaymentSummariesAsync
     *
     * Get Payment Summaries
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentPaymentSummariesAsync($employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummaries'][0])
    {
        return $this->auEssDocumentPaymentSummariesAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentPaymentSummariesAsyncWithHttpInfo
     *
     * Get Payment Summaries
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentPaymentSummariesAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummaries'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssPaymentSummaryModel[]';
        $request = $this->auEssDocumentPaymentSummariesRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentPaymentSummaries'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentPaymentSummariesRequest($employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummaries'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentPaymentSummaries'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/paymentsummaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssDocumentPaymentSummary
     *
     * Get Payment Summary PDF
     *
     * @param  int $document_id document_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function auEssDocumentPaymentSummary($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummary'][0])
    {
        list($response) = $this->auEssDocumentPaymentSummaryWithHttpInfo($document_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssDocumentPaymentSummaryWithHttpInfo
     *
     * Get Payment Summary PDF
     *
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssDocumentPaymentSummaryWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummary'][0])
    {
        $request = $this->auEssDocumentPaymentSummaryRequest($document_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssDocumentPaymentSummaryAsync
     *
     * Get Payment Summary PDF
     *
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentPaymentSummaryAsync($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummary'][0])
    {
        return $this->auEssDocumentPaymentSummaryAsyncWithHttpInfo($document_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssDocumentPaymentSummaryAsyncWithHttpInfo
     *
     * Get Payment Summary PDF
     *
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssDocumentPaymentSummaryAsyncWithHttpInfo($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->auEssDocumentPaymentSummaryRequest($document_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssDocumentPaymentSummary'
     *
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssDocumentPaymentSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssDocumentPaymentSummaryRequest($document_id, $employee_id, string $contentType = self::contentTypes['auEssDocumentPaymentSummary'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling auEssDocumentPaymentSummary'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssDocumentPaymentSummary'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/document/paymentsummary/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeFeatures
     *
     * Get Enabled Features
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuFeaturesModel
     */
    public function auEssEmployeeFeatures($employee_id, string $contentType = self::contentTypes['auEssEmployeeFeatures'][0])
    {
        list($response) = $this->auEssEmployeeFeaturesWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeFeaturesWithHttpInfo
     *
     * Get Enabled Features
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeFeatures'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuFeaturesModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeFeaturesWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeFeatures'][0])
    {
        $request = $this->auEssEmployeeFeaturesRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuFeaturesModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuFeaturesModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuFeaturesModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuFeaturesModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuFeaturesModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeFeaturesAsync
     *
     * Get Enabled Features
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeFeaturesAsync($employee_id, string $contentType = self::contentTypes['auEssEmployeeFeatures'][0])
    {
        return $this->auEssEmployeeFeaturesAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeFeaturesAsyncWithHttpInfo
     *
     * Get Enabled Features
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeFeaturesAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeFeatures'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuFeaturesModel';
        $request = $this->auEssEmployeeFeaturesRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeFeatures'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeFeaturesRequest($employee_id, string $contentType = self::contentTypes['auEssEmployeeFeatures'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeFeatures'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/security/features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetDashboard
     *
     * Get Dashboard
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDashboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuDashboardModel
     */
    public function auEssEmployeeGetDashboard($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDashboard'][0])
    {
        list($response) = $this->auEssEmployeeGetDashboardWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetDashboardWithHttpInfo
     *
     * Get Dashboard
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDashboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuDashboardModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetDashboardWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDashboard'][0])
    {
        $request = $this->auEssEmployeeGetDashboardRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuDashboardModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuDashboardModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuDashboardModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuDashboardModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuDashboardModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetDashboardAsync
     *
     * Get Dashboard
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetDashboardAsync($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDashboard'][0])
    {
        return $this->auEssEmployeeGetDashboardAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetDashboardAsyncWithHttpInfo
     *
     * Get Dashboard
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetDashboardAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDashboard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuDashboardModel';
        $request = $this->auEssEmployeeGetDashboardRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetDashboard'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetDashboardRequest($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDashboard'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetDashboard'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/dashboard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetDetails
     *
     * Get Details
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssEmployeeDetailsModel
     */
    public function auEssEmployeeGetDetails($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDetails'][0])
    {
        list($response) = $this->auEssEmployeeGetDetailsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetDetailsWithHttpInfo
     *
     * Get Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssEmployeeDetailsModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetDetailsWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDetails'][0])
    {
        $request = $this->auEssEmployeeGetDetailsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssEmployeeDetailsModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssEmployeeDetailsModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssEmployeeDetailsModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssEmployeeDetailsModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssEmployeeDetailsModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetDetailsAsync
     *
     * Get Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetDetailsAsync($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDetails'][0])
    {
        return $this->auEssEmployeeGetDetailsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetDetailsAsyncWithHttpInfo
     *
     * Get Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetDetailsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDetails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssEmployeeDetailsModel';
        $request = $this->auEssEmployeeGetDetailsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetDetails'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetDetailsRequest($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetDetails'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetDetails'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetEmergencyContacts
     *
     * Get Emergency Contacts
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel
     */
    public function auEssEmployeeGetEmergencyContacts($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEmergencyContacts'][0])
    {
        list($response) = $this->auEssEmployeeGetEmergencyContactsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetEmergencyContactsWithHttpInfo
     *
     * Get Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetEmergencyContactsWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEmergencyContacts'][0])
    {
        $request = $this->auEssEmployeeGetEmergencyContactsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetEmergencyContactsAsync
     *
     * Get Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetEmergencyContactsAsync($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEmergencyContacts'][0])
    {
        return $this->auEssEmployeeGetEmergencyContactsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetEmergencyContactsAsyncWithHttpInfo
     *
     * Get Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetEmergencyContactsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEmergencyContacts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
        $request = $this->auEssEmployeeGetEmergencyContactsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetEmergencyContacts'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetEmergencyContactsRequest($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEmergencyContacts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetEmergencyContacts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/emergencycontacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetEssDetails
     *
     * Get Personal Details
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEssDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel
     */
    public function auEssEmployeeGetEssDetails($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEssDetails'][0])
    {
        list($response) = $this->auEssEmployeeGetEssDetailsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetEssDetailsWithHttpInfo
     *
     * Get Personal Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEssDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetEssDetailsWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEssDetails'][0])
    {
        $request = $this->auEssEmployeeGetEssDetailsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetEssDetailsAsync
     *
     * Get Personal Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEssDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetEssDetailsAsync($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEssDetails'][0])
    {
        return $this->auEssEmployeeGetEssDetailsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetEssDetailsAsyncWithHttpInfo
     *
     * Get Personal Details
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEssDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetEssDetailsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEssDetails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel';
        $request = $this->auEssEmployeeGetEssDetailsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetEssDetails'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetEssDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetEssDetailsRequest($employee_id, string $contentType = self::contentTypes['auEssEmployeeGetEssDetails'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetEssDetails'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/personaldetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetPublicHolidays
     *
     * Get public holidays
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetPublicHolidays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PublicHolidayModel[]
     */
    public function auEssEmployeeGetPublicHolidays($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssEmployeeGetPublicHolidays'][0])
    {
        list($response) = $this->auEssEmployeeGetPublicHolidaysWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetPublicHolidaysWithHttpInfo
     *
     * Get public holidays
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetPublicHolidays'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PublicHolidayModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetPublicHolidaysWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssEmployeeGetPublicHolidays'][0])
    {
        $request = $this->auEssEmployeeGetPublicHolidaysRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PublicHolidayModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PublicHolidayModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PublicHolidayModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PublicHolidayModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PublicHolidayModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetPublicHolidaysAsync
     *
     * Get public holidays
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetPublicHolidays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetPublicHolidaysAsync($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssEmployeeGetPublicHolidays'][0])
    {
        return $this->auEssEmployeeGetPublicHolidaysAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetPublicHolidaysAsyncWithHttpInfo
     *
     * Get public holidays
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetPublicHolidays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetPublicHolidaysAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssEmployeeGetPublicHolidays'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PublicHolidayModel[]';
        $request = $this->auEssEmployeeGetPublicHolidaysRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetPublicHolidays'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetPublicHolidays'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetPublicHolidaysRequest($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssEmployeeGetPublicHolidays'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetPublicHolidays'
            );
        }

        // verify the required parameter 'filter_from_date' is set
        if ($filter_from_date === null || (is_array($filter_from_date) && count($filter_from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_from_date when calling auEssEmployeeGetPublicHolidays'
            );
        }

        // verify the required parameter 'filter_to_date' is set
        if ($filter_to_date === null || (is_array($filter_to_date) && count($filter_to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_to_date when calling auEssEmployeeGetPublicHolidays'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/publicHolidays';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeGetSatisfactionSurveys
     *
     * Get Satisfaction Survey Results
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $from_date from_date (optional)
     * @param  \DateTime $to_date to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetSatisfactionSurveys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssSatisfactionSurvey[]
     */
    public function auEssEmployeeGetSatisfactionSurveys($employee_id, $from_date = null, $to_date = null, string $contentType = self::contentTypes['auEssEmployeeGetSatisfactionSurveys'][0])
    {
        list($response) = $this->auEssEmployeeGetSatisfactionSurveysWithHttpInfo($employee_id, $from_date, $to_date, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeGetSatisfactionSurveysWithHttpInfo
     *
     * Get Satisfaction Survey Results
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $from_date (optional)
     * @param  \DateTime $to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetSatisfactionSurveys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssSatisfactionSurvey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeGetSatisfactionSurveysWithHttpInfo($employee_id, $from_date = null, $to_date = null, string $contentType = self::contentTypes['auEssEmployeeGetSatisfactionSurveys'][0])
    {
        $request = $this->auEssEmployeeGetSatisfactionSurveysRequest($employee_id, $from_date, $to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssSatisfactionSurvey[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssSatisfactionSurvey[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssSatisfactionSurvey[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssSatisfactionSurvey[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssSatisfactionSurvey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeGetSatisfactionSurveysAsync
     *
     * Get Satisfaction Survey Results
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $from_date (optional)
     * @param  \DateTime $to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetSatisfactionSurveys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetSatisfactionSurveysAsync($employee_id, $from_date = null, $to_date = null, string $contentType = self::contentTypes['auEssEmployeeGetSatisfactionSurveys'][0])
    {
        return $this->auEssEmployeeGetSatisfactionSurveysAsyncWithHttpInfo($employee_id, $from_date, $to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeGetSatisfactionSurveysAsyncWithHttpInfo
     *
     * Get Satisfaction Survey Results
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $from_date (optional)
     * @param  \DateTime $to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetSatisfactionSurveys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeGetSatisfactionSurveysAsyncWithHttpInfo($employee_id, $from_date = null, $to_date = null, string $contentType = self::contentTypes['auEssEmployeeGetSatisfactionSurveys'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssSatisfactionSurvey[]';
        $request = $this->auEssEmployeeGetSatisfactionSurveysRequest($employee_id, $from_date, $to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeGetSatisfactionSurveys'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $from_date (optional)
     * @param  \DateTime $to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeGetSatisfactionSurveys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeGetSatisfactionSurveysRequest($employee_id, $from_date = null, $to_date = null, string $contentType = self::contentTypes['auEssEmployeeGetSatisfactionSurveys'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeGetSatisfactionSurveys'
            );
        }




        $resourcePath = '/api/v2/ess/{employeeId}/satisfaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeSaveDetails
     *
     * Save Details
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeePartialEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuUnstructuredEmployeeModel
     */
    public function auEssEmployeeSaveDetails($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveDetails'][0])
    {
        list($response) = $this->auEssEmployeeSaveDetailsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeSaveDetailsWithHttpInfo
     *
     * Save Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeePartialEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuUnstructuredEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeSaveDetailsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveDetails'][0])
    {
        $request = $this->auEssEmployeeSaveDetailsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuUnstructuredEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuUnstructuredEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuUnstructuredEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuUnstructuredEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuUnstructuredEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeSaveDetailsAsync
     *
     * Save Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeePartialEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveDetailsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveDetails'][0])
    {
        return $this->auEssEmployeeSaveDetailsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeSaveDetailsAsyncWithHttpInfo
     *
     * Save Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeePartialEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveDetailsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveDetails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuUnstructuredEmployeeModel';
        $request = $this->auEssEmployeeSaveDetailsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeSaveDetails'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeePartialEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeSaveDetailsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveDetails'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeSaveDetails'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssEmployeeSaveDetails'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeSaveEmergencyContacts
     *
     * Save Emergency Contacts
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel
     */
    public function auEssEmployeeSaveEmergencyContacts($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveEmergencyContacts'][0])
    {
        list($response) = $this->auEssEmployeeSaveEmergencyContactsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeSaveEmergencyContactsWithHttpInfo
     *
     * Save Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeSaveEmergencyContactsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveEmergencyContacts'][0])
    {
        $request = $this->auEssEmployeeSaveEmergencyContactsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeSaveEmergencyContactsAsync
     *
     * Save Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveEmergencyContactsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveEmergencyContacts'][0])
    {
        return $this->auEssEmployeeSaveEmergencyContactsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeSaveEmergencyContactsAsyncWithHttpInfo
     *
     * Save Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveEmergencyContactsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveEmergencyContacts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
        $request = $this->auEssEmployeeSaveEmergencyContactsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeSaveEmergencyContacts'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeSaveEmergencyContactsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeSaveEmergencyContacts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeSaveEmergencyContacts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssEmployeeSaveEmergencyContacts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/emergencycontacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeSaveSatisfaction
     *
     * Submit Satisfaction Survey
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssSatisfactionSurvey $survey survey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveSatisfaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function auEssEmployeeSaveSatisfaction($employee_id, $survey, string $contentType = self::contentTypes['auEssEmployeeSaveSatisfaction'][0])
    {
        list($response) = $this->auEssEmployeeSaveSatisfactionWithHttpInfo($employee_id, $survey, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeSaveSatisfactionWithHttpInfo
     *
     * Submit Satisfaction Survey
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssSatisfactionSurvey $survey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveSatisfaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeSaveSatisfactionWithHttpInfo($employee_id, $survey, string $contentType = self::contentTypes['auEssEmployeeSaveSatisfaction'][0])
    {
        $request = $this->auEssEmployeeSaveSatisfactionRequest($employee_id, $survey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeSaveSatisfactionAsync
     *
     * Submit Satisfaction Survey
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssSatisfactionSurvey $survey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveSatisfaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveSatisfactionAsync($employee_id, $survey, string $contentType = self::contentTypes['auEssEmployeeSaveSatisfaction'][0])
    {
        return $this->auEssEmployeeSaveSatisfactionAsyncWithHttpInfo($employee_id, $survey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeSaveSatisfactionAsyncWithHttpInfo
     *
     * Submit Satisfaction Survey
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssSatisfactionSurvey $survey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveSatisfaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeSaveSatisfactionAsyncWithHttpInfo($employee_id, $survey, string $contentType = self::contentTypes['auEssEmployeeSaveSatisfaction'][0])
    {
        $returnType = 'string';
        $request = $this->auEssEmployeeSaveSatisfactionRequest($employee_id, $survey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeSaveSatisfaction'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssSatisfactionSurvey $survey (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeSaveSatisfaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeSaveSatisfactionRequest($employee_id, $survey, string $contentType = self::contentTypes['auEssEmployeeSaveSatisfaction'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeSaveSatisfaction'
            );
        }

        // verify the required parameter 'survey' is set
        if ($survey === null || (is_array($survey) && count($survey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $survey when calling auEssEmployeeSaveSatisfaction'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/satisfaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($survey)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($survey));
            } else {
                $httpBody = $survey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeUpdateDetails
     *
     * Update Personal Details
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssEmployeeDetailsEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel
     */
    public function auEssEmployeeUpdateDetails($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateDetails'][0])
    {
        list($response) = $this->auEssEmployeeUpdateDetailsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeUpdateDetailsWithHttpInfo
     *
     * Update Personal Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssEmployeeDetailsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeUpdateDetailsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateDetails'][0])
    {
        $request = $this->auEssEmployeeUpdateDetailsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeUpdateDetailsAsync
     *
     * Update Personal Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssEmployeeDetailsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeUpdateDetailsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateDetails'][0])
    {
        return $this->auEssEmployeeUpdateDetailsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeUpdateDetailsAsyncWithHttpInfo
     *
     * Update Personal Details
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssEmployeeDetailsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeUpdateDetailsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateDetails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssEmployeeDetailsViewModel';
        $request = $this->auEssEmployeeUpdateDetailsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeUpdateDetails'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuEssEmployeeDetailsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeUpdateDetailsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateDetails'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeUpdateDetails'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssEmployeeUpdateDetails'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/personaldetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssEmployeeUpdateEmergencyContacts
     *
     * Update Emergency Contacts
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel
     */
    public function auEssEmployeeUpdateEmergencyContacts($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateEmergencyContacts'][0])
    {
        list($response) = $this->auEssEmployeeUpdateEmergencyContactsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssEmployeeUpdateEmergencyContactsWithHttpInfo
     *
     * Update Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssEmployeeUpdateEmergencyContactsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateEmergencyContacts'][0])
    {
        $request = $this->auEssEmployeeUpdateEmergencyContactsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssEmployeeUpdateEmergencyContactsAsync
     *
     * Update Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeUpdateEmergencyContactsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateEmergencyContacts'][0])
    {
        return $this->auEssEmployeeUpdateEmergencyContactsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssEmployeeUpdateEmergencyContactsAsyncWithHttpInfo
     *
     * Update Emergency Contacts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssEmployeeUpdateEmergencyContactsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateEmergencyContacts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel';
        $request = $this->auEssEmployeeUpdateEmergencyContactsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssEmployeeUpdateEmergencyContacts'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EmployeeEmergencyContactsEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssEmployeeUpdateEmergencyContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssEmployeeUpdateEmergencyContactsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssEmployeeUpdateEmergencyContacts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssEmployeeUpdateEmergencyContacts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssEmployeeUpdateEmergencyContacts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/emergencycontacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupAddresses
     *
     * @param  int $suburb_id suburb_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupAddresses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssLookupAddresses($suburb_id, $employee_id, string $contentType = self::contentTypes['auEssLookupAddresses'][0])
    {
        $this->auEssLookupAddressesWithHttpInfo($suburb_id, $employee_id, $contentType);
    }

    /**
     * Operation auEssLookupAddressesWithHttpInfo
     *
     * @param  int $suburb_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupAddresses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupAddressesWithHttpInfo($suburb_id, $employee_id, string $contentType = self::contentTypes['auEssLookupAddresses'][0])
    {
        $request = $this->auEssLookupAddressesRequest($suburb_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupAddressesAsync
     *
     * @param  int $suburb_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupAddressesAsync($suburb_id, $employee_id, string $contentType = self::contentTypes['auEssLookupAddresses'][0])
    {
        return $this->auEssLookupAddressesAsyncWithHttpInfo($suburb_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupAddressesAsyncWithHttpInfo
     *
     * @param  int $suburb_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupAddressesAsyncWithHttpInfo($suburb_id, $employee_id, string $contentType = self::contentTypes['auEssLookupAddresses'][0])
    {
        $returnType = '';
        $request = $this->auEssLookupAddressesRequest($suburb_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupAddresses'
     *
     * @param  int $suburb_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupAddressesRequest($suburb_id, $employee_id, string $contentType = self::contentTypes['auEssLookupAddresses'][0])
    {

        // verify the required parameter 'suburb_id' is set
        if ($suburb_id === null || (is_array($suburb_id) && count($suburb_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suburb_id when calling auEssLookupAddresses'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupAddresses'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/lookup/addresses/{suburbId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($suburb_id !== null) {
            $resourcePath = str_replace(
                '{' . 'suburbId' . '}',
                ObjectSerializer::toPathValue($suburb_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupLocation
     *
     * Get Locations
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupLocation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function auEssLookupLocation($employee_id, string $contentType = self::contentTypes['auEssLookupLocation'][0])
    {
        list($response) = $this->auEssLookupLocationWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupLocationWithHttpInfo
     *
     * Get Locations
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupLocation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupLocationWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupLocation'][0])
    {
        $request = $this->auEssLookupLocationRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupLocationAsync
     *
     * Get Locations
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupLocationAsync($employee_id, string $contentType = self::contentTypes['auEssLookupLocation'][0])
    {
        return $this->auEssLookupLocationAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupLocationAsyncWithHttpInfo
     *
     * Get Locations
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupLocationAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupLocation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->auEssLookupLocationRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupLocation'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupLocationRequest($employee_id, string $contentType = self::contentTypes['auEssLookupLocation'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupLocation'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/lookup/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupShiftCondition
     *
     * Get Shift Conditions
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupShiftCondition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuWorkTypeModel[]
     */
    public function auEssLookupShiftCondition($employee_id, string $contentType = self::contentTypes['auEssLookupShiftCondition'][0])
    {
        list($response) = $this->auEssLookupShiftConditionWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupShiftConditionWithHttpInfo
     *
     * Get Shift Conditions
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupShiftCondition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuWorkTypeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupShiftConditionWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupShiftCondition'][0])
    {
        $request = $this->auEssLookupShiftConditionRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuWorkTypeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuWorkTypeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuWorkTypeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuWorkTypeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuWorkTypeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupShiftConditionAsync
     *
     * Get Shift Conditions
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupShiftCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupShiftConditionAsync($employee_id, string $contentType = self::contentTypes['auEssLookupShiftCondition'][0])
    {
        return $this->auEssLookupShiftConditionAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupShiftConditionAsyncWithHttpInfo
     *
     * Get Shift Conditions
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupShiftCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupShiftConditionAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupShiftCondition'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuWorkTypeModel[]';
        $request = $this->auEssLookupShiftConditionRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupShiftCondition'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupShiftCondition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupShiftConditionRequest($employee_id, string $contentType = self::contentTypes['auEssLookupShiftCondition'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupShiftCondition'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/lookup/shiftcondition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupSuburb
     *
     * Get Suburb
     *
     * @param  string $suburb suburb (required)
     * @param  string $state state (required)
     * @param  string $post_code post_code (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $country_id country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuburbResult
     */
    public function auEssLookupSuburb($suburb, $state, $post_code, $employee_id, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburb'][0])
    {
        list($response) = $this->auEssLookupSuburbWithHttpInfo($suburb, $state, $post_code, $employee_id, $country_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupSuburbWithHttpInfo
     *
     * Get Suburb
     *
     * @param  string $suburb (required)
     * @param  string $state (required)
     * @param  string $post_code (required)
     * @param  string $employee_id (required)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuburbResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupSuburbWithHttpInfo($suburb, $state, $post_code, $employee_id, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburb'][0])
    {
        $request = $this->auEssLookupSuburbRequest($suburb, $state, $post_code, $employee_id, $country_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuburbResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuburbResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuburbResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuburbResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuburbResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupSuburbAsync
     *
     * Get Suburb
     *
     * @param  string $suburb (required)
     * @param  string $state (required)
     * @param  string $post_code (required)
     * @param  string $employee_id (required)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupSuburbAsync($suburb, $state, $post_code, $employee_id, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburb'][0])
    {
        return $this->auEssLookupSuburbAsyncWithHttpInfo($suburb, $state, $post_code, $employee_id, $country_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupSuburbAsyncWithHttpInfo
     *
     * Get Suburb
     *
     * @param  string $suburb (required)
     * @param  string $state (required)
     * @param  string $post_code (required)
     * @param  string $employee_id (required)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupSuburbAsyncWithHttpInfo($suburb, $state, $post_code, $employee_id, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburb'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuburbResult';
        $request = $this->auEssLookupSuburbRequest($suburb, $state, $post_code, $employee_id, $country_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupSuburb'
     *
     * @param  string $suburb (required)
     * @param  string $state (required)
     * @param  string $post_code (required)
     * @param  string $employee_id (required)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupSuburbRequest($suburb, $state, $post_code, $employee_id, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburb'][0])
    {

        // verify the required parameter 'suburb' is set
        if ($suburb === null || (is_array($suburb) && count($suburb) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $suburb when calling auEssLookupSuburb'
            );
        }

        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling auEssLookupSuburb'
            );
        }

        // verify the required parameter 'post_code' is set
        if ($post_code === null || (is_array($post_code) && count($post_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_code when calling auEssLookupSuburb'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupSuburb'
            );
        }



        $resourcePath = '/api/v2/ess/{employeeId}/lookup/suburb';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $suburb,
            'suburb', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_code,
            'postCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_id,
            'countryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupSuburbs
     *
     * Search Suburbs
     *
     * @param  string $term term (required)
     * @param  string $employee_id employee_id (required)
     * @param  int $page_num page_num (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 20)
     * @param  string $country_id country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburbs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PagedResultModelOfSuburbModel
     */
    public function auEssLookupSuburbs($term, $employee_id, $page_num = 1, $page_size = 20, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburbs'][0])
    {
        list($response) = $this->auEssLookupSuburbsWithHttpInfo($term, $employee_id, $page_num, $page_size, $country_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupSuburbsWithHttpInfo
     *
     * Search Suburbs
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  int $page_num (optional, default to 1)
     * @param  int $page_size (optional, default to 20)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburbs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PagedResultModelOfSuburbModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupSuburbsWithHttpInfo($term, $employee_id, $page_num = 1, $page_size = 20, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburbs'][0])
    {
        $request = $this->auEssLookupSuburbsRequest($term, $employee_id, $page_num, $page_size, $country_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PagedResultModelOfSuburbModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PagedResultModelOfSuburbModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PagedResultModelOfSuburbModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PagedResultModelOfSuburbModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PagedResultModelOfSuburbModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupSuburbsAsync
     *
     * Search Suburbs
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  int $page_num (optional, default to 1)
     * @param  int $page_size (optional, default to 20)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburbs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupSuburbsAsync($term, $employee_id, $page_num = 1, $page_size = 20, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburbs'][0])
    {
        return $this->auEssLookupSuburbsAsyncWithHttpInfo($term, $employee_id, $page_num, $page_size, $country_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupSuburbsAsyncWithHttpInfo
     *
     * Search Suburbs
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  int $page_num (optional, default to 1)
     * @param  int $page_size (optional, default to 20)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburbs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupSuburbsAsyncWithHttpInfo($term, $employee_id, $page_num = 1, $page_size = 20, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburbs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PagedResultModelOfSuburbModel';
        $request = $this->auEssLookupSuburbsRequest($term, $employee_id, $page_num, $page_size, $country_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupSuburbs'
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  int $page_num (optional, default to 1)
     * @param  int $page_size (optional, default to 20)
     * @param  string $country_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupSuburbs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupSuburbsRequest($term, $employee_id, $page_num = 1, $page_size = 20, $country_id = null, string $contentType = self::contentTypes['auEssLookupSuburbs'][0])
    {

        // verify the required parameter 'term' is set
        if ($term === null || (is_array($term) && count($term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term when calling auEssLookupSuburbs'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupSuburbs'
            );
        }





        $resourcePath = '/api/v2/ess/{employeeId}/lookup/suburbs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term,
            'term', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_num,
            'pageNum', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_id,
            'countryId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupTitle
     *
     * Get Titles
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupTitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TitleViewModel[]
     */
    public function auEssLookupTitle($employee_id, string $contentType = self::contentTypes['auEssLookupTitle'][0])
    {
        list($response) = $this->auEssLookupTitleWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupTitleWithHttpInfo
     *
     * Get Titles
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupTitle'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TitleViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupTitleWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupTitle'][0])
    {
        $request = $this->auEssLookupTitleRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TitleViewModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TitleViewModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TitleViewModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TitleViewModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TitleViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupTitleAsync
     *
     * Get Titles
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupTitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupTitleAsync($employee_id, string $contentType = self::contentTypes['auEssLookupTitle'][0])
    {
        return $this->auEssLookupTitleAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupTitleAsyncWithHttpInfo
     *
     * Get Titles
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupTitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupTitleAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupTitle'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TitleViewModel[]';
        $request = $this->auEssLookupTitleRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupTitle'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupTitle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupTitleRequest($employee_id, string $contentType = self::contentTypes['auEssLookupTitle'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupTitle'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/lookup/title';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssLookupWorkType
     *
     * Get Work Types
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupWorkType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuWorkTypeModel[]
     */
    public function auEssLookupWorkType($employee_id, string $contentType = self::contentTypes['auEssLookupWorkType'][0])
    {
        list($response) = $this->auEssLookupWorkTypeWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssLookupWorkTypeWithHttpInfo
     *
     * Get Work Types
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupWorkType'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuWorkTypeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssLookupWorkTypeWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupWorkType'][0])
    {
        $request = $this->auEssLookupWorkTypeRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuWorkTypeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuWorkTypeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuWorkTypeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuWorkTypeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuWorkTypeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssLookupWorkTypeAsync
     *
     * Get Work Types
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupWorkType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupWorkTypeAsync($employee_id, string $contentType = self::contentTypes['auEssLookupWorkType'][0])
    {
        return $this->auEssLookupWorkTypeAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssLookupWorkTypeAsyncWithHttpInfo
     *
     * Get Work Types
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupWorkType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssLookupWorkTypeAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssLookupWorkType'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuWorkTypeModel[]';
        $request = $this->auEssLookupWorkTypeRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssLookupWorkType'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssLookupWorkType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssLookupWorkTypeRequest($employee_id, string $contentType = self::contentTypes['auEssLookupWorkType'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssLookupWorkType'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/lookup/worktype';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSelfManagedSuperFundGet
     *
     * Get ESS Self Managed Super Fund by id
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SelfManagedSuperFundModel
     */
    public function auEssSelfManagedSuperFundGet($id, $employee_id, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGet'][0])
    {
        list($response) = $this->auEssSelfManagedSuperFundGetWithHttpInfo($id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssSelfManagedSuperFundGetWithHttpInfo
     *
     * Get ESS Self Managed Super Fund by id
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SelfManagedSuperFundModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSelfManagedSuperFundGetWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGet'][0])
    {
        $request = $this->auEssSelfManagedSuperFundGetRequest($id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SelfManagedSuperFundModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SelfManagedSuperFundModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SelfManagedSuperFundModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SelfManagedSuperFundModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SelfManagedSuperFundModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSelfManagedSuperFundGetAsync
     *
     * Get ESS Self Managed Super Fund by id
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundGetAsync($id, $employee_id, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGet'][0])
    {
        return $this->auEssSelfManagedSuperFundGetAsyncWithHttpInfo($id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSelfManagedSuperFundGetAsyncWithHttpInfo
     *
     * Get ESS Self Managed Super Fund by id
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundGetAsyncWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SelfManagedSuperFundModel';
        $request = $this->auEssSelfManagedSuperFundGetRequest($id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSelfManagedSuperFundGet'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSelfManagedSuperFundGetRequest($id, $employee_id, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auEssSelfManagedSuperFundGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSelfManagedSuperFundGet'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/selfmanagedsuperfund/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSelfManagedSuperFundGetFunds
     *
     * List Self Managed Super Funds
     *
     * @param  string $employee_id employee_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGetFunds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SelfManagedSuperFundModel[]
     */
    public function auEssSelfManagedSuperFundGetFunds($employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGetFunds'][0])
    {
        list($response) = $this->auEssSelfManagedSuperFundGetFundsWithHttpInfo($employee_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation auEssSelfManagedSuperFundGetFundsWithHttpInfo
     *
     * List Self Managed Super Funds
     *
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGetFunds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SelfManagedSuperFundModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSelfManagedSuperFundGetFundsWithHttpInfo($employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGetFunds'][0])
    {
        $request = $this->auEssSelfManagedSuperFundGetFundsRequest($employee_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SelfManagedSuperFundModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SelfManagedSuperFundModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SelfManagedSuperFundModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SelfManagedSuperFundModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SelfManagedSuperFundModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSelfManagedSuperFundGetFundsAsync
     *
     * List Self Managed Super Funds
     *
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGetFunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundGetFundsAsync($employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGetFunds'][0])
    {
        return $this->auEssSelfManagedSuperFundGetFundsAsyncWithHttpInfo($employee_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSelfManagedSuperFundGetFundsAsyncWithHttpInfo
     *
     * List Self Managed Super Funds
     *
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGetFunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundGetFundsAsyncWithHttpInfo($employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGetFunds'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SelfManagedSuperFundModel[]';
        $request = $this->auEssSelfManagedSuperFundGetFundsRequest($employee_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSelfManagedSuperFundGetFunds'
     *
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundGetFunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSelfManagedSuperFundGetFundsRequest($employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['auEssSelfManagedSuperFundGetFunds'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSelfManagedSuperFundGetFunds'
            );
        }







        $resourcePath = '/api/v2/ess/{employeeId}/selfmanagedsuperfund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSelfManagedSuperFundPost
     *
     * Create ESS Self Managed Super Fund
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssSelfManagedSuperFundPost($employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPost'][0])
    {
        $this->auEssSelfManagedSuperFundPostWithHttpInfo($employee_id, $fund, $contentType);
    }

    /**
     * Operation auEssSelfManagedSuperFundPostWithHttpInfo
     *
     * Create ESS Self Managed Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSelfManagedSuperFundPostWithHttpInfo($employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPost'][0])
    {
        $request = $this->auEssSelfManagedSuperFundPostRequest($employee_id, $fund, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSelfManagedSuperFundPostAsync
     *
     * Create ESS Self Managed Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundPostAsync($employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPost'][0])
    {
        return $this->auEssSelfManagedSuperFundPostAsyncWithHttpInfo($employee_id, $fund, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSelfManagedSuperFundPostAsyncWithHttpInfo
     *
     * Create ESS Self Managed Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundPostAsyncWithHttpInfo($employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPost'][0])
    {
        $returnType = '';
        $request = $this->auEssSelfManagedSuperFundPostRequest($employee_id, $fund, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSelfManagedSuperFundPost'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSelfManagedSuperFundPostRequest($employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPost'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSelfManagedSuperFundPost'
            );
        }

        // verify the required parameter 'fund' is set
        if ($fund === null || (is_array($fund) && count($fund) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund when calling auEssSelfManagedSuperFundPost'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/selfmanagedsuperfund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fund)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fund));
            } else {
                $httpBody = $fund;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSelfManagedSuperFundPut
     *
     * Update ESS Self Managed Super Fund
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssSelfManagedSuperFundPut($id, $employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPut'][0])
    {
        $this->auEssSelfManagedSuperFundPutWithHttpInfo($id, $employee_id, $fund, $contentType);
    }

    /**
     * Operation auEssSelfManagedSuperFundPutWithHttpInfo
     *
     * Update ESS Self Managed Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSelfManagedSuperFundPutWithHttpInfo($id, $employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPut'][0])
    {
        $request = $this->auEssSelfManagedSuperFundPutRequest($id, $employee_id, $fund, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSelfManagedSuperFundPutAsync
     *
     * Update ESS Self Managed Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundPutAsync($id, $employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPut'][0])
    {
        return $this->auEssSelfManagedSuperFundPutAsyncWithHttpInfo($id, $employee_id, $fund, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSelfManagedSuperFundPutAsyncWithHttpInfo
     *
     * Update ESS Self Managed Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSelfManagedSuperFundPutAsyncWithHttpInfo($id, $employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPut'][0])
    {
        $returnType = '';
        $request = $this->auEssSelfManagedSuperFundPutRequest($id, $employee_id, $fund, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSelfManagedSuperFundPut'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SelfManagedSuperFundModel $fund (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSelfManagedSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSelfManagedSuperFundPutRequest($id, $employee_id, $fund, string $contentType = self::contentTypes['auEssSelfManagedSuperFundPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auEssSelfManagedSuperFundPut'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSelfManagedSuperFundPut'
            );
        }

        // verify the required parameter 'fund' is set
        if ($fund === null || (is_array($fund) && count($fund) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund when calling auEssSelfManagedSuperFundPut'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/selfmanagedsuperfund/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fund)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fund));
            } else {
                $httpBody = $fund;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftAcceptRosterShift
     *
     * Accept Roster Shift
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel
     */
    public function auEssShiftAcceptRosterShift($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShift'][0])
    {
        list($response) = $this->auEssShiftAcceptRosterShiftWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftAcceptRosterShiftWithHttpInfo
     *
     * Accept Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftAcceptRosterShiftWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShift'][0])
    {
        $request = $this->auEssShiftAcceptRosterShiftRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftAcceptRosterShiftAsync
     *
     * Accept Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShift'][0])
    {
        return $this->auEssShiftAcceptRosterShiftAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftAsyncWithHttpInfo
     *
     * Accept Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuAcceptRosterShiftResponseModel';
        $request = $this->auEssShiftAcceptRosterShiftRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftAcceptRosterShift'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftAcceptRosterShiftRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShift'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftAcceptRosterShift'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftAcceptRosterShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwap
     *
     * Accept Shift Swap
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftActionResponse
     */
    public function auEssShiftAcceptRosterShiftSwap($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwap'][0])
    {
        list($response) = $this->auEssShiftAcceptRosterShiftSwapWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapWithHttpInfo
     *
     * Accept Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftAcceptRosterShiftSwapWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwap'][0])
    {
        $request = $this->auEssShiftAcceptRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapAsync
     *
     * Accept Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftSwapAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwap'][0])
    {
        return $this->auEssShiftAcceptRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapAsyncWithHttpInfo
     *
     * Accept Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
        $request = $this->auEssShiftAcceptRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftAcceptRosterShiftSwap'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftAcceptRosterShiftSwapRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwap'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftAcceptRosterShiftSwap'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftAcceptRosterShiftSwap'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/swap/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwaps
     *
     * Bulk Accept Roster Shift Swaps
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse
     */
    public function auEssShiftAcceptRosterShiftSwaps($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwaps'][0])
    {
        list($response) = $this->auEssShiftAcceptRosterShiftSwapsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapsWithHttpInfo
     *
     * Bulk Accept Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftAcceptRosterShiftSwapsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwaps'][0])
    {
        $request = $this->auEssShiftAcceptRosterShiftSwapsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapsAsync
     *
     * Bulk Accept Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftSwapsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwaps'][0])
    {
        return $this->auEssShiftAcceptRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftSwapsAsyncWithHttpInfo
     *
     * Bulk Accept Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwaps'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
        $request = $this->auEssShiftAcceptRosterShiftSwapsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftAcceptRosterShiftSwaps'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftAcceptRosterShiftSwapsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShiftSwaps'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftAcceptRosterShiftSwaps'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftAcceptRosterShiftSwaps'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/swap/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftAcceptRosterShifts
     *
     * Bulk Accept Roster Shifts
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkAcceptRosterShiftsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel
     */
    public function auEssShiftAcceptRosterShifts($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShifts'][0])
    {
        list($response) = $this->auEssShiftAcceptRosterShiftsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftAcceptRosterShiftsWithHttpInfo
     *
     * Bulk Accept Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkAcceptRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftAcceptRosterShiftsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShifts'][0])
    {
        $request = $this->auEssShiftAcceptRosterShiftsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftAcceptRosterShiftsAsync
     *
     * Bulk Accept Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkAcceptRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShifts'][0])
    {
        return $this->auEssShiftAcceptRosterShiftsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftAcceptRosterShiftsAsyncWithHttpInfo
     *
     * Bulk Accept Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkAcceptRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftAcceptRosterShiftsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuAcceptRosterShiftsResponseModel';
        $request = $this->auEssShiftAcceptRosterShiftsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftAcceptRosterShifts'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkAcceptRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftAcceptRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftAcceptRosterShiftsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftAcceptRosterShifts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftAcceptRosterShifts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftAcceptRosterShifts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwap
     *
     * Cancel Shift Swap
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftActionResponse
     */
    public function auEssShiftCancelRosterShiftSwap($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwap'][0])
    {
        list($response) = $this->auEssShiftCancelRosterShiftSwapWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapWithHttpInfo
     *
     * Cancel Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftCancelRosterShiftSwapWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwap'][0])
    {
        $request = $this->auEssShiftCancelRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapAsync
     *
     * Cancel Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftCancelRosterShiftSwapAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwap'][0])
    {
        return $this->auEssShiftCancelRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapAsyncWithHttpInfo
     *
     * Cancel Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftCancelRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
        $request = $this->auEssShiftCancelRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftCancelRosterShiftSwap'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftCancelRosterShiftSwapRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwap'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftCancelRosterShiftSwap'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftCancelRosterShiftSwap'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/swap/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwaps
     *
     * Bulk Cancel Roster Shift Swaps
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse
     */
    public function auEssShiftCancelRosterShiftSwaps($employee_id, $model, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwaps'][0])
    {
        list($response) = $this->auEssShiftCancelRosterShiftSwapsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapsWithHttpInfo
     *
     * Bulk Cancel Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftCancelRosterShiftSwapsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwaps'][0])
    {
        $request = $this->auEssShiftCancelRosterShiftSwapsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapsAsync
     *
     * Bulk Cancel Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftCancelRosterShiftSwapsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwaps'][0])
    {
        return $this->auEssShiftCancelRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftCancelRosterShiftSwapsAsyncWithHttpInfo
     *
     * Bulk Cancel Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftCancelRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwaps'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
        $request = $this->auEssShiftCancelRosterShiftSwapsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftCancelRosterShiftSwaps'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftCancelRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftCancelRosterShiftSwapsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftCancelRosterShiftSwaps'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftCancelRosterShiftSwaps'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftCancelRosterShiftSwaps'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/swap/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftDeclineRosterShift
     *
     * Decline Roster Shift
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssDeclineRosterShiftModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssRosterShiftCountModel
     */
    public function auEssShiftDeclineRosterShift($shift_id, $employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShift'][0])
    {
        list($response) = $this->auEssShiftDeclineRosterShiftWithHttpInfo($shift_id, $employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftDeclineRosterShiftWithHttpInfo
     *
     * Decline Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssDeclineRosterShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssRosterShiftCountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftDeclineRosterShiftWithHttpInfo($shift_id, $employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShift'][0])
    {
        $request = $this->auEssShiftDeclineRosterShiftRequest($shift_id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssRosterShiftCountModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssRosterShiftCountModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssRosterShiftCountModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssRosterShiftCountModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssRosterShiftCountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftDeclineRosterShiftAsync
     *
     * Decline Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssDeclineRosterShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftAsync($shift_id, $employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShift'][0])
    {
        return $this->auEssShiftDeclineRosterShiftAsyncWithHttpInfo($shift_id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftAsyncWithHttpInfo
     *
     * Decline Roster Shift
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssDeclineRosterShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftAsyncWithHttpInfo($shift_id, $employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssRosterShiftCountModel';
        $request = $this->auEssShiftDeclineRosterShiftRequest($shift_id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftDeclineRosterShift'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssDeclineRosterShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftDeclineRosterShiftRequest($shift_id, $employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShift'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftDeclineRosterShift'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftDeclineRosterShift'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftDeclineRosterShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwap
     *
     * Decline Shift Swap
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftActionResponse
     */
    public function auEssShiftDeclineRosterShiftSwap($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwap'][0])
    {
        list($response) = $this->auEssShiftDeclineRosterShiftSwapWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapWithHttpInfo
     *
     * Decline Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftDeclineRosterShiftSwapWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwap'][0])
    {
        $request = $this->auEssShiftDeclineRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapAsync
     *
     * Decline Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftSwapAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwap'][0])
    {
        return $this->auEssShiftDeclineRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapAsyncWithHttpInfo
     *
     * Decline Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
        $request = $this->auEssShiftDeclineRosterShiftSwapRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftDeclineRosterShiftSwap'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftDeclineRosterShiftSwapRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwap'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftDeclineRosterShiftSwap'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftDeclineRosterShiftSwap'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/swap/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwaps
     *
     * Bulk Decline Roster Shift Swaps
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse
     */
    public function auEssShiftDeclineRosterShiftSwaps($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwaps'][0])
    {
        list($response) = $this->auEssShiftDeclineRosterShiftSwapsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapsWithHttpInfo
     *
     * Bulk Decline Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftDeclineRosterShiftSwapsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwaps'][0])
    {
        $request = $this->auEssShiftDeclineRosterShiftSwapsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapsAsync
     *
     * Bulk Decline Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftSwapsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwaps'][0])
    {
        return $this->auEssShiftDeclineRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftSwapsAsyncWithHttpInfo
     *
     * Bulk Decline Roster Shift Swaps
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftSwapsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwaps'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssBulkRosterShiftActionResponse';
        $request = $this->auEssShiftDeclineRosterShiftSwapsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftDeclineRosterShiftSwaps'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkRosterShiftSwapModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShiftSwaps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftDeclineRosterShiftSwapsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShiftSwaps'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftDeclineRosterShiftSwaps'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftDeclineRosterShiftSwaps'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/swap/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftDeclineRosterShifts
     *
     * Bulk Decline Roster Shifts
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkDeclineRosterShiftsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssRosterShiftCountModel
     */
    public function auEssShiftDeclineRosterShifts($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShifts'][0])
    {
        list($response) = $this->auEssShiftDeclineRosterShiftsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftDeclineRosterShiftsWithHttpInfo
     *
     * Bulk Decline Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkDeclineRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssRosterShiftCountModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftDeclineRosterShiftsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShifts'][0])
    {
        $request = $this->auEssShiftDeclineRosterShiftsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssRosterShiftCountModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssRosterShiftCountModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssRosterShiftCountModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssRosterShiftCountModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssRosterShiftCountModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftDeclineRosterShiftsAsync
     *
     * Bulk Decline Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkDeclineRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShifts'][0])
    {
        return $this->auEssShiftDeclineRosterShiftsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftDeclineRosterShiftsAsyncWithHttpInfo
     *
     * Bulk Decline Roster Shifts
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkDeclineRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftDeclineRosterShiftsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssRosterShiftCountModel';
        $request = $this->auEssShiftDeclineRosterShiftsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftDeclineRosterShifts'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssBulkDeclineRosterShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftDeclineRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftDeclineRosterShiftsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftDeclineRosterShifts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftDeclineRosterShifts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftDeclineRosterShifts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftEmployeesEligibleForShiftSwap
     *
     * Employees Eligible For Shift Swap
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssShiftSwapCandidate[]
     */
    public function auEssShiftEmployeesEligibleForShiftSwap($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'][0])
    {
        list($response) = $this->auEssShiftEmployeesEligibleForShiftSwapWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftEmployeesEligibleForShiftSwapWithHttpInfo
     *
     * Employees Eligible For Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssShiftSwapCandidate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftEmployeesEligibleForShiftSwapWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'][0])
    {
        $request = $this->auEssShiftEmployeesEligibleForShiftSwapRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssShiftSwapCandidate[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssShiftSwapCandidate[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssShiftSwapCandidate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssShiftSwapCandidate[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssShiftSwapCandidate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftEmployeesEligibleForShiftSwapAsync
     *
     * Employees Eligible For Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftEmployeesEligibleForShiftSwapAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'][0])
    {
        return $this->auEssShiftEmployeesEligibleForShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftEmployeesEligibleForShiftSwapAsyncWithHttpInfo
     *
     * Employees Eligible For Shift Swap
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftEmployeesEligibleForShiftSwapAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssShiftSwapCandidate[]';
        $request = $this->auEssShiftEmployeesEligibleForShiftSwapRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftEmployeesEligibleForShiftSwap'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftEmployeesEligibleForShiftSwapRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftEmployeesEligibleForShiftSwap'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftEmployeesEligibleForShiftSwap'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftEmployeesEligibleForShiftSwap'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}/swap/candidates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftGetShift
     *
     * Get Roster Shift by ID
     *
     * @param  int $shift_id shift_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel
     */
    public function auEssShiftGetShift($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShift'][0])
    {
        list($response) = $this->auEssShiftGetShiftWithHttpInfo($shift_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftGetShiftWithHttpInfo
     *
     * Get Roster Shift by ID
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftGetShiftWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShift'][0])
    {
        $request = $this->auEssShiftGetShiftRequest($shift_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftGetShiftAsync
     *
     * Get Roster Shift by ID
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftGetShiftAsync($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShift'][0])
    {
        return $this->auEssShiftGetShiftAsyncWithHttpInfo($shift_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftGetShiftAsyncWithHttpInfo
     *
     * Get Roster Shift by ID
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftGetShiftAsyncWithHttpInfo($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel';
        $request = $this->auEssShiftGetShiftRequest($shift_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftGetShift'
     *
     * @param  int $shift_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftGetShiftRequest($shift_id, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShift'][0])
    {

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssShiftGetShift'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftGetShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/{shiftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftGetShifts
     *
     * List Roster Shifts
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel[]
     */
    public function auEssShiftGetShifts($from_date, $to_date, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShifts'][0])
    {
        list($response) = $this->auEssShiftGetShiftsWithHttpInfo($from_date, $to_date, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftGetShiftsWithHttpInfo
     *
     * List Roster Shifts
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftGetShiftsWithHttpInfo($from_date, $to_date, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShifts'][0])
    {
        $request = $this->auEssShiftGetShiftsRequest($from_date, $to_date, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftGetShiftsAsync
     *
     * List Roster Shifts
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftGetShiftsAsync($from_date, $to_date, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShifts'][0])
    {
        return $this->auEssShiftGetShiftsAsyncWithHttpInfo($from_date, $to_date, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftGetShiftsAsyncWithHttpInfo
     *
     * List Roster Shifts
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftGetShiftsAsyncWithHttpInfo($from_date, $to_date, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auEssShiftGetShiftsRequest($from_date, $to_date, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftGetShifts'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftGetShiftsRequest($from_date, $to_date, $employee_id, string $contentType = self::contentTypes['auEssShiftGetShifts'][0])
    {

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling auEssShiftGetShifts'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling auEssShiftGetShifts'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftGetShifts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftMatchingClockOffRosterShift
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  \DateTime $local_time local_time (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auEssShiftMatchingClockOffRosterShift($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOffRosterShift'][0])
    {
        list($response) = $this->auEssShiftMatchingClockOffRosterShiftWithHttpInfo($local_time, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftMatchingClockOffRosterShiftWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftMatchingClockOffRosterShiftWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOffRosterShift'][0])
    {
        $request = $this->auEssShiftMatchingClockOffRosterShiftRequest($local_time, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftMatchingClockOffRosterShiftAsync
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftMatchingClockOffRosterShiftAsync($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOffRosterShift'][0])
    {
        return $this->auEssShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($local_time, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftMatchingClockOffRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOffRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auEssShiftMatchingClockOffRosterShiftRequest($local_time, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftMatchingClockOffRosterShift'
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftMatchingClockOffRosterShiftRequest($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOffRosterShift'][0])
    {

        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auEssShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftMatchingClockOffRosterShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/matchingclockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $local_time,
            'localTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftMatchingClockOnRosterShift
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  \DateTime $local_time local_time (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auEssShiftMatchingClockOnRosterShift($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOnRosterShift'][0])
    {
        list($response) = $this->auEssShiftMatchingClockOnRosterShiftWithHttpInfo($local_time, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftMatchingClockOnRosterShiftWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftMatchingClockOnRosterShiftWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOnRosterShift'][0])
    {
        $request = $this->auEssShiftMatchingClockOnRosterShiftRequest($local_time, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftMatchingClockOnRosterShiftAsync
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftMatchingClockOnRosterShiftAsync($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOnRosterShift'][0])
    {
        return $this->auEssShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($local_time, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftMatchingClockOnRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOnRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auEssShiftMatchingClockOnRosterShiftRequest($local_time, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftMatchingClockOnRosterShift'
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftMatchingClockOnRosterShiftRequest($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftMatchingClockOnRosterShift'][0])
    {

        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auEssShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftMatchingClockOnRosterShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/matchingclockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $local_time,
            'localTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftNearbyRosterShifts
     *
     * Find Nearby Roster Shifts
     *
     * @param  \DateTime $local_time local_time (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel[]
     */
    public function auEssShiftNearbyRosterShifts($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftNearbyRosterShifts'][0])
    {
        list($response) = $this->auEssShiftNearbyRosterShiftsWithHttpInfo($local_time, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftNearbyRosterShiftsWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftNearbyRosterShiftsWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftNearbyRosterShifts'][0])
    {
        $request = $this->auEssShiftNearbyRosterShiftsRequest($local_time, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftNearbyRosterShiftsAsync
     *
     * Find Nearby Roster Shifts
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftNearbyRosterShiftsAsync($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftNearbyRosterShifts'][0])
    {
        return $this->auEssShiftNearbyRosterShiftsAsyncWithHttpInfo($local_time, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftNearbyRosterShiftsAsyncWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftNearbyRosterShiftsAsyncWithHttpInfo($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftNearbyRosterShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auEssShiftNearbyRosterShiftsRequest($local_time, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftNearbyRosterShifts'
     *
     * @param  \DateTime $local_time (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftNearbyRosterShiftsRequest($local_time, $employee_id, string $contentType = self::contentTypes['auEssShiftNearbyRosterShifts'][0])
    {

        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auEssShiftNearbyRosterShifts'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftNearbyRosterShifts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/nearby';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $local_time,
            'localTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssShiftProposeRosterShiftSwap
     *
     * Propose Shift Swap
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\SwapShiftModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftProposeRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftActionResponse
     */
    public function auEssShiftProposeRosterShiftSwap($employee_id, $model, string $contentType = self::contentTypes['auEssShiftProposeRosterShiftSwap'][0])
    {
        list($response) = $this->auEssShiftProposeRosterShiftSwapWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssShiftProposeRosterShiftSwapWithHttpInfo
     *
     * Propose Shift Swap
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SwapShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftProposeRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssShiftProposeRosterShiftSwapWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftProposeRosterShiftSwap'][0])
    {
        $request = $this->auEssShiftProposeRosterShiftSwapRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftActionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssShiftProposeRosterShiftSwapAsync
     *
     * Propose Shift Swap
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SwapShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftProposeRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftProposeRosterShiftSwapAsync($employee_id, $model, string $contentType = self::contentTypes['auEssShiftProposeRosterShiftSwap'][0])
    {
        return $this->auEssShiftProposeRosterShiftSwapAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssShiftProposeRosterShiftSwapAsyncWithHttpInfo
     *
     * Propose Shift Swap
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SwapShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftProposeRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssShiftProposeRosterShiftSwapAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssShiftProposeRosterShiftSwap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftActionResponse';
        $request = $this->auEssShiftProposeRosterShiftSwapRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssShiftProposeRosterShiftSwap'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SwapShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssShiftProposeRosterShiftSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssShiftProposeRosterShiftSwapRequest($employee_id, $model, string $contentType = self::contentTypes['auEssShiftProposeRosterShiftSwap'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssShiftProposeRosterShiftSwap'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssShiftProposeRosterShiftSwap'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/shift/swap/propose';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundDelete
     *
     * Delete Super Fund
     *
     * @param  int $superfund_id superfund_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SaveSuperFundResponseModel
     */
    public function auEssSuperFundDelete($superfund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundDelete'][0])
    {
        list($response) = $this->auEssSuperFundDeleteWithHttpInfo($superfund_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundDeleteWithHttpInfo
     *
     * Delete Super Fund
     *
     * @param  int $superfund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SaveSuperFundResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundDeleteWithHttpInfo($superfund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundDelete'][0])
    {
        $request = $this->auEssSuperFundDeleteRequest($superfund_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SaveSuperFundResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SaveSuperFundResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundDeleteAsync
     *
     * Delete Super Fund
     *
     * @param  int $superfund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundDeleteAsync($superfund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundDelete'][0])
    {
        return $this->auEssSuperFundDeleteAsyncWithHttpInfo($superfund_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundDeleteAsyncWithHttpInfo
     *
     * Delete Super Fund
     *
     * @param  int $superfund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundDeleteAsyncWithHttpInfo($superfund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
        $request = $this->auEssSuperFundDeleteRequest($superfund_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundDelete'
     *
     * @param  int $superfund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundDeleteRequest($superfund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundDelete'][0])
    {

        // verify the required parameter 'superfund_id' is set
        if ($superfund_id === null || (is_array($superfund_id) && count($superfund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $superfund_id when calling auEssSuperFundDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/superfunds/{superfundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($superfund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'superfundId' . '}',
                ObjectSerializer::toPathValue($superfund_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundGet
     *
     * Get Super Fund by ID
     *
     * @param  int $super_fund_id super_fund_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuperFundModel
     */
    public function auEssSuperFundGet($super_fund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundGet'][0])
    {
        list($response) = $this->auEssSuperFundGetWithHttpInfo($super_fund_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundGetWithHttpInfo
     *
     * Get Super Fund by ID
     *
     * @param  int $super_fund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuperFundModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundGetWithHttpInfo($super_fund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundGet'][0])
    {
        $request = $this->auEssSuperFundGetRequest($super_fund_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuperFundModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuperFundModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuperFundModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuperFundModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuperFundModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundGetAsync
     *
     * Get Super Fund by ID
     *
     * @param  int $super_fund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundGetAsync($super_fund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundGet'][0])
    {
        return $this->auEssSuperFundGetAsyncWithHttpInfo($super_fund_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundGetAsyncWithHttpInfo
     *
     * Get Super Fund by ID
     *
     * @param  int $super_fund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundGetAsyncWithHttpInfo($super_fund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuperFundModel';
        $request = $this->auEssSuperFundGetRequest($super_fund_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundGet'
     *
     * @param  int $super_fund_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundGetRequest($super_fund_id, $employee_id, string $contentType = self::contentTypes['auEssSuperFundGet'][0])
    {

        // verify the required parameter 'super_fund_id' is set
        if ($super_fund_id === null || (is_array($super_fund_id) && count($super_fund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $super_fund_id when calling auEssSuperFundGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundGet'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/superfunds/{superFundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($super_fund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'superFundId' . '}',
                ObjectSerializer::toPathValue($super_fund_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundList
     *
     * List Super Funds
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuperFundModel[]
     */
    public function auEssSuperFundList($employee_id, string $contentType = self::contentTypes['auEssSuperFundList'][0])
    {
        list($response) = $this->auEssSuperFundListWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundListWithHttpInfo
     *
     * List Super Funds
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuperFundModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundListWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssSuperFundList'][0])
    {
        $request = $this->auEssSuperFundListRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuperFundModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuperFundModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuperFundModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuperFundModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuperFundModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundListAsync
     *
     * List Super Funds
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundListAsync($employee_id, string $contentType = self::contentTypes['auEssSuperFundList'][0])
    {
        return $this->auEssSuperFundListAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundListAsyncWithHttpInfo
     *
     * List Super Funds
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundListAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssSuperFundList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuperFundModel[]';
        $request = $this->auEssSuperFundListRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundList'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundListRequest($employee_id, string $contentType = self::contentTypes['auEssSuperFundList'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundList'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/superfunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundPost
     *
     * Create Super Fund
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SaveSuperFundResponseModel
     */
    public function auEssSuperFundPost($employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPost'][0])
    {
        list($response) = $this->auEssSuperFundPostWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundPostWithHttpInfo
     *
     * Create Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SaveSuperFundResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundPostWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPost'][0])
    {
        $request = $this->auEssSuperFundPostRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SaveSuperFundResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SaveSuperFundResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundPostAsync
     *
     * Create Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundPostAsync($employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPost'][0])
    {
        return $this->auEssSuperFundPostAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundPostAsyncWithHttpInfo
     *
     * Create Super Fund
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundPostAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
        $request = $this->auEssSuperFundPostRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundPost'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundPostRequest($employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPost'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundPost'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssSuperFundPost'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/superfunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundProductSearch
     *
     * @param  string $term term (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $search_by search_by (optional, default to '0')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundProductSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SuperProductEditModel[]
     */
    public function auEssSuperFundProductSearch($term, $employee_id, $search_by = '0', string $contentType = self::contentTypes['auEssSuperFundProductSearch'][0])
    {
        list($response) = $this->auEssSuperFundProductSearchWithHttpInfo($term, $employee_id, $search_by, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundProductSearchWithHttpInfo
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  string $search_by (optional, default to '0')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundProductSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SuperProductEditModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundProductSearchWithHttpInfo($term, $employee_id, $search_by = '0', string $contentType = self::contentTypes['auEssSuperFundProductSearch'][0])
    {
        $request = $this->auEssSuperFundProductSearchRequest($term, $employee_id, $search_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SuperProductEditModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SuperProductEditModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SuperProductEditModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SuperProductEditModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SuperProductEditModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundProductSearchAsync
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  string $search_by (optional, default to '0')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundProductSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundProductSearchAsync($term, $employee_id, $search_by = '0', string $contentType = self::contentTypes['auEssSuperFundProductSearch'][0])
    {
        return $this->auEssSuperFundProductSearchAsyncWithHttpInfo($term, $employee_id, $search_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundProductSearchAsyncWithHttpInfo
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  string $search_by (optional, default to '0')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundProductSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundProductSearchAsyncWithHttpInfo($term, $employee_id, $search_by = '0', string $contentType = self::contentTypes['auEssSuperFundProductSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SuperProductEditModel[]';
        $request = $this->auEssSuperFundProductSearchRequest($term, $employee_id, $search_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundProductSearch'
     *
     * @param  string $term (required)
     * @param  string $employee_id (required)
     * @param  string $search_by (optional, default to '0')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundProductSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundProductSearchRequest($term, $employee_id, $search_by = '0', string $contentType = self::contentTypes['auEssSuperFundProductSearch'][0])
    {

        // verify the required parameter 'term' is set
        if ($term === null || (is_array($term) && count($term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term when calling auEssSuperFundProductSearch'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundProductSearch'
            );
        }



        $resourcePath = '/api/v2/ess/{employeeId}/superfunds/productsearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $term,
            'term', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_by,
            'searchBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssSuperFundPut
     *
     * Update Super Fund
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SaveSuperFundResponseModel
     */
    public function auEssSuperFundPut($id, $employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPut'][0])
    {
        list($response) = $this->auEssSuperFundPutWithHttpInfo($id, $employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssSuperFundPutWithHttpInfo
     *
     * Update Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SaveSuperFundResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssSuperFundPutWithHttpInfo($id, $employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPut'][0])
    {
        $request = $this->auEssSuperFundPutRequest($id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SaveSuperFundResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SaveSuperFundResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SaveSuperFundResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssSuperFundPutAsync
     *
     * Update Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundPutAsync($id, $employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPut'][0])
    {
        return $this->auEssSuperFundPutAsyncWithHttpInfo($id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssSuperFundPutAsyncWithHttpInfo
     *
     * Update Super Fund
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssSuperFundPutAsyncWithHttpInfo($id, $employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SaveSuperFundResponseModel';
        $request = $this->auEssSuperFundPutRequest($id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssSuperFundPut'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\SaveSuperFundModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssSuperFundPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssSuperFundPutRequest($id, $employee_id, $model, string $contentType = self::contentTypes['auEssSuperFundPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auEssSuperFundPut'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssSuperFundPut'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssSuperFundPut'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/superfunds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceAddShiftNote
     *
     * Add Note to Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceAddShiftNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceAddShiftNote($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceAddShiftNote'][0])
    {
        $this->auEssTimeAndAttendanceAddShiftNoteWithHttpInfo($employee_id, $shift_id, $model, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceAddShiftNoteWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceAddShiftNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceAddShiftNoteWithHttpInfo($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceAddShiftNote'][0])
    {
        $request = $this->auEssTimeAndAttendanceAddShiftNoteRequest($employee_id, $shift_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceAddShiftNoteAsync
     *
     * Add Note to Shift
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceAddShiftNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceAddShiftNoteAsync($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceAddShiftNote'][0])
    {
        return $this->auEssTimeAndAttendanceAddShiftNoteAsyncWithHttpInfo($employee_id, $shift_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceAddShiftNoteAsyncWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceAddShiftNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceAddShiftNoteAsyncWithHttpInfo($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceAddShiftNote'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceAddShiftNoteRequest($employee_id, $shift_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceAddShiftNote'
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceAddShiftNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceAddShiftNoteRequest($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceAddShiftNote'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceAddShiftNote'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssTimeAndAttendanceAddShiftNote'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssTimeAndAttendanceAddShiftNote'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceClockOffEmployee
     *
     * Clock Out Employee
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceClockOffEmployee($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'][0])
    {
        $this->auEssTimeAndAttendanceClockOffEmployeeWithHttpInfo($employee_id, $request, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceClockOffEmployeeWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceClockOffEmployeeWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'][0])
    {
        $request = $this->auEssTimeAndAttendanceClockOffEmployeeRequest($employee_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceClockOffEmployeeAsync
     *
     * Clock Out Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceClockOffEmployeeAsync($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'][0])
    {
        return $this->auEssTimeAndAttendanceClockOffEmployeeAsyncWithHttpInfo($employee_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceClockOffEmployeeAsyncWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceClockOffEmployeeAsyncWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceClockOffEmployeeRequest($employee_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceClockOffEmployee'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceClockOffEmployeeRequest($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOffEmployee'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceClockOffEmployee'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auEssTimeAndAttendanceClockOffEmployee'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/clockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceClockOn
     *
     * Clock In Employee
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function auEssTimeAndAttendanceClockOn($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOn'][0])
    {
        list($response) = $this->auEssTimeAndAttendanceClockOnWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssTimeAndAttendanceClockOnWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceClockOnWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOn'][0])
    {
        $request = $this->auEssTimeAndAttendanceClockOnRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceClockOnAsync
     *
     * Clock In Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceClockOnAsync($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOn'][0])
    {
        return $this->auEssTimeAndAttendanceClockOnAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceClockOnAsyncWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceClockOnAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOn'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->auEssTimeAndAttendanceClockOnRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceClockOn'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceClockOnRequest($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceClockOn'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceClockOn'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssTimeAndAttendanceClockOn'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/clockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceDiscardCurrentShift
     *
     * Discard current shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceDiscardCurrentShift($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'][0])
    {
        $this->auEssTimeAndAttendanceDiscardCurrentShiftWithHttpInfo($employee_id, $request, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceDiscardCurrentShiftWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceDiscardCurrentShiftWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'][0])
    {
        $request = $this->auEssTimeAndAttendanceDiscardCurrentShiftRequest($employee_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceDiscardCurrentShiftAsync
     *
     * Discard current shift
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceDiscardCurrentShiftAsync($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'][0])
    {
        return $this->auEssTimeAndAttendanceDiscardCurrentShiftAsyncWithHttpInfo($employee_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceDiscardCurrentShiftAsyncWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceDiscardCurrentShiftAsyncWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceDiscardCurrentShiftRequest($employee_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceDiscardCurrentShift'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceDiscardCurrentShiftRequest($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceDiscardCurrentShift'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceDiscardCurrentShift'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auEssTimeAndAttendanceDiscardCurrentShift'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/discard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceEndShiftBreak
     *
     * End Break
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceEndShiftBreak($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'][0])
    {
        $this->auEssTimeAndAttendanceEndShiftBreakWithHttpInfo($employee_id, $request, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceEndShiftBreakWithHttpInfo
     *
     * End Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceEndShiftBreakWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'][0])
    {
        $request = $this->auEssTimeAndAttendanceEndShiftBreakRequest($employee_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceEndShiftBreakAsync
     *
     * End Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceEndShiftBreakAsync($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'][0])
    {
        return $this->auEssTimeAndAttendanceEndShiftBreakAsyncWithHttpInfo($employee_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceEndShiftBreakAsyncWithHttpInfo
     *
     * End Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceEndShiftBreakAsyncWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceEndShiftBreakRequest($employee_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceEndShiftBreak'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceEndShiftBreakRequest($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceEndShiftBreak'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceEndShiftBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auEssTimeAndAttendanceEndShiftBreak'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/endbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceGetLookupData
     *
     * Get Lookup Data
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel
     */
    public function auEssTimeAndAttendanceGetLookupData($employee_id, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetLookupData'][0])
    {
        list($response) = $this->auEssTimeAndAttendanceGetLookupDataWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation auEssTimeAndAttendanceGetLookupDataWithHttpInfo
     *
     * Get Lookup Data
     *
     * @param  int $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceGetLookupDataWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetLookupData'][0])
    {
        $request = $this->auEssTimeAndAttendanceGetLookupDataRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceGetLookupDataAsync
     *
     * Get Lookup Data
     *
     * @param  int $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetLookupDataAsync($employee_id, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetLookupData'][0])
    {
        return $this->auEssTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceGetLookupDataAsyncWithHttpInfo
     *
     * Get Lookup Data
     *
     * @param  int $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetLookupData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
        $request = $this->auEssTimeAndAttendanceGetLookupDataRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceGetLookupData'
     *
     * @param  int $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceGetLookupDataRequest($employee_id, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetLookupData'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceGetLookupData'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/lookupdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftNotes
     *
     * Get Shift Notes
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  int $model_employee_id model_employee_id (optional)
     * @param  bool $model_is_admin_initiated model_is_admin_initiated (optional)
     * @param  string $model_type model_type (optional)
     * @param  string $model_visibility model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceGetShiftNotes($employee_id, $shift_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'][0])
    {
        $this->auEssTimeAndAttendanceGetShiftNotesWithHttpInfo($employee_id, $shift_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftNotesWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceGetShiftNotesWithHttpInfo($employee_id, $shift_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'][0])
    {
        $request = $this->auEssTimeAndAttendanceGetShiftNotesRequest($employee_id, $shift_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftNotesAsync
     *
     * Get Shift Notes
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetShiftNotesAsync($employee_id, $shift_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'][0])
    {
        return $this->auEssTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($employee_id, $shift_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($employee_id, $shift_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceGetShiftNotesRequest($employee_id, $shift_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceGetShiftNotes'
     *
     * @param  int $employee_id (required)
     * @param  int $shift_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceGetShiftNotesRequest($employee_id, $shift_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShiftNotes'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceGetShiftNotes'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssTimeAndAttendanceGetShiftNotes'
            );
        }






        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employee_id,
            'model.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_is_admin_initiated,
            'model.isAdminInitiated', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_type,
            'model.type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_visibility,
            'model.visibility', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceGetShifts
     *
     * Shifts
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]
     */
    public function auEssTimeAndAttendanceGetShifts($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShifts'][0])
    {
        list($response) = $this->auEssTimeAndAttendanceGetShiftsWithHttpInfo($employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftsWithHttpInfo
     *
     * Shifts
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceGetShiftsWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShifts'][0])
    {
        $request = $this->auEssTimeAndAttendanceGetShiftsRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftsAsync
     *
     * Shifts
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetShiftsAsync($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShifts'][0])
    {
        return $this->auEssTimeAndAttendanceGetShiftsAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceGetShiftsAsyncWithHttpInfo
     *
     * Shifts
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceGetShiftsAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
        $request = $this->auEssTimeAndAttendanceGetShiftsRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceGetShifts'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceGetShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceGetShiftsRequest($employee_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceGetShifts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceGetShifts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssTimeAndAttendanceGetShifts'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/shifts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceMarkShiftNotesRead
     *
     * Mark Shift Notes Read
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $shift_id shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceMarkShiftNotesRead($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'][0])
    {
        $this->auEssTimeAndAttendanceMarkShiftNotesReadWithHttpInfo($employee_id, $shift_id, $model, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceMarkShiftNotesReadWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  int $employee_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceMarkShiftNotesReadWithHttpInfo($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'][0])
    {
        $request = $this->auEssTimeAndAttendanceMarkShiftNotesReadRequest($employee_id, $shift_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceMarkShiftNotesReadAsync
     *
     * Mark Shift Notes Read
     *
     * @param  int $employee_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceMarkShiftNotesReadAsync($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'][0])
    {
        return $this->auEssTimeAndAttendanceMarkShiftNotesReadAsyncWithHttpInfo($employee_id, $shift_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceMarkShiftNotesReadAsyncWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  int $employee_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceMarkShiftNotesReadAsyncWithHttpInfo($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceMarkShiftNotesReadRequest($employee_id, $shift_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceMarkShiftNotesRead'
     *
     * @param  int $employee_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceMarkShiftNotesReadRequest($employee_id, $shift_id, $model, string $contentType = self::contentTypes['auEssTimeAndAttendanceMarkShiftNotesRead'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceMarkShiftNotesRead'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling auEssTimeAndAttendanceMarkShiftNotesRead'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auEssTimeAndAttendanceMarkShiftNotesRead'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/shift/{shiftId}/notes/read-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimeAndAttendanceStartShiftBreak
     *
     * Start Break
     *
     * @param  int $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimeAndAttendanceStartShiftBreak($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'][0])
    {
        $this->auEssTimeAndAttendanceStartShiftBreakWithHttpInfo($employee_id, $request, $contentType);
    }

    /**
     * Operation auEssTimeAndAttendanceStartShiftBreakWithHttpInfo
     *
     * Start Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimeAndAttendanceStartShiftBreakWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'][0])
    {
        $request = $this->auEssTimeAndAttendanceStartShiftBreakRequest($employee_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimeAndAttendanceStartShiftBreakAsync
     *
     * Start Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceStartShiftBreakAsync($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'][0])
    {
        return $this->auEssTimeAndAttendanceStartShiftBreakAsyncWithHttpInfo($employee_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimeAndAttendanceStartShiftBreakAsyncWithHttpInfo
     *
     * Start Break
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimeAndAttendanceStartShiftBreakAsyncWithHttpInfo($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'][0])
    {
        $returnType = '';
        $request = $this->auEssTimeAndAttendanceStartShiftBreakRequest($employee_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimeAndAttendanceStartShiftBreak'
     *
     * @param  int $employee_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimeAndAttendanceStartShiftBreakRequest($employee_id, $request, string $contentType = self::contentTypes['auEssTimeAndAttendanceStartShiftBreak'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimeAndAttendanceStartShiftBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auEssTimeAndAttendanceStartShiftBreak'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timeandattendance/startbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimesheetData
     *
     * Get Timesheet Creation Data
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssTimesheetDataModel
     */
    public function auEssTimesheetData($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetData'][0])
    {
        list($response) = $this->auEssTimesheetDataWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType);
        return $response;
    }

    /**
     * Operation auEssTimesheetDataWithHttpInfo
     *
     * Get Timesheet Creation Data
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssTimesheetDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimesheetDataWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetData'][0])
    {
        $request = $this->auEssTimesheetDataRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssTimesheetDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssTimesheetDataModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssTimesheetDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssTimesheetDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssTimesheetDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimesheetDataAsync
     *
     * Get Timesheet Creation Data
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetDataAsync($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetData'][0])
    {
        return $this->auEssTimesheetDataAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimesheetDataAsyncWithHttpInfo
     *
     * Get Timesheet Creation Data
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetDataAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssTimesheetDataModel';
        $request = $this->auEssTimesheetDataRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimesheetData'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimesheetDataRequest($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetData'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimesheetData'
            );
        }

        // verify the required parameter 'filter_from_date' is set
        if ($filter_from_date === null || (is_array($filter_from_date) && count($filter_from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_from_date when calling auEssTimesheetData'
            );
        }

        // verify the required parameter 'filter_to_date' is set
        if ($filter_to_date === null || (is_array($filter_to_date) && count($filter_to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_to_date when calling auEssTimesheetData'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timesheet/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimesheetDelete
     *
     * Delete Timesheet
     *
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimesheetDelete($timesheet_id, $employee_id, string $contentType = self::contentTypes['auEssTimesheetDelete'][0])
    {
        $this->auEssTimesheetDeleteWithHttpInfo($timesheet_id, $employee_id, $contentType);
    }

    /**
     * Operation auEssTimesheetDeleteWithHttpInfo
     *
     * Delete Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimesheetDeleteWithHttpInfo($timesheet_id, $employee_id, string $contentType = self::contentTypes['auEssTimesheetDelete'][0])
    {
        $request = $this->auEssTimesheetDeleteRequest($timesheet_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimesheetDeleteAsync
     *
     * Delete Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetDeleteAsync($timesheet_id, $employee_id, string $contentType = self::contentTypes['auEssTimesheetDelete'][0])
    {
        return $this->auEssTimesheetDeleteAsyncWithHttpInfo($timesheet_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimesheetDeleteAsyncWithHttpInfo
     *
     * Delete Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetDeleteAsyncWithHttpInfo($timesheet_id, $employee_id, string $contentType = self::contentTypes['auEssTimesheetDelete'][0])
    {
        $returnType = '';
        $request = $this->auEssTimesheetDeleteRequest($timesheet_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimesheetDelete'
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimesheetDeleteRequest($timesheet_id, $employee_id, string $contentType = self::contentTypes['auEssTimesheetDelete'][0])
    {

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auEssTimesheetDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimesheetDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timesheet/{timesheetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimesheetEdit
     *
     * Edit Timesheet
     *
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimesheetEdit($timesheet_id, $employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetEdit'][0])
    {
        $this->auEssTimesheetEditWithHttpInfo($timesheet_id, $employee_id, $timesheet, $contentType);
    }

    /**
     * Operation auEssTimesheetEditWithHttpInfo
     *
     * Edit Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimesheetEditWithHttpInfo($timesheet_id, $employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetEdit'][0])
    {
        $request = $this->auEssTimesheetEditRequest($timesheet_id, $employee_id, $timesheet, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimesheetEditAsync
     *
     * Edit Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetEditAsync($timesheet_id, $employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetEdit'][0])
    {
        return $this->auEssTimesheetEditAsyncWithHttpInfo($timesheet_id, $employee_id, $timesheet, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimesheetEditAsyncWithHttpInfo
     *
     * Edit Timesheet
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetEditAsyncWithHttpInfo($timesheet_id, $employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetEdit'][0])
    {
        $returnType = '';
        $request = $this->auEssTimesheetEditRequest($timesheet_id, $employee_id, $timesheet, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimesheetEdit'
     *
     * @param  int $timesheet_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimesheetEditRequest($timesheet_id, $employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetEdit'][0])
    {

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auEssTimesheetEdit'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimesheetEdit'
            );
        }

        // verify the required parameter 'timesheet' is set
        if ($timesheet === null || (is_array($timesheet) && count($timesheet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet when calling auEssTimesheetEdit'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timesheet/{timesheetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($timesheet)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($timesheet));
            } else {
                $httpBody = $timesheet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimesheetList
     *
     * List Timesheets
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssTimesheetModel[]
     */
    public function auEssTimesheetList($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetList'][0])
    {
        list($response) = $this->auEssTimesheetListWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType);
        return $response;
    }

    /**
     * Operation auEssTimesheetListWithHttpInfo
     *
     * List Timesheets
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssTimesheetModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimesheetListWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetList'][0])
    {
        $request = $this->auEssTimesheetListRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssTimesheetModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssTimesheetModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssTimesheetModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssTimesheetModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssTimesheetModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimesheetListAsync
     *
     * List Timesheets
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetListAsync($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetList'][0])
    {
        return $this->auEssTimesheetListAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimesheetListAsyncWithHttpInfo
     *
     * List Timesheets
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetListAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssTimesheetModel[]';
        $request = $this->auEssTimesheetListRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimesheetList'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimesheetListRequest($employee_id, $filter_from_date, $filter_to_date, string $contentType = self::contentTypes['auEssTimesheetList'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimesheetList'
            );
        }

        // verify the required parameter 'filter_from_date' is set
        if ($filter_from_date === null || (is_array($filter_from_date) && count($filter_from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_from_date when calling auEssTimesheetList'
            );
        }

        // verify the required parameter 'filter_to_date' is set
        if ($filter_to_date === null || (is_array($filter_to_date) && count($filter_to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_to_date when calling auEssTimesheetList'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auEssTimesheetSave
     *
     * Submit or Update Timesheet
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetSave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auEssTimesheetSave($employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetSave'][0])
    {
        $this->auEssTimesheetSaveWithHttpInfo($employee_id, $timesheet, $contentType);
    }

    /**
     * Operation auEssTimesheetSaveWithHttpInfo
     *
     * Submit or Update Timesheet
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetSave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auEssTimesheetSaveWithHttpInfo($employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetSave'][0])
    {
        $request = $this->auEssTimesheetSaveRequest($employee_id, $timesheet, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auEssTimesheetSaveAsync
     *
     * Submit or Update Timesheet
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetSaveAsync($employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetSave'][0])
    {
        return $this->auEssTimesheetSaveAsyncWithHttpInfo($employee_id, $timesheet, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auEssTimesheetSaveAsyncWithHttpInfo
     *
     * Submit or Update Timesheet
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auEssTimesheetSaveAsyncWithHttpInfo($employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetSave'][0])
    {
        $returnType = '';
        $request = $this->auEssTimesheetSaveRequest($employee_id, $timesheet, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auEssTimesheetSave'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssTimesheetModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auEssTimesheetSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auEssTimesheetSaveRequest($employee_id, $timesheet, string $contentType = self::contentTypes['auEssTimesheetSave'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auEssTimesheetSave'
            );
        }

        // verify the required parameter 'timesheet' is set
        if ($timesheet === null || (is_array($timesheet) && count($timesheet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet when calling auEssTimesheetSave'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($timesheet)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($timesheet));
            } else {
                $httpBody = $timesheet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essDeviceTokenRegister
     *
     * Register Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenRegister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essDeviceTokenRegister($model, string $contentType = self::contentTypes['essDeviceTokenRegister'][0])
    {
        $this->essDeviceTokenRegisterWithHttpInfo($model, $contentType);
    }

    /**
     * Operation essDeviceTokenRegisterWithHttpInfo
     *
     * Register Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenRegister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essDeviceTokenRegisterWithHttpInfo($model, string $contentType = self::contentTypes['essDeviceTokenRegister'][0])
    {
        $request = $this->essDeviceTokenRegisterRequest($model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essDeviceTokenRegisterAsync
     *
     * Register Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essDeviceTokenRegisterAsync($model, string $contentType = self::contentTypes['essDeviceTokenRegister'][0])
    {
        return $this->essDeviceTokenRegisterAsyncWithHttpInfo($model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essDeviceTokenRegisterAsyncWithHttpInfo
     *
     * Register Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essDeviceTokenRegisterAsyncWithHttpInfo($model, string $contentType = self::contentTypes['essDeviceTokenRegister'][0])
    {
        $returnType = '';
        $request = $this->essDeviceTokenRegisterRequest($model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essDeviceTokenRegister'
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essDeviceTokenRegisterRequest($model, string $contentType = self::contentTypes['essDeviceTokenRegister'][0])
    {

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling essDeviceTokenRegister'
            );
        }


        $resourcePath = '/api/v2/ess/devicetoken/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essDeviceTokenUnregister
     *
     * Unregister Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenUnregister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essDeviceTokenUnregister($model, string $contentType = self::contentTypes['essDeviceTokenUnregister'][0])
    {
        $this->essDeviceTokenUnregisterWithHttpInfo($model, $contentType);
    }

    /**
     * Operation essDeviceTokenUnregisterWithHttpInfo
     *
     * Unregister Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenUnregister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essDeviceTokenUnregisterWithHttpInfo($model, string $contentType = self::contentTypes['essDeviceTokenUnregister'][0])
    {
        $request = $this->essDeviceTokenUnregisterRequest($model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essDeviceTokenUnregisterAsync
     *
     * Unregister Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenUnregister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essDeviceTokenUnregisterAsync($model, string $contentType = self::contentTypes['essDeviceTokenUnregister'][0])
    {
        return $this->essDeviceTokenUnregisterAsyncWithHttpInfo($model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essDeviceTokenUnregisterAsyncWithHttpInfo
     *
     * Unregister Device Token
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenUnregister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essDeviceTokenUnregisterAsyncWithHttpInfo($model, string $contentType = self::contentTypes['essDeviceTokenUnregister'][0])
    {
        $returnType = '';
        $request = $this->essDeviceTokenUnregisterRequest($model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essDeviceTokenUnregister'
     *
     * @param  \OpenAPI\Client\Model\DeviceTokenModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essDeviceTokenUnregister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essDeviceTokenUnregisterRequest($model, string $contentType = self::contentTypes['essDeviceTokenUnregister'][0])
    {

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling essDeviceTokenUnregister'
            );
        }


        $resourcePath = '/api/v2/ess/devicetoken/unregister';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseCancelExpenseRequest
     *
     * Delete Expense Request
     *
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCancelExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssExpenseRequestResponseModel
     */
    public function essExpenseCancelExpenseRequest($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseCancelExpenseRequest'][0])
    {
        list($response) = $this->essExpenseCancelExpenseRequestWithHttpInfo($expense_request_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseCancelExpenseRequestWithHttpInfo
     *
     * Delete Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCancelExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssExpenseRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseCancelExpenseRequestWithHttpInfo($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseCancelExpenseRequest'][0])
    {
        $request = $this->essExpenseCancelExpenseRequestRequest($expense_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssExpenseRequestResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssExpenseRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseCancelExpenseRequestAsync
     *
     * Delete Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCancelExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseCancelExpenseRequestAsync($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseCancelExpenseRequest'][0])
    {
        return $this->essExpenseCancelExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseCancelExpenseRequestAsyncWithHttpInfo
     *
     * Delete Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCancelExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseCancelExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseCancelExpenseRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel';
        $request = $this->essExpenseCancelExpenseRequestRequest($expense_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseCancelExpenseRequest'
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCancelExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseCancelExpenseRequestRequest($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseCancelExpenseRequest'][0])
    {

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling essExpenseCancelExpenseRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseCancelExpenseRequest'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseCreateExpenseRequest
     *
     * Create Expense Request
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCreateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essExpenseCreateExpenseRequest($employee_id, $model, string $contentType = self::contentTypes['essExpenseCreateExpenseRequest'][0])
    {
        $this->essExpenseCreateExpenseRequestWithHttpInfo($employee_id, $model, $contentType);
    }

    /**
     * Operation essExpenseCreateExpenseRequestWithHttpInfo
     *
     * Create Expense Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCreateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseCreateExpenseRequestWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['essExpenseCreateExpenseRequest'][0])
    {
        $request = $this->essExpenseCreateExpenseRequestRequest($employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseCreateExpenseRequestAsync
     *
     * Create Expense Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCreateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseCreateExpenseRequestAsync($employee_id, $model, string $contentType = self::contentTypes['essExpenseCreateExpenseRequest'][0])
    {
        return $this->essExpenseCreateExpenseRequestAsyncWithHttpInfo($employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseCreateExpenseRequestAsyncWithHttpInfo
     *
     * Create Expense Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCreateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseCreateExpenseRequestAsyncWithHttpInfo($employee_id, $model, string $contentType = self::contentTypes['essExpenseCreateExpenseRequest'][0])
    {
        $returnType = '';
        $request = $this->essExpenseCreateExpenseRequestRequest($employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseCreateExpenseRequest'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseCreateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseCreateExpenseRequestRequest($employee_id, $model, string $contentType = self::contentTypes['essExpenseCreateExpenseRequest'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseCreateExpenseRequest'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling essExpenseCreateExpenseRequest'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseExpenseCategories
     *
     * Get Expense Categories
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseExpenseCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExpenseCategoryResponseModel[]
     */
    public function essExpenseExpenseCategories($employee_id, string $contentType = self::contentTypes['essExpenseExpenseCategories'][0])
    {
        list($response) = $this->essExpenseExpenseCategoriesWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseExpenseCategoriesWithHttpInfo
     *
     * Get Expense Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseExpenseCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExpenseCategoryResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseExpenseCategoriesWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseExpenseCategories'][0])
    {
        $request = $this->essExpenseExpenseCategoriesRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseExpenseCategoriesAsync
     *
     * Get Expense Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseExpenseCategoriesAsync($employee_id, string $contentType = self::contentTypes['essExpenseExpenseCategories'][0])
    {
        return $this->essExpenseExpenseCategoriesAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseExpenseCategoriesAsyncWithHttpInfo
     *
     * Get Expense Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseExpenseCategoriesAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseExpenseCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]';
        $request = $this->essExpenseExpenseCategoriesRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseExpenseCategories'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseExpenseCategoriesRequest($employee_id, string $contentType = self::contentTypes['essExpenseExpenseCategories'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseExpenseCategories'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseGetExpenseRequest
     *
     * Get Expense Request by ID
     *
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssExpenseRequestResponseModel
     */
    public function essExpenseGetExpenseRequest($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseGetExpenseRequest'][0])
    {
        list($response) = $this->essExpenseGetExpenseRequestWithHttpInfo($expense_request_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseGetExpenseRequestWithHttpInfo
     *
     * Get Expense Request by ID
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssExpenseRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseGetExpenseRequestWithHttpInfo($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseGetExpenseRequest'][0])
    {
        $request = $this->essExpenseGetExpenseRequestRequest($expense_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssExpenseRequestResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssExpenseRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseGetExpenseRequestAsync
     *
     * Get Expense Request by ID
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseGetExpenseRequestAsync($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseGetExpenseRequest'][0])
    {
        return $this->essExpenseGetExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseGetExpenseRequestAsyncWithHttpInfo
     *
     * Get Expense Request by ID
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseGetExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseGetExpenseRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel';
        $request = $this->essExpenseGetExpenseRequestRequest($expense_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseGetExpenseRequest'
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseGetExpenseRequestRequest($expense_request_id, $employee_id, string $contentType = self::contentTypes['essExpenseGetExpenseRequest'][0])
    {

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling essExpenseGetExpenseRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseGetExpenseRequest'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseGetExpenseRequests
     *
     * Get Expense Requests
     *
     * @param  string $employee_id employee_id (required)
     * @param  int $current_page current_page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssExpenseRequestResponseModel[]
     */
    public function essExpenseGetExpenseRequests($employee_id, $current_page = 1, $page_size = 100, string $contentType = self::contentTypes['essExpenseGetExpenseRequests'][0])
    {
        list($response) = $this->essExpenseGetExpenseRequestsWithHttpInfo($employee_id, $current_page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseGetExpenseRequestsWithHttpInfo
     *
     * Get Expense Requests
     *
     * @param  string $employee_id (required)
     * @param  int $current_page (optional, default to 1)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssExpenseRequestResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseGetExpenseRequestsWithHttpInfo($employee_id, $current_page = 1, $page_size = 100, string $contentType = self::contentTypes['essExpenseGetExpenseRequests'][0])
    {
        $request = $this->essExpenseGetExpenseRequestsRequest($employee_id, $current_page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseGetExpenseRequestsAsync
     *
     * Get Expense Requests
     *
     * @param  string $employee_id (required)
     * @param  int $current_page (optional, default to 1)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseGetExpenseRequestsAsync($employee_id, $current_page = 1, $page_size = 100, string $contentType = self::contentTypes['essExpenseGetExpenseRequests'][0])
    {
        return $this->essExpenseGetExpenseRequestsAsyncWithHttpInfo($employee_id, $current_page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseGetExpenseRequestsAsyncWithHttpInfo
     *
     * Get Expense Requests
     *
     * @param  string $employee_id (required)
     * @param  int $current_page (optional, default to 1)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseGetExpenseRequestsAsyncWithHttpInfo($employee_id, $current_page = 1, $page_size = 100, string $contentType = self::contentTypes['essExpenseGetExpenseRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssExpenseRequestResponseModel[]';
        $request = $this->essExpenseGetExpenseRequestsRequest($employee_id, $current_page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseGetExpenseRequests'
     *
     * @param  string $employee_id (required)
     * @param  int $current_page (optional, default to 1)
     * @param  int $page_size (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseGetExpenseRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseGetExpenseRequestsRequest($employee_id, $current_page = 1, $page_size = 100, string $contentType = self::contentTypes['essExpenseGetExpenseRequests'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseGetExpenseRequests'
            );
        }




        $resourcePath = '/api/v2/ess/{employeeId}/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_page,
            'currentPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseSummary
     *
     * Get Expense Payment Summary
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]
     */
    public function essExpenseSummary($employee_id, string $contentType = self::contentTypes['essExpenseSummary'][0])
    {
        list($response) = $this->essExpenseSummaryWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseSummaryWithHttpInfo
     *
     * Get Expense Payment Summary
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseSummary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseSummaryWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseSummary'][0])
    {
        $request = $this->essExpenseSummaryRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseSummaryAsync
     *
     * Get Expense Payment Summary
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseSummaryAsync($employee_id, string $contentType = self::contentTypes['essExpenseSummary'][0])
    {
        return $this->essExpenseSummaryAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseSummaryAsyncWithHttpInfo
     *
     * Get Expense Payment Summary
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseSummaryAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseSummary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeExpensePaymentSummaryModel[]';
        $request = $this->essExpenseSummaryRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseSummary'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseSummaryRequest($employee_id, string $contentType = self::contentTypes['essExpenseSummary'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseSummary'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseTaxCodes
     *
     * Get Tax Codes
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseTaxCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JournalServiceTaxCode[]
     */
    public function essExpenseTaxCodes($employee_id, string $contentType = self::contentTypes['essExpenseTaxCodes'][0])
    {
        list($response) = $this->essExpenseTaxCodesWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseTaxCodesWithHttpInfo
     *
     * Get Tax Codes
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseTaxCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JournalServiceTaxCode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseTaxCodesWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseTaxCodes'][0])
    {
        $request = $this->essExpenseTaxCodesRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JournalServiceTaxCode[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JournalServiceTaxCode[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JournalServiceTaxCode[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JournalServiceTaxCode[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JournalServiceTaxCode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseTaxCodesAsync
     *
     * Get Tax Codes
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseTaxCodesAsync($employee_id, string $contentType = self::contentTypes['essExpenseTaxCodes'][0])
    {
        return $this->essExpenseTaxCodesAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseTaxCodesAsyncWithHttpInfo
     *
     * Get Tax Codes
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseTaxCodesAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essExpenseTaxCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JournalServiceTaxCode[]';
        $request = $this->essExpenseTaxCodesRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseTaxCodes'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseTaxCodesRequest($employee_id, string $contentType = self::contentTypes['essExpenseTaxCodes'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseTaxCodes'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/taxcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseUpdateExpenseRequest
     *
     * Update Expense Request
     *
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUpdateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essExpenseUpdateExpenseRequest($expense_request_id, $employee_id, $model, string $contentType = self::contentTypes['essExpenseUpdateExpenseRequest'][0])
    {
        $this->essExpenseUpdateExpenseRequestWithHttpInfo($expense_request_id, $employee_id, $model, $contentType);
    }

    /**
     * Operation essExpenseUpdateExpenseRequestWithHttpInfo
     *
     * Update Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUpdateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseUpdateExpenseRequestWithHttpInfo($expense_request_id, $employee_id, $model, string $contentType = self::contentTypes['essExpenseUpdateExpenseRequest'][0])
    {
        $request = $this->essExpenseUpdateExpenseRequestRequest($expense_request_id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseUpdateExpenseRequestAsync
     *
     * Update Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUpdateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseUpdateExpenseRequestAsync($expense_request_id, $employee_id, $model, string $contentType = self::contentTypes['essExpenseUpdateExpenseRequest'][0])
    {
        return $this->essExpenseUpdateExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseUpdateExpenseRequestAsyncWithHttpInfo
     *
     * Update Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUpdateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseUpdateExpenseRequestAsyncWithHttpInfo($expense_request_id, $employee_id, $model, string $contentType = self::contentTypes['essExpenseUpdateExpenseRequest'][0])
    {
        $returnType = '';
        $request = $this->essExpenseUpdateExpenseRequestRequest($expense_request_id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseUpdateExpenseRequest'
     *
     * @param  int $expense_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUpdateExpenseRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseUpdateExpenseRequestRequest($expense_request_id, $employee_id, $model, string $contentType = self::contentTypes['essExpenseUpdateExpenseRequest'][0])
    {

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling essExpenseUpdateExpenseRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseUpdateExpenseRequest'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling essExpenseUpdateExpenseRequest'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essExpenseUploadAttachment
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $file_name file_name (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function essExpenseUploadAttachment($expense_request_id, $file_name, $employee_id, string $contentType = self::contentTypes['essExpenseUploadAttachment'][0])
    {
        list($response) = $this->essExpenseUploadAttachmentWithHttpInfo($expense_request_id, $file_name, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essExpenseUploadAttachmentWithHttpInfo
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function essExpenseUploadAttachmentWithHttpInfo($expense_request_id, $file_name, $employee_id, string $contentType = self::contentTypes['essExpenseUploadAttachment'][0])
    {
        $request = $this->essExpenseUploadAttachmentRequest($expense_request_id, $file_name, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essExpenseUploadAttachmentAsync
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseUploadAttachmentAsync($expense_request_id, $file_name, $employee_id, string $contentType = self::contentTypes['essExpenseUploadAttachment'][0])
    {
        return $this->essExpenseUploadAttachmentAsyncWithHttpInfo($expense_request_id, $file_name, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essExpenseUploadAttachmentAsyncWithHttpInfo
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essExpenseUploadAttachmentAsyncWithHttpInfo($expense_request_id, $file_name, $employee_id, string $contentType = self::contentTypes['essExpenseUploadAttachment'][0])
    {
        $returnType = 'object';
        $request = $this->essExpenseUploadAttachmentRequest($expense_request_id, $file_name, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essExpenseUploadAttachment'
     *
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essExpenseUploadAttachmentRequest($expense_request_id, $file_name, $employee_id, string $contentType = self::contentTypes['essExpenseUploadAttachment'][0])
    {

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling essExpenseUploadAttachment'
            );
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling essExpenseUploadAttachment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essExpenseUploadAttachment'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/expense/{expenseRequestId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            'fileName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveApplyForLeave
     *
     * Create Leave Request
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveApplyForLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essLeaveApplyForLeave($employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveApplyForLeave'][0])
    {
        $this->essLeaveApplyForLeaveWithHttpInfo($employee_id, $leave_application, $contentType);
    }

    /**
     * Operation essLeaveApplyForLeaveWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveApplyForLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveApplyForLeaveWithHttpInfo($employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveApplyForLeave'][0])
    {
        $request = $this->essLeaveApplyForLeaveRequest($employee_id, $leave_application, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveApplyForLeaveAsync
     *
     * Create Leave Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveApplyForLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveApplyForLeaveAsync($employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveApplyForLeave'][0])
    {
        return $this->essLeaveApplyForLeaveAsyncWithHttpInfo($employee_id, $leave_application, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveApplyForLeaveAsyncWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveApplyForLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveApplyForLeaveAsyncWithHttpInfo($employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveApplyForLeave'][0])
    {
        $returnType = '';
        $request = $this->essLeaveApplyForLeaveRequest($employee_id, $leave_application, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveApplyForLeave'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveApplyForLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveApplyForLeaveRequest($employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveApplyForLeave'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveApplyForLeave'
            );
        }

        // verify the required parameter 'leave_application' is set
        if ($leave_application === null || (is_array($leave_application) && count($leave_application) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_application when calling essLeaveApplyForLeave'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave_application)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave_application));
            } else {
                $httpBody = $leave_application;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveBalances
     *
     * Get Leave Balances
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $as_at_date as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveBalances'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LeaveBalanceModel[]
     */
    public function essLeaveBalances($employee_id, $as_at_date = null, string $contentType = self::contentTypes['essLeaveBalances'][0])
    {
        list($response) = $this->essLeaveBalancesWithHttpInfo($employee_id, $as_at_date, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveBalancesWithHttpInfo
     *
     * Get Leave Balances
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveBalances'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LeaveBalanceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveBalancesWithHttpInfo($employee_id, $as_at_date = null, string $contentType = self::contentTypes['essLeaveBalances'][0])
    {
        $request = $this->essLeaveBalancesRequest($employee_id, $as_at_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LeaveBalanceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LeaveBalanceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LeaveBalanceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LeaveBalanceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LeaveBalanceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveBalancesAsync
     *
     * Get Leave Balances
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveBalancesAsync($employee_id, $as_at_date = null, string $contentType = self::contentTypes['essLeaveBalances'][0])
    {
        return $this->essLeaveBalancesAsyncWithHttpInfo($employee_id, $as_at_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveBalancesAsyncWithHttpInfo
     *
     * Get Leave Balances
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveBalancesAsyncWithHttpInfo($employee_id, $as_at_date = null, string $contentType = self::contentTypes['essLeaveBalances'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LeaveBalanceModel[]';
        $request = $this->essLeaveBalancesRequest($employee_id, $as_at_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveBalances'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveBalancesRequest($employee_id, $as_at_date = null, string $contentType = self::contentTypes['essLeaveBalances'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveBalances'
            );
        }



        $resourcePath = '/api/v2/ess/{employeeId}/leave/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $as_at_date,
            'asAtDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveCancel
     *
     * Delete Leave Request
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveCancel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essLeaveCancel($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveCancel'][0])
    {
        $this->essLeaveCancelWithHttpInfo($leave_request_id, $employee_id, $contentType);
    }

    /**
     * Operation essLeaveCancelWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveCancel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveCancelWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveCancel'][0])
    {
        $request = $this->essLeaveCancelRequest($leave_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveCancelAsync
     *
     * Delete Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveCancelAsync($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveCancel'][0])
    {
        return $this->essLeaveCancelAsyncWithHttpInfo($leave_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveCancelAsyncWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveCancelAsyncWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveCancel'][0])
    {
        $returnType = '';
        $request = $this->essLeaveCancelRequest($leave_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveCancel'
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveCancelRequest($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveCancel'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling essLeaveCancel'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveCancel'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveDeleteAttachment
     *
     * Delete Attachment from Leave Request
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essLeaveDeleteAttachment($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveDeleteAttachment'][0])
    {
        $this->essLeaveDeleteAttachmentWithHttpInfo($leave_request_id, $employee_id, $contentType);
    }

    /**
     * Operation essLeaveDeleteAttachmentWithHttpInfo
     *
     * Delete Attachment from Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveDeleteAttachmentWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveDeleteAttachment'][0])
    {
        $request = $this->essLeaveDeleteAttachmentRequest($leave_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveDeleteAttachmentAsync
     *
     * Delete Attachment from Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveDeleteAttachmentAsync($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveDeleteAttachment'][0])
    {
        return $this->essLeaveDeleteAttachmentAsyncWithHttpInfo($leave_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveDeleteAttachmentAsyncWithHttpInfo
     *
     * Delete Attachment from Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveDeleteAttachmentAsyncWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveDeleteAttachment'][0])
    {
        $returnType = '';
        $request = $this->essLeaveDeleteAttachmentRequest($leave_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveDeleteAttachment'
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveDeleteAttachmentRequest($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveDeleteAttachment'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling essLeaveDeleteAttachment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveDeleteAttachment'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/{leaveRequestId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveEditLeave
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEditLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essLeaveEditLeave($leave_request_id, $employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveEditLeave'][0])
    {
        $this->essLeaveEditLeaveWithHttpInfo($leave_request_id, $employee_id, $leave_application, $contentType);
    }

    /**
     * Operation essLeaveEditLeaveWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEditLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveEditLeaveWithHttpInfo($leave_request_id, $employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveEditLeave'][0])
    {
        $request = $this->essLeaveEditLeaveRequest($leave_request_id, $employee_id, $leave_application, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveEditLeaveAsync
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEditLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveEditLeaveAsync($leave_request_id, $employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveEditLeave'][0])
    {
        return $this->essLeaveEditLeaveAsyncWithHttpInfo($leave_request_id, $employee_id, $leave_application, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveEditLeaveAsyncWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEditLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveEditLeaveAsyncWithHttpInfo($leave_request_id, $employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveEditLeave'][0])
    {
        $returnType = '';
        $request = $this->essLeaveEditLeaveRequest($leave_request_id, $employee_id, $leave_application, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveEditLeave'
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\LeaveApplicationWithAttachmentModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEditLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveEditLeaveRequest($leave_request_id, $employee_id, $leave_application, string $contentType = self::contentTypes['essLeaveEditLeave'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling essLeaveEditLeave'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveEditLeave'
            );
        }

        // verify the required parameter 'leave_application' is set
        if ($leave_application === null || (is_array($leave_application) && count($leave_application) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_application when calling essLeaveEditLeave'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave_application)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave_application));
            } else {
                $httpBody = $leave_application;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveEstimate
     *
     * Estimate Leave Hours
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  int $filter_leave_category_id filter_leave_category_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEstimate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssLeaveEstimate
     */
    public function essLeaveEstimate($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id = null, string $contentType = self::contentTypes['essLeaveEstimate'][0])
    {
        list($response) = $this->essLeaveEstimateWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveEstimateWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  int $filter_leave_category_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEstimate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssLeaveEstimate, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveEstimateWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id = null, string $contentType = self::contentTypes['essLeaveEstimate'][0])
    {
        $request = $this->essLeaveEstimateRequest($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssLeaveEstimate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssLeaveEstimate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssLeaveEstimate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssLeaveEstimate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssLeaveEstimate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveEstimateAsync
     *
     * Estimate Leave Hours
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  int $filter_leave_category_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveEstimateAsync($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id = null, string $contentType = self::contentTypes['essLeaveEstimate'][0])
    {
        return $this->essLeaveEstimateAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveEstimateAsyncWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  int $filter_leave_category_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveEstimateAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id = null, string $contentType = self::contentTypes['essLeaveEstimate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssLeaveEstimate';
        $request = $this->essLeaveEstimateRequest($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveEstimate'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date Required (required)
     * @param  \DateTime $filter_to_date Required (required)
     * @param  int $filter_leave_category_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveEstimateRequest($employee_id, $filter_from_date, $filter_to_date, $filter_leave_category_id = null, string $contentType = self::contentTypes['essLeaveEstimate'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveEstimate'
            );
        }

        // verify the required parameter 'filter_from_date' is set
        if ($filter_from_date === null || (is_array($filter_from_date) && count($filter_from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_from_date when calling essLeaveEstimate'
            );
        }

        // verify the required parameter 'filter_to_date' is set
        if ($filter_to_date === null || (is_array($filter_to_date) && count($filter_to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_to_date when calling essLeaveEstimate'
            );
        }



        $resourcePath = '/api/v2/ess/{employeeId}/leave/estimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_leave_category_id,
            'filter.leaveCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveLeaveCategories
     *
     * Get Leave Categories
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssLeaveCategoryModel[]
     */
    public function essLeaveLeaveCategories($employee_id, string $contentType = self::contentTypes['essLeaveLeaveCategories'][0])
    {
        list($response) = $this->essLeaveLeaveCategoriesWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveLeaveCategoriesWithHttpInfo
     *
     * Get Leave Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssLeaveCategoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveLeaveCategoriesWithHttpInfo($employee_id, string $contentType = self::contentTypes['essLeaveLeaveCategories'][0])
    {
        $request = $this->essLeaveLeaveCategoriesRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssLeaveCategoryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssLeaveCategoryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssLeaveCategoryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssLeaveCategoryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssLeaveCategoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveLeaveCategoriesAsync
     *
     * Get Leave Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveCategoriesAsync($employee_id, string $contentType = self::contentTypes['essLeaveLeaveCategories'][0])
    {
        return $this->essLeaveLeaveCategoriesAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveLeaveCategoriesAsyncWithHttpInfo
     *
     * Get Leave Categories
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveCategoriesAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essLeaveLeaveCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssLeaveCategoryModel[]';
        $request = $this->essLeaveLeaveCategoriesRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveLeaveCategories'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveLeaveCategoriesRequest($employee_id, string $contentType = self::contentTypes['essLeaveLeaveCategories'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveLeaveCategories'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/leavecategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveLeaveRequest
     *
     * Get Leave Request by ID
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssLeaveRequestModel
     */
    public function essLeaveLeaveRequest($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveLeaveRequest'][0])
    {
        list($response) = $this->essLeaveLeaveRequestWithHttpInfo($leave_request_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveLeaveRequestWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveLeaveRequestWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveLeaveRequest'][0])
    {
        $request = $this->essLeaveLeaveRequestRequest($leave_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveLeaveRequestAsync
     *
     * Get Leave Request by ID
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveRequestAsync($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveLeaveRequest'][0])
    {
        return $this->essLeaveLeaveRequestAsyncWithHttpInfo($leave_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveLeaveRequestAsyncWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveRequestAsyncWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveLeaveRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssLeaveRequestModel';
        $request = $this->essLeaveLeaveRequestRequest($leave_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveLeaveRequest'
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveLeaveRequestRequest($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveLeaveRequest'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling essLeaveLeaveRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveLeaveRequest'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveLeaveRequests
     *
     * List Leave Requests
     *
     * @param  string $employee_id employee_id (required)
     * @param  bool $filter_show_other_employees filter_show_other_employees (optional)
     * @param  bool $filter_approved_only filter_approved_only (optional)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssLeaveRequestModel[]
     */
    public function essLeaveLeaveRequests($employee_id, $filter_show_other_employees = null, $filter_approved_only = null, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essLeaveLeaveRequests'][0])
    {
        list($response) = $this->essLeaveLeaveRequestsWithHttpInfo($employee_id, $filter_show_other_employees, $filter_approved_only, $filter_from_date, $filter_to_date, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveLeaveRequestsWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  string $employee_id (required)
     * @param  bool $filter_show_other_employees (optional)
     * @param  bool $filter_approved_only (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssLeaveRequestModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveLeaveRequestsWithHttpInfo($employee_id, $filter_show_other_employees = null, $filter_approved_only = null, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essLeaveLeaveRequests'][0])
    {
        $request = $this->essLeaveLeaveRequestsRequest($employee_id, $filter_show_other_employees, $filter_approved_only, $filter_from_date, $filter_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssLeaveRequestModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssLeaveRequestModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssLeaveRequestModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssLeaveRequestModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssLeaveRequestModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveLeaveRequestsAsync
     *
     * List Leave Requests
     *
     * @param  string $employee_id (required)
     * @param  bool $filter_show_other_employees (optional)
     * @param  bool $filter_approved_only (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveRequestsAsync($employee_id, $filter_show_other_employees = null, $filter_approved_only = null, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essLeaveLeaveRequests'][0])
    {
        return $this->essLeaveLeaveRequestsAsyncWithHttpInfo($employee_id, $filter_show_other_employees, $filter_approved_only, $filter_from_date, $filter_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveLeaveRequestsAsyncWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  string $employee_id (required)
     * @param  bool $filter_show_other_employees (optional)
     * @param  bool $filter_approved_only (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveLeaveRequestsAsyncWithHttpInfo($employee_id, $filter_show_other_employees = null, $filter_approved_only = null, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essLeaveLeaveRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssLeaveRequestModel[]';
        $request = $this->essLeaveLeaveRequestsRequest($employee_id, $filter_show_other_employees, $filter_approved_only, $filter_from_date, $filter_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveLeaveRequests'
     *
     * @param  string $employee_id (required)
     * @param  bool $filter_show_other_employees (optional)
     * @param  bool $filter_approved_only (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveLeaveRequestsRequest($employee_id, $filter_show_other_employees = null, $filter_approved_only = null, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essLeaveLeaveRequests'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveLeaveRequests'
            );
        }






        $resourcePath = '/api/v2/ess/{employeeId}/leave';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_show_other_employees,
            'filter.showOtherEmployees', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_approved_only,
            'filter.approvedOnly', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essLeaveUpload
     *
     * Upload Attachment to Leave Request
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function essLeaveUpload($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveUpload'][0])
    {
        list($response) = $this->essLeaveUploadWithHttpInfo($leave_request_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essLeaveUploadWithHttpInfo
     *
     * Upload Attachment to Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveUpload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function essLeaveUploadWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveUpload'][0])
    {
        $request = $this->essLeaveUploadRequest($leave_request_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essLeaveUploadAsync
     *
     * Upload Attachment to Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveUploadAsync($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveUpload'][0])
    {
        return $this->essLeaveUploadAsyncWithHttpInfo($leave_request_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essLeaveUploadAsyncWithHttpInfo
     *
     * Upload Attachment to Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essLeaveUploadAsyncWithHttpInfo($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveUpload'][0])
    {
        $returnType = 'object';
        $request = $this->essLeaveUploadRequest($leave_request_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essLeaveUpload'
     *
     * @param  int $leave_request_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essLeaveUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essLeaveUploadRequest($leave_request_id, $employee_id, string $contentType = self::contentTypes['essLeaveUpload'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling essLeaveUpload'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essLeaveUpload'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/leave/{leaveRequestId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essProfileImageDelete
     *
     * Delete Employee Profile Image
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essProfileImageDelete($employee_id, string $contentType = self::contentTypes['essProfileImageDelete'][0])
    {
        $this->essProfileImageDeleteWithHttpInfo($employee_id, $contentType);
    }

    /**
     * Operation essProfileImageDeleteWithHttpInfo
     *
     * Delete Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essProfileImageDeleteWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImageDelete'][0])
    {
        $request = $this->essProfileImageDeleteRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essProfileImageDeleteAsync
     *
     * Delete Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImageDeleteAsync($employee_id, string $contentType = self::contentTypes['essProfileImageDelete'][0])
    {
        return $this->essProfileImageDeleteAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essProfileImageDeleteAsyncWithHttpInfo
     *
     * Delete Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImageDeleteAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImageDelete'][0])
    {
        $returnType = '';
        $request = $this->essProfileImageDeleteRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essProfileImageDelete'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essProfileImageDeleteRequest($employee_id, string $contentType = self::contentTypes['essProfileImageDelete'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essProfileImageDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/profileimage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essProfileImageGetImage
     *
     * Get Employee Profile Image
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageGetImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essProfileImageGetImage($employee_id, string $contentType = self::contentTypes['essProfileImageGetImage'][0])
    {
        $this->essProfileImageGetImageWithHttpInfo($employee_id, $contentType);
    }

    /**
     * Operation essProfileImageGetImageWithHttpInfo
     *
     * Get Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageGetImage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essProfileImageGetImageWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImageGetImage'][0])
    {
        $request = $this->essProfileImageGetImageRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essProfileImageGetImageAsync
     *
     * Get Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageGetImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImageGetImageAsync($employee_id, string $contentType = self::contentTypes['essProfileImageGetImage'][0])
    {
        return $this->essProfileImageGetImageAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essProfileImageGetImageAsyncWithHttpInfo
     *
     * Get Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageGetImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImageGetImageAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImageGetImage'][0])
    {
        $returnType = '';
        $request = $this->essProfileImageGetImageRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essProfileImageGetImage'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImageGetImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essProfileImageGetImageRequest($employee_id, string $contentType = self::contentTypes['essProfileImageGetImage'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essProfileImageGetImage'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/profileimage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essProfileImagePost
     *
     * Set Employee Profile Image
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProfileImageMetadata
     */
    public function essProfileImagePost($employee_id, string $contentType = self::contentTypes['essProfileImagePost'][0])
    {
        list($response) = $this->essProfileImagePostWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essProfileImagePostWithHttpInfo
     *
     * Set Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProfileImageMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function essProfileImagePostWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImagePost'][0])
    {
        $request = $this->essProfileImagePostRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProfileImageMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProfileImageMetadata' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProfileImageMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProfileImageMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProfileImageMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essProfileImagePostAsync
     *
     * Set Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImagePostAsync($employee_id, string $contentType = self::contentTypes['essProfileImagePost'][0])
    {
        return $this->essProfileImagePostAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essProfileImagePostAsyncWithHttpInfo
     *
     * Set Employee Profile Image
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essProfileImagePostAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essProfileImagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProfileImageMetadata';
        $request = $this->essProfileImagePostRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essProfileImagePost'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essProfileImagePostRequest($employee_id, string $contentType = self::contentTypes['essProfileImagePost'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essProfileImagePost'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/profileimage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationDelete
     *
     * Delete Employee Qualification
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essQualificationDelete($id, $employee_id, string $contentType = self::contentTypes['essQualificationDelete'][0])
    {
        $this->essQualificationDeleteWithHttpInfo($id, $employee_id, $contentType);
    }

    /**
     * Operation essQualificationDeleteWithHttpInfo
     *
     * Delete Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationDeleteWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['essQualificationDelete'][0])
    {
        $request = $this->essQualificationDeleteRequest($id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationDeleteAsync
     *
     * Delete Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationDeleteAsync($id, $employee_id, string $contentType = self::contentTypes['essQualificationDelete'][0])
    {
        return $this->essQualificationDeleteAsyncWithHttpInfo($id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationDeleteAsyncWithHttpInfo
     *
     * Delete Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationDeleteAsyncWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['essQualificationDelete'][0])
    {
        $returnType = '';
        $request = $this->essQualificationDeleteRequest($id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationDelete'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationDeleteRequest($id, $employee_id, string $contentType = self::contentTypes['essQualificationDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling essQualificationDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationDeleteAttachment
     *
     * Delete attachment from EmployeeQualification
     *
     * @param  int $employee_qualification_id employee_qualification_id (required)
     * @param  int $document_id document_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essQualificationDeleteAttachment($employee_qualification_id, $document_id, $employee_id, string $contentType = self::contentTypes['essQualificationDeleteAttachment'][0])
    {
        $this->essQualificationDeleteAttachmentWithHttpInfo($employee_qualification_id, $document_id, $employee_id, $contentType);
    }

    /**
     * Operation essQualificationDeleteAttachmentWithHttpInfo
     *
     * Delete attachment from EmployeeQualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationDeleteAttachmentWithHttpInfo($employee_qualification_id, $document_id, $employee_id, string $contentType = self::contentTypes['essQualificationDeleteAttachment'][0])
    {
        $request = $this->essQualificationDeleteAttachmentRequest($employee_qualification_id, $document_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationDeleteAttachmentAsync
     *
     * Delete attachment from EmployeeQualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationDeleteAttachmentAsync($employee_qualification_id, $document_id, $employee_id, string $contentType = self::contentTypes['essQualificationDeleteAttachment'][0])
    {
        return $this->essQualificationDeleteAttachmentAsyncWithHttpInfo($employee_qualification_id, $document_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationDeleteAttachmentAsyncWithHttpInfo
     *
     * Delete attachment from EmployeeQualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationDeleteAttachmentAsyncWithHttpInfo($employee_qualification_id, $document_id, $employee_id, string $contentType = self::contentTypes['essQualificationDeleteAttachment'][0])
    {
        $returnType = '';
        $request = $this->essQualificationDeleteAttachmentRequest($employee_qualification_id, $document_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationDeleteAttachment'
     *
     * @param  int $employee_qualification_id (required)
     * @param  int $document_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationDeleteAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationDeleteAttachmentRequest($employee_qualification_id, $document_id, $employee_id, string $contentType = self::contentTypes['essQualificationDeleteAttachment'][0])
    {

        // verify the required parameter 'employee_qualification_id' is set
        if ($employee_qualification_id === null || (is_array($employee_qualification_id) && count($employee_qualification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_qualification_id when calling essQualificationDeleteAttachment'
            );
        }

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling essQualificationDeleteAttachment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationDeleteAttachment'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification/{employeeQualificationId}/attachment/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_qualification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeQualificationId' . '}',
                ObjectSerializer::toPathValue($employee_qualification_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationGet
     *
     * Get Qualification Details
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssEmployeeQualificationModel
     */
    public function essQualificationGet($id, $employee_id, string $contentType = self::contentTypes['essQualificationGet'][0])
    {
        list($response) = $this->essQualificationGetWithHttpInfo($id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essQualificationGetWithHttpInfo
     *
     * Get Qualification Details
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssEmployeeQualificationModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationGetWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['essQualificationGet'][0])
    {
        $request = $this->essQualificationGetRequest($id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssEmployeeQualificationModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssEmployeeQualificationModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssEmployeeQualificationModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssEmployeeQualificationModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssEmployeeQualificationModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationGetAsync
     *
     * Get Qualification Details
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationGetAsync($id, $employee_id, string $contentType = self::contentTypes['essQualificationGet'][0])
    {
        return $this->essQualificationGetAsyncWithHttpInfo($id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationGetAsyncWithHttpInfo
     *
     * Get Qualification Details
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationGetAsyncWithHttpInfo($id, $employee_id, string $contentType = self::contentTypes['essQualificationGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssEmployeeQualificationModel';
        $request = $this->essQualificationGetRequest($id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationGet'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationGetRequest($id, $employee_id, string $contentType = self::contentTypes['essQualificationGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling essQualificationGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationGet'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationGetQualifications
     *
     * Get Qualifications for Employee
     *
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGetQualifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssEmployeeQualificationModel[]
     */
    public function essQualificationGetQualifications($employee_id, string $contentType = self::contentTypes['essQualificationGetQualifications'][0])
    {
        list($response) = $this->essQualificationGetQualificationsWithHttpInfo($employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essQualificationGetQualificationsWithHttpInfo
     *
     * Get Qualifications for Employee
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGetQualifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssEmployeeQualificationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationGetQualificationsWithHttpInfo($employee_id, string $contentType = self::contentTypes['essQualificationGetQualifications'][0])
    {
        $request = $this->essQualificationGetQualificationsRequest($employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssEmployeeQualificationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssEmployeeQualificationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssEmployeeQualificationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssEmployeeQualificationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssEmployeeQualificationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationGetQualificationsAsync
     *
     * Get Qualifications for Employee
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGetQualifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationGetQualificationsAsync($employee_id, string $contentType = self::contentTypes['essQualificationGetQualifications'][0])
    {
        return $this->essQualificationGetQualificationsAsyncWithHttpInfo($employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationGetQualificationsAsyncWithHttpInfo
     *
     * Get Qualifications for Employee
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGetQualifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationGetQualificationsAsyncWithHttpInfo($employee_id, string $contentType = self::contentTypes['essQualificationGetQualifications'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssEmployeeQualificationModel[]';
        $request = $this->essQualificationGetQualificationsRequest($employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationGetQualifications'
     *
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationGetQualifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationGetQualificationsRequest($employee_id, string $contentType = self::contentTypes['essQualificationGetQualifications'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationGetQualifications'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationPost
     *
     * Add Employee Qualification
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essQualificationPost($employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPost'][0])
    {
        $this->essQualificationPostWithHttpInfo($employee_id, $qualification, $contentType);
    }

    /**
     * Operation essQualificationPostWithHttpInfo
     *
     * Add Employee Qualification
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationPostWithHttpInfo($employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPost'][0])
    {
        $request = $this->essQualificationPostRequest($employee_id, $qualification, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationPostAsync
     *
     * Add Employee Qualification
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationPostAsync($employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPost'][0])
    {
        return $this->essQualificationPostAsyncWithHttpInfo($employee_id, $qualification, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationPostAsyncWithHttpInfo
     *
     * Add Employee Qualification
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationPostAsyncWithHttpInfo($employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPost'][0])
    {
        $returnType = '';
        $request = $this->essQualificationPostRequest($employee_id, $qualification, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationPost'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationPostRequest($employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPost'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationPost'
            );
        }

        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling essQualificationPost'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qualification)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qualification));
            } else {
                $httpBody = $qualification;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationPut
     *
     * Update Employee Qualification
     *
     * @param  int $id id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essQualificationPut($id, $employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPut'][0])
    {
        $this->essQualificationPutWithHttpInfo($id, $employee_id, $qualification, $contentType);
    }

    /**
     * Operation essQualificationPutWithHttpInfo
     *
     * Update Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationPutWithHttpInfo($id, $employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPut'][0])
    {
        $request = $this->essQualificationPutRequest($id, $employee_id, $qualification, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationPutAsync
     *
     * Update Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationPutAsync($id, $employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPut'][0])
    {
        return $this->essQualificationPutAsyncWithHttpInfo($id, $employee_id, $qualification, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationPutAsyncWithHttpInfo
     *
     * Update Employee Qualification
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationPutAsyncWithHttpInfo($id, $employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPut'][0])
    {
        $returnType = '';
        $request = $this->essQualificationPutRequest($id, $employee_id, $qualification, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationPut'
     *
     * @param  int $id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\EssEmployeeQualificationModel $qualification (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationPutRequest($id, $employee_id, $qualification, string $contentType = self::contentTypes['essQualificationPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling essQualificationPut'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationPut'
            );
        }

        // verify the required parameter 'qualification' is set
        if ($qualification === null || (is_array($qualification) && count($qualification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qualification when calling essQualificationPut'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qualification)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qualification));
            } else {
                $httpBody = $qualification;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essQualificationUploadAttachment
     *
     * Upload attachment to qualification
     *
     * @param  int $employee_qualification_id employee_qualification_id (required)
     * @param  string $file_name file_name (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function essQualificationUploadAttachment($employee_qualification_id, $file_name, $employee_id, string $contentType = self::contentTypes['essQualificationUploadAttachment'][0])
    {
        list($response) = $this->essQualificationUploadAttachmentWithHttpInfo($employee_qualification_id, $file_name, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essQualificationUploadAttachmentWithHttpInfo
     *
     * Upload attachment to qualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function essQualificationUploadAttachmentWithHttpInfo($employee_qualification_id, $file_name, $employee_id, string $contentType = self::contentTypes['essQualificationUploadAttachment'][0])
    {
        $request = $this->essQualificationUploadAttachmentRequest($employee_qualification_id, $file_name, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essQualificationUploadAttachmentAsync
     *
     * Upload attachment to qualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationUploadAttachmentAsync($employee_qualification_id, $file_name, $employee_id, string $contentType = self::contentTypes['essQualificationUploadAttachment'][0])
    {
        return $this->essQualificationUploadAttachmentAsyncWithHttpInfo($employee_qualification_id, $file_name, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essQualificationUploadAttachmentAsyncWithHttpInfo
     *
     * Upload attachment to qualification
     *
     * @param  int $employee_qualification_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essQualificationUploadAttachmentAsyncWithHttpInfo($employee_qualification_id, $file_name, $employee_id, string $contentType = self::contentTypes['essQualificationUploadAttachment'][0])
    {
        $returnType = 'object';
        $request = $this->essQualificationUploadAttachmentRequest($employee_qualification_id, $file_name, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essQualificationUploadAttachment'
     *
     * @param  int $employee_qualification_id (required)
     * @param  string $file_name (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essQualificationUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essQualificationUploadAttachmentRequest($employee_qualification_id, $file_name, $employee_id, string $contentType = self::contentTypes['essQualificationUploadAttachment'][0])
    {

        // verify the required parameter 'employee_qualification_id' is set
        if ($employee_qualification_id === null || (is_array($employee_qualification_id) && count($employee_qualification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_qualification_id when calling essQualificationUploadAttachment'
            );
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling essQualificationUploadAttachment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essQualificationUploadAttachment'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/qualification/{employeeQualificationId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            'fileName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_qualification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeQualificationId' . '}',
                ObjectSerializer::toPathValue($employee_qualification_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essSecurityEmployees
     *
     * Get Employees
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AvailableEmployeeModel[]
     */
    public function essSecurityEmployees(string $contentType = self::contentTypes['essSecurityEmployees'][0])
    {
        list($response) = $this->essSecurityEmployeesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation essSecurityEmployeesWithHttpInfo
     *
     * Get Employees
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AvailableEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essSecurityEmployeesWithHttpInfo(string $contentType = self::contentTypes['essSecurityEmployees'][0])
    {
        $request = $this->essSecurityEmployeesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AvailableEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AvailableEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AvailableEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AvailableEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AvailableEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essSecurityEmployeesAsync
     *
     * Get Employees
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essSecurityEmployeesAsync(string $contentType = self::contentTypes['essSecurityEmployees'][0])
    {
        return $this->essSecurityEmployeesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essSecurityEmployeesAsyncWithHttpInfo
     *
     * Get Employees
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essSecurityEmployeesAsyncWithHttpInfo(string $contentType = self::contentTypes['essSecurityEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AvailableEmployeeModel[]';
        $request = $this->essSecurityEmployeesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essSecurityEmployees'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essSecurityEmployeesRequest(string $contentType = self::contentTypes['essSecurityEmployees'][0])
    {


        $resourcePath = '/api/v2/ess/security/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essSecurityForgottenPassword
     *
     * Recover Forgotten Password
     *
     * @param  \OpenAPI\Client\Model\RecoverPasswordModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityForgottenPassword'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essSecurityForgottenPassword($model, string $contentType = self::contentTypes['essSecurityForgottenPassword'][0])
    {
        $this->essSecurityForgottenPasswordWithHttpInfo($model, $contentType);
    }

    /**
     * Operation essSecurityForgottenPasswordWithHttpInfo
     *
     * Recover Forgotten Password
     *
     * @param  \OpenAPI\Client\Model\RecoverPasswordModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityForgottenPassword'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essSecurityForgottenPasswordWithHttpInfo($model, string $contentType = self::contentTypes['essSecurityForgottenPassword'][0])
    {
        $request = $this->essSecurityForgottenPasswordRequest($model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essSecurityForgottenPasswordAsync
     *
     * Recover Forgotten Password
     *
     * @param  \OpenAPI\Client\Model\RecoverPasswordModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityForgottenPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essSecurityForgottenPasswordAsync($model, string $contentType = self::contentTypes['essSecurityForgottenPassword'][0])
    {
        return $this->essSecurityForgottenPasswordAsyncWithHttpInfo($model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essSecurityForgottenPasswordAsyncWithHttpInfo
     *
     * Recover Forgotten Password
     *
     * @param  \OpenAPI\Client\Model\RecoverPasswordModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityForgottenPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essSecurityForgottenPasswordAsyncWithHttpInfo($model, string $contentType = self::contentTypes['essSecurityForgottenPassword'][0])
    {
        $returnType = '';
        $request = $this->essSecurityForgottenPasswordRequest($model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essSecurityForgottenPassword'
     *
     * @param  \OpenAPI\Client\Model\RecoverPasswordModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essSecurityForgottenPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essSecurityForgottenPasswordRequest($model, string $contentType = self::contentTypes['essSecurityForgottenPassword'][0])
    {

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling essSecurityForgottenPassword'
            );
        }


        $resourcePath = '/api/v2/ess/security/forgottenpassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essUnavailabilityCreate
     *
     * Create Unavailability
     *
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssUnavailabilityModel
     */
    public function essUnavailabilityCreate($employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilityCreate'][0])
    {
        list($response) = $this->essUnavailabilityCreateWithHttpInfo($employee_id, $unavailability, $contentType);
        return $response;
    }

    /**
     * Operation essUnavailabilityCreateWithHttpInfo
     *
     * Create Unavailability
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssUnavailabilityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essUnavailabilityCreateWithHttpInfo($employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilityCreate'][0])
    {
        $request = $this->essUnavailabilityCreateRequest($employee_id, $unavailability, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssUnavailabilityModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssUnavailabilityModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssUnavailabilityModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssUnavailabilityModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essUnavailabilityCreateAsync
     *
     * Create Unavailability
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityCreateAsync($employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilityCreate'][0])
    {
        return $this->essUnavailabilityCreateAsyncWithHttpInfo($employee_id, $unavailability, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essUnavailabilityCreateAsyncWithHttpInfo
     *
     * Create Unavailability
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityCreateAsyncWithHttpInfo($employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilityCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel';
        $request = $this->essUnavailabilityCreateRequest($employee_id, $unavailability, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essUnavailabilityCreate'
     *
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essUnavailabilityCreateRequest($employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilityCreate'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essUnavailabilityCreate'
            );
        }

        // verify the required parameter 'unavailability' is set
        if ($unavailability === null || (is_array($unavailability) && count($unavailability) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability when calling essUnavailabilityCreate'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/unavailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unavailability)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unavailability));
            } else {
                $httpBody = $unavailability;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essUnavailabilityDelete
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id unavailability_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essUnavailabilityDelete($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityDelete'][0])
    {
        $this->essUnavailabilityDeleteWithHttpInfo($unavailability_id, $employee_id, $contentType);
    }

    /**
     * Operation essUnavailabilityDeleteWithHttpInfo
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essUnavailabilityDeleteWithHttpInfo($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityDelete'][0])
    {
        $request = $this->essUnavailabilityDeleteRequest($unavailability_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essUnavailabilityDeleteAsync
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityDeleteAsync($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityDelete'][0])
    {
        return $this->essUnavailabilityDeleteAsyncWithHttpInfo($unavailability_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essUnavailabilityDeleteAsyncWithHttpInfo
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityDeleteAsyncWithHttpInfo($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityDelete'][0])
    {
        $returnType = '';
        $request = $this->essUnavailabilityDeleteRequest($unavailability_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essUnavailabilityDelete'
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essUnavailabilityDeleteRequest($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityDelete'][0])
    {

        // verify the required parameter 'unavailability_id' is set
        if ($unavailability_id === null || (is_array($unavailability_id) && count($unavailability_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability_id when calling essUnavailabilityDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essUnavailabilityDelete'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/unavailability/{unavailabilityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($unavailability_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unavailabilityId' . '}',
                ObjectSerializer::toPathValue($unavailability_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essUnavailabilityGet
     *
     * Get unavailability by ID
     *
     * @param  int $unavailability_id unavailability_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssUnavailabilityModel
     */
    public function essUnavailabilityGet($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityGet'][0])
    {
        list($response) = $this->essUnavailabilityGetWithHttpInfo($unavailability_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation essUnavailabilityGetWithHttpInfo
     *
     * Get unavailability by ID
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssUnavailabilityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function essUnavailabilityGetWithHttpInfo($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityGet'][0])
    {
        $request = $this->essUnavailabilityGetRequest($unavailability_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssUnavailabilityModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssUnavailabilityModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssUnavailabilityModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssUnavailabilityModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essUnavailabilityGetAsync
     *
     * Get unavailability by ID
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityGetAsync($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityGet'][0])
    {
        return $this->essUnavailabilityGetAsyncWithHttpInfo($unavailability_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essUnavailabilityGetAsyncWithHttpInfo
     *
     * Get unavailability by ID
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityGetAsyncWithHttpInfo($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel';
        $request = $this->essUnavailabilityGetRequest($unavailability_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essUnavailabilityGet'
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essUnavailabilityGetRequest($unavailability_id, $employee_id, string $contentType = self::contentTypes['essUnavailabilityGet'][0])
    {

        // verify the required parameter 'unavailability_id' is set
        if ($unavailability_id === null || (is_array($unavailability_id) && count($unavailability_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability_id when calling essUnavailabilityGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essUnavailabilityGet'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/unavailability/{unavailabilityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($unavailability_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unavailabilityId' . '}',
                ObjectSerializer::toPathValue($unavailability_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essUnavailabilityList
     *
     * List Unavailabilities
     *
     * @param  string $employee_id employee_id (required)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EssUnavailabilityModel[]
     */
    public function essUnavailabilityList($employee_id, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essUnavailabilityList'][0])
    {
        list($response) = $this->essUnavailabilityListWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType);
        return $response;
    }

    /**
     * Operation essUnavailabilityListWithHttpInfo
     *
     * List Unavailabilities
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EssUnavailabilityModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function essUnavailabilityListWithHttpInfo($employee_id, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essUnavailabilityList'][0])
    {
        $request = $this->essUnavailabilityListRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EssUnavailabilityModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EssUnavailabilityModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EssUnavailabilityModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EssUnavailabilityModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation essUnavailabilityListAsync
     *
     * List Unavailabilities
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityListAsync($employee_id, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essUnavailabilityList'][0])
    {
        return $this->essUnavailabilityListAsyncWithHttpInfo($employee_id, $filter_from_date, $filter_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essUnavailabilityListAsyncWithHttpInfo
     *
     * List Unavailabilities
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilityListAsyncWithHttpInfo($employee_id, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essUnavailabilityList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EssUnavailabilityModel[]';
        $request = $this->essUnavailabilityListRequest($employee_id, $filter_from_date, $filter_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essUnavailabilityList'
     *
     * @param  string $employee_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilityList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essUnavailabilityListRequest($employee_id, $filter_from_date = null, $filter_to_date = null, string $contentType = self::contentTypes['essUnavailabilityList'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essUnavailabilityList'
            );
        }




        $resourcePath = '/api/v2/ess/{employeeId}/unavailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation essUnavailabilitySave
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id unavailability_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilitySave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function essUnavailabilitySave($unavailability_id, $employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilitySave'][0])
    {
        $this->essUnavailabilitySaveWithHttpInfo($unavailability_id, $employee_id, $unavailability, $contentType);
    }

    /**
     * Operation essUnavailabilitySaveWithHttpInfo
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilitySave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function essUnavailabilitySaveWithHttpInfo($unavailability_id, $employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilitySave'][0])
    {
        $request = $this->essUnavailabilitySaveRequest($unavailability_id, $employee_id, $unavailability, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation essUnavailabilitySaveAsync
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilitySave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilitySaveAsync($unavailability_id, $employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilitySave'][0])
    {
        return $this->essUnavailabilitySaveAsyncWithHttpInfo($unavailability_id, $employee_id, $unavailability, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation essUnavailabilitySaveAsyncWithHttpInfo
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilitySave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function essUnavailabilitySaveAsyncWithHttpInfo($unavailability_id, $employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilitySave'][0])
    {
        $returnType = '';
        $request = $this->essUnavailabilitySaveRequest($unavailability_id, $employee_id, $unavailability, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'essUnavailabilitySave'
     *
     * @param  int $unavailability_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $unavailability (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['essUnavailabilitySave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function essUnavailabilitySaveRequest($unavailability_id, $employee_id, $unavailability, string $contentType = self::contentTypes['essUnavailabilitySave'][0])
    {

        // verify the required parameter 'unavailability_id' is set
        if ($unavailability_id === null || (is_array($unavailability_id) && count($unavailability_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability_id when calling essUnavailabilitySave'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling essUnavailabilitySave'
            );
        }

        // verify the required parameter 'unavailability' is set
        if ($unavailability === null || (is_array($unavailability) && count($unavailability) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability when calling essUnavailabilitySave'
            );
        }


        $resourcePath = '/api/v2/ess/{employeeId}/unavailability/{unavailabilityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($unavailability_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unavailabilityId' . '}',
                ObjectSerializer::toPathValue($unavailability_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unavailability)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unavailability));
            } else {
                $httpBody = $unavailability;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
