<?php
/**
 * InvoicesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'invoiceGetBrandInvoiceById' => [
            'application/json',
        ],
        'invoiceGetBrandInvoiceExcelById' => [
            'application/json',
        ],
        'invoiceGetBrandInvoicePdfById' => [
            'application/json',
        ],
        'invoiceGetBrandInvoices' => [
            'application/json',
        ],
        'invoiceGetBusinessInvoiceById' => [
            'application/json',
        ],
        'invoiceGetBusinessInvoicePdfById' => [
            'application/json',
        ],
        'invoiceGetBusinessInvoices' => [
            'application/json',
        ],
        'invoiceGetResellerInvoiceById' => [
            'application/json',
        ],
        'invoiceGetResellerInvoiceExcelById' => [
            'application/json',
        ],
        'invoiceGetResellerInvoicePdfById' => [
            'application/json',
        ],
        'invoiceGetResellerInvoices' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation invoiceGetBrandInvoiceById
     *
     * Get Brand Invoice By ID
     *
     * @param  int $id id (required)
     * @param  int $brand_id brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel
     */
    public function invoiceGetBrandInvoiceById($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceById'][0])
    {
        list($response) = $this->invoiceGetBrandInvoiceByIdWithHttpInfo($id, $brand_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBrandInvoiceByIdWithHttpInfo
     *
     * Get Brand Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBrandInvoiceByIdWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceById'][0])
    {
        $request = $this->invoiceGetBrandInvoiceByIdRequest($id, $brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBrandInvoiceByIdAsync
     *
     * Get Brand Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoiceByIdAsync($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceById'][0])
    {
        return $this->invoiceGetBrandInvoiceByIdAsyncWithHttpInfo($id, $brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBrandInvoiceByIdAsyncWithHttpInfo
     *
     * Get Brand Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoiceByIdAsyncWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel';
        $request = $this->invoiceGetBrandInvoiceByIdRequest($id, $brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBrandInvoiceById'
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBrandInvoiceByIdRequest($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetBrandInvoiceById'
            );
        }

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling invoiceGetBrandInvoiceById'
            );
        }


        $resourcePath = '/api/v2/brand/{brandId}/Invoice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                '{' . 'brandId' . '}',
                ObjectSerializer::toPathValue($brand_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBrandInvoiceExcelById
     *
     * Get Brand Invoice Excel By ID
     *
     * @param  int $id id (required)
     * @param  int $brand_id brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function invoiceGetBrandInvoiceExcelById($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceExcelById'][0])
    {
        list($response) = $this->invoiceGetBrandInvoiceExcelByIdWithHttpInfo($id, $brand_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBrandInvoiceExcelByIdWithHttpInfo
     *
     * Get Brand Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBrandInvoiceExcelByIdWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceExcelById'][0])
    {
        $request = $this->invoiceGetBrandInvoiceExcelByIdRequest($id, $brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBrandInvoiceExcelByIdAsync
     *
     * Get Brand Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoiceExcelByIdAsync($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceExcelById'][0])
    {
        return $this->invoiceGetBrandInvoiceExcelByIdAsyncWithHttpInfo($id, $brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBrandInvoiceExcelByIdAsyncWithHttpInfo
     *
     * Get Brand Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoiceExcelByIdAsyncWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceExcelById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->invoiceGetBrandInvoiceExcelByIdRequest($id, $brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBrandInvoiceExcelById'
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBrandInvoiceExcelByIdRequest($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoiceExcelById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetBrandInvoiceExcelById'
            );
        }

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling invoiceGetBrandInvoiceExcelById'
            );
        }


        $resourcePath = '/api/v2/brand/{brandId}/Invoice/{id}/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                '{' . 'brandId' . '}',
                ObjectSerializer::toPathValue($brand_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBrandInvoicePdfById
     *
     * Get Brand Invoice PDF By ID
     *
     * @param  int $id id (required)
     * @param  int $brand_id brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function invoiceGetBrandInvoicePdfById($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoicePdfById'][0])
    {
        list($response) = $this->invoiceGetBrandInvoicePdfByIdWithHttpInfo($id, $brand_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBrandInvoicePdfByIdWithHttpInfo
     *
     * Get Brand Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBrandInvoicePdfByIdWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoicePdfById'][0])
    {
        $request = $this->invoiceGetBrandInvoicePdfByIdRequest($id, $brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBrandInvoicePdfByIdAsync
     *
     * Get Brand Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoicePdfByIdAsync($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoicePdfById'][0])
    {
        return $this->invoiceGetBrandInvoicePdfByIdAsyncWithHttpInfo($id, $brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBrandInvoicePdfByIdAsyncWithHttpInfo
     *
     * Get Brand Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoicePdfByIdAsyncWithHttpInfo($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoicePdfById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->invoiceGetBrandInvoicePdfByIdRequest($id, $brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBrandInvoicePdfById'
     *
     * @param  int $id (required)
     * @param  int $brand_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBrandInvoicePdfByIdRequest($id, $brand_id, string $contentType = self::contentTypes['invoiceGetBrandInvoicePdfById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetBrandInvoicePdfById'
            );
        }

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling invoiceGetBrandInvoicePdfById'
            );
        }


        $resourcePath = '/api/v2/brand/{brandId}/Invoice/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                '{' . 'brandId' . '}',
                ObjectSerializer::toPathValue($brand_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBrandInvoices
     *
     * Get Brand Invoices
     *
     * @param  int $brand_id brand_id (required)
     * @param  \DateTime $options_from_date options_from_date (optional)
     * @param  \DateTime $options_to_date options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel[]
     */
    public function invoiceGetBrandInvoices($brand_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBrandInvoices'][0])
    {
        list($response) = $this->invoiceGetBrandInvoicesWithHttpInfo($brand_id, $options_from_date, $options_to_date, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBrandInvoicesWithHttpInfo
     *
     * Get Brand Invoices
     *
     * @param  int $brand_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBrandInvoicesWithHttpInfo($brand_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBrandInvoices'][0])
    {
        $request = $this->invoiceGetBrandInvoicesRequest($brand_id, $options_from_date, $options_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBrandInvoicesAsync
     *
     * Get Brand Invoices
     *
     * @param  int $brand_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoicesAsync($brand_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBrandInvoices'][0])
    {
        return $this->invoiceGetBrandInvoicesAsyncWithHttpInfo($brand_id, $options_from_date, $options_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBrandInvoicesAsyncWithHttpInfo
     *
     * Get Brand Invoices
     *
     * @param  int $brand_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBrandInvoicesAsyncWithHttpInfo($brand_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBrandInvoices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
        $request = $this->invoiceGetBrandInvoicesRequest($brand_id, $options_from_date, $options_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBrandInvoices'
     *
     * @param  int $brand_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBrandInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBrandInvoicesRequest($brand_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBrandInvoices'][0])
    {

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling invoiceGetBrandInvoices'
            );
        }




        $resourcePath = '/api/v2/brand/{brandId}/Invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_from_date,
            'options.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_to_date,
            'options.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($brand_id !== null) {
            $resourcePath = str_replace(
                '{' . 'brandId' . '}',
                ObjectSerializer::toPathValue($brand_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBusinessInvoiceById
     *
     * Get Business Invoice By ID
     *
     * @param  int $id id (required)
     * @param  int $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel
     */
    public function invoiceGetBusinessInvoiceById($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoiceById'][0])
    {
        list($response) = $this->invoiceGetBusinessInvoiceByIdWithHttpInfo($id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBusinessInvoiceByIdWithHttpInfo
     *
     * Get Business Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBusinessInvoiceByIdWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoiceById'][0])
    {
        $request = $this->invoiceGetBusinessInvoiceByIdRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBusinessInvoiceByIdAsync
     *
     * Get Business Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoiceByIdAsync($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoiceById'][0])
    {
        return $this->invoiceGetBusinessInvoiceByIdAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBusinessInvoiceByIdAsyncWithHttpInfo
     *
     * Get Business Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoiceByIdAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoiceById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel';
        $request = $this->invoiceGetBusinessInvoiceByIdRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBusinessInvoiceById'
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBusinessInvoiceByIdRequest($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoiceById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetBusinessInvoiceById'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling invoiceGetBusinessInvoiceById'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/Invoice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBusinessInvoicePdfById
     *
     * Get Business Invoice PDF By ID
     *
     * @param  int $id id (required)
     * @param  int $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function invoiceGetBusinessInvoicePdfById($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoicePdfById'][0])
    {
        list($response) = $this->invoiceGetBusinessInvoicePdfByIdWithHttpInfo($id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBusinessInvoicePdfByIdWithHttpInfo
     *
     * Get Business Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBusinessInvoicePdfByIdWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoicePdfById'][0])
    {
        $request = $this->invoiceGetBusinessInvoicePdfByIdRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBusinessInvoicePdfByIdAsync
     *
     * Get Business Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoicePdfByIdAsync($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoicePdfById'][0])
    {
        return $this->invoiceGetBusinessInvoicePdfByIdAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBusinessInvoicePdfByIdAsyncWithHttpInfo
     *
     * Get Business Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoicePdfByIdAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoicePdfById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->invoiceGetBusinessInvoicePdfByIdRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBusinessInvoicePdfById'
     *
     * @param  int $id (required)
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBusinessInvoicePdfByIdRequest($id, $business_id, string $contentType = self::contentTypes['invoiceGetBusinessInvoicePdfById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetBusinessInvoicePdfById'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling invoiceGetBusinessInvoicePdfById'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/Invoice/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetBusinessInvoices
     *
     * Get Business Invoices
     *
     * @param  int $business_id business_id (required)
     * @param  \DateTime $options_from_date options_from_date (optional)
     * @param  \DateTime $options_to_date options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel[]
     */
    public function invoiceGetBusinessInvoices($business_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBusinessInvoices'][0])
    {
        list($response) = $this->invoiceGetBusinessInvoicesWithHttpInfo($business_id, $options_from_date, $options_to_date, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetBusinessInvoicesWithHttpInfo
     *
     * Get Business Invoices
     *
     * @param  int $business_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetBusinessInvoicesWithHttpInfo($business_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBusinessInvoices'][0])
    {
        $request = $this->invoiceGetBusinessInvoicesRequest($business_id, $options_from_date, $options_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetBusinessInvoicesAsync
     *
     * Get Business Invoices
     *
     * @param  int $business_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoicesAsync($business_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBusinessInvoices'][0])
    {
        return $this->invoiceGetBusinessInvoicesAsyncWithHttpInfo($business_id, $options_from_date, $options_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetBusinessInvoicesAsyncWithHttpInfo
     *
     * Get Business Invoices
     *
     * @param  int $business_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetBusinessInvoicesAsyncWithHttpInfo($business_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBusinessInvoices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
        $request = $this->invoiceGetBusinessInvoicesRequest($business_id, $options_from_date, $options_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetBusinessInvoices'
     *
     * @param  int $business_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetBusinessInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetBusinessInvoicesRequest($business_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetBusinessInvoices'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling invoiceGetBusinessInvoices'
            );
        }




        $resourcePath = '/api/v2/business/{businessId}/Invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_from_date,
            'options.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_to_date,
            'options.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetResellerInvoiceById
     *
     * Get Reseller Invoice By ID
     *
     * @param  int $id id (required)
     * @param  int $reseller_id reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel
     */
    public function invoiceGetResellerInvoiceById($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceById'][0])
    {
        list($response) = $this->invoiceGetResellerInvoiceByIdWithHttpInfo($id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetResellerInvoiceByIdWithHttpInfo
     *
     * Get Reseller Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetResellerInvoiceByIdWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceById'][0])
    {
        $request = $this->invoiceGetResellerInvoiceByIdRequest($id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetResellerInvoiceByIdAsync
     *
     * Get Reseller Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoiceByIdAsync($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceById'][0])
    {
        return $this->invoiceGetResellerInvoiceByIdAsyncWithHttpInfo($id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetResellerInvoiceByIdAsyncWithHttpInfo
     *
     * Get Reseller Invoice By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoiceByIdAsyncWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel';
        $request = $this->invoiceGetResellerInvoiceByIdRequest($id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetResellerInvoiceById'
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetResellerInvoiceByIdRequest($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetResellerInvoiceById'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling invoiceGetResellerInvoiceById'
            );
        }


        $resourcePath = '/api/v2/reseller/{resellerId}/Invoice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($reseller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerId' . '}',
                ObjectSerializer::toPathValue($reseller_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetResellerInvoiceExcelById
     *
     * Get Reseller Invoice Excel By ID
     *
     * @param  int $id id (required)
     * @param  int $reseller_id reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function invoiceGetResellerInvoiceExcelById($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceExcelById'][0])
    {
        list($response) = $this->invoiceGetResellerInvoiceExcelByIdWithHttpInfo($id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetResellerInvoiceExcelByIdWithHttpInfo
     *
     * Get Reseller Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetResellerInvoiceExcelByIdWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceExcelById'][0])
    {
        $request = $this->invoiceGetResellerInvoiceExcelByIdRequest($id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetResellerInvoiceExcelByIdAsync
     *
     * Get Reseller Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoiceExcelByIdAsync($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceExcelById'][0])
    {
        return $this->invoiceGetResellerInvoiceExcelByIdAsyncWithHttpInfo($id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetResellerInvoiceExcelByIdAsyncWithHttpInfo
     *
     * Get Reseller Invoice Excel By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoiceExcelByIdAsyncWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceExcelById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->invoiceGetResellerInvoiceExcelByIdRequest($id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetResellerInvoiceExcelById'
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoiceExcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetResellerInvoiceExcelByIdRequest($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoiceExcelById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetResellerInvoiceExcelById'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling invoiceGetResellerInvoiceExcelById'
            );
        }


        $resourcePath = '/api/v2/reseller/{resellerId}/Invoice/{id}/excel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($reseller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerId' . '}',
                ObjectSerializer::toPathValue($reseller_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetResellerInvoicePdfById
     *
     * Get Reseller Invoice PDF By ID
     *
     * @param  int $id id (required)
     * @param  int $reseller_id reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ByteArrayContent
     */
    public function invoiceGetResellerInvoicePdfById($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoicePdfById'][0])
    {
        list($response) = $this->invoiceGetResellerInvoicePdfByIdWithHttpInfo($id, $reseller_id, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetResellerInvoicePdfByIdWithHttpInfo
     *
     * Get Reseller Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ByteArrayContent, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetResellerInvoicePdfByIdWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoicePdfById'][0])
    {
        $request = $this->invoiceGetResellerInvoicePdfByIdRequest($id, $reseller_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ByteArrayContent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ByteArrayContent' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ByteArrayContent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ByteArrayContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetResellerInvoicePdfByIdAsync
     *
     * Get Reseller Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoicePdfByIdAsync($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoicePdfById'][0])
    {
        return $this->invoiceGetResellerInvoicePdfByIdAsyncWithHttpInfo($id, $reseller_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetResellerInvoicePdfByIdAsyncWithHttpInfo
     *
     * Get Reseller Invoice PDF By ID
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoicePdfByIdAsyncWithHttpInfo($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoicePdfById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ByteArrayContent';
        $request = $this->invoiceGetResellerInvoicePdfByIdRequest($id, $reseller_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetResellerInvoicePdfById'
     *
     * @param  int $id (required)
     * @param  int $reseller_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoicePdfById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetResellerInvoicePdfByIdRequest($id, $reseller_id, string $contentType = self::contentTypes['invoiceGetResellerInvoicePdfById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceGetResellerInvoicePdfById'
            );
        }

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling invoiceGetResellerInvoicePdfById'
            );
        }


        $resourcePath = '/api/v2/reseller/{resellerId}/Invoice/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($reseller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerId' . '}',
                ObjectSerializer::toPathValue($reseller_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceGetResellerInvoices
     *
     * Get Reseller Invoices
     *
     * @param  int $reseller_id reseller_id (required)
     * @param  \DateTime $options_from_date options_from_date (optional)
     * @param  \DateTime $options_to_date options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceModel[]
     */
    public function invoiceGetResellerInvoices($reseller_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetResellerInvoices'][0])
    {
        list($response) = $this->invoiceGetResellerInvoicesWithHttpInfo($reseller_id, $options_from_date, $options_to_date, $contentType);
        return $response;
    }

    /**
     * Operation invoiceGetResellerInvoicesWithHttpInfo
     *
     * Get Reseller Invoices
     *
     * @param  int $reseller_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceGetResellerInvoicesWithHttpInfo($reseller_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetResellerInvoices'][0])
    {
        $request = $this->invoiceGetResellerInvoicesRequest($reseller_id, $options_from_date, $options_to_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InvoiceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InvoiceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InvoiceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceGetResellerInvoicesAsync
     *
     * Get Reseller Invoices
     *
     * @param  int $reseller_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoicesAsync($reseller_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetResellerInvoices'][0])
    {
        return $this->invoiceGetResellerInvoicesAsyncWithHttpInfo($reseller_id, $options_from_date, $options_to_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceGetResellerInvoicesAsyncWithHttpInfo
     *
     * Get Reseller Invoices
     *
     * @param  int $reseller_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceGetResellerInvoicesAsyncWithHttpInfo($reseller_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetResellerInvoices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceModel[]';
        $request = $this->invoiceGetResellerInvoicesRequest($reseller_id, $options_from_date, $options_to_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceGetResellerInvoices'
     *
     * @param  int $reseller_id (required)
     * @param  \DateTime $options_from_date (optional)
     * @param  \DateTime $options_to_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoiceGetResellerInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoiceGetResellerInvoicesRequest($reseller_id, $options_from_date = null, $options_to_date = null, string $contentType = self::contentTypes['invoiceGetResellerInvoices'][0])
    {

        // verify the required parameter 'reseller_id' is set
        if ($reseller_id === null || (is_array($reseller_id) && count($reseller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_id when calling invoiceGetResellerInvoices'
            );
        }




        $resourcePath = '/api/v2/reseller/{resellerId}/Invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_from_date,
            'options.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $options_to_date,
            'options.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($reseller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerId' . '}',
                ObjectSerializer::toPathValue($reseller_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
