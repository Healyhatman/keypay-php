<?php
/**
 * ReportingDimensionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReportingDimensionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingDimensionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'reportingDimensionDelete' => [
            'application/json',
        ],
        'reportingDimensionGet' => [
            'application/json',
        ],
        'reportingDimensionGetDimensions' => [
            'application/json',
        ],
        'reportingDimensionPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'reportingDimensionPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'reportingDimensionValueDelete' => [
            'application/json',
        ],
        'reportingDimensionValueGet' => [
            'application/json',
        ],
        'reportingDimensionValueGetDimensionValues' => [
            'application/json',
        ],
        'reportingDimensionValuePost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'reportingDimensionValuePut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportingDimensionDelete
     *
     * Delete Dimension
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportingDimensionDelete($id, $business_id, string $contentType = self::contentTypes['reportingDimensionDelete'][0])
    {
        $this->reportingDimensionDeleteWithHttpInfo($id, $business_id, $contentType);
    }

    /**
     * Operation reportingDimensionDeleteWithHttpInfo
     *
     * Delete Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionDeleteWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['reportingDimensionDelete'][0])
    {
        $request = $this->reportingDimensionDeleteRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionDeleteAsync
     *
     * Delete Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionDeleteAsync($id, $business_id, string $contentType = self::contentTypes['reportingDimensionDelete'][0])
    {
        return $this->reportingDimensionDeleteAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionDeleteAsyncWithHttpInfo
     *
     * Delete Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionDeleteAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['reportingDimensionDelete'][0])
    {
        $returnType = '';
        $request = $this->reportingDimensionDeleteRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionDelete'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionDeleteRequest($id, $business_id, string $contentType = self::contentTypes['reportingDimensionDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionGet
     *
     * Get Dimension by ID
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionApiModel
     */
    public function reportingDimensionGet($id, $business_id, string $contentType = self::contentTypes['reportingDimensionGet'][0])
    {
        list($response) = $this->reportingDimensionGetWithHttpInfo($id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionGetWithHttpInfo
     *
     * Get Dimension by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionGetWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['reportingDimensionGet'][0])
    {
        $request = $this->reportingDimensionGetRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionGetAsync
     *
     * Get Dimension by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionGetAsync($id, $business_id, string $contentType = self::contentTypes['reportingDimensionGet'][0])
    {
        return $this->reportingDimensionGetAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionGetAsyncWithHttpInfo
     *
     * Get Dimension by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionGetAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['reportingDimensionGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
        $request = $this->reportingDimensionGetRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionGet'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionGetRequest($id, $business_id, string $contentType = self::contentTypes['reportingDimensionGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionGetDimensions
     *
     * List Dimensions
     *
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGetDimensions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionApiModel[]
     */
    public function reportingDimensionGetDimensions($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionGetDimensions'][0])
    {
        list($response) = $this->reportingDimensionGetDimensionsWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionGetDimensionsWithHttpInfo
     *
     * List Dimensions
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGetDimensions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionGetDimensionsWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionGetDimensions'][0])
    {
        $request = $this->reportingDimensionGetDimensionsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionApiModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionApiModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionApiModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionGetDimensionsAsync
     *
     * List Dimensions
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGetDimensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionGetDimensionsAsync($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionGetDimensions'][0])
    {
        return $this->reportingDimensionGetDimensionsAsyncWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionGetDimensionsAsyncWithHttpInfo
     *
     * List Dimensions
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGetDimensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionGetDimensionsAsyncWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionGetDimensions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel[]';
        $request = $this->reportingDimensionGetDimensionsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionGetDimensions'
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionGetDimensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionGetDimensionsRequest($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionGetDimensions'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionGetDimensions'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/dimension';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionPost
     *
     * Create Dimension
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension dimension (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionApiModel
     */
    public function reportingDimensionPost($business_id, $dimension, string $contentType = self::contentTypes['reportingDimensionPost'][0])
    {
        list($response) = $this->reportingDimensionPostWithHttpInfo($business_id, $dimension, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionPostWithHttpInfo
     *
     * Create Dimension
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionPostWithHttpInfo($business_id, $dimension, string $contentType = self::contentTypes['reportingDimensionPost'][0])
    {
        $request = $this->reportingDimensionPostRequest($business_id, $dimension, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionPostAsync
     *
     * Create Dimension
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionPostAsync($business_id, $dimension, string $contentType = self::contentTypes['reportingDimensionPost'][0])
    {
        return $this->reportingDimensionPostAsyncWithHttpInfo($business_id, $dimension, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionPostAsyncWithHttpInfo
     *
     * Create Dimension
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionPostAsyncWithHttpInfo($business_id, $dimension, string $contentType = self::contentTypes['reportingDimensionPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
        $request = $this->reportingDimensionPostRequest($business_id, $dimension, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionPost'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionPostRequest($business_id, $dimension, string $contentType = self::contentTypes['reportingDimensionPost'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionPost'
            );
        }

        // verify the required parameter 'dimension' is set
        if ($dimension === null || (is_array($dimension) && count($dimension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension when calling reportingDimensionPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dimension)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dimension));
            } else {
                $httpBody = $dimension;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionPut
     *
     * Update Dimension
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension_model dimension_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionApiModel
     */
    public function reportingDimensionPut($id, $business_id, $dimension_model, string $contentType = self::contentTypes['reportingDimensionPut'][0])
    {
        list($response) = $this->reportingDimensionPutWithHttpInfo($id, $business_id, $dimension_model, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionPutWithHttpInfo
     *
     * Update Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionPutWithHttpInfo($id, $business_id, $dimension_model, string $contentType = self::contentTypes['reportingDimensionPut'][0])
    {
        $request = $this->reportingDimensionPutRequest($id, $business_id, $dimension_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionPutAsync
     *
     * Update Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionPutAsync($id, $business_id, $dimension_model, string $contentType = self::contentTypes['reportingDimensionPut'][0])
    {
        return $this->reportingDimensionPutAsyncWithHttpInfo($id, $business_id, $dimension_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionPutAsyncWithHttpInfo
     *
     * Update Dimension
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionPutAsyncWithHttpInfo($id, $business_id, $dimension_model, string $contentType = self::contentTypes['reportingDimensionPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionApiModel';
        $request = $this->reportingDimensionPutRequest($id, $business_id, $dimension_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionPut'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionApiModel $dimension_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionPutRequest($id, $business_id, $dimension_model, string $contentType = self::contentTypes['reportingDimensionPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionPut'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionPut'
            );
        }

        // verify the required parameter 'dimension_model' is set
        if ($dimension_model === null || (is_array($dimension_model) && count($dimension_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_model when calling reportingDimensionPut'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dimension_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dimension_model));
            } else {
                $httpBody = $dimension_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionValueDelete
     *
     * Delete Dimension Value
     *
     * @param  int $dimension_id dimension_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportingDimensionValueDelete($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueDelete'][0])
    {
        $this->reportingDimensionValueDeleteWithHttpInfo($dimension_id, $id, $business_id, $contentType);
    }

    /**
     * Operation reportingDimensionValueDeleteWithHttpInfo
     *
     * Delete Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionValueDeleteWithHttpInfo($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueDelete'][0])
    {
        $request = $this->reportingDimensionValueDeleteRequest($dimension_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionValueDeleteAsync
     *
     * Delete Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueDeleteAsync($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueDelete'][0])
    {
        return $this->reportingDimensionValueDeleteAsyncWithHttpInfo($dimension_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionValueDeleteAsyncWithHttpInfo
     *
     * Delete Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueDeleteAsyncWithHttpInfo($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueDelete'][0])
    {
        $returnType = '';
        $request = $this->reportingDimensionValueDeleteRequest($dimension_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionValueDelete'
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionValueDeleteRequest($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueDelete'][0])
    {

        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling reportingDimensionValueDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionValueDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionValueDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{dimensionId}/value/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dimensionId' . '}',
                ObjectSerializer::toPathValue($dimension_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionValueGet
     *
     * Get Dimension Value by ID
     *
     * @param  int $dimension_id dimension_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionValueApiModel
     */
    public function reportingDimensionValueGet($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueGet'][0])
    {
        list($response) = $this->reportingDimensionValueGetWithHttpInfo($dimension_id, $id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionValueGetWithHttpInfo
     *
     * Get Dimension Value by ID
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionValueApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionValueGetWithHttpInfo($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueGet'][0])
    {
        $request = $this->reportingDimensionValueGetRequest($dimension_id, $id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionValueApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionValueApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionValueGetAsync
     *
     * Get Dimension Value by ID
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueGetAsync($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueGet'][0])
    {
        return $this->reportingDimensionValueGetAsyncWithHttpInfo($dimension_id, $id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionValueGetAsyncWithHttpInfo
     *
     * Get Dimension Value by ID
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueGetAsyncWithHttpInfo($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
        $request = $this->reportingDimensionValueGetRequest($dimension_id, $id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionValueGet'
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionValueGetRequest($dimension_id, $id, $business_id, string $contentType = self::contentTypes['reportingDimensionValueGet'][0])
    {

        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling reportingDimensionValueGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionValueGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionValueGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{dimensionId}/value/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dimensionId' . '}',
                ObjectSerializer::toPathValue($dimension_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionValueGetDimensionValues
     *
     * List Dimension Values
     *
     * @param  int $dimension_id dimension_id (required)
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGetDimensionValues'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionValueApiModel[]
     */
    public function reportingDimensionValueGetDimensionValues($dimension_id, $business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionValueGetDimensionValues'][0])
    {
        list($response) = $this->reportingDimensionValueGetDimensionValuesWithHttpInfo($dimension_id, $business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionValueGetDimensionValuesWithHttpInfo
     *
     * List Dimension Values
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGetDimensionValues'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionValueApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionValueGetDimensionValuesWithHttpInfo($dimension_id, $business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionValueGetDimensionValues'][0])
    {
        $request = $this->reportingDimensionValueGetDimensionValuesRequest($dimension_id, $business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionValueGetDimensionValuesAsync
     *
     * List Dimension Values
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGetDimensionValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueGetDimensionValuesAsync($dimension_id, $business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionValueGetDimensionValues'][0])
    {
        return $this->reportingDimensionValueGetDimensionValuesAsyncWithHttpInfo($dimension_id, $business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionValueGetDimensionValuesAsyncWithHttpInfo
     *
     * List Dimension Values
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGetDimensionValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValueGetDimensionValuesAsyncWithHttpInfo($dimension_id, $business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionValueGetDimensionValues'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel[]';
        $request = $this->reportingDimensionValueGetDimensionValuesRequest($dimension_id, $business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionValueGetDimensionValues'
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValueGetDimensionValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionValueGetDimensionValuesRequest($dimension_id, $business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['reportingDimensionValueGetDimensionValues'][0])
    {

        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling reportingDimensionValueGetDimensionValues'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionValueGetDimensionValues'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/dimension/{dimensionId}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dimensionId' . '}',
                ObjectSerializer::toPathValue($dimension_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionValuePost
     *
     * Create Dimension Value
     *
     * @param  int $dimension_id dimension_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value dimension_value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionValueApiModel
     */
    public function reportingDimensionValuePost($dimension_id, $business_id, $dimension_value, string $contentType = self::contentTypes['reportingDimensionValuePost'][0])
    {
        list($response) = $this->reportingDimensionValuePostWithHttpInfo($dimension_id, $business_id, $dimension_value, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionValuePostWithHttpInfo
     *
     * Create Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionValueApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionValuePostWithHttpInfo($dimension_id, $business_id, $dimension_value, string $contentType = self::contentTypes['reportingDimensionValuePost'][0])
    {
        $request = $this->reportingDimensionValuePostRequest($dimension_id, $business_id, $dimension_value, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionValueApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionValueApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionValuePostAsync
     *
     * Create Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValuePostAsync($dimension_id, $business_id, $dimension_value, string $contentType = self::contentTypes['reportingDimensionValuePost'][0])
    {
        return $this->reportingDimensionValuePostAsyncWithHttpInfo($dimension_id, $business_id, $dimension_value, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionValuePostAsyncWithHttpInfo
     *
     * Create Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValuePostAsyncWithHttpInfo($dimension_id, $business_id, $dimension_value, string $contentType = self::contentTypes['reportingDimensionValuePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
        $request = $this->reportingDimensionValuePostRequest($dimension_id, $business_id, $dimension_value, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionValuePost'
     *
     * @param  int $dimension_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionValuePostRequest($dimension_id, $business_id, $dimension_value, string $contentType = self::contentTypes['reportingDimensionValuePost'][0])
    {

        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling reportingDimensionValuePost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionValuePost'
            );
        }

        // verify the required parameter 'dimension_value' is set
        if ($dimension_value === null || (is_array($dimension_value) && count($dimension_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_value when calling reportingDimensionValuePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{dimensionId}/value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dimensionId' . '}',
                ObjectSerializer::toPathValue($dimension_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dimension_value)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dimension_value));
            } else {
                $httpBody = $dimension_value;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportingDimensionValuePut
     *
     * Update Dimension Value
     *
     * @param  int $dimension_id dimension_id (required)
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value_model dimension_value_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReportingDimensionValueApiModel
     */
    public function reportingDimensionValuePut($dimension_id, $id, $business_id, $dimension_value_model, string $contentType = self::contentTypes['reportingDimensionValuePut'][0])
    {
        list($response) = $this->reportingDimensionValuePutWithHttpInfo($dimension_id, $id, $business_id, $dimension_value_model, $contentType);
        return $response;
    }

    /**
     * Operation reportingDimensionValuePutWithHttpInfo
     *
     * Update Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReportingDimensionValueApiModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportingDimensionValuePutWithHttpInfo($dimension_id, $id, $business_id, $dimension_value_model, string $contentType = self::contentTypes['reportingDimensionValuePut'][0])
    {
        $request = $this->reportingDimensionValuePutRequest($dimension_id, $id, $business_id, $dimension_value_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReportingDimensionValueApiModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReportingDimensionValueApiModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReportingDimensionValueApiModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportingDimensionValuePutAsync
     *
     * Update Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValuePutAsync($dimension_id, $id, $business_id, $dimension_value_model, string $contentType = self::contentTypes['reportingDimensionValuePut'][0])
    {
        return $this->reportingDimensionValuePutAsyncWithHttpInfo($dimension_id, $id, $business_id, $dimension_value_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportingDimensionValuePutAsyncWithHttpInfo
     *
     * Update Dimension Value
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportingDimensionValuePutAsyncWithHttpInfo($dimension_id, $id, $business_id, $dimension_value_model, string $contentType = self::contentTypes['reportingDimensionValuePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReportingDimensionValueApiModel';
        $request = $this->reportingDimensionValuePutRequest($dimension_id, $id, $business_id, $dimension_value_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportingDimensionValuePut'
     *
     * @param  int $dimension_id (required)
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ReportingDimensionValueApiModel $dimension_value_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reportingDimensionValuePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportingDimensionValuePutRequest($dimension_id, $id, $business_id, $dimension_value_model, string $contentType = self::contentTypes['reportingDimensionValuePut'][0])
    {

        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling reportingDimensionValuePut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportingDimensionValuePut'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportingDimensionValuePut'
            );
        }

        // verify the required parameter 'dimension_value_model' is set
        if ($dimension_value_model === null || (is_array($dimension_value_model) && count($dimension_value_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_value_model when calling reportingDimensionValuePut'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/dimension/{dimensionId}/value/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dimensionId' . '}',
                ObjectSerializer::toPathValue($dimension_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dimension_value_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dimension_value_model));
            } else {
                $httpBody = $dimension_value_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
