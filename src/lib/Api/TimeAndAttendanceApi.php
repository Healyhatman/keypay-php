<?php
/**
 * TimeAndAttendanceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TimeAndAttendanceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeAndAttendanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auTimeAndAttendanceGetLookupData
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuTimeAndAttendanceLookupDataModel
     */
    public function auTimeAndAttendanceGetLookupData($kiosk_id, $employee_id, $business_id)
    {
        list($response) = $this->auTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id);
        return $response;
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuTimeAndAttendanceLookupDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuTimeAndAttendanceLookupDataModel';
        $request = $this->auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuTimeAndAttendanceLookupDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataAsync
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceGetLookupDataAsync($kiosk_id, $employee_id, $business_id)
    {
        return $this->auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuTimeAndAttendanceLookupDataModel';
        $request = $this->auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auTimeAndAttendanceGetLookupData'
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auTimeAndAttendanceGetLookupData'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auTimeAndAttendanceGetLookupData'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auTimeAndAttendanceGetLookupData'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/lookupdata/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auTimeAndAttendanceShifts
     *
     * Shifts
     *
     * @param  \Swagger\Client\Model\GetShiftsModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuTimeAndAttendanceShiftModel[]
     */
    public function auTimeAndAttendanceShifts($model, $business_id)
    {
        list($response) = $this->auTimeAndAttendanceShiftsWithHttpInfo($model, $business_id);
        return $response;
    }

    /**
     * Operation auTimeAndAttendanceShiftsWithHttpInfo
     *
     * Shifts
     *
     * @param  \Swagger\Client\Model\GetShiftsModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuTimeAndAttendanceShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auTimeAndAttendanceShiftsWithHttpInfo($model, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuTimeAndAttendanceShiftModel[]';
        $request = $this->auTimeAndAttendanceShiftsRequest($model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuTimeAndAttendanceShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auTimeAndAttendanceShiftsAsync
     *
     * Shifts
     *
     * @param  \Swagger\Client\Model\GetShiftsModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceShiftsAsync($model, $business_id)
    {
        return $this->auTimeAndAttendanceShiftsAsyncWithHttpInfo($model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auTimeAndAttendanceShiftsAsyncWithHttpInfo
     *
     * Shifts
     *
     * @param  \Swagger\Client\Model\GetShiftsModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceShiftsAsyncWithHttpInfo($model, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuTimeAndAttendanceShiftModel[]';
        $request = $this->auTimeAndAttendanceShiftsRequest($model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auTimeAndAttendanceShifts'
     *
     * @param  \Swagger\Client\Model\GetShiftsModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auTimeAndAttendanceShiftsRequest($model, $business_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auTimeAndAttendanceShifts'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auTimeAndAttendanceShifts'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/shifts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceAddNote
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  \Swagger\Client\Model\AddNoteModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceAddNote($kiosk_id, $shift_id, $model, $business_id)
    {
        $this->genericTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $model, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  \Swagger\Client\Model\AddNoteModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteAsync
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  \Swagger\Client\Model\AddNoteModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddNoteAsync($kiosk_id, $shift_id, $model, $business_id)
    {
        return $this->genericTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteAsyncWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  \Swagger\Client\Model\AddNoteModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceAddNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  \Swagger\Client\Model\AddNoteModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $model, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceAddNote'
            );
        }
        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceAddNote'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceAddNote'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceAddNote'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceAddShift
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\AuAddShiftModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceAddShift($kiosk_id, $model, $business_id)
    {
        $this->genericTimeAndAttendanceAddShiftWithHttpInfo($kiosk_id, $model, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftWithHttpInfo
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuAddShiftModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceAddShiftWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddShiftRequest($kiosk_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftAsync
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuAddShiftModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddShiftAsync($kiosk_id, $model, $business_id)
    {
        return $this->genericTimeAndAttendanceAddShiftAsyncWithHttpInfo($kiosk_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftAsyncWithHttpInfo
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuAddShiftModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddShiftAsyncWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddShiftRequest($kiosk_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceAddShift'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuAddShiftModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceAddShiftRequest($kiosk_id, $model, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceAddShift'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceAddShift'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceAddShift'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/addshift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceChangePin
     *
     * Change PIN
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\ChangeKioskPinModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceChangePin($kiosk_id, $model, $business_id)
    {
        $this->genericTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $model, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceChangePinWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceChangePinRequest($kiosk_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceChangePinAsync
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceChangePinAsync($kiosk_id, $model, $business_id)
    {
        return $this->genericTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceChangePinAsyncWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceChangePinRequest($kiosk_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceChangePin'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceChangePinRequest($kiosk_id, $model, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceChangePin'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceChangePin'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceChangePin'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/changepin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceCheckId
     *
     * Check Employee
     *
     * @param  \Swagger\Client\Model\BasicKioskEmployeeModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceCheckId($model, $business_id, $kiosk_id)
    {
        $this->genericTimeAndAttendanceCheckIdWithHttpInfo($model, $business_id, $kiosk_id);
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdWithHttpInfo
     *
     * Check Employee
     *
     * @param  \Swagger\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceCheckIdWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceCheckIdRequest($model, $business_id, $kiosk_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdAsync
     *
     * Check Employee
     *
     * @param  \Swagger\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckIdAsync($model, $business_id, $kiosk_id)
    {
        return $this->genericTimeAndAttendanceCheckIdAsyncWithHttpInfo($model, $business_id, $kiosk_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdAsyncWithHttpInfo
     *
     * Check Employee
     *
     * @param  \Swagger\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckIdAsyncWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceCheckIdRequest($model, $business_id, $kiosk_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceCheckId'
     *
     * @param  \Swagger\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceCheckIdRequest($model, $business_id, $kiosk_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceCheckId'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceCheckId'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceCheckId'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/checkid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceCheckPin
     *
     * Verify Kiosk PIN
     *
     * @param  \Swagger\Client\Model\CheckKioskPinModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\KioskEmployeeModel
     */
    public function genericTimeAndAttendanceCheckPin($model, $business_id, $kiosk_id)
    {
        list($response) = $this->genericTimeAndAttendanceCheckPinWithHttpInfo($model, $business_id, $kiosk_id);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  \Swagger\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceCheckPinWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '\Swagger\Client\Model\KioskEmployeeModel';
        $request = $this->genericTimeAndAttendanceCheckPinRequest($model, $business_id, $kiosk_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinAsync
     *
     * Verify Kiosk PIN
     *
     * @param  \Swagger\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckPinAsync($model, $business_id, $kiosk_id)
    {
        return $this->genericTimeAndAttendanceCheckPinAsyncWithHttpInfo($model, $business_id, $kiosk_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinAsyncWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  \Swagger\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckPinAsyncWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '\Swagger\Client\Model\KioskEmployeeModel';
        $request = $this->genericTimeAndAttendanceCheckPinRequest($model, $business_id, $kiosk_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceCheckPin'
     *
     * @param  \Swagger\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceCheckPinRequest($model, $business_id, $kiosk_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceCheckPin'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceCheckPin'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceCheckPin'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/checkpin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceClockOff
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request request (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceClockOff($kiosk_id, $request, $business_id)
    {
        $this->genericTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $request, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceClockOffWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOffRequest($kiosk_id, $request, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceClockOffAsync
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOffAsync($kiosk_id, $request, $business_id)
    {
        return $this->genericTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $request, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceClockOffAsyncWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOffRequest($kiosk_id, $request, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceClockOff'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceClockOffRequest($kiosk_id, $request, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceClockOff'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceClockOff'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceClockOff'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/clockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceClockOn
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\AuClockOnModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceClockOn($kiosk_id, $model, $business_id)
    {
        $this->genericTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $model, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceClockOnWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuClockOnModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOnRequest($kiosk_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceClockOnAsync
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuClockOnModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOnAsync($kiosk_id, $model, $business_id)
    {
        return $this->genericTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceClockOnAsyncWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuClockOnModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOnRequest($kiosk_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceClockOn'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\AuClockOnModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceClockOnRequest($kiosk_id, $model, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceClockOn'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceClockOn'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceClockOn'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/clockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNote
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  int $note_id note_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceDeleteNote($kiosk_id, $shift_id, $note_id, $business_id)
    {
        $this->genericTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteAsync
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDeleteNoteAsync($kiosk_id, $shift_id, $note_id, $business_id)
    {
        return $this->genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceDeleteNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }
        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShift
     *
     * Discard current shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request request (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceDiscardShift($kiosk_id, $request, $business_id)
    {
        $this->genericTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $request, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $request, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftAsync
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDiscardShiftAsync($kiosk_id, $request, $business_id)
    {
        return $this->genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $request, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $request, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceDiscardShift'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\ClockOffModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $request, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceDiscardShift'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceDiscardShift'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceDiscardShift'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/discard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceEmailReset
     *
     * Send PIN Reset Email
     *
     * @param  \Swagger\Client\Model\PinResetModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceEmailReset($model, $business_id, $kiosk_id)
    {
        $this->genericTimeAndAttendanceEmailResetWithHttpInfo($model, $business_id, $kiosk_id);
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceEmailResetWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEmailResetRequest($model, $business_id, $kiosk_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetAsync
     *
     * Send PIN Reset Email
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEmailResetAsync($model, $business_id, $kiosk_id)
    {
        return $this->genericTimeAndAttendanceEmailResetAsyncWithHttpInfo($model, $business_id, $kiosk_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetAsyncWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEmailResetAsyncWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEmailResetRequest($model, $business_id, $kiosk_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceEmailReset'
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceEmailResetRequest($model, $business_id, $kiosk_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceEmailReset'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceEmailReset'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceEmailReset'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/emailreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceEndBreak
     *
     * End Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\EndBreakModel $request request (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceEndBreak($kiosk_id, $request, $business_id)
    {
        $this->genericTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $request, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\EndBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEndBreakRequest($kiosk_id, $request, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakAsync
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\EndBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEndBreakAsync($kiosk_id, $request, $business_id)
    {
        return $this->genericTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $request, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakAsyncWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\EndBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEndBreakRequest($kiosk_id, $request, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceEndBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\EndBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceEndBreakRequest($kiosk_id, $request, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceEndBreak'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceEndBreak'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceEndBreak'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/endbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccess
     *
     * Employee Has Access
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceGetHasAccess($business_id, $employee_id)
    {
        $this->genericTimeAndAttendanceGetHasAccessWithHttpInfo($business_id, $employee_id);
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessWithHttpInfo
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetHasAccessWithHttpInfo($business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessAsync
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetHasAccessAsync($business_id, $employee_id)
    {
        return $this->genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo($business_id, $employee_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo($business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetHasAccess'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetHasAccess'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling genericTimeAndAttendanceGetHasAccess'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/hasaccess/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotes
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  int $model_employee_id  (optional)
     * @param  bool $model_is_admin_initiated  (optional)
     * @param  string $model_type  (optional)
     * @param  string $model_visibility  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceGetShiftNotes($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null)
    {
        $this->genericTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility);
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id  (optional)
     * @param  bool $model_is_admin_initiated  (optional)
     * @param  string $model_type  (optional)
     * @param  string $model_visibility  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesAsync
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id  (optional)
     * @param  bool $model_is_admin_initiated  (optional)
     * @param  string $model_type  (optional)
     * @param  string $model_visibility  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetShiftNotesAsync($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null)
    {
        return $this->genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id  (optional)
     * @param  bool $model_is_admin_initiated  (optional)
     * @param  string $model_type  (optional)
     * @param  string $model_visibility  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetShiftNotes'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id  (optional)
     * @param  bool $model_is_admin_initiated  (optional)
     * @param  string $model_type  (optional)
     * @param  string $model_visibility  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }
        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($model_employee_id !== null) {
            $queryParams['model.employeeId'] = ObjectSerializer::toQueryValue($model_employee_id);
        }
        // query params
        if ($model_is_admin_initiated !== null) {
            $queryParams['model.isAdminInitiated'] = ObjectSerializer::toQueryValue($model_is_admin_initiated);
        }
        // query params
        if ($model_type !== null) {
            $queryParams['model.type'] = ObjectSerializer::toQueryValue($model_type);
        }
        // query params
        if ($model_visibility !== null) {
            $queryParams['model.visibility'] = ObjectSerializer::toQueryValue($model_visibility);
        }

        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetStaff
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BasicKioskEmployeeModel[]
     */
    public function genericTimeAndAttendanceGetStaff($kiosk_id, $business_id)
    {
        list($response) = $this->genericTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BasicKioskEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\BasicKioskEmployeeModel[]';
        $request = $this->genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BasicKioskEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffAsync
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetStaffAsync($kiosk_id, $business_id)
    {
        return $this->genericTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffAsyncWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\BasicKioskEmployeeModel[]';
        $request = $this->genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetStaff'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceGetStaff'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetStaff'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesRead
     *
     * Mark Shift Notes Read
     *
     * @param  \Swagger\Client\Model\MarkNotesReadViewModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  string $shift_id shift_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceMarkNotesRead($model, $business_id, $kiosk_id, $shift_id)
    {
        $this->genericTimeAndAttendanceMarkNotesReadWithHttpInfo($model, $business_id, $kiosk_id, $shift_id);
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  \Swagger\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceMarkNotesReadWithHttpInfo($model, $business_id, $kiosk_id, $shift_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceMarkNotesReadRequest($model, $business_id, $kiosk_id, $shift_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadAsync
     *
     * Mark Shift Notes Read
     *
     * @param  \Swagger\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceMarkNotesReadAsync($model, $business_id, $kiosk_id, $shift_id)
    {
        return $this->genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($model, $business_id, $kiosk_id, $shift_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  \Swagger\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($model, $business_id, $kiosk_id, $shift_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceMarkNotesReadRequest($model, $business_id, $kiosk_id, $shift_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceMarkNotesRead'
     *
     * @param  \Swagger\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceMarkNotesReadRequest($model, $business_id, $kiosk_id, $shift_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }
        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes/read-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendancePostStaff
     *
     * Add an Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\KioskCreateEmployeeModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BasicKioskEmployeeModel
     */
    public function genericTimeAndAttendancePostStaff($kiosk_id, $model, $business_id)
    {
        list($response) = $this->genericTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $model, $business_id);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendancePostStaffWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BasicKioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '\Swagger\Client\Model\BasicKioskEmployeeModel';
        $request = $this->genericTimeAndAttendancePostStaffRequest($kiosk_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BasicKioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendancePostStaffAsync
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendancePostStaffAsync($kiosk_id, $model, $business_id)
    {
        return $this->genericTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendancePostStaffAsyncWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $model, $business_id)
    {
        $returnType = '\Swagger\Client\Model\BasicKioskEmployeeModel';
        $request = $this->genericTimeAndAttendancePostStaffRequest($kiosk_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendancePostStaff'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendancePostStaffRequest($kiosk_id, $model, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendancePostStaff'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendancePostStaff'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendancePostStaff'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceSmsReset
     *
     * Send PIN Reset SMS
     *
     * @param  \Swagger\Client\Model\PinResetModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceSmsReset($model, $business_id, $kiosk_id)
    {
        $this->genericTimeAndAttendanceSmsResetWithHttpInfo($model, $business_id, $kiosk_id);
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceSmsResetWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceSmsResetRequest($model, $business_id, $kiosk_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetAsync
     *
     * Send PIN Reset SMS
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceSmsResetAsync($model, $business_id, $kiosk_id)
    {
        return $this->genericTimeAndAttendanceSmsResetAsyncWithHttpInfo($model, $business_id, $kiosk_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetAsyncWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceSmsResetAsyncWithHttpInfo($model, $business_id, $kiosk_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceSmsResetRequest($model, $business_id, $kiosk_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceSmsReset'
     *
     * @param  \Swagger\Client\Model\PinResetModel $model (required)
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceSmsResetRequest($model, $business_id, $kiosk_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceSmsReset'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceSmsReset'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceSmsReset'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/smsreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceStartBreak
     *
     * Start Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \Swagger\Client\Model\StartBreakModel $request request (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceStartBreak($kiosk_id, $request, $business_id)
    {
        $this->genericTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $request, $business_id);
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\StartBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceStartBreakRequest($kiosk_id, $request, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakAsync
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\StartBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceStartBreakAsync($kiosk_id, $request, $business_id)
    {
        return $this->genericTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $request, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakAsyncWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\StartBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $request, $business_id)
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceStartBreakRequest($kiosk_id, $request, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceStartBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  \Swagger\Client\Model\StartBreakModel $request (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function genericTimeAndAttendanceStartBreakRequest($kiosk_id, $request, $business_id)
    {
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceStartBreak'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceStartBreak'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceStartBreak'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/startbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskDelete
     *
     * Delete Kiosk
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function kioskDelete($id, $business_id)
    {
        $this->kioskDeleteWithHttpInfo($id, $business_id);
    }

    /**
     * Operation kioskDeleteWithHttpInfo
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskDeleteWithHttpInfo($id, $business_id)
    {
        $returnType = '';
        $request = $this->kioskDeleteRequest($id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation kioskDeleteAsync
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskDeleteAsync($id, $business_id)
    {
        return $this->kioskDeleteAsyncWithHttpInfo($id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskDeleteAsyncWithHttpInfo
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskDeleteAsyncWithHttpInfo($id, $business_id)
    {
        $returnType = '';
        $request = $this->kioskDeleteRequest($id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskDelete'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function kioskDeleteRequest($id, $business_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskDelete'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskDelete'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskGet
     *
     * Get Kiosk by ID
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskGet($id, $business_id)
    {
        list($response) = $this->kioskGetWithHttpInfo($id, $business_id);
        return $response;
    }

    /**
     * Operation kioskGetWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskGetWithHttpInfo($id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskGetRequest($id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskGetAsync
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAsync($id, $business_id)
    {
        return $this->kioskGetAsyncWithHttpInfo($id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskGetAsyncWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAsyncWithHttpInfo($id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskGetRequest($id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskGet'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function kioskGetRequest($id, $business_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskGetAll
     *
     * List Kiosks
     *
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimeAndAttendanceKioskModel[]
     */
    public function kioskGetAll($business_id)
    {
        list($response) = $this->kioskGetAllWithHttpInfo($business_id);
        return $response;
    }

    /**
     * Operation kioskGetAllWithHttpInfo
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimeAndAttendanceKioskModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskGetAllWithHttpInfo($business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel[]';
        $request = $this->kioskGetAllRequest($business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimeAndAttendanceKioskModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskGetAllAsync
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAllAsync($business_id)
    {
        return $this->kioskGetAllAsyncWithHttpInfo($business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskGetAllAsyncWithHttpInfo
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAllAsyncWithHttpInfo($business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel[]';
        $request = $this->kioskGetAllRequest($business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskGetAll'
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function kioskGetAllRequest($business_id)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskGetAll'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskPost
     *
     * Create Kiosk
     *
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk kiosk (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskPost($kiosk, $business_id)
    {
        list($response) = $this->kioskPostWithHttpInfo($kiosk, $business_id);
        return $response;
    }

    /**
     * Operation kioskPostWithHttpInfo
     *
     * Create Kiosk
     *
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskPostWithHttpInfo($kiosk, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPostRequest($kiosk, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskPostAsync
     *
     * Create Kiosk
     *
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPostAsync($kiosk, $business_id)
    {
        return $this->kioskPostAsyncWithHttpInfo($kiosk, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskPostAsyncWithHttpInfo
     *
     * Create Kiosk
     *
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPostAsyncWithHttpInfo($kiosk, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPostRequest($kiosk, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskPost'
     *
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function kioskPostRequest($kiosk, $business_id)
    {
        // verify the required parameter 'kiosk' is set
        if ($kiosk === null || (is_array($kiosk) && count($kiosk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk when calling kioskPost'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskPost'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($kiosk)) {
            $_tempBody = $kiosk;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskPut
     *
     * Update Kiosk
     *
     * @param  int $id id (required)
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk kiosk (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskPut($id, $kiosk, $business_id)
    {
        list($response) = $this->kioskPutWithHttpInfo($id, $kiosk, $business_id);
        return $response;
    }

    /**
     * Operation kioskPutWithHttpInfo
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskPutWithHttpInfo($id, $kiosk, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPutRequest($id, $kiosk, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskPutAsync
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPutAsync($id, $kiosk, $business_id)
    {
        return $this->kioskPutAsyncWithHttpInfo($id, $kiosk, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskPutAsyncWithHttpInfo
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPutAsyncWithHttpInfo($id, $kiosk, $business_id)
    {
        $returnType = '\Swagger\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPutRequest($id, $kiosk, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskPut'
     *
     * @param  int $id (required)
     * @param  \Swagger\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function kioskPutRequest($id, $kiosk, $business_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskPut'
            );
        }
        // verify the required parameter 'kiosk' is set
        if ($kiosk === null || (is_array($kiosk) && count($kiosk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk when calling kioskPut'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskPut'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($kiosk)) {
            $_tempBody = $kiosk;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
