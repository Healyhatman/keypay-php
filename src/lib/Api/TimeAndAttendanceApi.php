<?php
/**
 * TimeAndAttendanceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TimeAndAttendanceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimeAndAttendanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auTimeAndAttendanceGetLookupData' => [
            'application/json',
        ],
        'auTimeAndAttendanceShifts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceAddNote' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceAddShift' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceChangePin' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceCheckId' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceCheckPin' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceClockOff' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceClockOn' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceDeleteNote' => [
            'application/json',
        ],
        'genericTimeAndAttendanceDiscardShift' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceEmailReset' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceEndBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceGetHasAccess' => [
            'application/json',
        ],
        'genericTimeAndAttendanceGetShiftNotes' => [
            'application/json',
        ],
        'genericTimeAndAttendanceGetStaff' => [
            'application/json',
        ],
        'genericTimeAndAttendanceMarkNotesRead' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendancePostStaff' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceSmsReset' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericTimeAndAttendanceStartBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'kioskDelete' => [
            'application/json',
        ],
        'kioskGet' => [
            'application/json',
        ],
        'kioskGetAll' => [
            'application/json',
        ],
        'kioskPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'kioskPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auTimeAndAttendanceGetLookupData
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel
     */
    public function auTimeAndAttendanceGetLookupData($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auTimeAndAttendanceGetLookupData'][0])
    {
        list($response) = $this->auTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auTimeAndAttendanceGetLookupData'][0])
    {
        $request = $this->auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataAsync
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceGetLookupDataAsync($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auTimeAndAttendanceGetLookupData'][0])
    {
        return $this->auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auTimeAndAttendanceGetLookupData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
        $request = $this->auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auTimeAndAttendanceGetLookupData'
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auTimeAndAttendanceGetLookupData'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auTimeAndAttendanceGetLookupData'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auTimeAndAttendanceGetLookupData'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auTimeAndAttendanceGetLookupData'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/lookupdata/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auTimeAndAttendanceShifts
     *
     * Shifts
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]
     */
    public function auTimeAndAttendanceShifts($business_id, $model, string $contentType = self::contentTypes['auTimeAndAttendanceShifts'][0])
    {
        list($response) = $this->auTimeAndAttendanceShiftsWithHttpInfo($business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auTimeAndAttendanceShiftsWithHttpInfo
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auTimeAndAttendanceShiftsWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auTimeAndAttendanceShifts'][0])
    {
        $request = $this->auTimeAndAttendanceShiftsRequest($business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auTimeAndAttendanceShiftsAsync
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceShiftsAsync($business_id, $model, string $contentType = self::contentTypes['auTimeAndAttendanceShifts'][0])
    {
        return $this->auTimeAndAttendanceShiftsAsyncWithHttpInfo($business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auTimeAndAttendanceShiftsAsyncWithHttpInfo
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auTimeAndAttendanceShiftsAsyncWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auTimeAndAttendanceShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
        $request = $this->auTimeAndAttendanceShiftsRequest($business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auTimeAndAttendanceShifts'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auTimeAndAttendanceShiftsRequest($business_id, $model, string $contentType = self::contentTypes['auTimeAndAttendanceShifts'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auTimeAndAttendanceShifts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auTimeAndAttendanceShifts'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/shifts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceAddNote
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceAddNote($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddNote'][0])
    {
        $this->genericTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddNote'][0])
    {
        $request = $this->genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteAsync
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddNoteAsync($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddNote'][0])
    {
        return $this->genericTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceAddNoteAsyncWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddNote'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceAddNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddNote'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceAddNote'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceAddShift
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuAddShiftModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceAddShift($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddShift'][0])
    {
        $this->genericTimeAndAttendanceAddShiftWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftWithHttpInfo
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuAddShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceAddShiftWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddShift'][0])
    {
        $request = $this->genericTimeAndAttendanceAddShiftRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftAsync
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuAddShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddShiftAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddShift'][0])
    {
        return $this->genericTimeAndAttendanceAddShiftAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceAddShiftAsyncWithHttpInfo
     *
     * Add Complete Shift for Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuAddShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceAddShiftAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddShift'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceAddShiftRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceAddShift'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuAddShiftModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceAddShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceAddShiftRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceAddShift'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceAddShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceAddShift'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceAddShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/addshift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceChangePin
     *
     * Change PIN
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceChangePin($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceChangePin'][0])
    {
        $this->genericTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceChangePinWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceChangePin'][0])
    {
        $request = $this->genericTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceChangePinAsync
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceChangePinAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceChangePin'][0])
    {
        return $this->genericTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceChangePinAsyncWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceChangePin'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceChangePin'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceChangePin'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceChangePin'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceChangePin'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceChangePin'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/changepin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceCheckId
     *
     * Check Employee
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\BasicKioskEmployeeModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceCheckId($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckId'][0])
    {
        $this->genericTimeAndAttendanceCheckIdWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdWithHttpInfo
     *
     * Check Employee
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceCheckIdWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckId'][0])
    {
        $request = $this->genericTimeAndAttendanceCheckIdRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdAsync
     *
     * Check Employee
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckIdAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckId'][0])
    {
        return $this->genericTimeAndAttendanceCheckIdAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceCheckIdAsyncWithHttpInfo
     *
     * Check Employee
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckIdAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckId'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceCheckIdRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceCheckId'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\BasicKioskEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceCheckIdRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckId'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceCheckId'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceCheckId'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceCheckId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/checkid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceCheckPin
     *
     * Verify Kiosk PIN
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericTimeAndAttendanceCheckPin($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckPin'][0])
    {
        list($response) = $this->genericTimeAndAttendanceCheckPinWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceCheckPinWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckPin'][0])
    {
        $request = $this->genericTimeAndAttendanceCheckPinRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinAsync
     *
     * Verify Kiosk PIN
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckPinAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckPin'][0])
    {
        return $this->genericTimeAndAttendanceCheckPinAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceCheckPinAsyncWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceCheckPinAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckPin'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericTimeAndAttendanceCheckPinRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceCheckPin'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceCheckPinRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceCheckPin'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceCheckPin'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceCheckPin'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceCheckPin'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/checkpin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceClockOff
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceClockOff($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOff'][0])
    {
        $this->genericTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceClockOffWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOff'][0])
    {
        $request = $this->genericTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceClockOffAsync
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOffAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOff'][0])
    {
        return $this->genericTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceClockOffAsyncWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOff'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceClockOff'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceClockOff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceClockOff'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceClockOff'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/clockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceClockOn
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceClockOn($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOn'][0])
    {
        $this->genericTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceClockOnWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOn'][0])
    {
        $request = $this->genericTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceClockOnAsync
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOnAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOn'][0])
    {
        return $this->genericTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceClockOnAsyncWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOn'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceClockOn'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuClockOnModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceClockOn'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceClockOn'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceClockOn'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceClockOn'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/clockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNote
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  int $note_id note_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceDeleteNote($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericTimeAndAttendanceDeleteNote'][0])
    {
        $this->genericTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericTimeAndAttendanceDeleteNote'][0])
    {
        $request = $this->genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteAsync
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDeleteNoteAsync($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericTimeAndAttendanceDeleteNote'][0])
    {
        return $this->genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericTimeAndAttendanceDeleteNote'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceDeleteNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericTimeAndAttendanceDeleteNote'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceDeleteNote'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShift
     *
     * Discard current shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceDiscardShift($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceDiscardShift'][0])
    {
        $this->genericTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceDiscardShift'][0])
    {
        $request = $this->genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftAsync
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDiscardShiftAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceDiscardShift'][0])
    {
        return $this->genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceDiscardShift'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceDiscardShift'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceDiscardShift'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceDiscardShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceDiscardShift'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceDiscardShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/discard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceEmailReset
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceEmailReset($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceEmailReset'][0])
    {
        $this->genericTimeAndAttendanceEmailResetWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceEmailResetWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceEmailReset'][0])
    {
        $request = $this->genericTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetAsync
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEmailResetAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceEmailReset'][0])
    {
        return $this->genericTimeAndAttendanceEmailResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceEmailResetAsyncWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEmailResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceEmailReset'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceEmailReset'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceEmailReset'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceEmailReset'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceEmailReset'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceEmailReset'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/emailreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceEndBreak
     *
     * End Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceEndBreak($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceEndBreak'][0])
    {
        $this->genericTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceEndBreak'][0])
    {
        $request = $this->genericTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakAsync
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEndBreakAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceEndBreak'][0])
    {
        return $this->genericTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceEndBreakAsyncWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceEndBreak'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceEndBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceEndBreak'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceEndBreak'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceEndBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceEndBreak'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/endbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccess
     *
     * Employee Has Access
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetHasAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceGetHasAccess($business_id, $employee_id, string $contentType = self::contentTypes['genericTimeAndAttendanceGetHasAccess'][0])
    {
        $this->genericTimeAndAttendanceGetHasAccessWithHttpInfo($business_id, $employee_id, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessWithHttpInfo
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetHasAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetHasAccessWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['genericTimeAndAttendanceGetHasAccess'][0])
    {
        $request = $this->genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessAsync
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetHasAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetHasAccessAsync($business_id, $employee_id, string $contentType = self::contentTypes['genericTimeAndAttendanceGetHasAccess'][0])
    {
        return $this->genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo($business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo
     *
     * Employee Has Access
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetHasAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetHasAccessAsyncWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['genericTimeAndAttendanceGetHasAccess'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetHasAccess'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetHasAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceGetHasAccessRequest($business_id, $employee_id, string $contentType = self::contentTypes['genericTimeAndAttendanceGetHasAccess'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetHasAccess'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling genericTimeAndAttendanceGetHasAccess'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/hasaccess/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotes
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  int $model_employee_id model_employee_id (optional)
     * @param  bool $model_is_admin_initiated model_is_admin_initiated (optional)
     * @param  string $model_type model_type (optional)
     * @param  string $model_visibility model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceGetShiftNotes($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericTimeAndAttendanceGetShiftNotes'][0])
    {
        $this->genericTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericTimeAndAttendanceGetShiftNotes'][0])
    {
        $request = $this->genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesAsync
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetShiftNotesAsync($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericTimeAndAttendanceGetShiftNotes'][0])
    {
        return $this->genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericTimeAndAttendanceGetShiftNotes'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetShiftNotes'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericTimeAndAttendanceGetShiftNotes'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetShiftNotes'
            );
        }






        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employee_id,
            'model.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_is_admin_initiated,
            'model.isAdminInitiated', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_type,
            'model.type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_visibility,
            'model.visibility', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceGetStaff
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BasicKioskEmployeeModel[]
     */
    public function genericTimeAndAttendanceGetStaff($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericTimeAndAttendanceGetStaff'][0])
    {
        list($response) = $this->genericTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BasicKioskEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericTimeAndAttendanceGetStaff'][0])
    {
        $request = $this->genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffAsync
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetStaffAsync($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericTimeAndAttendanceGetStaff'][0])
    {
        return $this->genericTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceGetStaffAsyncWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericTimeAndAttendanceGetStaff'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]';
        $request = $this->genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceGetStaff'
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericTimeAndAttendanceGetStaff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceGetStaff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceGetStaff'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $restrict_current_shifts_to_current_kiosk_location,
            'restrictCurrentShiftsToCurrentKioskLocation', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesRead
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  string $shift_id shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceMarkNotesRead($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceMarkNotesRead'][0])
    {
        $this->genericTimeAndAttendanceMarkNotesReadWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceMarkNotesReadWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceMarkNotesRead'][0])
    {
        $request = $this->genericTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadAsync
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceMarkNotesReadAsync($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceMarkNotesRead'][0])
    {
        return $this->genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceMarkNotesRead'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceMarkNotesRead'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceMarkNotesRead'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceMarkNotesRead'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/shift/{shiftId}/notes/read-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendancePostStaff
     *
     * Add an Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BasicKioskEmployeeModel
     */
    public function genericTimeAndAttendancePostStaff($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendancePostStaff'][0])
    {
        list($response) = $this->genericTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericTimeAndAttendancePostStaffWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BasicKioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendancePostStaff'][0])
    {
        $request = $this->genericTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BasicKioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BasicKioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendancePostStaffAsync
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendancePostStaffAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendancePostStaff'][0])
    {
        return $this->genericTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendancePostStaffAsyncWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendancePostStaff'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel';
        $request = $this->genericTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendancePostStaff'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendancePostStaff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendancePostStaff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendancePostStaff'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendancePostStaff'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceSmsReset
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceSmsReset($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceSmsReset'][0])
    {
        $this->genericTimeAndAttendanceSmsResetWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceSmsResetWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceSmsReset'][0])
    {
        $request = $this->genericTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetAsync
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceSmsResetAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceSmsReset'][0])
    {
        return $this->genericTimeAndAttendanceSmsResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceSmsResetAsyncWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceSmsResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceSmsReset'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceSmsReset'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericTimeAndAttendanceSmsReset'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceSmsReset'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceSmsReset'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericTimeAndAttendanceSmsReset'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/smsreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericTimeAndAttendanceStartBreak
     *
     * Start Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericTimeAndAttendanceStartBreak($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceStartBreak'][0])
    {
        $this->genericTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceStartBreak'][0])
    {
        $request = $this->genericTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakAsync
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceStartBreakAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceStartBreak'][0])
    {
        return $this->genericTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericTimeAndAttendanceStartBreakAsyncWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceStartBreak'][0])
    {
        $returnType = '';
        $request = $this->genericTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericTimeAndAttendanceStartBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericTimeAndAttendanceStartBreak'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericTimeAndAttendanceStartBreak'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericTimeAndAttendanceStartBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericTimeAndAttendanceStartBreak'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{kioskId}/startbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskDelete
     *
     * Delete Kiosk
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function kioskDelete($id, $business_id, string $contentType = self::contentTypes['kioskDelete'][0])
    {
        $this->kioskDeleteWithHttpInfo($id, $business_id, $contentType);
    }

    /**
     * Operation kioskDeleteWithHttpInfo
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskDeleteWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['kioskDelete'][0])
    {
        $request = $this->kioskDeleteRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation kioskDeleteAsync
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskDeleteAsync($id, $business_id, string $contentType = self::contentTypes['kioskDelete'][0])
    {
        return $this->kioskDeleteAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskDeleteAsyncWithHttpInfo
     *
     * Delete Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskDeleteAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['kioskDelete'][0])
    {
        $returnType = '';
        $request = $this->kioskDeleteRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskDelete'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function kioskDeleteRequest($id, $business_id, string $contentType = self::contentTypes['kioskDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskGet
     *
     * Get Kiosk by ID
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskGet($id, $business_id, string $contentType = self::contentTypes['kioskGet'][0])
    {
        list($response) = $this->kioskGetWithHttpInfo($id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation kioskGetWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskGetWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['kioskGet'][0])
    {
        $request = $this->kioskGetRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskGetAsync
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAsync($id, $business_id, string $contentType = self::contentTypes['kioskGet'][0])
    {
        return $this->kioskGetAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskGetAsyncWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['kioskGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskGetRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskGet'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function kioskGetRequest($id, $business_id, string $contentType = self::contentTypes['kioskGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskGetAll
     *
     * List Kiosks
     *
     * @param  string $business_id business_id (required)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]
     */
    public function kioskGetAll($business_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['kioskGetAll'][0])
    {
        list($response) = $this->kioskGetAllWithHttpInfo($business_id, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation kioskGetAllWithHttpInfo
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGetAll'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskGetAllWithHttpInfo($business_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['kioskGetAll'][0])
    {
        $request = $this->kioskGetAllRequest($business_id, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskGetAllAsync
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAllAsync($business_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['kioskGetAll'][0])
    {
        return $this->kioskGetAllAsyncWithHttpInfo($business_id, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskGetAllAsyncWithHttpInfo
     *
     * List Kiosks
     *
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskGetAllAsyncWithHttpInfo($business_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['kioskGetAll'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]';
        $request = $this->kioskGetAllRequest($business_id, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskGetAll'
     *
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function kioskGetAllRequest($business_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['kioskGetAll'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskGetAll'
            );
        }






        $resourcePath = '/api/v2/business/{businessId}/kiosk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskPost
     *
     * Create Kiosk
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskPost($business_id, $kiosk, string $contentType = self::contentTypes['kioskPost'][0])
    {
        list($response) = $this->kioskPostWithHttpInfo($business_id, $kiosk, $contentType);
        return $response;
    }

    /**
     * Operation kioskPostWithHttpInfo
     *
     * Create Kiosk
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskPostWithHttpInfo($business_id, $kiosk, string $contentType = self::contentTypes['kioskPost'][0])
    {
        $request = $this->kioskPostRequest($business_id, $kiosk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskPostAsync
     *
     * Create Kiosk
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPostAsync($business_id, $kiosk, string $contentType = self::contentTypes['kioskPost'][0])
    {
        return $this->kioskPostAsyncWithHttpInfo($business_id, $kiosk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskPostAsyncWithHttpInfo
     *
     * Create Kiosk
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPostAsyncWithHttpInfo($business_id, $kiosk, string $contentType = self::contentTypes['kioskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPostRequest($business_id, $kiosk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskPost'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function kioskPostRequest($business_id, $kiosk, string $contentType = self::contentTypes['kioskPost'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskPost'
            );
        }

        // verify the required parameter 'kiosk' is set
        if ($kiosk === null || (is_array($kiosk) && count($kiosk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk when calling kioskPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($kiosk)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($kiosk));
            } else {
                $httpBody = $kiosk;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation kioskPut
     *
     * Update Kiosk
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel
     */
    public function kioskPut($id, $business_id, $kiosk, string $contentType = self::contentTypes['kioskPut'][0])
    {
        list($response) = $this->kioskPutWithHttpInfo($id, $business_id, $kiosk, $contentType);
        return $response;
    }

    /**
     * Operation kioskPutWithHttpInfo
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function kioskPutWithHttpInfo($id, $business_id, $kiosk, string $contentType = self::contentTypes['kioskPut'][0])
    {
        $request = $this->kioskPutRequest($id, $business_id, $kiosk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation kioskPutAsync
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPutAsync($id, $business_id, $kiosk, string $contentType = self::contentTypes['kioskPut'][0])
    {
        return $this->kioskPutAsyncWithHttpInfo($id, $business_id, $kiosk, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation kioskPutAsyncWithHttpInfo
     *
     * Update Kiosk
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function kioskPutAsyncWithHttpInfo($id, $business_id, $kiosk, string $contentType = self::contentTypes['kioskPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->kioskPutRequest($id, $business_id, $kiosk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'kioskPut'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimeAndAttendanceKioskModel $kiosk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['kioskPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function kioskPutRequest($id, $business_id, $kiosk, string $contentType = self::contentTypes['kioskPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling kioskPut'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling kioskPut'
            );
        }

        // verify the required parameter 'kiosk' is set
        if ($kiosk === null || (is_array($kiosk) && count($kiosk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk when calling kioskPut'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($kiosk)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($kiosk));
            } else {
                $httpBody = $kiosk;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
