<?php
/**
 * RosterShiftApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RosterShiftApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RosterShiftApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auRosterShiftGet' => [
            'application/json',
        ],
        'auRosterShiftMatchingClockOffRosterShift' => [
            'application/json',
        ],
        'auRosterShiftMatchingClockOnRosterShift' => [
            'application/json',
        ],
        'auRosterShiftNearbyRosterShifts' => [
            'application/json',
        ],
        'auRosterShiftPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auRosterShiftPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auRosterShiftStubShiftTimesheets' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auRosterShiftGet
     *
     * Get Roster Shifts
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  string $filter_shift_status filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles filter_selected_roles (optional)
     * @param  int $filter_employee_id filter_employee_id (optional)
     * @param  int $filter_location_id filter_location_id (optional)
     * @param  int $filter_employee_group_id filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size filter_page_size (optional)
     * @param  int $filter_current_page filter_current_page (optional)
     * @param  bool $filter_include_warnings filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]
     */
    public function auRosterShiftGet($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auRosterShiftGet'][0])
    {
        list($response) = $this->auRosterShiftGetWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);
        return $response;
    }

    /**
     * Operation auRosterShiftGetWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftGetWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auRosterShiftGet'][0])
    {
        $request = $this->auRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftGetAsync
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftGetAsync($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auRosterShiftGet'][0])
    {
        return $this->auRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftGetAsyncWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auRosterShiftGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
        $request = $this->auRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftGetRequest($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auRosterShiftGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftGet'
            );
        }


















        $resourcePath = '/api/v2/business/{businessId}/rostershift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_shift_status,
            'filter.shiftStatus', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_shift_statuses,
            'filter.shiftStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_locations,
            'filter.selectedLocations', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_employees,
            'filter.selectedEmployees', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_roles,
            'filter.selectedRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_id,
            'filter.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_location_id,
            'filter.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_group_id,
            'filter.employeeGroupId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_unassigned_shifts_only,
            'filter.unassignedShiftsOnly', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_select_all_roles,
            'filter.selectAllRoles', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_exclude_shifts_overlapping_from_date,
            'filter.excludeShiftsOverlappingFromDate', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_page_size,
            'filter.pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_current_page,
            'filter.currentPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_include_warnings,
            'filter.includeWarnings', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShift
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auRosterShiftMatchingClockOffRosterShift($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOffRosterShift'][0])
    {
        list($response) = $this->auRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOffRosterShift'][0])
    {
        $request = $this->auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftAsync
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOffRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOffRosterShift'][0])
    {
        return $this->auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOffRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftMatchingClockOffRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOffRosterShift'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/matchingclockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kiosk_id,
            'kioskId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_utc,
            'dateUtc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShift
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auRosterShiftMatchingClockOnRosterShift($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOnRosterShift'][0])
    {
        list($response) = $this->auRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOnRosterShift'][0])
    {
        $request = $this->auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftAsync
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOnRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOnRosterShift'][0])
    {
        return $this->auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOnRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftMatchingClockOnRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auRosterShiftMatchingClockOnRosterShift'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/matchingclockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kiosk_id,
            'kioskId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_utc,
            'dateUtc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftNearbyRosterShifts
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id employee_id (required)
     * @param  \DateTime $local_time local_time (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel[]
     */
    public function auRosterShiftNearbyRosterShifts($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auRosterShiftNearbyRosterShifts'][0])
    {
        list($response) = $this->auRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auRosterShiftNearbyRosterShifts'][0])
    {
        $request = $this->auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsAsync
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftNearbyRosterShiftsAsync($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auRosterShiftNearbyRosterShifts'][0])
    {
        return $this->auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auRosterShiftNearbyRosterShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftNearbyRosterShifts'
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auRosterShiftNearbyRosterShifts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftNearbyRosterShifts'
            );
        }

        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auRosterShiftNearbyRosterShifts'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftNearbyRosterShifts'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/nearby';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $local_time,
            'localTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftPost
     *
     * Create roster shift
     *
     * @param  bool $publish publish (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auRosterShiftPost($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPost'][0])
    {
        $this->auRosterShiftPostWithHttpInfo($publish, $business_id, $shift_model, $contentType);
    }

    /**
     * Operation auRosterShiftPostWithHttpInfo
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftPostWithHttpInfo($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPost'][0])
    {
        $request = $this->auRosterShiftPostRequest($publish, $business_id, $shift_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftPostAsync
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftPostAsync($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPost'][0])
    {
        return $this->auRosterShiftPostAsyncWithHttpInfo($publish, $business_id, $shift_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftPostAsyncWithHttpInfo
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftPostAsyncWithHttpInfo($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPost'][0])
    {
        $returnType = '';
        $request = $this->auRosterShiftPostRequest($publish, $business_id, $shift_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftPost'
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftPostRequest($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPost'][0])
    {

        // verify the required parameter 'publish' is set
        if ($publish === null || (is_array($publish) && count($publish) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publish when calling auRosterShiftPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftPost'
            );
        }

        // verify the required parameter 'shift_model' is set
        if ($shift_model === null || (is_array($shift_model) && count($shift_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_model when calling auRosterShiftPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shift_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shift_model));
            } else {
                $httpBody = $shift_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftPut
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  bool $publish publish (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auRosterShiftPut($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPut'][0])
    {
        $this->auRosterShiftPutWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, $contentType);
    }

    /**
     * Operation auRosterShiftPutWithHttpInfo
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftPutWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPut'][0])
    {
        $request = $this->auRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftPutAsync
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftPutAsync($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPut'][0])
    {
        return $this->auRosterShiftPutAsyncWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftPutAsyncWithHttpInfo
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftPutAsyncWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPut'][0])
    {
        $returnType = '';
        $request = $this->auRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftPut'
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuRosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auRosterShiftPut'][0])
    {

        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auRosterShiftPut'
            );
        }

        // verify the required parameter 'publish' is set
        if ($publish === null || (is_array($publish) && count($publish) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publish when calling auRosterShiftPut'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftPut'
            );
        }

        // verify the required parameter 'shift_model' is set
        if ($shift_model === null || (is_array($shift_model) && count($shift_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_model when calling auRosterShiftPut'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift/{rosterShiftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shift_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shift_model));
            } else {
                $httpBody = $shift_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftStubShiftTimesheets
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auRosterShiftStubShiftTimesheets($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auRosterShiftStubShiftTimesheets'][0])
    {
        $this->auRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $business_id, $model, $contentType);
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auRosterShiftStubShiftTimesheets'][0])
    {
        $request = $this->auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsAsync
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftStubShiftTimesheetsAsync($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auRosterShiftStubShiftTimesheets'][0])
    {
        return $this->auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auRosterShiftStubShiftTimesheets'][0])
    {
        $returnType = '';
        $request = $this->auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftStubShiftTimesheets'
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auRosterShiftStubShiftTimesheets'][0])
    {

        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auRosterShiftStubShiftTimesheets'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftStubShiftTimesheets'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auRosterShiftStubShiftTimesheets'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/rostershift/{rosterShiftId}/stub';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
