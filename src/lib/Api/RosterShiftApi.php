<?php
/**
 * RosterShiftApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * RosterShiftApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RosterShiftApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auRosterShiftGet
     *
     * Get Roster Shifts
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  string $filter_shift_status  (optional)
     * @param  string[] $filter_shift_statuses  (optional)
     * @param  string[] $filter_selected_locations  (optional)
     * @param  string[] $filter_selected_employees  (optional)
     * @param  string[] $filter_selected_roles  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_group_id  (optional)
     * @param  bool $filter_unassigned_shifts_only  (optional)
     * @param  bool $filter_select_all_roles  (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date  (optional)
     * @param  int $filter_page_size  (optional)
     * @param  int $filter_page_num  (optional)
     * @param  bool $filter_include_warnings  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuRosterShiftGenerateTimesheetModel[]
     */
    public function auRosterShiftGet($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_page_num = null, $filter_include_warnings = null)
    {
        list($response) = $this->auRosterShiftGetWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_page_num, $filter_include_warnings);
        return $response;
    }

    /**
     * Operation auRosterShiftGetWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  string $filter_shift_status  (optional)
     * @param  string[] $filter_shift_statuses  (optional)
     * @param  string[] $filter_selected_locations  (optional)
     * @param  string[] $filter_selected_employees  (optional)
     * @param  string[] $filter_selected_roles  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_group_id  (optional)
     * @param  bool $filter_unassigned_shifts_only  (optional)
     * @param  bool $filter_select_all_roles  (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date  (optional)
     * @param  int $filter_page_size  (optional)
     * @param  int $filter_page_num  (optional)
     * @param  bool $filter_include_warnings  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuRosterShiftGenerateTimesheetModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftGetWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_page_num = null, $filter_include_warnings = null)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
        $request = $this->auRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_page_num, $filter_include_warnings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuRosterShiftGenerateTimesheetModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftGetAsync
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  string $filter_shift_status  (optional)
     * @param  string[] $filter_shift_statuses  (optional)
     * @param  string[] $filter_selected_locations  (optional)
     * @param  string[] $filter_selected_employees  (optional)
     * @param  string[] $filter_selected_roles  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_group_id  (optional)
     * @param  bool $filter_unassigned_shifts_only  (optional)
     * @param  bool $filter_select_all_roles  (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date  (optional)
     * @param  int $filter_page_size  (optional)
     * @param  int $filter_page_num  (optional)
     * @param  bool $filter_include_warnings  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftGetAsync($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_page_num = null, $filter_include_warnings = null)
    {
        return $this->auRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_page_num, $filter_include_warnings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftGetAsyncWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  string $filter_shift_status  (optional)
     * @param  string[] $filter_shift_statuses  (optional)
     * @param  string[] $filter_selected_locations  (optional)
     * @param  string[] $filter_selected_employees  (optional)
     * @param  string[] $filter_selected_roles  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_group_id  (optional)
     * @param  bool $filter_unassigned_shifts_only  (optional)
     * @param  bool $filter_select_all_roles  (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date  (optional)
     * @param  int $filter_page_size  (optional)
     * @param  int $filter_page_num  (optional)
     * @param  bool $filter_include_warnings  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_page_num = null, $filter_include_warnings = null)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
        $request = $this->auRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_page_num, $filter_include_warnings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  string $filter_shift_status  (optional)
     * @param  string[] $filter_shift_statuses  (optional)
     * @param  string[] $filter_selected_locations  (optional)
     * @param  string[] $filter_selected_employees  (optional)
     * @param  string[] $filter_selected_roles  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_group_id  (optional)
     * @param  bool $filter_unassigned_shifts_only  (optional)
     * @param  bool $filter_select_all_roles  (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date  (optional)
     * @param  int $filter_page_size  (optional)
     * @param  int $filter_page_num  (optional)
     * @param  bool $filter_include_warnings  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auRosterShiftGetRequest($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_page_num = null, $filter_include_warnings = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/rostershift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_from_date !== null) {
            $queryParams['filter.fromDate'] = ObjectSerializer::toQueryValue($filter_from_date);
        }
        // query params
        if ($filter_to_date !== null) {
            $queryParams['filter.toDate'] = ObjectSerializer::toQueryValue($filter_to_date);
        }
        // query params
        if ($filter_shift_status !== null) {
            $queryParams['filter.shiftStatus'] = ObjectSerializer::toQueryValue($filter_shift_status);
        }
        // query params
        if (is_array($filter_shift_statuses)) {
            $queryParams['filter.shiftStatuses'] = $filter_shift_statuses;
        } else
        if ($filter_shift_statuses !== null) {
            $queryParams['filter.shiftStatuses'] = ObjectSerializer::toQueryValue($filter_shift_statuses);
        }
        // query params
        if (is_array($filter_selected_locations)) {
            $queryParams['filter.selectedLocations'] = $filter_selected_locations;
        } else
        if ($filter_selected_locations !== null) {
            $queryParams['filter.selectedLocations'] = ObjectSerializer::toQueryValue($filter_selected_locations);
        }
        // query params
        if (is_array($filter_selected_employees)) {
            $queryParams['filter.selectedEmployees'] = $filter_selected_employees;
        } else
        if ($filter_selected_employees !== null) {
            $queryParams['filter.selectedEmployees'] = ObjectSerializer::toQueryValue($filter_selected_employees);
        }
        // query params
        if (is_array($filter_selected_roles)) {
            $queryParams['filter.selectedRoles'] = $filter_selected_roles;
        } else
        if ($filter_selected_roles !== null) {
            $queryParams['filter.selectedRoles'] = ObjectSerializer::toQueryValue($filter_selected_roles);
        }
        // query params
        if ($filter_employee_id !== null) {
            $queryParams['filter.employeeId'] = ObjectSerializer::toQueryValue($filter_employee_id);
        }
        // query params
        if ($filter_location_id !== null) {
            $queryParams['filter.locationId'] = ObjectSerializer::toQueryValue($filter_location_id);
        }
        // query params
        if ($filter_employee_group_id !== null) {
            $queryParams['filter.employeeGroupId'] = ObjectSerializer::toQueryValue($filter_employee_group_id);
        }
        // query params
        if ($filter_unassigned_shifts_only !== null) {
            $queryParams['filter.unassignedShiftsOnly'] = ObjectSerializer::toQueryValue($filter_unassigned_shifts_only);
        }
        // query params
        if ($filter_select_all_roles !== null) {
            $queryParams['filter.selectAllRoles'] = ObjectSerializer::toQueryValue($filter_select_all_roles);
        }
        // query params
        if ($filter_exclude_shifts_overlapping_from_date !== null) {
            $queryParams['filter.excludeShiftsOverlappingFromDate'] = ObjectSerializer::toQueryValue($filter_exclude_shifts_overlapping_from_date);
        }
        // query params
        if ($filter_page_size !== null) {
            $queryParams['filter.pageSize'] = ObjectSerializer::toQueryValue($filter_page_size);
        }
        // query params
        if ($filter_page_num !== null) {
            $queryParams['filter.pageNum'] = ObjectSerializer::toQueryValue($filter_page_num);
        }
        // query params
        if ($filter_include_warnings !== null) {
            $queryParams['filter.includeWarnings'] = ObjectSerializer::toQueryValue($filter_include_warnings);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShift
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auRosterShiftMatchingClockOffRosterShift($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        list($response) = $this->auRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id);
        return $response;
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftAsync
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOffRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        return $this->auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftMatchingClockOffRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }
        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftMatchingClockOffRosterShift'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/matchingclockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($kiosk_id !== null) {
            $queryParams['kioskId'] = ObjectSerializer::toQueryValue($kiosk_id);
        }
        // query params
        if ($date_utc !== null) {
            $queryParams['dateUtc'] = ObjectSerializer::toQueryValue($date_utc);
        }

        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShift
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auRosterShiftMatchingClockOnRosterShift($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        list($response) = $this->auRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id);
        return $response;
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftAsync
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOnRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        return $this->auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftMatchingClockOnRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }
        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }
        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftMatchingClockOnRosterShift'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/matchingclockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($kiosk_id !== null) {
            $queryParams['kioskId'] = ObjectSerializer::toQueryValue($kiosk_id);
        }
        // query params
        if ($date_utc !== null) {
            $queryParams['dateUtc'] = ObjectSerializer::toQueryValue($date_utc);
        }

        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftNearbyRosterShifts
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id employee_id (required)
     * @param  \DateTime $local_time local_time (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuEssRosterShiftModel[]
     */
    public function auRosterShiftNearbyRosterShifts($employee_id, $local_time, $business_id)
    {
        list($response) = $this->auRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id);
        return $response;
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuEssRosterShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuEssRosterShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsAsync
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftNearbyRosterShiftsAsync($employee_id, $local_time, $business_id)
    {
        return $this->auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftNearbyRosterShifts'
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auRosterShiftNearbyRosterShifts'
            );
        }
        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auRosterShiftNearbyRosterShifts'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftNearbyRosterShifts'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/rostershift/{employeeId}/nearby';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($local_time !== null) {
            $queryParams['localTime'] = ObjectSerializer::toQueryValue($local_time);
        }

        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auRosterShiftStubShiftTimesheets
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  \Swagger\Client\Model\StubRosterShiftViewModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auRosterShiftStubShiftTimesheets($roster_shift_id, $model, $business_id)
    {
        $this->auRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $model, $business_id);
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  \Swagger\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $model, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsAsync
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  \Swagger\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftStubShiftTimesheetsAsync($roster_shift_id, $model, $business_id)
    {
        return $this->auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  \Swagger\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $model, $business_id)
    {
        $returnType = '';
        $request = $this->auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auRosterShiftStubShiftTimesheets'
     *
     * @param  int $roster_shift_id (required)
     * @param  \Swagger\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $model, $business_id)
    {
        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auRosterShiftStubShiftTimesheets'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auRosterShiftStubShiftTimesheets'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auRosterShiftStubShiftTimesheets'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/rostershift/{rosterShiftId}/stub';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
