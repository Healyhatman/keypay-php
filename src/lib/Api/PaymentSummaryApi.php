<?php
/**
 * PaymentSummaryApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PaymentSummaryApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentSummaryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auPaymentSummaryDelete
     *
     * Unpublish Payment Summaries
     *
     * @param  int $financial_year_ending financial_year_ending (required)
     * @param  string $business_id business_id (required)
     * @param  int $employee_id employee_id (optional)
     * @param  int $employing_entity_id employing_entity_id (optional)
     * @param  int $location_id location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPaymentSummaryDelete($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $this->auPaymentSummaryDeleteWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);
    }

    /**
     * Operation auPaymentSummaryDeleteWithHttpInfo
     *
     * Unpublish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPaymentSummaryDeleteWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '';
        $request = $this->auPaymentSummaryDeleteRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPaymentSummaryDeleteAsync
     *
     * Unpublish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryDeleteAsync($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        return $this->auPaymentSummaryDeleteAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPaymentSummaryDeleteAsyncWithHttpInfo
     *
     * Unpublish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryDeleteAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '';
        $request = $this->auPaymentSummaryDeleteRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPaymentSummaryDelete'
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auPaymentSummaryDeleteRequest($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        // verify the required parameter 'financial_year_ending' is set
        if ($financial_year_ending === null || (is_array($financial_year_ending) && count($financial_year_ending) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year_ending when calling auPaymentSummaryDelete'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPaymentSummaryDelete'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/paymentsummary/{financialYearEnding}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($employee_id !== null) {
            $queryParams['employeeId'] = ObjectSerializer::toQueryValue($employee_id);
        }
        // query params
        if ($employing_entity_id !== null) {
            $queryParams['employingEntityId'] = ObjectSerializer::toQueryValue($employing_entity_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($financial_year_ending !== null) {
            $resourcePath = str_replace(
                '{' . 'financialYearEnding' . '}',
                ObjectSerializer::toPathValue($financial_year_ending),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPaymentSummaryGet
     *
     * List Payment Summaries
     *
     * @param  int $financial_year_ending financial_year_ending (required)
     * @param  object $query query (required)
     * @param  string $business_id business_id (required)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaygPaymentSummaryModel[]
     */
    public function auPaymentSummaryGet($financial_year_ending, $query, $business_id, $filter = null, $orderby = null, $top = null, $skip = null)
    {
        list($response) = $this->auPaymentSummaryGetWithHttpInfo($financial_year_ending, $query, $business_id, $filter, $orderby, $top, $skip);
        return $response;
    }

    /**
     * Operation auPaymentSummaryGetWithHttpInfo
     *
     * List Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  object $query (required)
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaygPaymentSummaryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auPaymentSummaryGetWithHttpInfo($financial_year_ending, $query, $business_id, $filter = null, $orderby = null, $top = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\PaygPaymentSummaryModel[]';
        $request = $this->auPaymentSummaryGetRequest($financial_year_ending, $query, $business_id, $filter, $orderby, $top, $skip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaygPaymentSummaryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPaymentSummaryGetAsync
     *
     * List Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  object $query (required)
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryGetAsync($financial_year_ending, $query, $business_id, $filter = null, $orderby = null, $top = null, $skip = null)
    {
        return $this->auPaymentSummaryGetAsyncWithHttpInfo($financial_year_ending, $query, $business_id, $filter, $orderby, $top, $skip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPaymentSummaryGetAsyncWithHttpInfo
     *
     * List Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  object $query (required)
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryGetAsyncWithHttpInfo($financial_year_ending, $query, $business_id, $filter = null, $orderby = null, $top = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\PaygPaymentSummaryModel[]';
        $request = $this->auPaymentSummaryGetRequest($financial_year_ending, $query, $business_id, $filter, $orderby, $top, $skip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPaymentSummaryGet'
     *
     * @param  int $financial_year_ending (required)
     * @param  object $query (required)
     * @param  string $business_id (required)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auPaymentSummaryGetRequest($financial_year_ending, $query, $business_id, $filter = null, $orderby = null, $top = null, $skip = null)
    {
        // verify the required parameter 'financial_year_ending' is set
        if ($financial_year_ending === null || (is_array($financial_year_ending) && count($financial_year_ending) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year_ending when calling auPaymentSummaryGet'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling auPaymentSummaryGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPaymentSummaryGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/paymentsummary/{financialYearEnding}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($orderby !== null) {
            $queryParams['$orderby'] = ObjectSerializer::toQueryValue($orderby);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($financial_year_ending !== null) {
            $resourcePath = str_replace(
                '{' . 'financialYearEnding' . '}',
                ObjectSerializer::toPathValue($financial_year_ending),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPaymentSummaryPost
     *
     * Publish Payment Summaries
     *
     * @param  int $financial_year_ending financial_year_ending (required)
     * @param  string $business_id business_id (required)
     * @param  int $employee_id employee_id (optional)
     * @param  int $employing_entity_id employing_entity_id (optional)
     * @param  int $location_id location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auPaymentSummaryPost($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $this->auPaymentSummaryPostWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);
    }

    /**
     * Operation auPaymentSummaryPostWithHttpInfo
     *
     * Publish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPaymentSummaryPostWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '';
        $request = $this->auPaymentSummaryPostRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auPaymentSummaryPostAsync
     *
     * Publish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryPostAsync($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        return $this->auPaymentSummaryPostAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPaymentSummaryPostAsyncWithHttpInfo
     *
     * Publish Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryPostAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '';
        $request = $this->auPaymentSummaryPostRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPaymentSummaryPost'
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auPaymentSummaryPostRequest($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        // verify the required parameter 'financial_year_ending' is set
        if ($financial_year_ending === null || (is_array($financial_year_ending) && count($financial_year_ending) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year_ending when calling auPaymentSummaryPost'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPaymentSummaryPost'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/paymentsummary/{financialYearEnding}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($employee_id !== null) {
            $queryParams['employeeId'] = ObjectSerializer::toQueryValue($employee_id);
        }
        // query params
        if ($employing_entity_id !== null) {
            $queryParams['employingEntityId'] = ObjectSerializer::toQueryValue($employing_entity_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($financial_year_ending !== null) {
            $resourcePath = str_replace(
                '{' . 'financialYearEnding' . '}',
                ObjectSerializer::toPathValue($financial_year_ending),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auPaymentSummaryPut
     *
     * Generate Payment Summaries
     *
     * @param  int $financial_year_ending financial_year_ending (required)
     * @param  string $business_id business_id (required)
     * @param  int $employee_id employee_id (optional)
     * @param  int $employing_entity_id employing_entity_id (optional)
     * @param  int $location_id location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaygPaymentSummaryModel
     */
    public function auPaymentSummaryPut($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        list($response) = $this->auPaymentSummaryPutWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);
        return $response;
    }

    /**
     * Operation auPaymentSummaryPutWithHttpInfo
     *
     * Generate Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaygPaymentSummaryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPaymentSummaryPutWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaygPaymentSummaryModel';
        $request = $this->auPaymentSummaryPutRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaygPaymentSummaryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPaymentSummaryPutAsync
     *
     * Generate Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryPutAsync($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        return $this->auPaymentSummaryPutAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPaymentSummaryPutAsyncWithHttpInfo
     *
     * Generate Payment Summaries
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPaymentSummaryPutAsyncWithHttpInfo($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaygPaymentSummaryModel';
        $request = $this->auPaymentSummaryPutRequest($financial_year_ending, $business_id, $employee_id, $employing_entity_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPaymentSummaryPut'
     *
     * @param  int $financial_year_ending (required)
     * @param  string $business_id (required)
     * @param  int $employee_id (optional)
     * @param  int $employing_entity_id (optional)
     * @param  int $location_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auPaymentSummaryPutRequest($financial_year_ending, $business_id, $employee_id = null, $employing_entity_id = null, $location_id = null)
    {
        // verify the required parameter 'financial_year_ending' is set
        if ($financial_year_ending === null || (is_array($financial_year_ending) && count($financial_year_ending) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_year_ending when calling auPaymentSummaryPut'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPaymentSummaryPut'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/paymentsummary/{financialYearEnding}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($employee_id !== null) {
            $queryParams['employeeId'] = ObjectSerializer::toQueryValue($employee_id);
        }
        // query params
        if ($employing_entity_id !== null) {
            $queryParams['employingEntityId'] = ObjectSerializer::toQueryValue($employing_entity_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($financial_year_ending !== null) {
            $resourcePath = str_replace(
                '{' . 'financialYearEnding' . '}',
                ObjectSerializer::toPathValue($financial_year_ending),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
