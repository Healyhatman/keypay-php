<?php
/**
 * ManagerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Australia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: AU
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ManagerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManagerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'auManagerEmployeeOnboardingManagerInitiateSelfService' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerEmployeeTimesheetApprove' => [
            'application/json',
        ],
        'auManagerEmployeeTimesheetDelete' => [
            'application/json',
        ],
        'auManagerEmployeeTimesheetEdit' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerEmployeeTimesheetGet' => [
            'application/json',
        ],
        'auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId' => [
            'application/json',
        ],
        'auManagerEmployeeTimesheetReject' => [
            'application/json',
        ],
        'auManagerKioskPostIndividual' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerKioskPutIndividual' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerKioskPutIndividualComments' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerRosterShiftGet' => [
            'application/json',
        ],
        'auManagerRosterShiftGetLeaveEmployees' => [
            'application/json',
        ],
        'auManagerRosterShiftGetLocations' => [
            'application/json',
        ],
        'auManagerRosterShiftGetManageEmployees' => [
            'application/json',
        ],
        'auManagerRosterShiftGetRoles' => [
            'application/json',
        ],
        'auManagerRosterShiftGetRosterShift' => [
            'application/json',
        ],
        'auManagerRosterShiftManageRosterData' => [
            'application/json',
        ],
        'auManagerRosterShiftMatchingClockOffRosterShift' => [
            'application/json',
        ],
        'auManagerRosterShiftMatchingClockOnRosterShift' => [
            'application/json',
        ],
        'auManagerRosterShiftNearbyRosterShifts' => [
            'application/json',
        ],
        'auManagerRosterShiftPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerRosterShiftPut' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerRosterShiftStubShiftTimesheets' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerSecurityBusinesses' => [
            'application/json',
        ],
        'auManagerTimeAndAttendanceGetLookupData' => [
            'application/json',
        ],
        'auManagerTimeAndAttendanceShifts' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerTimesheetPostIndividual' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'auManagerTimesheetPutIndividual' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceAddNote' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceChangePin' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceCheckId' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceCheckPin' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceClockOff' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceClockOn' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceDeleteNote' => [
            'application/json',
        ],
        'genericManagerTimeAndAttendanceDiscardShift' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceEmailReset' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceEndBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceGetShiftNotes' => [
            'application/json',
        ],
        'genericManagerTimeAndAttendanceGetStaff' => [
            'application/json',
        ],
        'genericManagerTimeAndAttendanceMarkNotesRead' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendancePostStaff' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceSmsReset' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimeAndAttendanceStartBreak' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'genericManagerTimesheetGet' => [
            'application/json',
        ],
        'genericManagerTimesheetGetEmployeeGroups' => [
            'application/json',
        ],
        'genericManagerTimesheetGetLocations' => [
            'application/json',
        ],
        'genericManagerTimesheetGetTimesheetEmployees' => [
            'application/json',
        ],
        'managerDocumentDownload' => [
            'application/json',
        ],
        'managerEmployeeExpenseApprove' => [
            'application/json',
        ],
        'managerEmployeeExpenseCreate' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeExpenseDecline' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeExpenseDelete' => [
            'application/json',
        ],
        'managerEmployeeExpenseEdit' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeExpenseGet' => [
            'application/json',
        ],
        'managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId' => [
            'application/json',
        ],
        'managerEmployeeExpenseUploadAttachment' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestApprove' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestAttachment' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestBalances' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestCreateLeave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeLeaveRequestDecline' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeLeaveRequestDelete' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestEstimate' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestGet' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestGetLeaveCategories' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestOverlappingLeave' => [
            'application/json',
        ],
        'managerEmployeeLeaveRequestUpdateLeave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeProfileImageDelete' => [
            'application/json',
        ],
        'managerEmployeeProfileImageGet' => [
            'application/json',
        ],
        'managerEmployeeProfileImagePost' => [
            'application/json',
        ],
        'managerEmployeeRosterShiftCreate' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerEmployeeRosterShiftDelete' => [
            'application/json',
        ],
        'managerEmployeeRosterShiftSave' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managerExpenseGet' => [
            'application/json',
        ],
        'managerExpenseGetExpenseCategories' => [
            'application/json',
        ],
        'managerExpenseGetExpensesEmployees' => [
            'application/json',
        ],
        'managerExpenseGetLocations' => [
            'application/json',
        ],
        'managerExpenseGetTaxCodes' => [
            'application/json',
        ],
        'managerGetDashboard' => [
            'application/json',
        ],
        'managerGetEmployees' => [
            'application/json',
        ],
        'managerGetLocations' => [
            'application/json',
        ],
        'managerKioskGet' => [
            'application/json',
        ],
        'managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet' => [
            'application/json',
        ],
        'managerKioskKiosks' => [
            'application/json',
        ],
        'managerLeaveRequestGetLeaveCategories' => [
            'application/json',
        ],
        'managerLeaveRequestGetLeaveEmployees' => [
            'application/json',
        ],
        'managerLeaveRequestGetLocations' => [
            'application/json',
        ],
        'managerLeaveRequestListLeaveRequests' => [
            'application/json',
        ],
        'managerLeaveRequestOverlappingLeave' => [
            'application/json',
        ],
        'managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation' => [
            'application/json',
        ],
        'managerLocationGetLocations' => [
            'application/json',
        ],
        'managerRoundingRulesGetRoundingRules' => [
            'application/json',
        ],
        'managerRoundingRulesSetRoundingRules' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auManagerEmployeeOnboardingManagerInitiateSelfService
     *
     * Initiate Employee Self Setup
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuInitiateEmployeeOnboardingApiModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auManagerEmployeeOnboardingManagerInitiateSelfService($business_id, $model, string $contentType = self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'][0])
    {
        $this->auManagerEmployeeOnboardingManagerInitiateSelfServiceWithHttpInfo($business_id, $model, $contentType);
    }

    /**
     * Operation auManagerEmployeeOnboardingManagerInitiateSelfServiceWithHttpInfo
     *
     * Initiate Employee Self Setup
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuInitiateEmployeeOnboardingApiModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeOnboardingManagerInitiateSelfServiceWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'][0])
    {
        $request = $this->auManagerEmployeeOnboardingManagerInitiateSelfServiceRequest($business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeOnboardingManagerInitiateSelfServiceAsync
     *
     * Initiate Employee Self Setup
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuInitiateEmployeeOnboardingApiModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeOnboardingManagerInitiateSelfServiceAsync($business_id, $model, string $contentType = self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'][0])
    {
        return $this->auManagerEmployeeOnboardingManagerInitiateSelfServiceAsyncWithHttpInfo($business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeOnboardingManagerInitiateSelfServiceAsyncWithHttpInfo
     *
     * Initiate Employee Self Setup
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuInitiateEmployeeOnboardingApiModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeOnboardingManagerInitiateSelfServiceAsyncWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'][0])
    {
        $returnType = '';
        $request = $this->auManagerEmployeeOnboardingManagerInitiateSelfServiceRequest($business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeOnboardingManagerInitiateSelfService'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuInitiateEmployeeOnboardingApiModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeOnboardingManagerInitiateSelfServiceRequest($business_id, $model, string $contentType = self::contentTypes['auManagerEmployeeOnboardingManagerInitiateSelfService'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeOnboardingManagerInitiateSelfService'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auManagerEmployeeOnboardingManagerInitiateSelfService'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/employeeonboarding/initiateselfservice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetApprove
     *
     * Approve Timesheet
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerTimesheetLineModel
     */
    public function auManagerEmployeeTimesheetApprove($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetApprove'][0])
    {
        list($response) = $this->auManagerEmployeeTimesheetApproveWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerEmployeeTimesheetApproveWithHttpInfo
     *
     * Approve Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetApproveWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetApprove'][0])
    {
        $request = $this->auManagerEmployeeTimesheetApproveRequest($employee_id, $timesheet_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetApproveAsync
     *
     * Approve Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetApproveAsync($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetApprove'][0])
    {
        return $this->auManagerEmployeeTimesheetApproveAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetApproveAsyncWithHttpInfo
     *
     * Approve Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetApproveAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
        $request = $this->auManagerEmployeeTimesheetApproveRequest($employee_id, $timesheet_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetApprove'
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetApproveRequest($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetApprove'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetApprove'
            );
        }

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auManagerEmployeeTimesheetApprove'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetApprove'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/{timesheetId}/approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetDelete
     *
     * Delete Timesheet
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auManagerEmployeeTimesheetDelete($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetDelete'][0])
    {
        $this->auManagerEmployeeTimesheetDeleteWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType);
    }

    /**
     * Operation auManagerEmployeeTimesheetDeleteWithHttpInfo
     *
     * Delete Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetDeleteWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetDelete'][0])
    {
        $request = $this->auManagerEmployeeTimesheetDeleteRequest($employee_id, $timesheet_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetDeleteAsync
     *
     * Delete Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetDeleteAsync($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetDelete'][0])
    {
        return $this->auManagerEmployeeTimesheetDeleteAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetDeleteAsyncWithHttpInfo
     *
     * Delete Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetDeleteAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetDelete'][0])
    {
        $returnType = '';
        $request = $this->auManagerEmployeeTimesheetDeleteRequest($employee_id, $timesheet_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetDelete'
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetDeleteRequest($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetDelete'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetDelete'
            );
        }

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auManagerEmployeeTimesheetDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/{timesheetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetEdit
     *
     * Edit Timesheet
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerTimesheetSubmitModel $timesheet timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerTimesheetLineModel
     */
    public function auManagerEmployeeTimesheetEdit($employee_id, $timesheet_id, $business_id, $timesheet, string $contentType = self::contentTypes['auManagerEmployeeTimesheetEdit'][0])
    {
        list($response) = $this->auManagerEmployeeTimesheetEditWithHttpInfo($employee_id, $timesheet_id, $business_id, $timesheet, $contentType);
        return $response;
    }

    /**
     * Operation auManagerEmployeeTimesheetEditWithHttpInfo
     *
     * Edit Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerTimesheetSubmitModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetEditWithHttpInfo($employee_id, $timesheet_id, $business_id, $timesheet, string $contentType = self::contentTypes['auManagerEmployeeTimesheetEdit'][0])
    {
        $request = $this->auManagerEmployeeTimesheetEditRequest($employee_id, $timesheet_id, $business_id, $timesheet, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetEditAsync
     *
     * Edit Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerTimesheetSubmitModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetEditAsync($employee_id, $timesheet_id, $business_id, $timesheet, string $contentType = self::contentTypes['auManagerEmployeeTimesheetEdit'][0])
    {
        return $this->auManagerEmployeeTimesheetEditAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $timesheet, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetEditAsyncWithHttpInfo
     *
     * Edit Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerTimesheetSubmitModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetEditAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $timesheet, string $contentType = self::contentTypes['auManagerEmployeeTimesheetEdit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
        $request = $this->auManagerEmployeeTimesheetEditRequest($employee_id, $timesheet_id, $business_id, $timesheet, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetEdit'
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerTimesheetSubmitModel $timesheet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetEditRequest($employee_id, $timesheet_id, $business_id, $timesheet, string $contentType = self::contentTypes['auManagerEmployeeTimesheetEdit'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetEdit'
            );
        }

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auManagerEmployeeTimesheetEdit'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetEdit'
            );
        }

        // verify the required parameter 'timesheet' is set
        if ($timesheet === null || (is_array($timesheet) && count($timesheet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet when calling auManagerEmployeeTimesheetEdit'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/{timesheetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($timesheet)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($timesheet));
            } else {
                $httpBody = $timesheet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetGet
     *
     * Get timesheet reference data
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimesheetReferenceData
     */
    public function auManagerEmployeeTimesheetGet($employee_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGet'][0])
    {
        list($response) = $this->auManagerEmployeeTimesheetGetWithHttpInfo($employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerEmployeeTimesheetGetWithHttpInfo
     *
     * Get timesheet reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimesheetReferenceData, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetGetWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGet'][0])
    {
        $request = $this->auManagerEmployeeTimesheetGetRequest($employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimesheetReferenceData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimesheetReferenceData' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimesheetReferenceData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimesheetReferenceData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimesheetReferenceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetGetAsync
     *
     * Get timesheet reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetGetAsync($employee_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGet'][0])
    {
        return $this->auManagerEmployeeTimesheetGetAsyncWithHttpInfo($employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetGetAsyncWithHttpInfo
     *
     * Get timesheet reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetGetAsyncWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimesheetReferenceData';
        $request = $this->auManagerEmployeeTimesheetGetRequest($employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetGet'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetGetRequest($employee_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGet'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId
     *
     * Get timesheet
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerTimesheetLineModel
     */
    public function auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'][0])
    {
        list($response) = $this->auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdWithHttpInfo
     *
     * Get timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'][0])
    {
        $request = $this->auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdRequest($employee_id, $timesheet_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdAsync
     *
     * Get timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdAsync($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'][0])
    {
        return $this->auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdAsyncWithHttpInfo
     *
     * Get timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
        $request = $this->auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdRequest($employee_id, $timesheet_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetIdRequest($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'
            );
        }

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetGetApiV2BusinessByBusinessIdManagerByEmployeeIdTimesheetByTimesheetId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/{timesheetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerEmployeeTimesheetReject
     *
     * Reject Timesheet
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $timesheet_id timesheet_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetReject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerTimesheetLineModel
     */
    public function auManagerEmployeeTimesheetReject($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetReject'][0])
    {
        list($response) = $this->auManagerEmployeeTimesheetRejectWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerEmployeeTimesheetRejectWithHttpInfo
     *
     * Reject Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetReject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerEmployeeTimesheetRejectWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetReject'][0])
    {
        $request = $this->auManagerEmployeeTimesheetRejectRequest($employee_id, $timesheet_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerEmployeeTimesheetRejectAsync
     *
     * Reject Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetReject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetRejectAsync($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetReject'][0])
    {
        return $this->auManagerEmployeeTimesheetRejectAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerEmployeeTimesheetRejectAsyncWithHttpInfo
     *
     * Reject Timesheet
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetReject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerEmployeeTimesheetRejectAsyncWithHttpInfo($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetReject'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerTimesheetLineModel';
        $request = $this->auManagerEmployeeTimesheetRejectRequest($employee_id, $timesheet_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerEmployeeTimesheetReject'
     *
     * @param  int $employee_id (required)
     * @param  int $timesheet_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerEmployeeTimesheetReject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerEmployeeTimesheetRejectRequest($employee_id, $timesheet_id, $business_id, string $contentType = self::contentTypes['auManagerEmployeeTimesheetReject'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerEmployeeTimesheetReject'
            );
        }

        // verify the required parameter 'timesheet_id' is set
        if ($timesheet_id === null || (is_array($timesheet_id) && count($timesheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_id when calling auManagerEmployeeTimesheetReject'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerEmployeeTimesheetReject'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/timesheet/{timesheetId}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetId' . '}',
                ObjectSerializer::toPathValue($timesheet_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerKioskPostIndividual
     *
     * Create kiosk timesheet line
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPostIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuIndividualTimesheetLineModel
     */
    public function auManagerKioskPostIndividual($business_id, $request, string $contentType = self::contentTypes['auManagerKioskPostIndividual'][0])
    {
        list($response) = $this->auManagerKioskPostIndividualWithHttpInfo($business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auManagerKioskPostIndividualWithHttpInfo
     *
     * Create kiosk timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPostIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuIndividualTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerKioskPostIndividualWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auManagerKioskPostIndividual'][0])
    {
        $request = $this->auManagerKioskPostIndividualRequest($business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerKioskPostIndividualAsync
     *
     * Create kiosk timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPostIndividualAsync($business_id, $request, string $contentType = self::contentTypes['auManagerKioskPostIndividual'][0])
    {
        return $this->auManagerKioskPostIndividualAsyncWithHttpInfo($business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerKioskPostIndividualAsyncWithHttpInfo
     *
     * Create kiosk timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPostIndividualAsyncWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auManagerKioskPostIndividual'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
        $request = $this->auManagerKioskPostIndividualRequest($business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerKioskPostIndividual'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerKioskPostIndividualRequest($business_id, $request, string $contentType = self::contentTypes['auManagerKioskPostIndividual'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerKioskPostIndividual'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auManagerKioskPostIndividual'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerKioskPutIndividual
     *
     * Update kiosk timesheet line
     *
     * @param  int $timesheet_line_id timesheet_line_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuIndividualTimesheetLineModel
     */
    public function auManagerKioskPutIndividual($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividual'][0])
    {
        list($response) = $this->auManagerKioskPutIndividualWithHttpInfo($timesheet_line_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auManagerKioskPutIndividualWithHttpInfo
     *
     * Update kiosk timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuIndividualTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerKioskPutIndividualWithHttpInfo($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividual'][0])
    {
        $request = $this->auManagerKioskPutIndividualRequest($timesheet_line_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerKioskPutIndividualAsync
     *
     * Update kiosk timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPutIndividualAsync($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividual'][0])
    {
        return $this->auManagerKioskPutIndividualAsyncWithHttpInfo($timesheet_line_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerKioskPutIndividualAsyncWithHttpInfo
     *
     * Update kiosk timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPutIndividualAsyncWithHttpInfo($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividual'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
        $request = $this->auManagerKioskPutIndividualRequest($timesheet_line_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerKioskPutIndividual'
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerKioskPutIndividualRequest($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividual'][0])
    {

        // verify the required parameter 'timesheet_line_id' is set
        if ($timesheet_line_id === null || (is_array($timesheet_line_id) && count($timesheet_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_line_id when calling auManagerKioskPutIndividual'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerKioskPutIndividual'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auManagerKioskPutIndividual'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/timesheet/{timesheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($timesheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetLineId' . '}',
                ObjectSerializer::toPathValue($timesheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerKioskPutIndividualComments
     *
     * Update comments in a timesheet
     *
     * @param  string $business_id business_id (required)
     * @param  string $timesheet_line_id timesheet_line_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetLineCommentsModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividualComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuIndividualTimesheetLineModel
     */
    public function auManagerKioskPutIndividualComments($business_id, $timesheet_line_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividualComments'][0])
    {
        list($response) = $this->auManagerKioskPutIndividualCommentsWithHttpInfo($business_id, $timesheet_line_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auManagerKioskPutIndividualCommentsWithHttpInfo
     *
     * Update comments in a timesheet
     *
     * @param  string $business_id (required)
     * @param  string $timesheet_line_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetLineCommentsModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividualComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuIndividualTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerKioskPutIndividualCommentsWithHttpInfo($business_id, $timesheet_line_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividualComments'][0])
    {
        $request = $this->auManagerKioskPutIndividualCommentsRequest($business_id, $timesheet_line_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerKioskPutIndividualCommentsAsync
     *
     * Update comments in a timesheet
     *
     * @param  string $business_id (required)
     * @param  string $timesheet_line_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetLineCommentsModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividualComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPutIndividualCommentsAsync($business_id, $timesheet_line_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividualComments'][0])
    {
        return $this->auManagerKioskPutIndividualCommentsAsyncWithHttpInfo($business_id, $timesheet_line_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerKioskPutIndividualCommentsAsyncWithHttpInfo
     *
     * Update comments in a timesheet
     *
     * @param  string $business_id (required)
     * @param  string $timesheet_line_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetLineCommentsModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividualComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerKioskPutIndividualCommentsAsyncWithHttpInfo($business_id, $timesheet_line_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividualComments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
        $request = $this->auManagerKioskPutIndividualCommentsRequest($business_id, $timesheet_line_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerKioskPutIndividualComments'
     *
     * @param  string $business_id (required)
     * @param  string $timesheet_line_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetLineCommentsModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerKioskPutIndividualComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerKioskPutIndividualCommentsRequest($business_id, $timesheet_line_id, $request, string $contentType = self::contentTypes['auManagerKioskPutIndividualComments'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerKioskPutIndividualComments'
            );
        }

        // verify the required parameter 'timesheet_line_id' is set
        if ($timesheet_line_id === null || (is_array($timesheet_line_id) && count($timesheet_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_line_id when calling auManagerKioskPutIndividualComments'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auManagerKioskPutIndividualComments'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/timesheetcomments/{timesheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($timesheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetLineId' . '}',
                ObjectSerializer::toPathValue($timesheet_line_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGet
     *
     * Get Roster Shifts
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  string $filter_shift_status filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles filter_selected_roles (optional)
     * @param  int $filter_employee_id filter_employee_id (optional)
     * @param  int $filter_location_id filter_location_id (optional)
     * @param  int $filter_employee_group_id filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size filter_page_size (optional)
     * @param  int $filter_current_page filter_current_page (optional)
     * @param  bool $filter_include_warnings filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]
     */
    public function auManagerRosterShiftGet($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auManagerRosterShiftGet'][0])
    {
        list($response) = $this->auManagerRosterShiftGetWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auManagerRosterShiftGet'][0])
    {
        $request = $this->auManagerRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetAsync
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetAsync($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auManagerRosterShiftGet'][0])
    {
        return $this->auManagerRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetAsyncWithHttpInfo
     *
     * Get Roster Shifts
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetAsyncWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auManagerRosterShiftGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftGenerateTimesheetModel[]';
        $request = $this->auManagerRosterShiftGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_shift_status, $filter_shift_statuses, $filter_selected_locations, $filter_selected_employees, $filter_selected_roles, $filter_employee_id, $filter_location_id, $filter_employee_group_id, $filter_unassigned_shifts_only, $filter_select_all_roles, $filter_exclude_shifts_overlapping_from_date, $filter_page_size, $filter_current_page, $filter_include_warnings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_shift_status (optional)
     * @param  string[] $filter_shift_statuses (optional)
     * @param  string[] $filter_selected_locations (optional)
     * @param  string[] $filter_selected_employees (optional)
     * @param  string[] $filter_selected_roles (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  bool $filter_unassigned_shifts_only (optional)
     * @param  bool $filter_select_all_roles (optional)
     * @param  bool $filter_exclude_shifts_overlapping_from_date (optional)
     * @param  int $filter_page_size (optional)
     * @param  int $filter_current_page (optional)
     * @param  bool $filter_include_warnings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetRequest($business_id, $filter_from_date = null, $filter_to_date = null, $filter_shift_status = null, $filter_shift_statuses = null, $filter_selected_locations = null, $filter_selected_employees = null, $filter_selected_roles = null, $filter_employee_id = null, $filter_location_id = null, $filter_employee_group_id = null, $filter_unassigned_shifts_only = null, $filter_select_all_roles = null, $filter_exclude_shifts_overlapping_from_date = null, $filter_page_size = null, $filter_current_page = null, $filter_include_warnings = null, string $contentType = self::contentTypes['auManagerRosterShiftGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGet'
            );
        }


















        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_shift_status,
            'filter.shiftStatus', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_shift_statuses,
            'filter.shiftStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_locations,
            'filter.selectedLocations', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_employees,
            'filter.selectedEmployees', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_selected_roles,
            'filter.selectedRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_id,
            'filter.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_location_id,
            'filter.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_group_id,
            'filter.employeeGroupId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_unassigned_shifts_only,
            'filter.unassignedShiftsOnly', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_select_all_roles,
            'filter.selectAllRoles', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_exclude_shifts_overlapping_from_date,
            'filter.excludeShiftsOverlappingFromDate', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_page_size,
            'filter.pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_current_page,
            'filter.currentPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_include_warnings,
            'filter.includeWarnings', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGetLeaveEmployees
     *
     * List Roster Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerRosterEmployeeModel[]
     */
    public function auManagerRosterShiftGetLeaveEmployees($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLeaveEmployees'][0])
    {
        list($response) = $this->auManagerRosterShiftGetLeaveEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetLeaveEmployeesWithHttpInfo
     *
     * List Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerRosterEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetLeaveEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLeaveEmployees'][0])
    {
        $request = $this->auManagerRosterShiftGetLeaveEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetLeaveEmployeesAsync
     *
     * List Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetLeaveEmployeesAsync($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLeaveEmployees'][0])
    {
        return $this->auManagerRosterShiftGetLeaveEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetLeaveEmployeesAsyncWithHttpInfo
     *
     * List Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetLeaveEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLeaveEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]';
        $request = $this->auManagerRosterShiftGetLeaveEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGetLeaveEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetLeaveEmployeesRequest($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLeaveEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGetLeaveEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGetLocations
     *
     * List Roster Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function auManagerRosterShiftGetLocations($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLocations'][0])
    {
        list($response) = $this->auManagerRosterShiftGetLocationsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetLocationsWithHttpInfo
     *
     * List Roster Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetLocationsWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLocations'][0])
    {
        $request = $this->auManagerRosterShiftGetLocationsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetLocationsAsync
     *
     * List Roster Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetLocationsAsync($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLocations'][0])
    {
        return $this->auManagerRosterShiftGetLocationsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetLocationsAsyncWithHttpInfo
     *
     * List Roster Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetLocationsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->auManagerRosterShiftGetLocationsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGetLocations'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetLocationsRequest($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGetLocations'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGetManageEmployees
     *
     * List Manager Roster Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetManageEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerRosterEmployeeModel[]
     */
    public function auManagerRosterShiftGetManageEmployees($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetManageEmployees'][0])
    {
        list($response) = $this->auManagerRosterShiftGetManageEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetManageEmployeesWithHttpInfo
     *
     * List Manager Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetManageEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerRosterEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetManageEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetManageEmployees'][0])
    {
        $request = $this->auManagerRosterShiftGetManageEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetManageEmployeesAsync
     *
     * List Manager Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetManageEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetManageEmployeesAsync($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetManageEmployees'][0])
    {
        return $this->auManagerRosterShiftGetManageEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetManageEmployeesAsyncWithHttpInfo
     *
     * List Manager Roster Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetManageEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetManageEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetManageEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerRosterEmployeeModel[]';
        $request = $this->auManagerRosterShiftGetManageEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGetManageEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetManageEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetManageEmployeesRequest($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetManageEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGetManageEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/manageemployees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGetRoles
     *
     * Get the list of roles available
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRoles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RosterShiftRole[]
     */
    public function auManagerRosterShiftGetRoles($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetRoles'][0])
    {
        list($response) = $this->auManagerRosterShiftGetRolesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetRolesWithHttpInfo
     *
     * Get the list of roles available
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRoles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RosterShiftRole[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetRolesWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetRoles'][0])
    {
        $request = $this->auManagerRosterShiftGetRolesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RosterShiftRole[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RosterShiftRole[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RosterShiftRole[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RosterShiftRole[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RosterShiftRole[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetRolesAsync
     *
     * Get the list of roles available
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetRolesAsync($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetRoles'][0])
    {
        return $this->auManagerRosterShiftGetRolesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetRolesAsyncWithHttpInfo
     *
     * Get the list of roles available
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetRolesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetRoles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RosterShiftRole[]';
        $request = $this->auManagerRosterShiftGetRolesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGetRoles'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetRolesRequest($business_id, string $contentType = self::contentTypes['auManagerRosterShiftGetRoles'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGetRoles'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftGetRosterShift
     *
     * Get Roster Shift by ID
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  bool $include_costs include_costs (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuManagerRosterShiftModel
     */
    public function auManagerRosterShiftGetRosterShift($roster_shift_id, $business_id, $include_costs = false, string $contentType = self::contentTypes['auManagerRosterShiftGetRosterShift'][0])
    {
        list($response) = $this->auManagerRosterShiftGetRosterShiftWithHttpInfo($roster_shift_id, $business_id, $include_costs, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftGetRosterShiftWithHttpInfo
     *
     * Get Roster Shift by ID
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_costs (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuManagerRosterShiftModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftGetRosterShiftWithHttpInfo($roster_shift_id, $business_id, $include_costs = false, string $contentType = self::contentTypes['auManagerRosterShiftGetRosterShift'][0])
    {
        $request = $this->auManagerRosterShiftGetRosterShiftRequest($roster_shift_id, $business_id, $include_costs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuManagerRosterShiftModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuManagerRosterShiftModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuManagerRosterShiftModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuManagerRosterShiftModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuManagerRosterShiftModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftGetRosterShiftAsync
     *
     * Get Roster Shift by ID
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_costs (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetRosterShiftAsync($roster_shift_id, $business_id, $include_costs = false, string $contentType = self::contentTypes['auManagerRosterShiftGetRosterShift'][0])
    {
        return $this->auManagerRosterShiftGetRosterShiftAsyncWithHttpInfo($roster_shift_id, $business_id, $include_costs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftGetRosterShiftAsyncWithHttpInfo
     *
     * Get Roster Shift by ID
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_costs (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftGetRosterShiftAsyncWithHttpInfo($roster_shift_id, $business_id, $include_costs = false, string $contentType = self::contentTypes['auManagerRosterShiftGetRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuManagerRosterShiftModel';
        $request = $this->auManagerRosterShiftGetRosterShiftRequest($roster_shift_id, $business_id, $include_costs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftGetRosterShift'
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  bool $include_costs (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftGetRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftGetRosterShiftRequest($roster_shift_id, $business_id, $include_costs = false, string $contentType = self::contentTypes['auManagerRosterShiftGetRosterShift'][0])
    {

        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auManagerRosterShiftGetRosterShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftGetRosterShift'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{rosterShiftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_costs,
            'includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftManageRosterData
     *
     * Manage Roster Data
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $filter_model_date filter_model_date (optional)
     * @param  int $filter_model_employee_id filter_model_employee_id (optional)
     * @param  int $filter_model_location_id filter_model_location_id (optional)
     * @param  int $filter_model_role_id filter_model_role_id (optional)
     * @param  bool $filter_model_include_costs filter_model_include_costs (optional)
     * @param  bool $filter_model_include_sub_locations filter_model_include_sub_locations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftManageRosterData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuManagerRosterDataModel
     */
    public function auManagerRosterShiftManageRosterData($business_id, $filter_model_date = null, $filter_model_employee_id = null, $filter_model_location_id = null, $filter_model_role_id = null, $filter_model_include_costs = null, $filter_model_include_sub_locations = null, string $contentType = self::contentTypes['auManagerRosterShiftManageRosterData'][0])
    {
        list($response) = $this->auManagerRosterShiftManageRosterDataWithHttpInfo($business_id, $filter_model_date, $filter_model_employee_id, $filter_model_location_id, $filter_model_role_id, $filter_model_include_costs, $filter_model_include_sub_locations, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftManageRosterDataWithHttpInfo
     *
     * Manage Roster Data
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_model_date (optional)
     * @param  int $filter_model_employee_id (optional)
     * @param  int $filter_model_location_id (optional)
     * @param  int $filter_model_role_id (optional)
     * @param  bool $filter_model_include_costs (optional)
     * @param  bool $filter_model_include_sub_locations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftManageRosterData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuManagerRosterDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftManageRosterDataWithHttpInfo($business_id, $filter_model_date = null, $filter_model_employee_id = null, $filter_model_location_id = null, $filter_model_role_id = null, $filter_model_include_costs = null, $filter_model_include_sub_locations = null, string $contentType = self::contentTypes['auManagerRosterShiftManageRosterData'][0])
    {
        $request = $this->auManagerRosterShiftManageRosterDataRequest($business_id, $filter_model_date, $filter_model_employee_id, $filter_model_location_id, $filter_model_role_id, $filter_model_include_costs, $filter_model_include_sub_locations, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuManagerRosterDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuManagerRosterDataModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuManagerRosterDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuManagerRosterDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuManagerRosterDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftManageRosterDataAsync
     *
     * Manage Roster Data
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_model_date (optional)
     * @param  int $filter_model_employee_id (optional)
     * @param  int $filter_model_location_id (optional)
     * @param  int $filter_model_role_id (optional)
     * @param  bool $filter_model_include_costs (optional)
     * @param  bool $filter_model_include_sub_locations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftManageRosterData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftManageRosterDataAsync($business_id, $filter_model_date = null, $filter_model_employee_id = null, $filter_model_location_id = null, $filter_model_role_id = null, $filter_model_include_costs = null, $filter_model_include_sub_locations = null, string $contentType = self::contentTypes['auManagerRosterShiftManageRosterData'][0])
    {
        return $this->auManagerRosterShiftManageRosterDataAsyncWithHttpInfo($business_id, $filter_model_date, $filter_model_employee_id, $filter_model_location_id, $filter_model_role_id, $filter_model_include_costs, $filter_model_include_sub_locations, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftManageRosterDataAsyncWithHttpInfo
     *
     * Manage Roster Data
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_model_date (optional)
     * @param  int $filter_model_employee_id (optional)
     * @param  int $filter_model_location_id (optional)
     * @param  int $filter_model_role_id (optional)
     * @param  bool $filter_model_include_costs (optional)
     * @param  bool $filter_model_include_sub_locations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftManageRosterData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftManageRosterDataAsyncWithHttpInfo($business_id, $filter_model_date = null, $filter_model_employee_id = null, $filter_model_location_id = null, $filter_model_role_id = null, $filter_model_include_costs = null, $filter_model_include_sub_locations = null, string $contentType = self::contentTypes['auManagerRosterShiftManageRosterData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuManagerRosterDataModel';
        $request = $this->auManagerRosterShiftManageRosterDataRequest($business_id, $filter_model_date, $filter_model_employee_id, $filter_model_location_id, $filter_model_role_id, $filter_model_include_costs, $filter_model_include_sub_locations, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftManageRosterData'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_model_date (optional)
     * @param  int $filter_model_employee_id (optional)
     * @param  int $filter_model_location_id (optional)
     * @param  int $filter_model_role_id (optional)
     * @param  bool $filter_model_include_costs (optional)
     * @param  bool $filter_model_include_sub_locations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftManageRosterData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftManageRosterDataRequest($business_id, $filter_model_date = null, $filter_model_employee_id = null, $filter_model_location_id = null, $filter_model_role_id = null, $filter_model_include_costs = null, $filter_model_include_sub_locations = null, string $contentType = self::contentTypes['auManagerRosterShiftManageRosterData'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftManageRosterData'
            );
        }








        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/manage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_date,
            'filterModel.date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_employee_id,
            'filterModel.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_location_id,
            'filterModel.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_role_id,
            'filterModel.roleId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_include_costs,
            'filterModel.includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_model_include_sub_locations,
            'filterModel.includeSubLocations', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOffRosterShift
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auManagerRosterShiftMatchingClockOffRosterShift($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'][0])
    {
        list($response) = $this->auManagerRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOffRosterShiftWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftMatchingClockOffRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'][0])
    {
        $request = $this->auManagerRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOffRosterShiftAsync
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftMatchingClockOffRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'][0])
    {
        return $this->auManagerRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock Off Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftMatchingClockOffRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auManagerRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftMatchingClockOffRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftMatchingClockOffRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOffRosterShift'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auManagerRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auManagerRosterShiftMatchingClockOffRosterShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftMatchingClockOffRosterShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{employeeId}/matchingclockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kiosk_id,
            'kioskId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_utc,
            'dateUtc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOnRosterShift
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $kiosk_id kiosk_id (required)
     * @param  \DateTime $date_utc date_utc (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel
     */
    public function auManagerRosterShiftMatchingClockOnRosterShift($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'][0])
    {
        list($response) = $this->auManagerRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOnRosterShiftWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuRosterShiftMatchingResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftMatchingClockOnRosterShiftWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'][0])
    {
        $request = $this->auManagerRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOnRosterShiftAsync
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftMatchingClockOnRosterShiftAsync($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'][0])
    {
        return $this->auManagerRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo
     *
     * Find Matching Clock On Roster Shift
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftMatchingClockOnRosterShiftAsyncWithHttpInfo($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuRosterShiftMatchingResultModel';
        $request = $this->auManagerRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftMatchingClockOnRosterShift'
     *
     * @param  int $employee_id (required)
     * @param  int $kiosk_id (required)
     * @param  \DateTime $date_utc (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftMatchingClockOnRosterShiftRequest($employee_id, $kiosk_id, $date_utc, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftMatchingClockOnRosterShift'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auManagerRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'date_utc' is set
        if ($date_utc === null || (is_array($date_utc) && count($date_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_utc when calling auManagerRosterShiftMatchingClockOnRosterShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftMatchingClockOnRosterShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{employeeId}/matchingclockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kiosk_id,
            'kioskId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_utc,
            'dateUtc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftNearbyRosterShifts
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id employee_id (required)
     * @param  \DateTime $local_time local_time (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuEssRosterShiftModel[]
     */
    public function auManagerRosterShiftNearbyRosterShifts($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftNearbyRosterShifts'][0])
    {
        list($response) = $this->auManagerRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerRosterShiftNearbyRosterShiftsWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuEssRosterShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftNearbyRosterShiftsWithHttpInfo($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftNearbyRosterShifts'][0])
    {
        $request = $this->auManagerRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuEssRosterShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuEssRosterShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuEssRosterShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftNearbyRosterShiftsAsync
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftNearbyRosterShiftsAsync($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftNearbyRosterShifts'][0])
    {
        return $this->auManagerRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftNearbyRosterShiftsAsyncWithHttpInfo
     *
     * Find Nearby Roster Shifts
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftNearbyRosterShiftsAsyncWithHttpInfo($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftNearbyRosterShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuEssRosterShiftModel[]';
        $request = $this->auManagerRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftNearbyRosterShifts'
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $local_time (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftNearbyRosterShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftNearbyRosterShiftsRequest($employee_id, $local_time, $business_id, string $contentType = self::contentTypes['auManagerRosterShiftNearbyRosterShifts'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerRosterShiftNearbyRosterShifts'
            );
        }

        // verify the required parameter 'local_time' is set
        if ($local_time === null || (is_array($local_time) && count($local_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $local_time when calling auManagerRosterShiftNearbyRosterShifts'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftNearbyRosterShifts'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{employeeId}/nearby';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $local_time,
            'localTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftPost
     *
     * Create roster shift
     *
     * @param  bool $publish publish (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auManagerRosterShiftPost($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPost'][0])
    {
        $this->auManagerRosterShiftPostWithHttpInfo($publish, $business_id, $shift_model, $contentType);
    }

    /**
     * Operation auManagerRosterShiftPostWithHttpInfo
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftPostWithHttpInfo($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPost'][0])
    {
        $request = $this->auManagerRosterShiftPostRequest($publish, $business_id, $shift_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftPostAsync
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftPostAsync($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPost'][0])
    {
        return $this->auManagerRosterShiftPostAsyncWithHttpInfo($publish, $business_id, $shift_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftPostAsyncWithHttpInfo
     *
     * Create roster shift
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftPostAsyncWithHttpInfo($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPost'][0])
    {
        $returnType = '';
        $request = $this->auManagerRosterShiftPostRequest($publish, $business_id, $shift_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftPost'
     *
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftPostRequest($publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPost'][0])
    {

        // verify the required parameter 'publish' is set
        if ($publish === null || (is_array($publish) && count($publish) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publish when calling auManagerRosterShiftPost'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftPost'
            );
        }

        // verify the required parameter 'shift_model' is set
        if ($shift_model === null || (is_array($shift_model) && count($shift_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_model when calling auManagerRosterShiftPost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shift_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shift_model));
            } else {
                $httpBody = $shift_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftPut
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  bool $publish publish (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auManagerRosterShiftPut($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPut'][0])
    {
        $this->auManagerRosterShiftPutWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, $contentType);
    }

    /**
     * Operation auManagerRosterShiftPutWithHttpInfo
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftPutWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPut'][0])
    {
        $request = $this->auManagerRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftPutAsync
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftPutAsync($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPut'][0])
    {
        return $this->auManagerRosterShiftPutAsyncWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftPutAsyncWithHttpInfo
     *
     * Update roster shift
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftPutAsyncWithHttpInfo($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPut'][0])
    {
        $returnType = '';
        $request = $this->auManagerRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftPut'
     *
     * @param  int $roster_shift_id (required)
     * @param  bool $publish (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\RosterShiftEditModel $shift_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftPutRequest($roster_shift_id, $publish, $business_id, $shift_model, string $contentType = self::contentTypes['auManagerRosterShiftPut'][0])
    {

        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auManagerRosterShiftPut'
            );
        }

        // verify the required parameter 'publish' is set
        if ($publish === null || (is_array($publish) && count($publish) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publish when calling auManagerRosterShiftPut'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftPut'
            );
        }

        // verify the required parameter 'shift_model' is set
        if ($shift_model === null || (is_array($shift_model) && count($shift_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_model when calling auManagerRosterShiftPut'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{rosterShiftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shift_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shift_model));
            } else {
                $httpBody = $shift_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerRosterShiftStubShiftTimesheets
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id roster_shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auManagerRosterShiftStubShiftTimesheets($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auManagerRosterShiftStubShiftTimesheets'][0])
    {
        $this->auManagerRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $business_id, $model, $contentType);
    }

    /**
     * Operation auManagerRosterShiftStubShiftTimesheetsWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerRosterShiftStubShiftTimesheetsWithHttpInfo($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auManagerRosterShiftStubShiftTimesheets'][0])
    {
        $request = $this->auManagerRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerRosterShiftStubShiftTimesheetsAsync
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftStubShiftTimesheetsAsync($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auManagerRosterShiftStubShiftTimesheets'][0])
    {
        return $this->auManagerRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerRosterShiftStubShiftTimesheetsAsyncWithHttpInfo
     *
     * Stub Shift Timesheets
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerRosterShiftStubShiftTimesheetsAsyncWithHttpInfo($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auManagerRosterShiftStubShiftTimesheets'][0])
    {
        $returnType = '';
        $request = $this->auManagerRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerRosterShiftStubShiftTimesheets'
     *
     * @param  int $roster_shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StubRosterShiftViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerRosterShiftStubShiftTimesheets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerRosterShiftStubShiftTimesheetsRequest($roster_shift_id, $business_id, $model, string $contentType = self::contentTypes['auManagerRosterShiftStubShiftTimesheets'][0])
    {

        // verify the required parameter 'roster_shift_id' is set
        if ($roster_shift_id === null || (is_array($roster_shift_id) && count($roster_shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roster_shift_id when calling auManagerRosterShiftStubShiftTimesheets'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerRosterShiftStubShiftTimesheets'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auManagerRosterShiftStubShiftTimesheets'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/rostershift/{rosterShiftId}/stub';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($roster_shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rosterShiftId' . '}',
                ObjectSerializer::toPathValue($roster_shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerSecurityBusinesses
     *
     * List Businesses
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerSecurityBusinesses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuAvailableBusinessModel[]
     */
    public function auManagerSecurityBusinesses(string $contentType = self::contentTypes['auManagerSecurityBusinesses'][0])
    {
        list($response) = $this->auManagerSecurityBusinessesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation auManagerSecurityBusinessesWithHttpInfo
     *
     * List Businesses
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerSecurityBusinesses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuAvailableBusinessModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerSecurityBusinessesWithHttpInfo(string $contentType = self::contentTypes['auManagerSecurityBusinesses'][0])
    {
        $request = $this->auManagerSecurityBusinessesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuAvailableBusinessModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuAvailableBusinessModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuAvailableBusinessModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuAvailableBusinessModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuAvailableBusinessModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerSecurityBusinessesAsync
     *
     * List Businesses
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerSecurityBusinesses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerSecurityBusinessesAsync(string $contentType = self::contentTypes['auManagerSecurityBusinesses'][0])
    {
        return $this->auManagerSecurityBusinessesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerSecurityBusinessesAsyncWithHttpInfo
     *
     * List Businesses
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerSecurityBusinesses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerSecurityBusinessesAsyncWithHttpInfo(string $contentType = self::contentTypes['auManagerSecurityBusinesses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuAvailableBusinessModel[]';
        $request = $this->auManagerSecurityBusinessesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerSecurityBusinesses'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerSecurityBusinesses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerSecurityBusinessesRequest(string $contentType = self::contentTypes['auManagerSecurityBusinesses'][0])
    {


        $resourcePath = '/api/v2/manager/security/businesses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerTimeAndAttendanceGetLookupData
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel
     */
    public function auManagerTimeAndAttendanceGetLookupData($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auManagerTimeAndAttendanceGetLookupData'][0])
    {
        list($response) = $this->auManagerTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation auManagerTimeAndAttendanceGetLookupDataWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerTimeAndAttendanceGetLookupDataWithHttpInfo($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auManagerTimeAndAttendanceGetLookupData'][0])
    {
        $request = $this->auManagerTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerTimeAndAttendanceGetLookupDataAsync
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimeAndAttendanceGetLookupDataAsync($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auManagerTimeAndAttendanceGetLookupData'][0])
    {
        return $this->auManagerTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerTimeAndAttendanceGetLookupDataAsyncWithHttpInfo
     *
     * Get Employee Lookup Data
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimeAndAttendanceGetLookupDataAsyncWithHttpInfo($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auManagerTimeAndAttendanceGetLookupData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceLookupDataModel';
        $request = $this->auManagerTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerTimeAndAttendanceGetLookupData'
     *
     * @param  int $kiosk_id (required)
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceGetLookupData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerTimeAndAttendanceGetLookupDataRequest($kiosk_id, $employee_id, $business_id, string $contentType = self::contentTypes['auManagerTimeAndAttendanceGetLookupData'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling auManagerTimeAndAttendanceGetLookupData'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auManagerTimeAndAttendanceGetLookupData'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerTimeAndAttendanceGetLookupData'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/lookupdata/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerTimeAndAttendanceShifts
     *
     * Shifts
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]
     */
    public function auManagerTimeAndAttendanceShifts($business_id, $model, string $contentType = self::contentTypes['auManagerTimeAndAttendanceShifts'][0])
    {
        list($response) = $this->auManagerTimeAndAttendanceShiftsWithHttpInfo($business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation auManagerTimeAndAttendanceShiftsWithHttpInfo
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerTimeAndAttendanceShiftsWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auManagerTimeAndAttendanceShifts'][0])
    {
        $request = $this->auManagerTimeAndAttendanceShiftsRequest($business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerTimeAndAttendanceShiftsAsync
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimeAndAttendanceShiftsAsync($business_id, $model, string $contentType = self::contentTypes['auManagerTimeAndAttendanceShifts'][0])
    {
        return $this->auManagerTimeAndAttendanceShiftsAsyncWithHttpInfo($business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerTimeAndAttendanceShiftsAsyncWithHttpInfo
     *
     * Shifts
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimeAndAttendanceShiftsAsyncWithHttpInfo($business_id, $model, string $contentType = self::contentTypes['auManagerTimeAndAttendanceShifts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuTimeAndAttendanceShiftModel[]';
        $request = $this->auManagerTimeAndAttendanceShiftsRequest($business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerTimeAndAttendanceShifts'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\GetShiftsModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimeAndAttendanceShifts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerTimeAndAttendanceShiftsRequest($business_id, $model, string $contentType = self::contentTypes['auManagerTimeAndAttendanceShifts'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerTimeAndAttendanceShifts'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auManagerTimeAndAttendanceShifts'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/shifts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerTimesheetPostIndividual
     *
     * Create timesheet line
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPostIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuIndividualTimesheetLineModel
     */
    public function auManagerTimesheetPostIndividual($business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPostIndividual'][0])
    {
        list($response) = $this->auManagerTimesheetPostIndividualWithHttpInfo($business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auManagerTimesheetPostIndividualWithHttpInfo
     *
     * Create timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPostIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuIndividualTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerTimesheetPostIndividualWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPostIndividual'][0])
    {
        $request = $this->auManagerTimesheetPostIndividualRequest($business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerTimesheetPostIndividualAsync
     *
     * Create timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimesheetPostIndividualAsync($business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPostIndividual'][0])
    {
        return $this->auManagerTimesheetPostIndividualAsyncWithHttpInfo($business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerTimesheetPostIndividualAsyncWithHttpInfo
     *
     * Create timesheet line
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimesheetPostIndividualAsyncWithHttpInfo($business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPostIndividual'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
        $request = $this->auManagerTimesheetPostIndividualRequest($business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerTimesheetPostIndividual'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPostIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerTimesheetPostIndividualRequest($business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPostIndividual'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerTimesheetPostIndividual'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auManagerTimesheetPostIndividual'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auManagerTimesheetPutIndividual
     *
     * Update timesheet line
     *
     * @param  int $timesheet_line_id timesheet_line_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPutIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuIndividualTimesheetLineModel
     */
    public function auManagerTimesheetPutIndividual($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPutIndividual'][0])
    {
        list($response) = $this->auManagerTimesheetPutIndividualWithHttpInfo($timesheet_line_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation auManagerTimesheetPutIndividualWithHttpInfo
     *
     * Update timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPutIndividual'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuIndividualTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auManagerTimesheetPutIndividualWithHttpInfo($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPutIndividual'][0])
    {
        $request = $this->auManagerTimesheetPutIndividualRequest($timesheet_line_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AuIndividualTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auManagerTimesheetPutIndividualAsync
     *
     * Update timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimesheetPutIndividualAsync($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPutIndividual'][0])
    {
        return $this->auManagerTimesheetPutIndividualAsyncWithHttpInfo($timesheet_line_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auManagerTimesheetPutIndividualAsyncWithHttpInfo
     *
     * Update timesheet line
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auManagerTimesheetPutIndividualAsyncWithHttpInfo($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPutIndividual'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AuIndividualTimesheetLineModel';
        $request = $this->auManagerTimesheetPutIndividualRequest($timesheet_line_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auManagerTimesheetPutIndividual'
     *
     * @param  int $timesheet_line_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AuIndividualTimesheetLineModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['auManagerTimesheetPutIndividual'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function auManagerTimesheetPutIndividualRequest($timesheet_line_id, $business_id, $request, string $contentType = self::contentTypes['auManagerTimesheetPutIndividual'][0])
    {

        // verify the required parameter 'timesheet_line_id' is set
        if ($timesheet_line_id === null || (is_array($timesheet_line_id) && count($timesheet_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timesheet_line_id when calling auManagerTimesheetPutIndividual'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auManagerTimesheetPutIndividual'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling auManagerTimesheetPutIndividual'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet/{timesheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($timesheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timesheetLineId' . '}',
                ObjectSerializer::toPathValue($timesheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceAddNote
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ShiftNoteViewModel
     */
    public function genericManagerTimeAndAttendanceAddNote($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceAddNote'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceAddNoteWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ShiftNoteViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceAddNoteWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceAddNote'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ShiftNoteViewModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ShiftNoteViewModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ShiftNoteViewModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ShiftNoteViewModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ShiftNoteViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceAddNoteAsync
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceAddNoteAsync($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceAddNote'][0])
    {
        return $this->genericManagerTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceAddNoteAsyncWithHttpInfo
     *
     * Add Note to Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceAddNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceAddNote'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ShiftNoteViewModel';
        $request = $this->genericManagerTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceAddNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceAddNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceAddNoteRequest($kiosk_id, $shift_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceAddNote'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericManagerTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceAddNote'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceAddNote'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceChangePin
     *
     * Change PIN
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceChangePin($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceChangePin'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceChangePinWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceChangePinWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceChangePin'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceChangePinAsync
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceChangePinAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceChangePin'][0])
    {
        return $this->genericManagerTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceChangePinAsyncWithHttpInfo
     *
     * Change PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceChangePinAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceChangePin'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceChangePin'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ChangeKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceChangePin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceChangePinRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceChangePin'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceChangePin'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceChangePin'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceChangePin'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/changepin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckId
     *
     * Check Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskEmployeeIdModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BasicKioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceCheckId($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckId'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceCheckIdWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckIdWithHttpInfo
     *
     * Check Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskEmployeeIdModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BasicKioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceCheckIdWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckId'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceCheckIdRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BasicKioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BasicKioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckIdAsync
     *
     * Check Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskEmployeeIdModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceCheckIdAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckId'][0])
    {
        return $this->genericManagerTimeAndAttendanceCheckIdAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckIdAsyncWithHttpInfo
     *
     * Check Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskEmployeeIdModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceCheckIdAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceCheckIdRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceCheckId'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskEmployeeIdModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceCheckIdRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckId'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceCheckId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceCheckId'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceCheckId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/checkid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckPin
     *
     * Verify Kiosk PIN
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceCheckPin($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckPin'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceCheckPinWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckPinWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceCheckPinWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckPin'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceCheckPinRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckPinAsync
     *
     * Verify Kiosk PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceCheckPinAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckPin'][0])
    {
        return $this->genericManagerTimeAndAttendanceCheckPinAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceCheckPinAsyncWithHttpInfo
     *
     * Verify Kiosk PIN
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceCheckPinAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckPin'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceCheckPinRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceCheckPin'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\CheckKioskPinModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceCheckPin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceCheckPinRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceCheckPin'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceCheckPin'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceCheckPin'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceCheckPin'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/checkpin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOff
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceClockOff($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOff'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOffWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceClockOffWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOff'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOffAsync
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceClockOffAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOff'][0])
    {
        return $this->genericManagerTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOffAsyncWithHttpInfo
     *
     * Clock Out Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceClockOffAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOff'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceClockOff'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceClockOffRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceClockOff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceClockOff'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericManagerTimeAndAttendanceClockOff'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/clockoff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOn
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOnModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceClockOn($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOn'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOnWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOnModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceClockOnWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOn'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOnAsync
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOnModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceClockOnAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOn'][0])
    {
        return $this->genericManagerTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceClockOnAsyncWithHttpInfo
     *
     * Clock In Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOnModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceClockOnAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOn'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceClockOn'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOnModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceClockOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceClockOnRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceClockOn'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceClockOn'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceClockOn'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericManagerTimeAndAttendanceClockOn'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/clockon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceDeleteNote
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  int $note_id note_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericManagerTimeAndAttendanceDeleteNote($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'][0])
    {
        $this->genericManagerTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, $contentType);
    }

    /**
     * Operation genericManagerTimeAndAttendanceDeleteNoteWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceDeleteNoteWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceDeleteNoteAsync
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceDeleteNoteAsync($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'][0])
    {
        return $this->genericManagerTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceDeleteNoteAsyncWithHttpInfo
     *
     * Delete Note from Shift
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceDeleteNoteAsyncWithHttpInfo($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'][0])
    {
        $returnType = '';
        $request = $this->genericManagerTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceDeleteNote'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  int $note_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceDeleteNoteRequest($kiosk_id, $shift_id, $note_id, $business_id, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDeleteNote'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericManagerTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling genericManagerTimeAndAttendanceDeleteNote'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceDeleteNote'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/shift/{shiftId}/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceDiscardShift
     *
     * Discard current shift
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceDiscardShift($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceDiscardShiftWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceDiscardShiftWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceDiscardShiftAsync
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceDiscardShiftAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'][0])
    {
        return $this->genericManagerTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceDiscardShiftAsyncWithHttpInfo
     *
     * Discard current shift
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceDiscardShiftAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceDiscardShift'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ClockOffModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceDiscardShiftRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceDiscardShift'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceDiscardShift'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceDiscardShift'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericManagerTimeAndAttendanceDiscardShift'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/discard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceEmailReset
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericManagerTimeAndAttendanceEmailReset($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEmailReset'][0])
    {
        $this->genericManagerTimeAndAttendanceEmailResetWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
    }

    /**
     * Operation genericManagerTimeAndAttendanceEmailResetWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceEmailResetWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEmailReset'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceEmailResetAsync
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceEmailResetAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEmailReset'][0])
    {
        return $this->genericManagerTimeAndAttendanceEmailResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceEmailResetAsyncWithHttpInfo
     *
     * Send PIN Reset Email
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceEmailResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEmailReset'][0])
    {
        $returnType = '';
        $request = $this->genericManagerTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceEmailReset'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEmailReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceEmailResetRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEmailReset'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceEmailReset'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceEmailReset'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceEmailReset'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/emailreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceEndBreak
     *
     * End Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceEndBreak($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEndBreak'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceEndBreakWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceEndBreakWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEndBreak'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceEndBreakAsync
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceEndBreakAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEndBreak'][0])
    {
        return $this->genericManagerTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceEndBreakAsyncWithHttpInfo
     *
     * End Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceEndBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEndBreak'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceEndBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\EndBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceEndBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceEndBreakRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceEndBreak'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceEndBreak'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceEndBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericManagerTimeAndAttendanceEndBreak'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/endbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetShiftNotes
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  int $shift_id shift_id (required)
     * @param  string $business_id business_id (required)
     * @param  int $model_employee_id model_employee_id (optional)
     * @param  bool $model_is_admin_initiated model_is_admin_initiated (optional)
     * @param  string $model_type model_type (optional)
     * @param  string $model_visibility model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ShiftNoteViewModel[]
     */
    public function genericManagerTimeAndAttendanceGetShiftNotes($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetShiftNotesWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ShiftNoteViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceGetShiftNotesWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ShiftNoteViewModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ShiftNoteViewModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ShiftNoteViewModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ShiftNoteViewModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ShiftNoteViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetShiftNotesAsync
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceGetShiftNotesAsync($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'][0])
    {
        return $this->genericManagerTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo
     *
     * Get Shift Notes
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceGetShiftNotesAsyncWithHttpInfo($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ShiftNoteViewModel[]';
        $request = $this->genericManagerTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id, $model_is_admin_initiated, $model_type, $model_visibility, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceGetShiftNotes'
     *
     * @param  int $kiosk_id (required)
     * @param  int $shift_id (required)
     * @param  string $business_id (required)
     * @param  int $model_employee_id (optional)
     * @param  bool $model_is_admin_initiated (optional)
     * @param  string $model_type (optional)
     * @param  string $model_visibility (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceGetShiftNotesRequest($kiosk_id, $shift_id, $business_id, $model_employee_id = null, $model_is_admin_initiated = null, $model_type = null, $model_visibility = null, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetShiftNotes'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceGetShiftNotes'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericManagerTimeAndAttendanceGetShiftNotes'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceGetShiftNotes'
            );
        }






        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/shift/{shiftId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_employee_id,
            'model.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_is_admin_initiated,
            'model.isAdminInitiated', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_type,
            'model.type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_visibility,
            'model.visibility', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetStaff
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BasicKioskEmployeeModel[]
     */
    public function genericManagerTimeAndAttendanceGetStaff($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetStaff'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetStaffWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BasicKioskEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceGetStaffWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetStaff'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BasicKioskEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetStaffAsync
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceGetStaffAsync($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetStaff'][0])
    {
        return $this->genericManagerTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceGetStaffAsyncWithHttpInfo
     *
     * List Kiosk Staff
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceGetStaffAsyncWithHttpInfo($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetStaff'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BasicKioskEmployeeModel[]';
        $request = $this->genericManagerTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceGetStaff'
     *
     * @param  int $kiosk_id The ID of the kiosk (required)
     * @param  string $business_id (required)
     * @param  bool $restrict_current_shifts_to_current_kiosk_location The default value is set to false which will return current shifts for employees against this particular location.  Setting the value to true will return employees shift details with access to this location. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceGetStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceGetStaffRequest($kiosk_id, $business_id, $restrict_current_shifts_to_current_kiosk_location = false, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceGetStaff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceGetStaff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceGetStaff'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $restrict_current_shifts_to_current_kiosk_location,
            'restrictCurrentShiftsToCurrentKioskLocation', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceMarkNotesRead
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  string $shift_id shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericManagerTimeAndAttendanceMarkNotesRead($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'][0])
    {
        $this->genericManagerTimeAndAttendanceMarkNotesReadWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, $contentType);
    }

    /**
     * Operation genericManagerTimeAndAttendanceMarkNotesReadWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceMarkNotesReadWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceMarkNotesReadAsync
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceMarkNotesReadAsync($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'][0])
    {
        return $this->genericManagerTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo
     *
     * Mark Shift Notes Read
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceMarkNotesReadAsyncWithHttpInfo($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'][0])
    {
        $returnType = '';
        $request = $this->genericManagerTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceMarkNotesRead'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  string $shift_id (required)
     * @param  \OpenAPI\Client\Model\MarkNotesReadViewModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceMarkNotesReadRequest($business_id, $kiosk_id, $shift_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceMarkNotesRead'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'shift_id' is set
        if ($shift_id === null || (is_array($shift_id) && count($shift_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shift_id when calling genericManagerTimeAndAttendanceMarkNotesRead'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceMarkNotesRead'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/shift/{shiftId}/notes/read-state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($shift_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shiftId' . '}',
                ObjectSerializer::toPathValue($shift_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendancePostStaff
     *
     * Add an Employee
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericManagerTimeAndAttendancePostStaff($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendancePostStaff'][0])
    {
        $this->genericManagerTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $business_id, $model, $contentType);
    }

    /**
     * Operation genericManagerTimeAndAttendancePostStaffWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendancePostStaffWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendancePostStaff'][0])
    {
        $request = $this->genericManagerTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendancePostStaffAsync
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendancePostStaffAsync($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendancePostStaff'][0])
    {
        return $this->genericManagerTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $business_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendancePostStaffAsyncWithHttpInfo
     *
     * Add an Employee
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendancePostStaffAsyncWithHttpInfo($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendancePostStaff'][0])
    {
        $returnType = '';
        $request = $this->genericManagerTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendancePostStaff'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\KioskCreateEmployeeModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendancePostStaff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendancePostStaffRequest($kiosk_id, $business_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendancePostStaff'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendancePostStaff'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendancePostStaff'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendancePostStaff'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceSmsReset
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id business_id (required)
     * @param  string $kiosk_id kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function genericManagerTimeAndAttendanceSmsReset($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceSmsReset'][0])
    {
        $this->genericManagerTimeAndAttendanceSmsResetWithHttpInfo($business_id, $kiosk_id, $model, $contentType);
    }

    /**
     * Operation genericManagerTimeAndAttendanceSmsResetWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceSmsResetWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceSmsReset'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceSmsResetAsync
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceSmsResetAsync($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceSmsReset'][0])
    {
        return $this->genericManagerTimeAndAttendanceSmsResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceSmsResetAsyncWithHttpInfo
     *
     * Send PIN Reset SMS
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceSmsResetAsyncWithHttpInfo($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceSmsReset'][0])
    {
        $returnType = '';
        $request = $this->genericManagerTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceSmsReset'
     *
     * @param  string $business_id (required)
     * @param  string $kiosk_id (required)
     * @param  \OpenAPI\Client\Model\PinResetModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceSmsReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceSmsResetRequest($business_id, $kiosk_id, $model, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceSmsReset'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceSmsReset'
            );
        }

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceSmsReset'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling genericManagerTimeAndAttendanceSmsReset'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/smsreset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimeAndAttendanceStartBreak
     *
     * Start Break
     *
     * @param  int $kiosk_id kiosk_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\KioskEmployeeModel
     */
    public function genericManagerTimeAndAttendanceStartBreak($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceStartBreak'][0])
    {
        list($response) = $this->genericManagerTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $business_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimeAndAttendanceStartBreakWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\KioskEmployeeModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimeAndAttendanceStartBreakWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceStartBreak'][0])
    {
        $request = $this->genericManagerTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\KioskEmployeeModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\KioskEmployeeModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\KioskEmployeeModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\KioskEmployeeModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimeAndAttendanceStartBreakAsync
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceStartBreakAsync($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceStartBreak'][0])
    {
        return $this->genericManagerTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimeAndAttendanceStartBreakAsyncWithHttpInfo
     *
     * Start Break
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimeAndAttendanceStartBreakAsyncWithHttpInfo($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceStartBreak'][0])
    {
        $returnType = '\OpenAPI\Client\Model\KioskEmployeeModel';
        $request = $this->genericManagerTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimeAndAttendanceStartBreak'
     *
     * @param  int $kiosk_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\StartBreakModel $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimeAndAttendanceStartBreak'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimeAndAttendanceStartBreakRequest($kiosk_id, $business_id, $request, string $contentType = self::contentTypes['genericManagerTimeAndAttendanceStartBreak'][0])
    {

        // verify the required parameter 'kiosk_id' is set
        if ($kiosk_id === null || (is_array($kiosk_id) && count($kiosk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kiosk_id when calling genericManagerTimeAndAttendanceStartBreak'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimeAndAttendanceStartBreak'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling genericManagerTimeAndAttendanceStartBreak'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{kioskId}/startbreak';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kiosk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'kioskId' . '}',
                ObjectSerializer::toPathValue($kiosk_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimesheetGet
     *
     * Get Business Timesheets
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  string $filter_status filter_status (optional)
     * @param  int $filter_employee_id filter_employee_id (optional)
     * @param  int $filter_employee_group_id filter_employee_group_id (optional)
     * @param  int $filter_location_id filter_location_id (optional)
     * @param  bool $filter_include_costs filter_include_costs (optional)
     * @param  int $filter_current_page filter_current_page (optional)
     * @param  int $filter_page_size filter_page_size (optional)
     * @param  string $filter_order_by filter_order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel
     */
    public function genericManagerTimesheetGet($business_id, $filter_from_date = null, $filter_to_date = null, $filter_status = null, $filter_employee_id = null, $filter_employee_group_id = null, $filter_location_id = null, $filter_include_costs = null, $filter_current_page = null, $filter_page_size = null, $filter_order_by = null, string $contentType = self::contentTypes['genericManagerTimesheetGet'][0])
    {
        list($response) = $this->genericManagerTimesheetGetWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_status, $filter_employee_id, $filter_employee_group_id, $filter_location_id, $filter_include_costs, $filter_current_page, $filter_page_size, $filter_order_by, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimesheetGetWithHttpInfo
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_status (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  bool $filter_include_costs (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $filter_order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimesheetGetWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_status = null, $filter_employee_id = null, $filter_employee_group_id = null, $filter_location_id = null, $filter_include_costs = null, $filter_current_page = null, $filter_page_size = null, $filter_order_by = null, string $contentType = self::contentTypes['genericManagerTimesheetGet'][0])
    {
        $request = $this->genericManagerTimesheetGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_status, $filter_employee_id, $filter_employee_group_id, $filter_location_id, $filter_include_costs, $filter_current_page, $filter_page_size, $filter_order_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimesheetGetAsync
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_status (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  bool $filter_include_costs (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $filter_order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetAsync($business_id, $filter_from_date = null, $filter_to_date = null, $filter_status = null, $filter_employee_id = null, $filter_employee_group_id = null, $filter_location_id = null, $filter_include_costs = null, $filter_current_page = null, $filter_page_size = null, $filter_order_by = null, string $contentType = self::contentTypes['genericManagerTimesheetGet'][0])
    {
        return $this->genericManagerTimesheetGetAsyncWithHttpInfo($business_id, $filter_from_date, $filter_to_date, $filter_status, $filter_employee_id, $filter_employee_group_id, $filter_location_id, $filter_include_costs, $filter_current_page, $filter_page_size, $filter_order_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimesheetGetAsyncWithHttpInfo
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_status (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  bool $filter_include_costs (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $filter_order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetAsyncWithHttpInfo($business_id, $filter_from_date = null, $filter_to_date = null, $filter_status = null, $filter_employee_id = null, $filter_employee_group_id = null, $filter_location_id = null, $filter_include_costs = null, $filter_current_page = null, $filter_page_size = null, $filter_order_by = null, string $contentType = self::contentTypes['genericManagerTimesheetGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PagedResultModelOfManagerTimesheetLineModel';
        $request = $this->genericManagerTimesheetGetRequest($business_id, $filter_from_date, $filter_to_date, $filter_status, $filter_employee_id, $filter_employee_group_id, $filter_location_id, $filter_include_costs, $filter_current_page, $filter_page_size, $filter_order_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimesheetGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  string $filter_status (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_employee_group_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  bool $filter_include_costs (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $filter_order_by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimesheetGetRequest($business_id, $filter_from_date = null, $filter_to_date = null, $filter_status = null, $filter_employee_id = null, $filter_employee_group_id = null, $filter_location_id = null, $filter_include_costs = null, $filter_current_page = null, $filter_page_size = null, $filter_order_by = null, string $contentType = self::contentTypes['genericManagerTimesheetGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimesheetGet'
            );
        }












        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_status,
            'filter.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_id,
            'filter.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_group_id,
            'filter.employeeGroupId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_location_id,
            'filter.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_include_costs,
            'filter.includeCosts', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_current_page,
            'filter.currentPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_page_size,
            'filter.pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_order_by,
            'filter.orderBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimesheetGetEmployeeGroups
     *
     * List Employee Groups
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetEmployeeGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerEmployeeGroup[]
     */
    public function genericManagerTimesheetGetEmployeeGroups($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetEmployeeGroups'][0])
    {
        list($response) = $this->genericManagerTimesheetGetEmployeeGroupsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimesheetGetEmployeeGroupsWithHttpInfo
     *
     * List Employee Groups
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetEmployeeGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerEmployeeGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimesheetGetEmployeeGroupsWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetEmployeeGroups'][0])
    {
        $request = $this->genericManagerTimesheetGetEmployeeGroupsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerEmployeeGroup[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerEmployeeGroup[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerEmployeeGroup[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerEmployeeGroup[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerEmployeeGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimesheetGetEmployeeGroupsAsync
     *
     * List Employee Groups
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetEmployeeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetEmployeeGroupsAsync($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetEmployeeGroups'][0])
    {
        return $this->genericManagerTimesheetGetEmployeeGroupsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimesheetGetEmployeeGroupsAsyncWithHttpInfo
     *
     * List Employee Groups
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetEmployeeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetEmployeeGroupsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetEmployeeGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerEmployeeGroup[]';
        $request = $this->genericManagerTimesheetGetEmployeeGroupsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimesheetGetEmployeeGroups'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetEmployeeGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimesheetGetEmployeeGroupsRequest($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetEmployeeGroups'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimesheetGetEmployeeGroups'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet/employeegroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimesheetGetLocations
     *
     * List Timesheet Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function genericManagerTimesheetGetLocations($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetLocations'][0])
    {
        list($response) = $this->genericManagerTimesheetGetLocationsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimesheetGetLocationsWithHttpInfo
     *
     * List Timesheet Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimesheetGetLocationsWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetLocations'][0])
    {
        $request = $this->genericManagerTimesheetGetLocationsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimesheetGetLocationsAsync
     *
     * List Timesheet Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetLocationsAsync($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetLocations'][0])
    {
        return $this->genericManagerTimesheetGetLocationsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimesheetGetLocationsAsyncWithHttpInfo
     *
     * List Timesheet Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetLocationsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->genericManagerTimesheetGetLocationsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimesheetGetLocations'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimesheetGetLocationsRequest($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimesheetGetLocations'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation genericManagerTimesheetGetTimesheetEmployees
     *
     * List Timesheet Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]
     */
    public function genericManagerTimesheetGetTimesheetEmployees($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'][0])
    {
        list($response) = $this->genericManagerTimesheetGetTimesheetEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation genericManagerTimesheetGetTimesheetEmployeesWithHttpInfo
     *
     * List Timesheet Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function genericManagerTimesheetGetTimesheetEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'][0])
    {
        $request = $this->genericManagerTimesheetGetTimesheetEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation genericManagerTimesheetGetTimesheetEmployeesAsync
     *
     * List Timesheet Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetTimesheetEmployeesAsync($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'][0])
    {
        return $this->genericManagerTimesheetGetTimesheetEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation genericManagerTimesheetGetTimesheetEmployeesAsyncWithHttpInfo
     *
     * List Timesheet Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function genericManagerTimesheetGetTimesheetEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerTimesheetEmployeeModel[]';
        $request = $this->genericManagerTimesheetGetTimesheetEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'genericManagerTimesheetGetTimesheetEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function genericManagerTimesheetGetTimesheetEmployeesRequest($business_id, string $contentType = self::contentTypes['genericManagerTimesheetGetTimesheetEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling genericManagerTimesheetGetTimesheetEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/timesheet/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerDocumentDownload
     *
     * Download Document
     *
     * @param  int $document_id document_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerDocumentDownload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerDocumentDownload($document_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerDocumentDownload'][0])
    {
        $this->managerDocumentDownloadWithHttpInfo($document_id, $business_id, $employee_id, $contentType);
    }

    /**
     * Operation managerDocumentDownloadWithHttpInfo
     *
     * Download Document
     *
     * @param  int $document_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerDocumentDownload'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerDocumentDownloadWithHttpInfo($document_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerDocumentDownload'][0])
    {
        $request = $this->managerDocumentDownloadRequest($document_id, $business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerDocumentDownloadAsync
     *
     * Download Document
     *
     * @param  int $document_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerDocumentDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerDocumentDownloadAsync($document_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerDocumentDownload'][0])
    {
        return $this->managerDocumentDownloadAsyncWithHttpInfo($document_id, $business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerDocumentDownloadAsyncWithHttpInfo
     *
     * Download Document
     *
     * @param  int $document_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerDocumentDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerDocumentDownloadAsyncWithHttpInfo($document_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerDocumentDownload'][0])
    {
        $returnType = '';
        $request = $this->managerDocumentDownloadRequest($document_id, $business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerDocumentDownload'
     *
     * @param  int $document_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerDocumentDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerDocumentDownloadRequest($document_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerDocumentDownload'][0])
    {

        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling managerDocumentDownload'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerDocumentDownload'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerDocumentDownload'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/document/download/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseApprove
     *
     * Approve Expense Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseRequestModel
     */
    public function managerEmployeeExpenseApprove($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseApprove'][0])
    {
        list($response) = $this->managerEmployeeExpenseApproveWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseApproveWithHttpInfo
     *
     * Approve Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseApproveWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseApprove'][0])
    {
        $request = $this->managerEmployeeExpenseApproveRequest($employee_id, $expense_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseApproveAsync
     *
     * Approve Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseApproveAsync($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseApprove'][0])
    {
        return $this->managerEmployeeExpenseApproveAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseApproveAsyncWithHttpInfo
     *
     * Approve Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseApproveAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
        $request = $this->managerEmployeeExpenseApproveRequest($employee_id, $expense_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseApprove'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseApproveRequest($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseApprove'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseApprove'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseApprove'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseApprove'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}/approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseCreate
     *
     * Create expense request
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseRequestModel
     */
    public function managerEmployeeExpenseCreate($employee_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseCreate'][0])
    {
        list($response) = $this->managerEmployeeExpenseCreateWithHttpInfo($employee_id, $business_id, $expense_request, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseCreateWithHttpInfo
     *
     * Create expense request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseCreateWithHttpInfo($employee_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseCreate'][0])
    {
        $request = $this->managerEmployeeExpenseCreateRequest($employee_id, $business_id, $expense_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseCreateAsync
     *
     * Create expense request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseCreateAsync($employee_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseCreate'][0])
    {
        return $this->managerEmployeeExpenseCreateAsyncWithHttpInfo($employee_id, $business_id, $expense_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseCreateAsyncWithHttpInfo
     *
     * Create expense request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseCreateAsyncWithHttpInfo($employee_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
        $request = $this->managerEmployeeExpenseCreateRequest($employee_id, $business_id, $expense_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseCreate'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseCreateRequest($employee_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseCreate'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseCreate'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseCreate'
            );
        }

        // verify the required parameter 'expense_request' is set
        if ($expense_request === null || (is_array($expense_request) && count($expense_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request when calling managerEmployeeExpenseCreate'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($expense_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($expense_request));
            } else {
                $httpBody = $expense_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseDecline
     *
     * Decline Expense Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $reason reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDecline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseRequestModel
     */
    public function managerEmployeeExpenseDecline($employee_id, $expense_request_id, $business_id, $reason, string $contentType = self::contentTypes['managerEmployeeExpenseDecline'][0])
    {
        list($response) = $this->managerEmployeeExpenseDeclineWithHttpInfo($employee_id, $expense_request_id, $business_id, $reason, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseDeclineWithHttpInfo
     *
     * Decline Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDecline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseDeclineWithHttpInfo($employee_id, $expense_request_id, $business_id, $reason, string $contentType = self::contentTypes['managerEmployeeExpenseDecline'][0])
    {
        $request = $this->managerEmployeeExpenseDeclineRequest($employee_id, $expense_request_id, $business_id, $reason, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseDeclineAsync
     *
     * Decline Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseDeclineAsync($employee_id, $expense_request_id, $business_id, $reason, string $contentType = self::contentTypes['managerEmployeeExpenseDecline'][0])
    {
        return $this->managerEmployeeExpenseDeclineAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $reason, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseDeclineAsyncWithHttpInfo
     *
     * Decline Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseDeclineAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $reason, string $contentType = self::contentTypes['managerEmployeeExpenseDecline'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
        $request = $this->managerEmployeeExpenseDeclineRequest($employee_id, $expense_request_id, $business_id, $reason, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseDecline'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseDeclineRequest($employee_id, $expense_request_id, $business_id, $reason, string $contentType = self::contentTypes['managerEmployeeExpenseDecline'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseDecline'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseDecline'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseDecline'
            );
        }

        // verify the required parameter 'reason' is set
        if ($reason === null || (is_array($reason) && count($reason) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason when calling managerEmployeeExpenseDecline'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reason)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reason));
            } else {
                $httpBody = $reason;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseDelete
     *
     * Delete Expense Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerEmployeeExpenseDelete($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseDelete'][0])
    {
        $this->managerEmployeeExpenseDeleteWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType);
    }

    /**
     * Operation managerEmployeeExpenseDeleteWithHttpInfo
     *
     * Delete Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseDeleteWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseDelete'][0])
    {
        $request = $this->managerEmployeeExpenseDeleteRequest($employee_id, $expense_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseDeleteAsync
     *
     * Delete Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseDeleteAsync($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseDelete'][0])
    {
        return $this->managerEmployeeExpenseDeleteAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseDeleteAsyncWithHttpInfo
     *
     * Delete Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseDeleteAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseDelete'][0])
    {
        $returnType = '';
        $request = $this->managerEmployeeExpenseDeleteRequest($employee_id, $expense_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseDelete'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseDeleteRequest($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseDelete'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseDelete'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseEdit
     *
     * Edit Expense Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseRequestModel
     */
    public function managerEmployeeExpenseEdit($employee_id, $expense_request_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseEdit'][0])
    {
        list($response) = $this->managerEmployeeExpenseEditWithHttpInfo($employee_id, $expense_request_id, $business_id, $expense_request, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseEditWithHttpInfo
     *
     * Edit Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseEditWithHttpInfo($employee_id, $expense_request_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseEdit'][0])
    {
        $request = $this->managerEmployeeExpenseEditRequest($employee_id, $expense_request_id, $business_id, $expense_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseEditAsync
     *
     * Edit Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseEditAsync($employee_id, $expense_request_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseEdit'][0])
    {
        return $this->managerEmployeeExpenseEditAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $expense_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseEditAsyncWithHttpInfo
     *
     * Edit Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseEditAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseEdit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
        $request = $this->managerEmployeeExpenseEditRequest($employee_id, $expense_request_id, $business_id, $expense_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseEdit'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ExpenseRequestEditModel $expense_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseEditRequest($employee_id, $expense_request_id, $business_id, $expense_request, string $contentType = self::contentTypes['managerEmployeeExpenseEdit'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseEdit'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseEdit'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseEdit'
            );
        }

        // verify the required parameter 'expense_request' is set
        if ($expense_request === null || (is_array($expense_request) && count($expense_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request when calling managerEmployeeExpenseEdit'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($expense_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($expense_request));
            } else {
                $httpBody = $expense_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseGet
     *
     * Get expenses reference data
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExpenseReferenceData
     */
    public function managerEmployeeExpenseGet($employee_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGet'][0])
    {
        list($response) = $this->managerEmployeeExpenseGetWithHttpInfo($employee_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseGetWithHttpInfo
     *
     * Get expenses reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExpenseReferenceData, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseGetWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGet'][0])
    {
        $request = $this->managerEmployeeExpenseGetRequest($employee_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExpenseReferenceData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExpenseReferenceData' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExpenseReferenceData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExpenseReferenceData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExpenseReferenceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseGetAsync
     *
     * Get expenses reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseGetAsync($employee_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGet'][0])
    {
        return $this->managerEmployeeExpenseGetAsyncWithHttpInfo($employee_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseGetAsyncWithHttpInfo
     *
     * Get expenses reference data
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseGetAsyncWithHttpInfo($employee_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExpenseReferenceData';
        $request = $this->managerEmployeeExpenseGetRequest($employee_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseGet'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseGetRequest($employee_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGet'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/reference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId
     *
     * Get expense request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseRequestModel
     */
    public function managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'][0])
    {
        list($response) = $this->managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdWithHttpInfo
     *
     * Get expense request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'][0])
    {
        $request = $this->managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdRequest($employee_id, $expense_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdAsync
     *
     * Get expense request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdAsync($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'][0])
    {
        return $this->managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdAsyncWithHttpInfo
     *
     * Get expense request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdAsyncWithHttpInfo($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseRequestModel';
        $request = $this->managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdRequest($employee_id, $expense_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestIdRequest($employee_id, $expense_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseGetApiV2BusinessByBusinessIdManagerByEmployeeIdExpenseByExpenseRequestId'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeExpenseUploadAttachment
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $expense_request_id expense_request_id (required)
     * @param  string $file_name file_name (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachmentModel
     */
    public function managerEmployeeExpenseUploadAttachment($employee_id, $expense_request_id, $file_name, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseUploadAttachment'][0])
    {
        list($response) = $this->managerEmployeeExpenseUploadAttachmentWithHttpInfo($employee_id, $expense_request_id, $file_name, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeExpenseUploadAttachmentWithHttpInfo
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachmentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeExpenseUploadAttachmentWithHttpInfo($employee_id, $expense_request_id, $file_name, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseUploadAttachment'][0])
    {
        $request = $this->managerEmployeeExpenseUploadAttachmentRequest($employee_id, $expense_request_id, $file_name, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AttachmentModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachmentModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachmentModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AttachmentModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachmentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeExpenseUploadAttachmentAsync
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseUploadAttachmentAsync($employee_id, $expense_request_id, $file_name, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseUploadAttachment'][0])
    {
        return $this->managerEmployeeExpenseUploadAttachmentAsyncWithHttpInfo($employee_id, $expense_request_id, $file_name, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeExpenseUploadAttachmentAsyncWithHttpInfo
     *
     * Upload Attachment to Expense Request
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeExpenseUploadAttachmentAsyncWithHttpInfo($employee_id, $expense_request_id, $file_name, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseUploadAttachment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachmentModel';
        $request = $this->managerEmployeeExpenseUploadAttachmentRequest($employee_id, $expense_request_id, $file_name, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeExpenseUploadAttachment'
     *
     * @param  int $employee_id (required)
     * @param  int $expense_request_id (required)
     * @param  string $file_name (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeExpenseUploadAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeExpenseUploadAttachmentRequest($employee_id, $expense_request_id, $file_name, $business_id, string $contentType = self::contentTypes['managerEmployeeExpenseUploadAttachment'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeExpenseUploadAttachment'
            );
        }

        // verify the required parameter 'expense_request_id' is set
        if ($expense_request_id === null || (is_array($expense_request_id) && count($expense_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_request_id when calling managerEmployeeExpenseUploadAttachment'
            );
        }

        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling managerEmployeeExpenseUploadAttachment'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeExpenseUploadAttachment'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/expense/{expenseRequestId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            'fileName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseRequestId' . '}',
                ObjectSerializer::toPathValue($expense_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestApprove
     *
     * Approve Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestApprove($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestApprove'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestApproveWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestApproveWithHttpInfo
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestApproveWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestApprove'][0])
    {
        $request = $this->managerEmployeeLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestApproveAsync
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestApproveAsync($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestApprove'][0])
    {
        return $this->managerEmployeeLeaveRequestApproveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestApproveAsyncWithHttpInfo
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestApproveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestApprove'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestApprove'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestApprove'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestApprove'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestApprove'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}/approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestAttachment
     *
     * Get Leave Request Attachment
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DocumentFile
     */
    public function managerEmployeeLeaveRequestAttachment($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestAttachment'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestAttachmentWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestAttachmentWithHttpInfo
     *
     * Get Leave Request Attachment
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestAttachment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DocumentFile, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestAttachmentWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestAttachment'][0])
    {
        $request = $this->managerEmployeeLeaveRequestAttachmentRequest($employee_id, $leave_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DocumentFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DocumentFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DocumentFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DocumentFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DocumentFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestAttachmentAsync
     *
     * Get Leave Request Attachment
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestAttachmentAsync($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestAttachment'][0])
    {
        return $this->managerEmployeeLeaveRequestAttachmentAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestAttachmentAsyncWithHttpInfo
     *
     * Get Leave Request Attachment
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestAttachmentAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestAttachment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DocumentFile';
        $request = $this->managerEmployeeLeaveRequestAttachmentRequest($employee_id, $leave_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestAttachment'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestAttachmentRequest($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestAttachment'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestAttachment'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestAttachment'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestAttachment'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestBalances
     *
     * Get Leave Balances
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  \DateTime $as_at_date as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestBalances'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LeaveBalanceModel[]
     */
    public function managerEmployeeLeaveRequestBalances($employee_id, $business_id, $as_at_date = null, string $contentType = self::contentTypes['managerEmployeeLeaveRequestBalances'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestBalancesWithHttpInfo($employee_id, $business_id, $as_at_date, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestBalancesWithHttpInfo
     *
     * Get Leave Balances
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestBalances'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LeaveBalanceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestBalancesWithHttpInfo($employee_id, $business_id, $as_at_date = null, string $contentType = self::contentTypes['managerEmployeeLeaveRequestBalances'][0])
    {
        $request = $this->managerEmployeeLeaveRequestBalancesRequest($employee_id, $business_id, $as_at_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LeaveBalanceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LeaveBalanceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LeaveBalanceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LeaveBalanceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LeaveBalanceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestBalancesAsync
     *
     * Get Leave Balances
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestBalancesAsync($employee_id, $business_id, $as_at_date = null, string $contentType = self::contentTypes['managerEmployeeLeaveRequestBalances'][0])
    {
        return $this->managerEmployeeLeaveRequestBalancesAsyncWithHttpInfo($employee_id, $business_id, $as_at_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestBalancesAsyncWithHttpInfo
     *
     * Get Leave Balances
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestBalancesAsyncWithHttpInfo($employee_id, $business_id, $as_at_date = null, string $contentType = self::contentTypes['managerEmployeeLeaveRequestBalances'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LeaveBalanceModel[]';
        $request = $this->managerEmployeeLeaveRequestBalancesRequest($employee_id, $business_id, $as_at_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestBalances'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \DateTime $as_at_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestBalancesRequest($employee_id, $business_id, $as_at_date = null, string $contentType = self::contentTypes['managerEmployeeLeaveRequestBalances'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestBalances'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestBalances'
            );
        }



        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $as_at_date,
            'asAtDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestCreateLeave
     *
     * Create Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestCreateLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestCreateLeave($employee_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestCreateLeave'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestCreateLeaveWithHttpInfo($employee_id, $business_id, $leave_application, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestCreateLeaveWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestCreateLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestCreateLeaveWithHttpInfo($employee_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestCreateLeave'][0])
    {
        $request = $this->managerEmployeeLeaveRequestCreateLeaveRequest($employee_id, $business_id, $leave_application, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestCreateLeaveAsync
     *
     * Create Leave Request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestCreateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestCreateLeaveAsync($employee_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestCreateLeave'][0])
    {
        return $this->managerEmployeeLeaveRequestCreateLeaveAsyncWithHttpInfo($employee_id, $business_id, $leave_application, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestCreateLeaveAsyncWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestCreateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestCreateLeaveAsyncWithHttpInfo($employee_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestCreateLeave'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestCreateLeaveRequest($employee_id, $business_id, $leave_application, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestCreateLeave'
     *
     * @param  int $employee_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestCreateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestCreateLeaveRequest($employee_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestCreateLeave'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestCreateLeave'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestCreateLeave'
            );
        }

        // verify the required parameter 'leave_application' is set
        if ($leave_application === null || (is_array($leave_application) && count($leave_application) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_application when calling managerEmployeeLeaveRequestCreateLeave'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave_application)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave_application));
            } else {
                $httpBody = $leave_application;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestDecline
     *
     * Decline Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $decline_reason decline_reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDecline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestDecline($employee_id, $leave_request_id, $business_id, $decline_reason, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDecline'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestDeclineWithHttpInfo($employee_id, $leave_request_id, $business_id, $decline_reason, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestDeclineWithHttpInfo
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $decline_reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDecline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestDeclineWithHttpInfo($employee_id, $leave_request_id, $business_id, $decline_reason, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDecline'][0])
    {
        $request = $this->managerEmployeeLeaveRequestDeclineRequest($employee_id, $leave_request_id, $business_id, $decline_reason, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestDeclineAsync
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $decline_reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestDeclineAsync($employee_id, $leave_request_id, $business_id, $decline_reason, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDecline'][0])
    {
        return $this->managerEmployeeLeaveRequestDeclineAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $decline_reason, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestDeclineAsyncWithHttpInfo
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $decline_reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestDeclineAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $decline_reason, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDecline'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestDeclineRequest($employee_id, $leave_request_id, $business_id, $decline_reason, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestDecline'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\DeclineReason $decline_reason (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDecline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestDeclineRequest($employee_id, $leave_request_id, $business_id, $decline_reason, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDecline'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestDecline'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestDecline'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestDecline'
            );
        }

        // verify the required parameter 'decline_reason' is set
        if ($decline_reason === null || (is_array($decline_reason) && count($decline_reason) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $decline_reason when calling managerEmployeeLeaveRequestDecline'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($decline_reason)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($decline_reason));
            } else {
                $httpBody = $decline_reason;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestDelete
     *
     * Delete Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestDelete($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDelete'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestDeleteWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestDeleteWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestDeleteWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDelete'][0])
    {
        $request = $this->managerEmployeeLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestDeleteAsync
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestDeleteAsync($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDelete'][0])
    {
        return $this->managerEmployeeLeaveRequestDeleteAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestDeleteAsyncWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestDeleteAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestDelete'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestDelete'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestDelete'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestEstimate
     *
     * Estimate Leave Hours
     *
     * @param  int $employee_id employee_id (required)
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  int $leave_category_id leave_category_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestEstimate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveEstimate
     */
    public function managerEmployeeLeaveRequestEstimate($employee_id, $from_date, $to_date, $leave_category_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestEstimate'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestEstimateWithHttpInfo($employee_id, $from_date, $to_date, $leave_category_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestEstimateWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  int $leave_category_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestEstimate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveEstimate, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestEstimateWithHttpInfo($employee_id, $from_date, $to_date, $leave_category_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestEstimate'][0])
    {
        $request = $this->managerEmployeeLeaveRequestEstimateRequest($employee_id, $from_date, $to_date, $leave_category_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveEstimate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveEstimate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveEstimate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveEstimate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveEstimate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestEstimateAsync
     *
     * Estimate Leave Hours
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  int $leave_category_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestEstimateAsync($employee_id, $from_date, $to_date, $leave_category_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestEstimate'][0])
    {
        return $this->managerEmployeeLeaveRequestEstimateAsyncWithHttpInfo($employee_id, $from_date, $to_date, $leave_category_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestEstimateAsyncWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  int $leave_category_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestEstimateAsyncWithHttpInfo($employee_id, $from_date, $to_date, $leave_category_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestEstimate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveEstimate';
        $request = $this->managerEmployeeLeaveRequestEstimateRequest($employee_id, $from_date, $to_date, $leave_category_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestEstimate'
     *
     * @param  int $employee_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  int $leave_category_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestEstimate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestEstimateRequest($employee_id, $from_date, $to_date, $leave_category_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestEstimate'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestEstimate'
            );
        }

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling managerEmployeeLeaveRequestEstimate'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling managerEmployeeLeaveRequestEstimate'
            );
        }

        // verify the required parameter 'leave_category_id' is set
        if ($leave_category_id === null || (is_array($leave_category_id) && count($leave_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_category_id when calling managerEmployeeLeaveRequestEstimate'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestEstimate'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/estimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $leave_category_id,
            'leaveCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestGet
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestGet($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGet'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestGetWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestGetWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestGetWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGet'][0])
    {
        $request = $this->managerEmployeeLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestGetAsync
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestGetAsync($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGet'][0])
    {
        return $this->managerEmployeeLeaveRequestGetAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestGetAsyncWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestGetAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestGet'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGet'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestGet'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestGetLeaveCategories
     *
     * List Leave Categories
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveCategoryModel[]
     */
    public function managerEmployeeLeaveRequestGetLeaveCategories($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestGetLeaveCategoriesWithHttpInfo($business_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestGetLeaveCategoriesWithHttpInfo
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveCategoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestGetLeaveCategoriesWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'][0])
    {
        $request = $this->managerEmployeeLeaveRequestGetLeaveCategoriesRequest($business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestGetLeaveCategoriesAsync
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestGetLeaveCategoriesAsync($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'][0])
    {
        return $this->managerEmployeeLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo($business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]';
        $request = $this->managerEmployeeLeaveRequestGetLeaveCategoriesRequest($business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestGetLeaveCategories'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestGetLeaveCategoriesRequest($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestGetLeaveCategories'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestGetLeaveCategories'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestGetLeaveCategories'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestOverlappingLeave
     *
     * Overlapping Leave Requests
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel[]
     */
    public function managerEmployeeLeaveRequestOverlappingLeave($leave_request_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestOverlappingLeaveWithHttpInfo($leave_request_id, $business_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestOverlappingLeaveWithHttpInfo
     *
     * Overlapping Leave Requests
     *
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestOverlappingLeaveWithHttpInfo($leave_request_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'][0])
    {
        $request = $this->managerEmployeeLeaveRequestOverlappingLeaveRequest($leave_request_id, $business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestOverlappingLeaveAsync
     *
     * Overlapping Leave Requests
     *
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestOverlappingLeaveAsync($leave_request_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'][0])
    {
        return $this->managerEmployeeLeaveRequestOverlappingLeaveAsyncWithHttpInfo($leave_request_id, $business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestOverlappingLeaveAsyncWithHttpInfo
     *
     * Overlapping Leave Requests
     *
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestOverlappingLeaveAsyncWithHttpInfo($leave_request_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
        $request = $this->managerEmployeeLeaveRequestOverlappingLeaveRequest($leave_request_id, $business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestOverlappingLeave'
     *
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestOverlappingLeaveRequest($leave_request_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeLeaveRequestOverlappingLeave'][0])
    {

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestOverlappingLeave'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestOverlappingLeave'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestOverlappingLeave'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}/overlapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeLeaveRequestUpdateLeave
     *
     * Update Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel
     */
    public function managerEmployeeLeaveRequestUpdateLeave($employee_id, $leave_request_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'][0])
    {
        list($response) = $this->managerEmployeeLeaveRequestUpdateLeaveWithHttpInfo($employee_id, $leave_request_id, $business_id, $leave_application, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeLeaveRequestUpdateLeaveWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeLeaveRequestUpdateLeaveWithHttpInfo($employee_id, $leave_request_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'][0])
    {
        $request = $this->managerEmployeeLeaveRequestUpdateLeaveRequest($employee_id, $leave_request_id, $business_id, $leave_application, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeLeaveRequestUpdateLeaveAsync
     *
     * Update Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestUpdateLeaveAsync($employee_id, $leave_request_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'][0])
    {
        return $this->managerEmployeeLeaveRequestUpdateLeaveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $leave_application, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeLeaveRequestUpdateLeaveAsyncWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeLeaveRequestUpdateLeaveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel';
        $request = $this->managerEmployeeLeaveRequestUpdateLeaveRequest($employee_id, $leave_request_id, $business_id, $leave_application, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeLeaveRequestUpdateLeave'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\ManagerLeaveApplicationModel $leave_application (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeLeaveRequestUpdateLeaveRequest($employee_id, $leave_request_id, $business_id, $leave_application, string $contentType = self::contentTypes['managerEmployeeLeaveRequestUpdateLeave'][0])
    {

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeLeaveRequestUpdateLeave'
            );
        }

        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling managerEmployeeLeaveRequestUpdateLeave'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeLeaveRequestUpdateLeave'
            );
        }

        // verify the required parameter 'leave_application' is set
        if ($leave_application === null || (is_array($leave_application) && count($leave_application) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_application when calling managerEmployeeLeaveRequestUpdateLeave'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($leave_application)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($leave_application));
            } else {
                $httpBody = $leave_application;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeProfileImageDelete
     *
     * Delete Employee Profile Image
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerEmployeeProfileImageDelete($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageDelete'][0])
    {
        $this->managerEmployeeProfileImageDeleteWithHttpInfo($business_id, $employee_id, $contentType);
    }

    /**
     * Operation managerEmployeeProfileImageDeleteWithHttpInfo
     *
     * Delete Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeProfileImageDeleteWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageDelete'][0])
    {
        $request = $this->managerEmployeeProfileImageDeleteRequest($business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeProfileImageDeleteAsync
     *
     * Delete Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImageDeleteAsync($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageDelete'][0])
    {
        return $this->managerEmployeeProfileImageDeleteAsyncWithHttpInfo($business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeProfileImageDeleteAsyncWithHttpInfo
     *
     * Delete Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImageDeleteAsyncWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageDelete'][0])
    {
        $returnType = '';
        $request = $this->managerEmployeeProfileImageDeleteRequest($business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeProfileImageDelete'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeProfileImageDeleteRequest($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageDelete'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeProfileImageDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeProfileImageDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/employee/{employeeId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeProfileImageGet
     *
     * Get Employee Profile Image
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerEmployeeProfileImageGet($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageGet'][0])
    {
        $this->managerEmployeeProfileImageGetWithHttpInfo($business_id, $employee_id, $contentType);
    }

    /**
     * Operation managerEmployeeProfileImageGetWithHttpInfo
     *
     * Get Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeProfileImageGetWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageGet'][0])
    {
        $request = $this->managerEmployeeProfileImageGetRequest($business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeProfileImageGetAsync
     *
     * Get Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImageGetAsync($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageGet'][0])
    {
        return $this->managerEmployeeProfileImageGetAsyncWithHttpInfo($business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeProfileImageGetAsyncWithHttpInfo
     *
     * Get Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImageGetAsyncWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageGet'][0])
    {
        $returnType = '';
        $request = $this->managerEmployeeProfileImageGetRequest($business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeProfileImageGet'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeProfileImageGetRequest($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImageGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeProfileImageGet'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeProfileImageGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/employee/{employeeId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeProfileImagePost
     *
     * Set Employee Profile Image
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProfileImageMetadata
     */
    public function managerEmployeeProfileImagePost($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImagePost'][0])
    {
        list($response) = $this->managerEmployeeProfileImagePostWithHttpInfo($business_id, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeProfileImagePostWithHttpInfo
     *
     * Set Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProfileImageMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeProfileImagePostWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImagePost'][0])
    {
        $request = $this->managerEmployeeProfileImagePostRequest($business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProfileImageMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProfileImageMetadata' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProfileImageMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProfileImageMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProfileImageMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeProfileImagePostAsync
     *
     * Set Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImagePostAsync($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImagePost'][0])
    {
        return $this->managerEmployeeProfileImagePostAsyncWithHttpInfo($business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeProfileImagePostAsyncWithHttpInfo
     *
     * Set Employee Profile Image
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeProfileImagePostAsyncWithHttpInfo($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProfileImageMetadata';
        $request = $this->managerEmployeeProfileImagePostRequest($business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeProfileImagePost'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeProfileImagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeProfileImagePostRequest($business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeProfileImagePost'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeProfileImagePost'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeProfileImagePost'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/employee/{employeeId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeRosterShiftCreate
     *
     * Create Unavailability
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerUnavailabilityModel
     */
    public function managerEmployeeRosterShiftCreate($business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftCreate'][0])
    {
        list($response) = $this->managerEmployeeRosterShiftCreateWithHttpInfo($business_id, $employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeRosterShiftCreateWithHttpInfo
     *
     * Create Unavailability
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerUnavailabilityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeRosterShiftCreateWithHttpInfo($business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftCreate'][0])
    {
        $request = $this->managerEmployeeRosterShiftCreateRequest($business_id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerUnavailabilityModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerUnavailabilityModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerUnavailabilityModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerUnavailabilityModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerUnavailabilityModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeRosterShiftCreateAsync
     *
     * Create Unavailability
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftCreateAsync($business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftCreate'][0])
    {
        return $this->managerEmployeeRosterShiftCreateAsyncWithHttpInfo($business_id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeRosterShiftCreateAsyncWithHttpInfo
     *
     * Create Unavailability
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftCreateAsyncWithHttpInfo($business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerUnavailabilityModel';
        $request = $this->managerEmployeeRosterShiftCreateRequest($business_id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeRosterShiftCreate'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeRosterShiftCreateRequest($business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftCreate'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeRosterShiftCreate'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeRosterShiftCreate'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling managerEmployeeRosterShiftCreate'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/rostershift/unavailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeRosterShiftDelete
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id unavailability_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerEmployeeRosterShiftDelete($unavailability_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeRosterShiftDelete'][0])
    {
        $this->managerEmployeeRosterShiftDeleteWithHttpInfo($unavailability_id, $business_id, $employee_id, $contentType);
    }

    /**
     * Operation managerEmployeeRosterShiftDeleteWithHttpInfo
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeRosterShiftDeleteWithHttpInfo($unavailability_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeRosterShiftDelete'][0])
    {
        $request = $this->managerEmployeeRosterShiftDeleteRequest($unavailability_id, $business_id, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeRosterShiftDeleteAsync
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftDeleteAsync($unavailability_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeRosterShiftDelete'][0])
    {
        return $this->managerEmployeeRosterShiftDeleteAsyncWithHttpInfo($unavailability_id, $business_id, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeRosterShiftDeleteAsyncWithHttpInfo
     *
     * Delete Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftDeleteAsyncWithHttpInfo($unavailability_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeRosterShiftDelete'][0])
    {
        $returnType = '';
        $request = $this->managerEmployeeRosterShiftDeleteRequest($unavailability_id, $business_id, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeRosterShiftDelete'
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeRosterShiftDeleteRequest($unavailability_id, $business_id, $employee_id, string $contentType = self::contentTypes['managerEmployeeRosterShiftDelete'][0])
    {

        // verify the required parameter 'unavailability_id' is set
        if ($unavailability_id === null || (is_array($unavailability_id) && count($unavailability_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability_id when calling managerEmployeeRosterShiftDelete'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeRosterShiftDelete'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeRosterShiftDelete'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/rostershift/unavailability/{unavailabilityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($unavailability_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unavailabilityId' . '}',
                ObjectSerializer::toPathValue($unavailability_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerEmployeeRosterShiftSave
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id unavailability_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftSave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerUnavailabilityModel
     */
    public function managerEmployeeRosterShiftSave($unavailability_id, $business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftSave'][0])
    {
        list($response) = $this->managerEmployeeRosterShiftSaveWithHttpInfo($unavailability_id, $business_id, $employee_id, $model, $contentType);
        return $response;
    }

    /**
     * Operation managerEmployeeRosterShiftSaveWithHttpInfo
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftSave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerUnavailabilityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerEmployeeRosterShiftSaveWithHttpInfo($unavailability_id, $business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftSave'][0])
    {
        $request = $this->managerEmployeeRosterShiftSaveRequest($unavailability_id, $business_id, $employee_id, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerUnavailabilityModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerUnavailabilityModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerUnavailabilityModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerUnavailabilityModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerUnavailabilityModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerEmployeeRosterShiftSaveAsync
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftSaveAsync($unavailability_id, $business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftSave'][0])
    {
        return $this->managerEmployeeRosterShiftSaveAsyncWithHttpInfo($unavailability_id, $business_id, $employee_id, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerEmployeeRosterShiftSaveAsyncWithHttpInfo
     *
     * Update Unavailability
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerEmployeeRosterShiftSaveAsyncWithHttpInfo($unavailability_id, $business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftSave'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerUnavailabilityModel';
        $request = $this->managerEmployeeRosterShiftSaveRequest($unavailability_id, $business_id, $employee_id, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerEmployeeRosterShiftSave'
     *
     * @param  int $unavailability_id (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  \OpenAPI\Client\Model\UnavailabilityEditModel $model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerEmployeeRosterShiftSave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerEmployeeRosterShiftSaveRequest($unavailability_id, $business_id, $employee_id, $model, string $contentType = self::contentTypes['managerEmployeeRosterShiftSave'][0])
    {

        // verify the required parameter 'unavailability_id' is set
        if ($unavailability_id === null || (is_array($unavailability_id) && count($unavailability_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unavailability_id when calling managerEmployeeRosterShiftSave'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerEmployeeRosterShiftSave'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerEmployeeRosterShiftSave'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling managerEmployeeRosterShiftSave'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/{employeeId}/rostershift/unavailability/{unavailabilityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($unavailability_id !== null) {
            $resourcePath = str_replace(
                '{' . 'unavailabilityId' . '}',
                ObjectSerializer::toPathValue($unavailability_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($model));
            } else {
                $httpBody = $model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerExpenseGet
     *
     * Get Business Expense Requests
     *
     * @param  string $business_id business_id (required)
     * @param  string $filter_status filter_status (optional)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  int $filter_employee_id filter_employee_id (optional)
     * @param  int $filter_location_id filter_location_id (optional)
     * @param  int $filter_expense_category_id filter_expense_category_id (optional)
     * @param  string $filter_group_by filter_group_by (optional)
     * @param  int $filter_current_page filter_current_page (optional)
     * @param  int $filter_page_size filter_page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel
     */
    public function managerExpenseGet($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_employee_id = null, $filter_location_id = null, $filter_expense_category_id = null, $filter_group_by = null, $filter_current_page = null, $filter_page_size = null, string $contentType = self::contentTypes['managerExpenseGet'][0])
    {
        list($response) = $this->managerExpenseGetWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_employee_id, $filter_location_id, $filter_expense_category_id, $filter_group_by, $filter_current_page, $filter_page_size, $contentType);
        return $response;
    }

    /**
     * Operation managerExpenseGetWithHttpInfo
     *
     * Get Business Expense Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_expense_category_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerExpenseGetWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_employee_id = null, $filter_location_id = null, $filter_expense_category_id = null, $filter_group_by = null, $filter_current_page = null, $filter_page_size = null, string $contentType = self::contentTypes['managerExpenseGet'][0])
    {
        $request = $this->managerExpenseGetRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_employee_id, $filter_location_id, $filter_expense_category_id, $filter_group_by, $filter_current_page, $filter_page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerExpenseGetAsync
     *
     * Get Business Expense Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_expense_category_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetAsync($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_employee_id = null, $filter_location_id = null, $filter_expense_category_id = null, $filter_group_by = null, $filter_current_page = null, $filter_page_size = null, string $contentType = self::contentTypes['managerExpenseGet'][0])
    {
        return $this->managerExpenseGetAsyncWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_employee_id, $filter_location_id, $filter_expense_category_id, $filter_group_by, $filter_current_page, $filter_page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerExpenseGetAsyncWithHttpInfo
     *
     * Get Business Expense Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_expense_category_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetAsyncWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_employee_id = null, $filter_location_id = null, $filter_expense_category_id = null, $filter_group_by = null, $filter_current_page = null, $filter_page_size = null, string $contentType = self::contentTypes['managerExpenseGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PagedResultModelOfManagerExpenseRequestModel';
        $request = $this->managerExpenseGetRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_employee_id, $filter_location_id, $filter_expense_category_id, $filter_group_by, $filter_current_page, $filter_page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerExpenseGet'
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_employee_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_expense_category_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  int $filter_current_page (optional)
     * @param  int $filter_page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerExpenseGetRequest($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_employee_id = null, $filter_location_id = null, $filter_expense_category_id = null, $filter_group_by = null, $filter_current_page = null, $filter_page_size = null, string $contentType = self::contentTypes['managerExpenseGet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerExpenseGet'
            );
        }











        $resourcePath = '/api/v2/business/{businessId}/manager/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_status,
            'filter.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_id,
            'filter.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_location_id,
            'filter.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_expense_category_id,
            'filter.expenseCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_group_by,
            'filter.groupBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_current_page,
            'filter.currentPage', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_page_size,
            'filter.pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerExpenseGetExpenseCategories
     *
     * List Expense Categories
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpenseCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExpenseCategoryResponseModel[]
     */
    public function managerExpenseGetExpenseCategories($business_id, string $contentType = self::contentTypes['managerExpenseGetExpenseCategories'][0])
    {
        list($response) = $this->managerExpenseGetExpenseCategoriesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerExpenseGetExpenseCategoriesWithHttpInfo
     *
     * List Expense Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpenseCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExpenseCategoryResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerExpenseGetExpenseCategoriesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetExpenseCategories'][0])
    {
        $request = $this->managerExpenseGetExpenseCategoriesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerExpenseGetExpenseCategoriesAsync
     *
     * List Expense Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetExpenseCategoriesAsync($business_id, string $contentType = self::contentTypes['managerExpenseGetExpenseCategories'][0])
    {
        return $this->managerExpenseGetExpenseCategoriesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerExpenseGetExpenseCategoriesAsyncWithHttpInfo
     *
     * List Expense Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetExpenseCategoriesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetExpenseCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExpenseCategoryResponseModel[]';
        $request = $this->managerExpenseGetExpenseCategoriesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerExpenseGetExpenseCategories'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpenseCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerExpenseGetExpenseCategoriesRequest($business_id, string $contentType = self::contentTypes['managerExpenseGetExpenseCategories'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerExpenseGetExpenseCategories'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/expense/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerExpenseGetExpensesEmployees
     *
     * List Expense Request Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpensesEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]
     */
    public function managerExpenseGetExpensesEmployees($business_id, string $contentType = self::contentTypes['managerExpenseGetExpensesEmployees'][0])
    {
        list($response) = $this->managerExpenseGetExpensesEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerExpenseGetExpensesEmployeesWithHttpInfo
     *
     * List Expense Request Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpensesEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerExpenseEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerExpenseGetExpensesEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetExpensesEmployees'][0])
    {
        $request = $this->managerExpenseGetExpensesEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerExpenseGetExpensesEmployeesAsync
     *
     * List Expense Request Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpensesEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetExpensesEmployeesAsync($business_id, string $contentType = self::contentTypes['managerExpenseGetExpensesEmployees'][0])
    {
        return $this->managerExpenseGetExpensesEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerExpenseGetExpensesEmployeesAsyncWithHttpInfo
     *
     * List Expense Request Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpensesEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetExpensesEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetExpensesEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerExpenseEmployeeModel[]';
        $request = $this->managerExpenseGetExpensesEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerExpenseGetExpensesEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetExpensesEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerExpenseGetExpensesEmployeesRequest($business_id, string $contentType = self::contentTypes['managerExpenseGetExpensesEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerExpenseGetExpensesEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/expense/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerExpenseGetLocations
     *
     * List Expense Request Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function managerExpenseGetLocations($business_id, string $contentType = self::contentTypes['managerExpenseGetLocations'][0])
    {
        list($response) = $this->managerExpenseGetLocationsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerExpenseGetLocationsWithHttpInfo
     *
     * List Expense Request Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerExpenseGetLocationsWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetLocations'][0])
    {
        $request = $this->managerExpenseGetLocationsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerExpenseGetLocationsAsync
     *
     * List Expense Request Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetLocationsAsync($business_id, string $contentType = self::contentTypes['managerExpenseGetLocations'][0])
    {
        return $this->managerExpenseGetLocationsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerExpenseGetLocationsAsyncWithHttpInfo
     *
     * List Expense Request Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetLocationsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->managerExpenseGetLocationsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerExpenseGetLocations'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerExpenseGetLocationsRequest($business_id, string $contentType = self::contentTypes['managerExpenseGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerExpenseGetLocations'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/expense/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerExpenseGetTaxCodes
     *
     * List Tax Codes
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetTaxCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExpenseTaxCode[]
     */
    public function managerExpenseGetTaxCodes($business_id, string $contentType = self::contentTypes['managerExpenseGetTaxCodes'][0])
    {
        list($response) = $this->managerExpenseGetTaxCodesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerExpenseGetTaxCodesWithHttpInfo
     *
     * List Tax Codes
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetTaxCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExpenseTaxCode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerExpenseGetTaxCodesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetTaxCodes'][0])
    {
        $request = $this->managerExpenseGetTaxCodesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExpenseTaxCode[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExpenseTaxCode[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExpenseTaxCode[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExpenseTaxCode[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExpenseTaxCode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerExpenseGetTaxCodesAsync
     *
     * List Tax Codes
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetTaxCodesAsync($business_id, string $contentType = self::contentTypes['managerExpenseGetTaxCodes'][0])
    {
        return $this->managerExpenseGetTaxCodesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerExpenseGetTaxCodesAsyncWithHttpInfo
     *
     * List Tax Codes
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerExpenseGetTaxCodesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerExpenseGetTaxCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExpenseTaxCode[]';
        $request = $this->managerExpenseGetTaxCodesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerExpenseGetTaxCodes'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerExpenseGetTaxCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerExpenseGetTaxCodesRequest($business_id, string $contentType = self::contentTypes['managerExpenseGetTaxCodes'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerExpenseGetTaxCodes'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/expense/taxcodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerGetDashboard
     *
     * Get Dashboard
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetDashboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerDashboardModel
     */
    public function managerGetDashboard($business_id, string $contentType = self::contentTypes['managerGetDashboard'][0])
    {
        list($response) = $this->managerGetDashboardWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerGetDashboardWithHttpInfo
     *
     * Get Dashboard
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetDashboard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerDashboardModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerGetDashboardWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetDashboard'][0])
    {
        $request = $this->managerGetDashboardRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerDashboardModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerDashboardModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerDashboardModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerDashboardModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerDashboardModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerGetDashboardAsync
     *
     * Get Dashboard
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetDashboardAsync($business_id, string $contentType = self::contentTypes['managerGetDashboard'][0])
    {
        return $this->managerGetDashboardAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerGetDashboardAsyncWithHttpInfo
     *
     * Get Dashboard
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetDashboardAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetDashboard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerDashboardModel';
        $request = $this->managerGetDashboardRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerGetDashboard'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerGetDashboardRequest($business_id, string $contentType = self::contentTypes['managerGetDashboard'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerGetDashboard'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/dashboard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerGetEmployees
     *
     * Get List of Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EmployeeDetailsModel[]
     */
    public function managerGetEmployees($business_id, string $contentType = self::contentTypes['managerGetEmployees'][0])
    {
        list($response) = $this->managerGetEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerGetEmployeesWithHttpInfo
     *
     * Get List of Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EmployeeDetailsModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerGetEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetEmployees'][0])
    {
        $request = $this->managerGetEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EmployeeDetailsModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EmployeeDetailsModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EmployeeDetailsModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EmployeeDetailsModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EmployeeDetailsModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerGetEmployeesAsync
     *
     * Get List of Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetEmployeesAsync($business_id, string $contentType = self::contentTypes['managerGetEmployees'][0])
    {
        return $this->managerGetEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerGetEmployeesAsyncWithHttpInfo
     *
     * Get List of Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EmployeeDetailsModel[]';
        $request = $this->managerGetEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerGetEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerGetEmployeesRequest($business_id, string $contentType = self::contentTypes['managerGetEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerGetEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerGetLocations
     *
     * Get List of Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function managerGetLocations($business_id, string $contentType = self::contentTypes['managerGetLocations'][0])
    {
        list($response) = $this->managerGetLocationsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerGetLocationsWithHttpInfo
     *
     * Get List of Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerGetLocationsWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetLocations'][0])
    {
        $request = $this->managerGetLocationsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerGetLocationsAsync
     *
     * Get List of Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetLocationsAsync($business_id, string $contentType = self::contentTypes['managerGetLocations'][0])
    {
        return $this->managerGetLocationsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerGetLocationsAsyncWithHttpInfo
     *
     * Get List of Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerGetLocationsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->managerGetLocationsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerGetLocations'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerGetLocationsRequest($business_id, string $contentType = self::contentTypes['managerGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerGetLocations'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerKioskGet
     *
     * Get Kiosk by ID
     *
     * @param  int $id id (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel
     */
    public function managerKioskGet($id, $business_id, string $contentType = self::contentTypes['managerKioskGet'][0])
    {
        list($response) = $this->managerKioskGetWithHttpInfo($id, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerKioskGetWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerKioskGetWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['managerKioskGet'][0])
    {
        $request = $this->managerKioskGetRequest($id, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerKioskGetAsync
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskGetAsync($id, $business_id, string $contentType = self::contentTypes['managerKioskGet'][0])
    {
        return $this->managerKioskGetAsyncWithHttpInfo($id, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerKioskGetAsyncWithHttpInfo
     *
     * Get Kiosk by ID
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskGetAsyncWithHttpInfo($id, $business_id, string $contentType = self::contentTypes['managerKioskGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel';
        $request = $this->managerKioskGetRequest($id, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerKioskGet'
     *
     * @param  int $id (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerKioskGetRequest($id, $business_id, string $contentType = self::contentTypes['managerKioskGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managerKioskGet'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerKioskGet'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet
     *
     * Get Business Timesheets
     *
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimesheetLineModel[]
     */
    public function managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'][0])
    {
        list($response) = $this->managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetWithHttpInfo
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimesheetLineModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'][0])
    {
        $request = $this->managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimesheetLineModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimesheetLineModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimesheetLineModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimesheetLineModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimesheetLineModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetAsync
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetAsync($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'][0])
    {
        return $this->managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetAsyncWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetAsyncWithHttpInfo
     *
     * Get Business Timesheets
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetAsyncWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimesheetLineModel[]';
        $request = $this->managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheetRequest($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerKioskGetApiV2BusinessByBusinessIdManagerKioskTimesheet'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerKioskKiosks
     *
     * Get Kiosks
     *
     * @param  int $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskKiosks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]
     */
    public function managerKioskKiosks($business_id, string $contentType = self::contentTypes['managerKioskKiosks'][0])
    {
        list($response) = $this->managerKioskKiosksWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerKioskKiosksWithHttpInfo
     *
     * Get Kiosks
     *
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskKiosks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimeAndAttendanceKioskModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerKioskKiosksWithHttpInfo($business_id, string $contentType = self::contentTypes['managerKioskKiosks'][0])
    {
        $request = $this->managerKioskKiosksRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerKioskKiosksAsync
     *
     * Get Kiosks
     *
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskKiosks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskKiosksAsync($business_id, string $contentType = self::contentTypes['managerKioskKiosks'][0])
    {
        return $this->managerKioskKiosksAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerKioskKiosksAsyncWithHttpInfo
     *
     * Get Kiosks
     *
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskKiosks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerKioskKiosksAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerKioskKiosks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimeAndAttendanceKioskModel[]';
        $request = $this->managerKioskKiosksRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerKioskKiosks'
     *
     * @param  int $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerKioskKiosks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerKioskKiosksRequest($business_id, string $contentType = self::contentTypes['managerKioskKiosks'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerKioskKiosks'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/kiosk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLeaveRequestGetLeaveCategories
     *
     * List Leave Categories
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveCategoryModel[]
     */
    public function managerLeaveRequestGetLeaveCategories($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveCategories'][0])
    {
        list($response) = $this->managerLeaveRequestGetLeaveCategoriesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerLeaveRequestGetLeaveCategoriesWithHttpInfo
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveCategoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLeaveRequestGetLeaveCategoriesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveCategories'][0])
    {
        $request = $this->managerLeaveRequestGetLeaveCategoriesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLeaveRequestGetLeaveCategoriesAsync
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLeaveCategoriesAsync($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveCategories'][0])
    {
        return $this->managerLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo
     *
     * List Leave Categories
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLeaveCategoriesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveCategoryModel[]';
        $request = $this->managerLeaveRequestGetLeaveCategoriesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLeaveRequestGetLeaveCategories'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLeaveRequestGetLeaveCategoriesRequest($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveCategories'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLeaveRequestGetLeaveCategories'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/leaverequest/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLeaveRequestGetLeaveEmployees
     *
     * List Leave Employees
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]
     */
    public function managerLeaveRequestGetLeaveEmployees($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveEmployees'][0])
    {
        list($response) = $this->managerLeaveRequestGetLeaveEmployeesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerLeaveRequestGetLeaveEmployeesWithHttpInfo
     *
     * List Leave Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveEmployeeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLeaveRequestGetLeaveEmployeesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveEmployees'][0])
    {
        $request = $this->managerLeaveRequestGetLeaveEmployeesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLeaveRequestGetLeaveEmployeesAsync
     *
     * List Leave Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLeaveEmployeesAsync($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveEmployees'][0])
    {
        return $this->managerLeaveRequestGetLeaveEmployeesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLeaveRequestGetLeaveEmployeesAsyncWithHttpInfo
     *
     * List Leave Employees
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLeaveEmployeesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveEmployees'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveEmployeeModel[]';
        $request = $this->managerLeaveRequestGetLeaveEmployeesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLeaveRequestGetLeaveEmployees'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLeaveEmployees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLeaveRequestGetLeaveEmployeesRequest($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLeaveEmployees'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLeaveRequestGetLeaveEmployees'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/leaverequest/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLeaveRequestGetLocations
     *
     * List Leave Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function managerLeaveRequestGetLocations($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLocations'][0])
    {
        list($response) = $this->managerLeaveRequestGetLocationsWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerLeaveRequestGetLocationsWithHttpInfo
     *
     * List Leave Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLeaveRequestGetLocationsWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLocations'][0])
    {
        $request = $this->managerLeaveRequestGetLocationsRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLeaveRequestGetLocationsAsync
     *
     * List Leave Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLocationsAsync($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLocations'][0])
    {
        return $this->managerLeaveRequestGetLocationsAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLeaveRequestGetLocationsAsyncWithHttpInfo
     *
     * List Leave Locations
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestGetLocationsAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->managerLeaveRequestGetLocationsRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLeaveRequestGetLocations'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLeaveRequestGetLocationsRequest($business_id, string $contentType = self::contentTypes['managerLeaveRequestGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLeaveRequestGetLocations'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/leaverequest/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLeaveRequestListLeaveRequests
     *
     * List Leave Requests
     *
     * @param  string $business_id business_id (required)
     * @param  string $filter_status filter_status (optional)
     * @param  \DateTime $filter_from_date filter_from_date (optional)
     * @param  \DateTime $filter_to_date filter_to_date (optional)
     * @param  int $filter_leave_category_id filter_leave_category_id (optional)
     * @param  int $filter_location_id filter_location_id (optional)
     * @param  int $filter_employee_id filter_employee_id (optional)
     * @param  string $filter_group_by filter_group_by (optional)
     * @param  bool $filter_restrict_overlapping_leave filter_restrict_overlapping_leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestListLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel[]
     */
    public function managerLeaveRequestListLeaveRequests($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null, string $contentType = self::contentTypes['managerLeaveRequestListLeaveRequests'][0])
    {
        list($response) = $this->managerLeaveRequestListLeaveRequestsWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave, $contentType);
        return $response;
    }

    /**
     * Operation managerLeaveRequestListLeaveRequestsWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_leave_category_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  bool $filter_restrict_overlapping_leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestListLeaveRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLeaveRequestListLeaveRequestsWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null, string $contentType = self::contentTypes['managerLeaveRequestListLeaveRequests'][0])
    {
        $request = $this->managerLeaveRequestListLeaveRequestsRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLeaveRequestListLeaveRequestsAsync
     *
     * List Leave Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_leave_category_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  bool $filter_restrict_overlapping_leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestListLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestListLeaveRequestsAsync($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null, string $contentType = self::contentTypes['managerLeaveRequestListLeaveRequests'][0])
    {
        return $this->managerLeaveRequestListLeaveRequestsAsyncWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLeaveRequestListLeaveRequestsAsyncWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_leave_category_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  bool $filter_restrict_overlapping_leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestListLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestListLeaveRequestsAsyncWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null, string $contentType = self::contentTypes['managerLeaveRequestListLeaveRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
        $request = $this->managerLeaveRequestListLeaveRequestsRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLeaveRequestListLeaveRequests'
     *
     * @param  string $business_id (required)
     * @param  string $filter_status (optional)
     * @param  \DateTime $filter_from_date (optional)
     * @param  \DateTime $filter_to_date (optional)
     * @param  int $filter_leave_category_id (optional)
     * @param  int $filter_location_id (optional)
     * @param  int $filter_employee_id (optional)
     * @param  string $filter_group_by (optional)
     * @param  bool $filter_restrict_overlapping_leave (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestListLeaveRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLeaveRequestListLeaveRequestsRequest($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null, string $contentType = self::contentTypes['managerLeaveRequestListLeaveRequests'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLeaveRequestListLeaveRequests'
            );
        }










        $resourcePath = '/api/v2/business/{businessId}/manager/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_status,
            'filter.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_from_date,
            'filter.fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_to_date,
            'filter.toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_leave_category_id,
            'filter.leaveCategoryId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_location_id,
            'filter.locationId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_employee_id,
            'filter.employeeId', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_group_by,
            'filter.groupBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_restrict_overlapping_leave,
            'filter.restrictOverlappingLeave', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLeaveRequestOverlappingLeave
     *
     * Overlapping Leave Requests
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ManagerLeaveRequestModel[]
     */
    public function managerLeaveRequestOverlappingLeave($from_date, $to_date, $business_id, string $contentType = self::contentTypes['managerLeaveRequestOverlappingLeave'][0])
    {
        list($response) = $this->managerLeaveRequestOverlappingLeaveWithHttpInfo($from_date, $to_date, $business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerLeaveRequestOverlappingLeaveWithHttpInfo
     *
     * Overlapping Leave Requests
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ManagerLeaveRequestModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLeaveRequestOverlappingLeaveWithHttpInfo($from_date, $to_date, $business_id, string $contentType = self::contentTypes['managerLeaveRequestOverlappingLeave'][0])
    {
        $request = $this->managerLeaveRequestOverlappingLeaveRequest($from_date, $to_date, $business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ManagerLeaveRequestModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLeaveRequestOverlappingLeaveAsync
     *
     * Overlapping Leave Requests
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestOverlappingLeaveAsync($from_date, $to_date, $business_id, string $contentType = self::contentTypes['managerLeaveRequestOverlappingLeave'][0])
    {
        return $this->managerLeaveRequestOverlappingLeaveAsyncWithHttpInfo($from_date, $to_date, $business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLeaveRequestOverlappingLeaveAsyncWithHttpInfo
     *
     * Overlapping Leave Requests
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLeaveRequestOverlappingLeaveAsyncWithHttpInfo($from_date, $to_date, $business_id, string $contentType = self::contentTypes['managerLeaveRequestOverlappingLeave'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ManagerLeaveRequestModel[]';
        $request = $this->managerLeaveRequestOverlappingLeaveRequest($from_date, $to_date, $business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLeaveRequestOverlappingLeave'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLeaveRequestOverlappingLeave'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLeaveRequestOverlappingLeaveRequest($from_date, $to_date, $business_id, string $contentType = self::contentTypes['managerLeaveRequestOverlappingLeave'][0])
    {

        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling managerLeaveRequestOverlappingLeave'
            );
        }

        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling managerLeaveRequestOverlappingLeave'
            );
        }

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLeaveRequestOverlappingLeave'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/leaverequest/overlapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'fromDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_date,
            'toDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation
     *
     * List Employee Locations
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation($business_id, $employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'][0])
    {
        list($response) = $this->managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationWithHttpInfo($business_id, $employee_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationWithHttpInfo
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationWithHttpInfo($business_id, $employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'][0])
    {
        $request = $this->managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationRequest($business_id, $employee_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationAsync
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationAsync($business_id, $employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'][0])
    {
        return $this->managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationAsyncWithHttpInfo($business_id, $employee_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationAsyncWithHttpInfo
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationAsyncWithHttpInfo($business_id, $employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationRequest($business_id, $employee_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocationRequest($business_id, $employee_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling managerLocationGetApiV2BusinessByBusinessIdManagerEmployeeByEmployeeIdLocation'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/manager/employee/{employeeId}/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerLocationGetLocations
     *
     * List Employee Locations
     *
     * @param  string $business_id business_id (required)
     * @param  mixed $query query (optional)
     * @param  string $filter filter (optional)
     * @param  string $orderby orderby (optional)
     * @param  int $top top (optional)
     * @param  int $skip skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LocationModel[]
     */
    public function managerLocationGetLocations($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetLocations'][0])
    {
        list($response) = $this->managerLocationGetLocationsWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation managerLocationGetLocationsWithHttpInfo
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetLocations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LocationModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function managerLocationGetLocationsWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetLocations'][0])
    {
        $request = $this->managerLocationGetLocationsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LocationModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LocationModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LocationModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LocationModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LocationModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerLocationGetLocationsAsync
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLocationGetLocationsAsync($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetLocations'][0])
    {
        return $this->managerLocationGetLocationsAsyncWithHttpInfo($business_id, $query, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerLocationGetLocationsAsyncWithHttpInfo
     *
     * List Employee Locations
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerLocationGetLocationsAsyncWithHttpInfo($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetLocations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LocationModel[]';
        $request = $this->managerLocationGetLocationsRequest($business_id, $query, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerLocationGetLocations'
     *
     * @param  string $business_id (required)
     * @param  mixed $query (optional)
     * @param  string $filter (optional)
     * @param  string $orderby (optional)
     * @param  int $top (optional)
     * @param  int $skip (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerLocationGetLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerLocationGetLocationsRequest($business_id, $query = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['managerLocationGetLocations'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerLocationGetLocations'
            );
        }







        $resourcePath = '/api/v2/business/{businessId}/manager/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($query !== null) {
            $headerParams['query'] = ObjectSerializer::toHeaderValue($query);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerRoundingRulesGetRoundingRules
     *
     * Get Rounding Rules
     *
     * @param  string $business_id business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesGetRoundingRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TimesheetRoundingRulesModel
     */
    public function managerRoundingRulesGetRoundingRules($business_id, string $contentType = self::contentTypes['managerRoundingRulesGetRoundingRules'][0])
    {
        list($response) = $this->managerRoundingRulesGetRoundingRulesWithHttpInfo($business_id, $contentType);
        return $response;
    }

    /**
     * Operation managerRoundingRulesGetRoundingRulesWithHttpInfo
     *
     * Get Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesGetRoundingRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TimesheetRoundingRulesModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerRoundingRulesGetRoundingRulesWithHttpInfo($business_id, string $contentType = self::contentTypes['managerRoundingRulesGetRoundingRules'][0])
    {
        $request = $this->managerRoundingRulesGetRoundingRulesRequest($business_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TimesheetRoundingRulesModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TimesheetRoundingRulesModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TimesheetRoundingRulesModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TimesheetRoundingRulesModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TimesheetRoundingRulesModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managerRoundingRulesGetRoundingRulesAsync
     *
     * Get Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesGetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerRoundingRulesGetRoundingRulesAsync($business_id, string $contentType = self::contentTypes['managerRoundingRulesGetRoundingRules'][0])
    {
        return $this->managerRoundingRulesGetRoundingRulesAsyncWithHttpInfo($business_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerRoundingRulesGetRoundingRulesAsyncWithHttpInfo
     *
     * Get Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesGetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerRoundingRulesGetRoundingRulesAsyncWithHttpInfo($business_id, string $contentType = self::contentTypes['managerRoundingRulesGetRoundingRules'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TimesheetRoundingRulesModel';
        $request = $this->managerRoundingRulesGetRoundingRulesRequest($business_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerRoundingRulesGetRoundingRules'
     *
     * @param  string $business_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesGetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerRoundingRulesGetRoundingRulesRequest($business_id, string $contentType = self::contentTypes['managerRoundingRulesGetRoundingRules'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerRoundingRulesGetRoundingRules'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/roundingrules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managerRoundingRulesSetRoundingRules
     *
     * Set Rounding Rules
     *
     * @param  string $business_id business_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetRoundingRulesModel $rounding_rules rounding_rules (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesSetRoundingRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managerRoundingRulesSetRoundingRules($business_id, $rounding_rules, string $contentType = self::contentTypes['managerRoundingRulesSetRoundingRules'][0])
    {
        $this->managerRoundingRulesSetRoundingRulesWithHttpInfo($business_id, $rounding_rules, $contentType);
    }

    /**
     * Operation managerRoundingRulesSetRoundingRulesWithHttpInfo
     *
     * Set Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetRoundingRulesModel $rounding_rules (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesSetRoundingRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managerRoundingRulesSetRoundingRulesWithHttpInfo($business_id, $rounding_rules, string $contentType = self::contentTypes['managerRoundingRulesSetRoundingRules'][0])
    {
        $request = $this->managerRoundingRulesSetRoundingRulesRequest($business_id, $rounding_rules, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation managerRoundingRulesSetRoundingRulesAsync
     *
     * Set Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetRoundingRulesModel $rounding_rules (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesSetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerRoundingRulesSetRoundingRulesAsync($business_id, $rounding_rules, string $contentType = self::contentTypes['managerRoundingRulesSetRoundingRules'][0])
    {
        return $this->managerRoundingRulesSetRoundingRulesAsyncWithHttpInfo($business_id, $rounding_rules, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managerRoundingRulesSetRoundingRulesAsyncWithHttpInfo
     *
     * Set Rounding Rules
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetRoundingRulesModel $rounding_rules (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesSetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managerRoundingRulesSetRoundingRulesAsyncWithHttpInfo($business_id, $rounding_rules, string $contentType = self::contentTypes['managerRoundingRulesSetRoundingRules'][0])
    {
        $returnType = '';
        $request = $this->managerRoundingRulesSetRoundingRulesRequest($business_id, $rounding_rules, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managerRoundingRulesSetRoundingRules'
     *
     * @param  string $business_id (required)
     * @param  \OpenAPI\Client\Model\TimesheetRoundingRulesModel $rounding_rules (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managerRoundingRulesSetRoundingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managerRoundingRulesSetRoundingRulesRequest($business_id, $rounding_rules, string $contentType = self::contentTypes['managerRoundingRulesSetRoundingRules'][0])
    {

        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling managerRoundingRulesSetRoundingRules'
            );
        }

        // verify the required parameter 'rounding_rules' is set
        if ($rounding_rules === null || (is_array($rounding_rules) && count($rounding_rules) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rounding_rules when calling managerRoundingRulesSetRoundingRules'
            );
        }


        $resourcePath = '/api/v2/business/{businessId}/manager/roundingrules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rounding_rules)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rounding_rules));
            } else {
                $httpBody = $rounding_rules;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
