<?php
/**
 * BasicKioskEmployeeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * BasicKioskEmployeeModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BasicKioskEmployeeModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BasicKioskEmployeeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'name' => 'string',
        'has_email' => 'bool',
        'profile_image_url' => 'string',
        'mobile_number' => 'string',
        'status' => 'string',
        'long_shift' => 'bool',
        'clock_on_time_utc' => '\DateTime',
        'break_start_time_utc' => '\DateTime',
        'recorded_time_utc' => '\DateTime',
        'current_shift_id' => 'int',
        'employee_group_ids' => 'int[]',
        'employee_start_date' => '\DateTime',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'name' => null,
        'has_email' => null,
        'profile_image_url' => null,
        'mobile_number' => null,
        'status' => null,
        'long_shift' => null,
        'clock_on_time_utc' => 'date-time',
        'break_start_time_utc' => 'date-time',
        'recorded_time_utc' => 'date-time',
        'current_shift_id' => 'int32',
        'employee_group_ids' => 'int32',
        'employee_start_date' => 'date-time',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'name' => 'name',
        'has_email' => 'hasEmail',
        'profile_image_url' => 'profileImageUrl',
        'mobile_number' => 'mobileNumber',
        'status' => 'status',
        'long_shift' => 'longShift',
        'clock_on_time_utc' => 'clockOnTimeUtc',
        'break_start_time_utc' => 'breakStartTimeUtc',
        'recorded_time_utc' => 'recordedTimeUtc',
        'current_shift_id' => 'currentShiftId',
        'employee_group_ids' => 'employeeGroupIds',
        'employee_start_date' => 'employeeStartDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'name' => 'setName',
        'has_email' => 'setHasEmail',
        'profile_image_url' => 'setProfileImageUrl',
        'mobile_number' => 'setMobileNumber',
        'status' => 'setStatus',
        'long_shift' => 'setLongShift',
        'clock_on_time_utc' => 'setClockOnTimeUtc',
        'break_start_time_utc' => 'setBreakStartTimeUtc',
        'recorded_time_utc' => 'setRecordedTimeUtc',
        'current_shift_id' => 'setCurrentShiftId',
        'employee_group_ids' => 'setEmployeeGroupIds',
        'employee_start_date' => 'setEmployeeStartDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'name' => 'getName',
        'has_email' => 'getHasEmail',
        'profile_image_url' => 'getProfileImageUrl',
        'mobile_number' => 'getMobileNumber',
        'status' => 'getStatus',
        'long_shift' => 'getLongShift',
        'clock_on_time_utc' => 'getClockOnTimeUtc',
        'break_start_time_utc' => 'getBreakStartTimeUtc',
        'recorded_time_utc' => 'getRecordedTimeUtc',
        'current_shift_id' => 'getCurrentShiftId',
        'employee_group_ids' => 'getEmployeeGroupIds',
        'employee_start_date' => 'getEmployeeStartDate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const STATUS_NOT_CLOCKED_ON = 'NotClockedOn';
    public const STATUS_CLOCKED_ON = 'ClockedOn';
    public const STATUS_ON_BREAK = 'OnBreak';
    public const STATUS_CLOCKED_OFF = 'ClockedOff';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_CLOCKED_ON,
            self::STATUS_CLOCKED_ON,
            self::STATUS_ON_BREAK,
            self::STATUS_CLOCKED_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['has_email'] = isset($data['has_email']) ? $data['has_email'] : null;
        $this->container['profile_image_url'] = isset($data['profile_image_url']) ? $data['profile_image_url'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['long_shift'] = isset($data['long_shift']) ? $data['long_shift'] : null;
        $this->container['clock_on_time_utc'] = isset($data['clock_on_time_utc']) ? $data['clock_on_time_utc'] : null;
        $this->container['break_start_time_utc'] = isset($data['break_start_time_utc']) ? $data['break_start_time_utc'] : null;
        $this->container['recorded_time_utc'] = isset($data['recorded_time_utc']) ? $data['recorded_time_utc'] : null;
        $this->container['current_shift_id'] = isset($data['current_shift_id']) ? $data['current_shift_id'] : null;
        $this->container['employee_group_ids'] = isset($data['employee_group_ids']) ? $data['employee_group_ids'] : null;
        $this->container['employee_start_date'] = isset($data['employee_start_date']) ? $data['employee_start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($this->container['status']) && ! in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets has_email
     *
     * @return bool
     */
    public function getHasEmail()
    {
        return $this->container['has_email'];
    }

    /**
     * Sets has_email
     *
     * @param bool $has_email
     *
     * @return $this
     */
    public function setHasEmail($has_email)
    {
        $this->container['has_email'] = $has_email;

        return $this;
    }

    /**
     * Gets profile_image_url
     *
     * @return string
     */
    public function getProfileImageUrl()
    {
        return $this->container['profile_image_url'];
    }

    /**
     * Sets profile_image_url
     *
     * @param string $profile_image_url
     *
     * @return $this
     */
    public function setProfileImageUrl($profile_image_url)
    {
        $this->container['profile_image_url'] = $profile_image_url;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (! is_null($status) && ! in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets long_shift
     *
     * @return bool
     */
    public function getLongShift()
    {
        return $this->container['long_shift'];
    }

    /**
     * Sets long_shift
     *
     * @param bool $long_shift
     *
     * @return $this
     */
    public function setLongShift($long_shift)
    {
        $this->container['long_shift'] = $long_shift;

        return $this;
    }

    /**
     * Gets clock_on_time_utc
     *
     * @return \DateTime
     */
    public function getClockOnTimeUtc()
    {
        return $this->container['clock_on_time_utc'];
    }

    /**
     * Sets clock_on_time_utc
     *
     * @param \DateTime $clock_on_time_utc
     *
     * @return $this
     */
    public function setClockOnTimeUtc($clock_on_time_utc)
    {
        $this->container['clock_on_time_utc'] = $clock_on_time_utc;

        return $this;
    }

    /**
     * Gets break_start_time_utc
     *
     * @return \DateTime
     */
    public function getBreakStartTimeUtc()
    {
        return $this->container['break_start_time_utc'];
    }

    /**
     * Sets break_start_time_utc
     *
     * @param \DateTime $break_start_time_utc
     *
     * @return $this
     */
    public function setBreakStartTimeUtc($break_start_time_utc)
    {
        $this->container['break_start_time_utc'] = $break_start_time_utc;

        return $this;
    }

    /**
     * Gets recorded_time_utc
     *
     * @return \DateTime
     */
    public function getRecordedTimeUtc()
    {
        return $this->container['recorded_time_utc'];
    }

    /**
     * Sets recorded_time_utc
     *
     * @param \DateTime $recorded_time_utc
     *
     * @return $this
     */
    public function setRecordedTimeUtc($recorded_time_utc)
    {
        $this->container['recorded_time_utc'] = $recorded_time_utc;

        return $this;
    }

    /**
     * Gets current_shift_id
     *
     * @return int
     */
    public function getCurrentShiftId()
    {
        return $this->container['current_shift_id'];
    }

    /**
     * Sets current_shift_id
     *
     * @param int $current_shift_id
     *
     * @return $this
     */
    public function setCurrentShiftId($current_shift_id)
    {
        $this->container['current_shift_id'] = $current_shift_id;

        return $this;
    }

    /**
     * Gets employee_group_ids
     *
     * @return int[]
     */
    public function getEmployeeGroupIds()
    {
        return $this->container['employee_group_ids'];
    }

    /**
     * Sets employee_group_ids
     *
     * @param int[] $employee_group_ids
     *
     * @return $this
     */
    public function setEmployeeGroupIds($employee_group_ids)
    {
        $this->container['employee_group_ids'] = $employee_group_ids;

        return $this;
    }

    /**
     * Gets employee_start_date
     *
     * @return \DateTime
     */
    public function getEmployeeStartDate()
    {
        return $this->container['employee_start_date'];
    }

    /**
     * Sets employee_start_date
     *
     * @param \DateTime $employee_start_date
     *
     * @return $this
     */
    public function setEmployeeStartDate($employee_start_date)
    {
        $this->container['employee_start_date'] = $employee_start_date;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
