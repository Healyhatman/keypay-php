<?php
/**
 * AuPayRunInclusionExportModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuPayRunInclusionExportModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuPayRunInclusionExportModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuPayRunInclusionExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super_contribution_type' => 'string',
        'super_rate' => 'string',
        'tax_code' => 'string',
        'tax_rate' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'primary_location' => 'string',
        'location' => 'string',
        'deduction_category' => 'string',
        'expense_category' => 'string',
        'employer_liability_category' => 'string',
        'pay_category' => 'string',
        'tax_adjustment_type' => 'string',
        'start_date' => 'string',
        'expiry' => 'string',
        'amount' => 'double',
        'amount_type' => 'string',
        'paid' => 'string',
        'preserved_earnings' => 'string',
        'units' => 'double',
        'rate' => 'string',
        'total' => 'string',
        'notes' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super_contribution_type' => null,
        'super_rate' => null,
        'tax_code' => null,
        'tax_rate' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'primary_location' => null,
        'location' => null,
        'deduction_category' => null,
        'expense_category' => null,
        'employer_liability_category' => null,
        'pay_category' => null,
        'tax_adjustment_type' => null,
        'start_date' => null,
        'expiry' => null,
        'amount' => 'double',
        'amount_type' => null,
        'paid' => null,
        'preserved_earnings' => null,
        'units' => 'double',
        'rate' => null,
        'total' => null,
        'notes' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super_contribution_type' => 'superContributionType',
        'super_rate' => 'superRate',
        'tax_code' => 'taxCode',
        'tax_rate' => 'taxRate',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'primary_location' => 'primaryLocation',
        'location' => 'location',
        'deduction_category' => 'deductionCategory',
        'expense_category' => 'expenseCategory',
        'employer_liability_category' => 'employerLiabilityCategory',
        'pay_category' => 'payCategory',
        'tax_adjustment_type' => 'taxAdjustmentType',
        'start_date' => 'startDate',
        'expiry' => 'expiry',
        'amount' => 'amount',
        'amount_type' => 'amountType',
        'paid' => 'paid',
        'preserved_earnings' => 'preservedEarnings',
        'units' => 'units',
        'rate' => 'rate',
        'total' => 'total',
        'notes' => 'notes',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super_contribution_type' => 'setSuperContributionType',
        'super_rate' => 'setSuperRate',
        'tax_code' => 'setTaxCode',
        'tax_rate' => 'setTaxRate',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'primary_location' => 'setPrimaryLocation',
        'location' => 'setLocation',
        'deduction_category' => 'setDeductionCategory',
        'expense_category' => 'setExpenseCategory',
        'employer_liability_category' => 'setEmployerLiabilityCategory',
        'pay_category' => 'setPayCategory',
        'tax_adjustment_type' => 'setTaxAdjustmentType',
        'start_date' => 'setStartDate',
        'expiry' => 'setExpiry',
        'amount' => 'setAmount',
        'amount_type' => 'setAmountType',
        'paid' => 'setPaid',
        'preserved_earnings' => 'setPreservedEarnings',
        'units' => 'setUnits',
        'rate' => 'setRate',
        'total' => 'setTotal',
        'notes' => 'setNotes',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super_contribution_type' => 'getSuperContributionType',
        'super_rate' => 'getSuperRate',
        'tax_code' => 'getTaxCode',
        'tax_rate' => 'getTaxRate',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'primary_location' => 'getPrimaryLocation',
        'location' => 'getLocation',
        'deduction_category' => 'getDeductionCategory',
        'expense_category' => 'getExpenseCategory',
        'employer_liability_category' => 'getEmployerLiabilityCategory',
        'pay_category' => 'getPayCategory',
        'tax_adjustment_type' => 'getTaxAdjustmentType',
        'start_date' => 'getStartDate',
        'expiry' => 'getExpiry',
        'amount' => 'getAmount',
        'amount_type' => 'getAmountType',
        'paid' => 'getPaid',
        'preserved_earnings' => 'getPreservedEarnings',
        'units' => 'getUnits',
        'rate' => 'getRate',
        'total' => 'getTotal',
        'notes' => 'getNotes',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super_contribution_type'] = isset($data['super_contribution_type']) ? $data['super_contribution_type'] : null;
        $this->container['super_rate'] = isset($data['super_rate']) ? $data['super_rate'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['primary_location'] = isset($data['primary_location']) ? $data['primary_location'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['deduction_category'] = isset($data['deduction_category']) ? $data['deduction_category'] : null;
        $this->container['expense_category'] = isset($data['expense_category']) ? $data['expense_category'] : null;
        $this->container['employer_liability_category'] = isset($data['employer_liability_category']) ? $data['employer_liability_category'] : null;
        $this->container['pay_category'] = isset($data['pay_category']) ? $data['pay_category'] : null;
        $this->container['tax_adjustment_type'] = isset($data['tax_adjustment_type']) ? $data['tax_adjustment_type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_type'] = isset($data['amount_type']) ? $data['amount_type'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['preserved_earnings'] = isset($data['preserved_earnings']) ? $data['preserved_earnings'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets super_contribution_type
     *
     * @return string
     */
    public function getSuperContributionType()
    {
        return $this->container['super_contribution_type'];
    }

    /**
     * Sets super_contribution_type
     *
     * @param string $super_contribution_type
     *
     * @return $this
     */
    public function setSuperContributionType($super_contribution_type)
    {
        $this->container['super_contribution_type'] = $super_contribution_type;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return string
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param string $super_rate
     *
     * @return $this
     */
    public function setSuperRate($super_rate)
    {
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string $tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets primary_location
     *
     * @return string
     */
    public function getPrimaryLocation()
    {
        return $this->container['primary_location'];
    }

    /**
     * Sets primary_location
     *
     * @param string $primary_location
     *
     * @return $this
     */
    public function setPrimaryLocation($primary_location)
    {
        $this->container['primary_location'] = $primary_location;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets deduction_category
     *
     * @return string
     */
    public function getDeductionCategory()
    {
        return $this->container['deduction_category'];
    }

    /**
     * Sets deduction_category
     *
     * @param string $deduction_category
     *
     * @return $this
     */
    public function setDeductionCategory($deduction_category)
    {
        $this->container['deduction_category'] = $deduction_category;

        return $this;
    }

    /**
     * Gets expense_category
     *
     * @return string
     */
    public function getExpenseCategory()
    {
        return $this->container['expense_category'];
    }

    /**
     * Sets expense_category
     *
     * @param string $expense_category
     *
     * @return $this
     */
    public function setExpenseCategory($expense_category)
    {
        $this->container['expense_category'] = $expense_category;

        return $this;
    }

    /**
     * Gets employer_liability_category
     *
     * @return string
     */
    public function getEmployerLiabilityCategory()
    {
        return $this->container['employer_liability_category'];
    }

    /**
     * Sets employer_liability_category
     *
     * @param string $employer_liability_category
     *
     * @return $this
     */
    public function setEmployerLiabilityCategory($employer_liability_category)
    {
        $this->container['employer_liability_category'] = $employer_liability_category;

        return $this;
    }

    /**
     * Gets pay_category
     *
     * @return string
     */
    public function getPayCategory()
    {
        return $this->container['pay_category'];
    }

    /**
     * Sets pay_category
     *
     * @param string $pay_category
     *
     * @return $this
     */
    public function setPayCategory($pay_category)
    {
        $this->container['pay_category'] = $pay_category;

        return $this;
    }

    /**
     * Gets tax_adjustment_type
     *
     * @return string
     */
    public function getTaxAdjustmentType()
    {
        return $this->container['tax_adjustment_type'];
    }

    /**
     * Sets tax_adjustment_type
     *
     * @param string $tax_adjustment_type
     *
     * @return $this
     */
    public function setTaxAdjustmentType($tax_adjustment_type)
    {
        $this->container['tax_adjustment_type'] = $tax_adjustment_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_type
     *
     * @return string
     */
    public function getAmountType()
    {
        return $this->container['amount_type'];
    }

    /**
     * Sets amount_type
     *
     * @param string $amount_type
     *
     * @return $this
     */
    public function setAmountType($amount_type)
    {
        $this->container['amount_type'] = $amount_type;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return string
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param string $paid
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets preserved_earnings
     *
     * @return string
     */
    public function getPreservedEarnings()
    {
        return $this->container['preserved_earnings'];
    }

    /**
     * Sets preserved_earnings
     *
     * @param string $preserved_earnings
     *
     * @return $this
     */
    public function setPreservedEarnings($preserved_earnings)
    {
        $this->container['preserved_earnings'] = $preserved_earnings;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float $units
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string $rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
