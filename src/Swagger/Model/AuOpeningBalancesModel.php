<?php
/**
 * AuOpeningBalancesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuOpeningBalancesModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuOpeningBalancesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuOpeningBalancesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deductions' => '\Swagger\Client\Model\AuInitialDeductionModel[]',
        'payg_withholding_amount' => 'double',
        'method_b2_payg_withholding_amount' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'earnings_lines' => '\Swagger\Client\Model\AuInitialEarningsModel[]',
        'primary_etp_type' => '\Swagger\Client\Model\OpeningBalancesEtpModel',
        'secondary_etp_type' => '\Swagger\Client\Model\OpeningBalancesEtpModel',
        'employee_id' => 'int',
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'leave_balances' => '\Swagger\Client\Model\InitialLeaveBalanceModel[]',
        'employer_liabilities' => '\Swagger\Client\Model\InitialEmployerLiabilityModel[]',
        'financial_year_starting_year' => 'int',
        'location_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deductions' => null,
        'payg_withholding_amount' => 'double',
        'method_b2_payg_withholding_amount' => 'double',
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'employer_contribution' => 'double',
        'earnings_lines' => null,
        'primary_etp_type' => null,
        'secondary_etp_type' => null,
        'employee_id' => 'int32',
        'total_hours' => 'double',
        'gross_earnings' => 'double',
        'leave_balances' => null,
        'employer_liabilities' => null,
        'financial_year_starting_year' => 'int32',
        'location_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deductions' => 'deductions',
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'methodB2PaygWithholdingAmount',
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'employer_contribution' => 'employerContribution',
        'earnings_lines' => 'earningsLines',
        'primary_etp_type' => 'primaryEtpType',
        'secondary_etp_type' => 'secondaryEtpType',
        'employee_id' => 'employeeId',
        'total_hours' => 'totalHours',
        'gross_earnings' => 'grossEarnings',
        'leave_balances' => 'leaveBalances',
        'employer_liabilities' => 'employerLiabilities',
        'financial_year_starting_year' => 'financialYearStartingYear',
        'location_name' => 'locationName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deductions' => 'setDeductions',
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'setMethodB2PaygWithholdingAmount',
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'employer_contribution' => 'setEmployerContribution',
        'earnings_lines' => 'setEarningsLines',
        'primary_etp_type' => 'setPrimaryEtpType',
        'secondary_etp_type' => 'setSecondaryEtpType',
        'employee_id' => 'setEmployeeId',
        'total_hours' => 'setTotalHours',
        'gross_earnings' => 'setGrossEarnings',
        'leave_balances' => 'setLeaveBalances',
        'employer_liabilities' => 'setEmployerLiabilities',
        'financial_year_starting_year' => 'setFinancialYearStartingYear',
        'location_name' => 'setLocationName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deductions' => 'getDeductions',
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'method_b2_payg_withholding_amount' => 'getMethodB2PaygWithholdingAmount',
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'employer_contribution' => 'getEmployerContribution',
        'earnings_lines' => 'getEarningsLines',
        'primary_etp_type' => 'getPrimaryEtpType',
        'secondary_etp_type' => 'getSecondaryEtpType',
        'employee_id' => 'getEmployeeId',
        'total_hours' => 'getTotalHours',
        'gross_earnings' => 'getGrossEarnings',
        'leave_balances' => 'getLeaveBalances',
        'employer_liabilities' => 'getEmployerLiabilities',
        'financial_year_starting_year' => 'getFinancialYearStartingYear',
        'location_name' => 'getLocationName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deductions'] = isset($data['deductions']) ? $data['deductions'] : null;
        $this->container['payg_withholding_amount'] = isset($data['payg_withholding_amount']) ? $data['payg_withholding_amount'] : null;
        $this->container['method_b2_payg_withholding_amount'] = isset($data['method_b2_payg_withholding_amount']) ? $data['method_b2_payg_withholding_amount'] : null;
        $this->container['sfss_amount'] = isset($data['sfss_amount']) ? $data['sfss_amount'] : null;
        $this->container['help_amount'] = isset($data['help_amount']) ? $data['help_amount'] : null;
        $this->container['super_contribution'] = isset($data['super_contribution']) ? $data['super_contribution'] : null;
        $this->container['employer_contribution'] = isset($data['employer_contribution']) ? $data['employer_contribution'] : null;
        $this->container['earnings_lines'] = isset($data['earnings_lines']) ? $data['earnings_lines'] : null;
        $this->container['primary_etp_type'] = isset($data['primary_etp_type']) ? $data['primary_etp_type'] : null;
        $this->container['secondary_etp_type'] = isset($data['secondary_etp_type']) ? $data['secondary_etp_type'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['total_hours'] = isset($data['total_hours']) ? $data['total_hours'] : null;
        $this->container['gross_earnings'] = isset($data['gross_earnings']) ? $data['gross_earnings'] : null;
        $this->container['leave_balances'] = isset($data['leave_balances']) ? $data['leave_balances'] : null;
        $this->container['employer_liabilities'] = isset($data['employer_liabilities']) ? $data['employer_liabilities'] : null;
        $this->container['financial_year_starting_year'] = isset($data['financial_year_starting_year']) ? $data['financial_year_starting_year'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deductions
     *
     * @return \Swagger\Client\Model\AuInitialDeductionModel[]
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param \Swagger\Client\Model\AuInitialDeductionModel[] $deductions 
     *
     * @return $this
     */
    public function setDeductions($deductions)
    {
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets payg_withholding_amount
     *
     * @return double
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param double $payg_withholding_amount 
     *
     * @return $this
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets method_b2_payg_withholding_amount
     *
     * @return double
     */
    public function getMethodB2PaygWithholdingAmount()
    {
        return $this->container['method_b2_payg_withholding_amount'];
    }

    /**
     * Sets method_b2_payg_withholding_amount
     *
     * @param double $method_b2_payg_withholding_amount 
     *
     * @return $this
     */
    public function setMethodB2PaygWithholdingAmount($method_b2_payg_withholding_amount)
    {
        $this->container['method_b2_payg_withholding_amount'] = $method_b2_payg_withholding_amount;

        return $this;
    }

    /**
     * Gets sfss_amount
     *
     * @return double
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param double $sfss_amount 
     *
     * @return $this
     */
    public function setSfssAmount($sfss_amount)
    {
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return double
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param double $help_amount 
     *
     * @return $this
     */
    public function setHelpAmount($help_amount)
    {
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return double
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param double $super_contribution 
     *
     * @return $this
     */
    public function setSuperContribution($super_contribution)
    {
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return double
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param double $employer_contribution 
     *
     * @return $this
     */
    public function setEmployerContribution($employer_contribution)
    {
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets earnings_lines
     *
     * @return \Swagger\Client\Model\AuInitialEarningsModel[]
     */
    public function getEarningsLines()
    {
        return $this->container['earnings_lines'];
    }

    /**
     * Sets earnings_lines
     *
     * @param \Swagger\Client\Model\AuInitialEarningsModel[] $earnings_lines 
     *
     * @return $this
     */
    public function setEarningsLines($earnings_lines)
    {
        $this->container['earnings_lines'] = $earnings_lines;

        return $this;
    }

    /**
     * Gets primary_etp_type
     *
     * @return \Swagger\Client\Model\OpeningBalancesEtpModel
     */
    public function getPrimaryEtpType()
    {
        return $this->container['primary_etp_type'];
    }

    /**
     * Sets primary_etp_type
     *
     * @param \Swagger\Client\Model\OpeningBalancesEtpModel $primary_etp_type 
     *
     * @return $this
     */
    public function setPrimaryEtpType($primary_etp_type)
    {
        $this->container['primary_etp_type'] = $primary_etp_type;

        return $this;
    }

    /**
     * Gets secondary_etp_type
     *
     * @return \Swagger\Client\Model\OpeningBalancesEtpModel
     */
    public function getSecondaryEtpType()
    {
        return $this->container['secondary_etp_type'];
    }

    /**
     * Sets secondary_etp_type
     *
     * @param \Swagger\Client\Model\OpeningBalancesEtpModel $secondary_etp_type 
     *
     * @return $this
     */
    public function setSecondaryEtpType($secondary_etp_type)
    {
        $this->container['secondary_etp_type'] = $secondary_etp_type;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return double
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param double $total_hours 
     *
     * @return $this
     */
    public function setTotalHours($total_hours)
    {
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return double
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param double $gross_earnings 
     *
     * @return $this
     */
    public function setGrossEarnings($gross_earnings)
    {
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets leave_balances
     *
     * @return \Swagger\Client\Model\InitialLeaveBalanceModel[]
     */
    public function getLeaveBalances()
    {
        return $this->container['leave_balances'];
    }

    /**
     * Sets leave_balances
     *
     * @param \Swagger\Client\Model\InitialLeaveBalanceModel[] $leave_balances 
     *
     * @return $this
     */
    public function setLeaveBalances($leave_balances)
    {
        $this->container['leave_balances'] = $leave_balances;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return \Swagger\Client\Model\InitialEmployerLiabilityModel[]
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param \Swagger\Client\Model\InitialEmployerLiabilityModel[] $employer_liabilities 
     *
     * @return $this
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }

    /**
     * Gets financial_year_starting_year
     *
     * @return int
     */
    public function getFinancialYearStartingYear()
    {
        return $this->container['financial_year_starting_year'];
    }

    /**
     * Sets financial_year_starting_year
     *
     * @param int $financial_year_starting_year 
     *
     * @return $this
     */
    public function setFinancialYearStartingYear($financial_year_starting_year)
    {
        $this->container['financial_year_starting_year'] = $financial_year_starting_year;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name 
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


