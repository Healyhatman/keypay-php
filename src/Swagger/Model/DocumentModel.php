<?php
/**
 * DocumentModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * DocumentModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'friendly_name' => 'string',
        'date_created' => '\DateTime',
        'visible_to_all_employees' => 'bool',
        'selected_groups' => '\Swagger\Client\Model\EmployeeGroupItemModel[]',
        'selected_locations' => '\Swagger\Client\Model\LocationItemModel[]',
        'requires_employee_acknowledgement' => 'bool',
        'send_notification_to_employee' => 'bool',
        'send_notification_immediately' => 'bool',
        'send_initial_notification_on' => '\DateTime',
        'send_reminder_every_x_days' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'friendly_name' => null,
        'date_created' => 'date-time',
        'visible_to_all_employees' => null,
        'selected_groups' => null,
        'selected_locations' => null,
        'requires_employee_acknowledgement' => null,
        'send_notification_to_employee' => null,
        'send_notification_immediately' => null,
        'send_initial_notification_on' => 'date-time',
        'send_reminder_every_x_days' => 'int32',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'friendly_name' => 'friendlyName',
        'date_created' => 'dateCreated',
        'visible_to_all_employees' => 'visibleToAllEmployees',
        'selected_groups' => 'selectedGroups',
        'selected_locations' => 'selectedLocations',
        'requires_employee_acknowledgement' => 'requiresEmployeeAcknowledgement',
        'send_notification_to_employee' => 'sendNotificationToEmployee',
        'send_notification_immediately' => 'sendNotificationImmediately',
        'send_initial_notification_on' => 'sendInitialNotificationOn',
        'send_reminder_every_x_days' => 'sendReminderEveryXDays',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'friendly_name' => 'setFriendlyName',
        'date_created' => 'setDateCreated',
        'visible_to_all_employees' => 'setVisibleToAllEmployees',
        'selected_groups' => 'setSelectedGroups',
        'selected_locations' => 'setSelectedLocations',
        'requires_employee_acknowledgement' => 'setRequiresEmployeeAcknowledgement',
        'send_notification_to_employee' => 'setSendNotificationToEmployee',
        'send_notification_immediately' => 'setSendNotificationImmediately',
        'send_initial_notification_on' => 'setSendInitialNotificationOn',
        'send_reminder_every_x_days' => 'setSendReminderEveryXDays',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'friendly_name' => 'getFriendlyName',
        'date_created' => 'getDateCreated',
        'visible_to_all_employees' => 'getVisibleToAllEmployees',
        'selected_groups' => 'getSelectedGroups',
        'selected_locations' => 'getSelectedLocations',
        'requires_employee_acknowledgement' => 'getRequiresEmployeeAcknowledgement',
        'send_notification_to_employee' => 'getSendNotificationToEmployee',
        'send_notification_immediately' => 'getSendNotificationImmediately',
        'send_initial_notification_on' => 'getSendInitialNotificationOn',
        'send_reminder_every_x_days' => 'getSendReminderEveryXDays',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['friendly_name'] = isset($data['friendly_name']) ? $data['friendly_name'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['visible_to_all_employees'] = isset($data['visible_to_all_employees']) ? $data['visible_to_all_employees'] : null;
        $this->container['selected_groups'] = isset($data['selected_groups']) ? $data['selected_groups'] : null;
        $this->container['selected_locations'] = isset($data['selected_locations']) ? $data['selected_locations'] : null;
        $this->container['requires_employee_acknowledgement'] = isset($data['requires_employee_acknowledgement']) ? $data['requires_employee_acknowledgement'] : null;
        $this->container['send_notification_to_employee'] = isset($data['send_notification_to_employee']) ? $data['send_notification_to_employee'] : null;
        $this->container['send_notification_immediately'] = isset($data['send_notification_immediately']) ? $data['send_notification_immediately'] : null;
        $this->container['send_initial_notification_on'] = isset($data['send_initial_notification_on']) ? $data['send_initial_notification_on'] : null;
        $this->container['send_reminder_every_x_days'] = isset($data['send_reminder_every_x_days']) ? $data['send_reminder_every_x_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string $friendly_name
     *
     * @return $this
     */
    public function setFriendlyName($friendly_name)
    {
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets visible_to_all_employees
     *
     * @return bool
     */
    public function getVisibleToAllEmployees()
    {
        return $this->container['visible_to_all_employees'];
    }

    /**
     * Sets visible_to_all_employees
     *
     * @param bool $visible_to_all_employees
     *
     * @return $this
     */
    public function setVisibleToAllEmployees($visible_to_all_employees)
    {
        $this->container['visible_to_all_employees'] = $visible_to_all_employees;

        return $this;
    }

    /**
     * Gets selected_groups
     *
     * @return \Swagger\Client\Model\EmployeeGroupItemModel[]
     */
    public function getSelectedGroups()
    {
        return $this->container['selected_groups'];
    }

    /**
     * Sets selected_groups
     *
     * @param \Swagger\Client\Model\EmployeeGroupItemModel[] $selected_groups
     *
     * @return $this
     */
    public function setSelectedGroups($selected_groups)
    {
        $this->container['selected_groups'] = $selected_groups;

        return $this;
    }

    /**
     * Gets selected_locations
     *
     * @return \Swagger\Client\Model\LocationItemModel[]
     */
    public function getSelectedLocations()
    {
        return $this->container['selected_locations'];
    }

    /**
     * Sets selected_locations
     *
     * @param \Swagger\Client\Model\LocationItemModel[] $selected_locations
     *
     * @return $this
     */
    public function setSelectedLocations($selected_locations)
    {
        $this->container['selected_locations'] = $selected_locations;

        return $this;
    }

    /**
     * Gets requires_employee_acknowledgement
     *
     * @return bool
     */
    public function getRequiresEmployeeAcknowledgement()
    {
        return $this->container['requires_employee_acknowledgement'];
    }

    /**
     * Sets requires_employee_acknowledgement
     *
     * @param bool $requires_employee_acknowledgement
     *
     * @return $this
     */
    public function setRequiresEmployeeAcknowledgement($requires_employee_acknowledgement)
    {
        $this->container['requires_employee_acknowledgement'] = $requires_employee_acknowledgement;

        return $this;
    }

    /**
     * Gets send_notification_to_employee
     *
     * @return bool
     */
    public function getSendNotificationToEmployee()
    {
        return $this->container['send_notification_to_employee'];
    }

    /**
     * Sets send_notification_to_employee
     *
     * @param bool $send_notification_to_employee
     *
     * @return $this
     */
    public function setSendNotificationToEmployee($send_notification_to_employee)
    {
        $this->container['send_notification_to_employee'] = $send_notification_to_employee;

        return $this;
    }

    /**
     * Gets send_notification_immediately
     *
     * @return bool
     */
    public function getSendNotificationImmediately()
    {
        return $this->container['send_notification_immediately'];
    }

    /**
     * Sets send_notification_immediately
     *
     * @param bool $send_notification_immediately
     *
     * @return $this
     */
    public function setSendNotificationImmediately($send_notification_immediately)
    {
        $this->container['send_notification_immediately'] = $send_notification_immediately;

        return $this;
    }

    /**
     * Gets send_initial_notification_on
     *
     * @return \DateTime
     */
    public function getSendInitialNotificationOn()
    {
        return $this->container['send_initial_notification_on'];
    }

    /**
     * Sets send_initial_notification_on
     *
     * @param \DateTime $send_initial_notification_on
     *
     * @return $this
     */
    public function setSendInitialNotificationOn($send_initial_notification_on)
    {
        $this->container['send_initial_notification_on'] = $send_initial_notification_on;

        return $this;
    }

    /**
     * Gets send_reminder_every_x_days
     *
     * @return int
     */
    public function getSendReminderEveryXDays()
    {
        return $this->container['send_reminder_every_x_days'];
    }

    /**
     * Sets send_reminder_every_x_days
     *
     * @param int $send_reminder_every_x_days
     *
     * @return $this
     */
    public function setSendReminderEveryXDays($send_reminder_every_x_days)
    {
        $this->container['send_reminder_every_x_days'] = $send_reminder_every_x_days;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
