<?php
/**
 * BusinessAccessModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * BusinessAccessModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessAccessModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessAccessModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_type' => 'string',
        'employee_groups' => '\Swagger\Client\Model\EmployeeGroupAccessModel[]',
        'location_access' => '\Swagger\Client\Model\LocationAccessModel[]',
        'reports' => '\Swagger\Client\Model\ReportAccessModel',
        'kiosk_access' => '\Swagger\Client\Model\KioskAccessModel',
        'name' => 'string',
        'email' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_type' => null,
        'employee_groups' => null,
        'location_access' => null,
        'reports' => null,
        'kiosk_access' => null,
        'name' => null,
        'email' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_type' => 'accessType',
        'employee_groups' => 'employeeGroups',
        'location_access' => 'locationAccess',
        'reports' => 'reports',
        'kiosk_access' => 'kioskAccess',
        'name' => 'name',
        'email' => 'email',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_type' => 'setAccessType',
        'employee_groups' => 'setEmployeeGroups',
        'location_access' => 'setLocationAccess',
        'reports' => 'setReports',
        'kiosk_access' => 'setKioskAccess',
        'name' => 'setName',
        'email' => 'setEmail',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_type' => 'getAccessType',
        'employee_groups' => 'getEmployeeGroups',
        'location_access' => 'getLocationAccess',
        'reports' => 'getReports',
        'kiosk_access' => 'getKioskAccess',
        'name' => 'getName',
        'email' => 'getEmail',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const ACCESS_TYPE_UNRESTRICTED = 'Unrestricted';
    public const ACCESS_TYPE_RESTRICTED = 'Restricted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessTypeAllowableValues()
    {
        return [
            self::ACCESS_TYPE_UNRESTRICTED,
            self::ACCESS_TYPE_RESTRICTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_type'] = isset($data['access_type']) ? $data['access_type'] : null;
        $this->container['employee_groups'] = isset($data['employee_groups']) ? $data['employee_groups'] : null;
        $this->container['location_access'] = isset($data['location_access']) ? $data['location_access'] : null;
        $this->container['reports'] = isset($data['reports']) ? $data['reports'] : null;
        $this->container['kiosk_access'] = isset($data['kiosk_access']) ? $data['kiosk_access'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccessTypeAllowableValues();
        if (! is_null($this->container['access_type']) && ! in_array($this->container['access_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets access_type
     *
     * @return string
     */
    public function getAccessType()
    {
        return $this->container['access_type'];
    }

    /**
     * Sets access_type
     *
     * @param string $access_type
     *
     * @return $this
     */
    public function setAccessType($access_type)
    {
        $allowedValues = $this->getAccessTypeAllowableValues();
        if (! is_null($access_type) && ! in_array($access_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_type'] = $access_type;

        return $this;
    }

    /**
     * Gets employee_groups
     *
     * @return \Swagger\Client\Model\EmployeeGroupAccessModel[]
     */
    public function getEmployeeGroups()
    {
        return $this->container['employee_groups'];
    }

    /**
     * Sets employee_groups
     *
     * @param \Swagger\Client\Model\EmployeeGroupAccessModel[] $employee_groups
     *
     * @return $this
     */
    public function setEmployeeGroups($employee_groups)
    {
        $this->container['employee_groups'] = $employee_groups;

        return $this;
    }

    /**
     * Gets location_access
     *
     * @return \Swagger\Client\Model\LocationAccessModel[]
     */
    public function getLocationAccess()
    {
        return $this->container['location_access'];
    }

    /**
     * Sets location_access
     *
     * @param \Swagger\Client\Model\LocationAccessModel[] $location_access
     *
     * @return $this
     */
    public function setLocationAccess($location_access)
    {
        $this->container['location_access'] = $location_access;

        return $this;
    }

    /**
     * Gets reports
     *
     * @return \Swagger\Client\Model\ReportAccessModel
     */
    public function getReports()
    {
        return $this->container['reports'];
    }

    /**
     * Sets reports
     *
     * @param \Swagger\Client\Model\ReportAccessModel $reports
     *
     * @return $this
     */
    public function setReports($reports)
    {
        $this->container['reports'] = $reports;

        return $this;
    }

    /**
     * Gets kiosk_access
     *
     * @return \Swagger\Client\Model\KioskAccessModel
     */
    public function getKioskAccess()
    {
        return $this->container['kiosk_access'];
    }

    /**
     * Sets kiosk_access
     *
     * @param \Swagger\Client\Model\KioskAccessModel $kiosk_access
     *
     * @return $this
     */
    public function setKioskAccess($kiosk_access)
    {
        $this->container['kiosk_access'] = $kiosk_access;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
