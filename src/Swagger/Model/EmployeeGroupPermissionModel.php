<?php
/**
 * EmployeeGroupPermissionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * EmployeeGroupPermissionModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeGroupPermissionModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeGroupPermissionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'can_approve_leave_requests' => 'bool',
        'can_view_leave_requests' => 'bool',
        'can_approve_timesheets' => 'bool',
        'can_create_timesheets' => 'bool',
        'can_approve_expenses' => 'bool',
        'can_view_expenses' => 'bool',
        'can_view_shift_costs' => 'bool',
        'can_view_rosters' => 'bool',
        'can_manage_rosters' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'can_approve_leave_requests' => null,
        'can_view_leave_requests' => null,
        'can_approve_timesheets' => null,
        'can_create_timesheets' => null,
        'can_approve_expenses' => null,
        'can_view_expenses' => null,
        'can_view_shift_costs' => null,
        'can_view_rosters' => null,
        'can_manage_rosters' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'can_approve_leave_requests' => 'canApproveLeaveRequests',
        'can_view_leave_requests' => 'canViewLeaveRequests',
        'can_approve_timesheets' => 'canApproveTimesheets',
        'can_create_timesheets' => 'canCreateTimesheets',
        'can_approve_expenses' => 'canApproveExpenses',
        'can_view_expenses' => 'canViewExpenses',
        'can_view_shift_costs' => 'canViewShiftCosts',
        'can_view_rosters' => 'canViewRosters',
        'can_manage_rosters' => 'canManageRosters',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'can_approve_leave_requests' => 'setCanApproveLeaveRequests',
        'can_view_leave_requests' => 'setCanViewLeaveRequests',
        'can_approve_timesheets' => 'setCanApproveTimesheets',
        'can_create_timesheets' => 'setCanCreateTimesheets',
        'can_approve_expenses' => 'setCanApproveExpenses',
        'can_view_expenses' => 'setCanViewExpenses',
        'can_view_shift_costs' => 'setCanViewShiftCosts',
        'can_view_rosters' => 'setCanViewRosters',
        'can_manage_rosters' => 'setCanManageRosters',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'can_approve_leave_requests' => 'getCanApproveLeaveRequests',
        'can_view_leave_requests' => 'getCanViewLeaveRequests',
        'can_approve_timesheets' => 'getCanApproveTimesheets',
        'can_create_timesheets' => 'getCanCreateTimesheets',
        'can_approve_expenses' => 'getCanApproveExpenses',
        'can_view_expenses' => 'getCanViewExpenses',
        'can_view_shift_costs' => 'getCanViewShiftCosts',
        'can_view_rosters' => 'getCanViewRosters',
        'can_manage_rosters' => 'getCanManageRosters',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['can_approve_leave_requests'] = isset($data['can_approve_leave_requests']) ? $data['can_approve_leave_requests'] : null;
        $this->container['can_view_leave_requests'] = isset($data['can_view_leave_requests']) ? $data['can_view_leave_requests'] : null;
        $this->container['can_approve_timesheets'] = isset($data['can_approve_timesheets']) ? $data['can_approve_timesheets'] : null;
        $this->container['can_create_timesheets'] = isset($data['can_create_timesheets']) ? $data['can_create_timesheets'] : null;
        $this->container['can_approve_expenses'] = isset($data['can_approve_expenses']) ? $data['can_approve_expenses'] : null;
        $this->container['can_view_expenses'] = isset($data['can_view_expenses']) ? $data['can_view_expenses'] : null;
        $this->container['can_view_shift_costs'] = isset($data['can_view_shift_costs']) ? $data['can_view_shift_costs'] : null;
        $this->container['can_view_rosters'] = isset($data['can_view_rosters']) ? $data['can_view_rosters'] : null;
        $this->container['can_manage_rosters'] = isset($data['can_manage_rosters']) ? $data['can_manage_rosters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets can_approve_leave_requests
     *
     * @return bool
     */
    public function getCanApproveLeaveRequests()
    {
        return $this->container['can_approve_leave_requests'];
    }

    /**
     * Sets can_approve_leave_requests
     *
     * @param bool $can_approve_leave_requests
     *
     * @return $this
     */
    public function setCanApproveLeaveRequests($can_approve_leave_requests)
    {
        $this->container['can_approve_leave_requests'] = $can_approve_leave_requests;

        return $this;
    }

    /**
     * Gets can_view_leave_requests
     *
     * @return bool
     */
    public function getCanViewLeaveRequests()
    {
        return $this->container['can_view_leave_requests'];
    }

    /**
     * Sets can_view_leave_requests
     *
     * @param bool $can_view_leave_requests
     *
     * @return $this
     */
    public function setCanViewLeaveRequests($can_view_leave_requests)
    {
        $this->container['can_view_leave_requests'] = $can_view_leave_requests;

        return $this;
    }

    /**
     * Gets can_approve_timesheets
     *
     * @return bool
     */
    public function getCanApproveTimesheets()
    {
        return $this->container['can_approve_timesheets'];
    }

    /**
     * Sets can_approve_timesheets
     *
     * @param bool $can_approve_timesheets
     *
     * @return $this
     */
    public function setCanApproveTimesheets($can_approve_timesheets)
    {
        $this->container['can_approve_timesheets'] = $can_approve_timesheets;

        return $this;
    }

    /**
     * Gets can_create_timesheets
     *
     * @return bool
     */
    public function getCanCreateTimesheets()
    {
        return $this->container['can_create_timesheets'];
    }

    /**
     * Sets can_create_timesheets
     *
     * @param bool $can_create_timesheets
     *
     * @return $this
     */
    public function setCanCreateTimesheets($can_create_timesheets)
    {
        $this->container['can_create_timesheets'] = $can_create_timesheets;

        return $this;
    }

    /**
     * Gets can_approve_expenses
     *
     * @return bool
     */
    public function getCanApproveExpenses()
    {
        return $this->container['can_approve_expenses'];
    }

    /**
     * Sets can_approve_expenses
     *
     * @param bool $can_approve_expenses
     *
     * @return $this
     */
    public function setCanApproveExpenses($can_approve_expenses)
    {
        $this->container['can_approve_expenses'] = $can_approve_expenses;

        return $this;
    }

    /**
     * Gets can_view_expenses
     *
     * @return bool
     */
    public function getCanViewExpenses()
    {
        return $this->container['can_view_expenses'];
    }

    /**
     * Sets can_view_expenses
     *
     * @param bool $can_view_expenses
     *
     * @return $this
     */
    public function setCanViewExpenses($can_view_expenses)
    {
        $this->container['can_view_expenses'] = $can_view_expenses;

        return $this;
    }

    /**
     * Gets can_view_shift_costs
     *
     * @return bool
     */
    public function getCanViewShiftCosts()
    {
        return $this->container['can_view_shift_costs'];
    }

    /**
     * Sets can_view_shift_costs
     *
     * @param bool $can_view_shift_costs
     *
     * @return $this
     */
    public function setCanViewShiftCosts($can_view_shift_costs)
    {
        $this->container['can_view_shift_costs'] = $can_view_shift_costs;

        return $this;
    }

    /**
     * Gets can_view_rosters
     *
     * @return bool
     */
    public function getCanViewRosters()
    {
        return $this->container['can_view_rosters'];
    }

    /**
     * Sets can_view_rosters
     *
     * @param bool $can_view_rosters
     *
     * @return $this
     */
    public function setCanViewRosters($can_view_rosters)
    {
        $this->container['can_view_rosters'] = $can_view_rosters;

        return $this;
    }

    /**
     * Gets can_manage_rosters
     *
     * @return bool
     */
    public function getCanManageRosters()
    {
        return $this->container['can_manage_rosters'];
    }

    /**
     * Sets can_manage_rosters
     *
     * @param bool $can_manage_rosters
     *
     * @return $this
     */
    public function setCanManageRosters($can_manage_rosters)
    {
        $this->container['can_manage_rosters'] = $can_manage_rosters;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
