<?php
/**
 * AuChartOfAccountsLocationGroupModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuChartOfAccountsLocationGroupModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuChartOfAccountsLocationGroupModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuChartOfAccountsLocationGroupModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_accounts' => '\Swagger\Client\Model\AuChartOfAccountsLocationAccountsModel',
        'leave_categories' => '\Swagger\Client\Model\ChartOfAccountsLocationLeaveCategoryModel[]',
        'location_id' => 'int',
        'pay_categories' => '\Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[]',
        'deduction_categories' => '\Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[]',
        'employee_expense_categories' => '\Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[]',
        'employer_liability_categories' => '\Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_accounts' => null,
        'leave_categories' => null,
        'location_id' => 'int32',
        'pay_categories' => null,
        'deduction_categories' => null,
        'employee_expense_categories' => null,
        'employer_liability_categories' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_accounts' => 'defaultAccounts',
        'leave_categories' => 'leaveCategories',
        'location_id' => 'locationId',
        'pay_categories' => 'payCategories',
        'deduction_categories' => 'deductionCategories',
        'employee_expense_categories' => 'employeeExpenseCategories',
        'employer_liability_categories' => 'employerLiabilityCategories',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_accounts' => 'setDefaultAccounts',
        'leave_categories' => 'setLeaveCategories',
        'location_id' => 'setLocationId',
        'pay_categories' => 'setPayCategories',
        'deduction_categories' => 'setDeductionCategories',
        'employee_expense_categories' => 'setEmployeeExpenseCategories',
        'employer_liability_categories' => 'setEmployerLiabilityCategories',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_accounts' => 'getDefaultAccounts',
        'leave_categories' => 'getLeaveCategories',
        'location_id' => 'getLocationId',
        'pay_categories' => 'getPayCategories',
        'deduction_categories' => 'getDeductionCategories',
        'employee_expense_categories' => 'getEmployeeExpenseCategories',
        'employer_liability_categories' => 'getEmployerLiabilityCategories',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_accounts'] = isset($data['default_accounts']) ? $data['default_accounts'] : null;
        $this->container['leave_categories'] = isset($data['leave_categories']) ? $data['leave_categories'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['pay_categories'] = isset($data['pay_categories']) ? $data['pay_categories'] : null;
        $this->container['deduction_categories'] = isset($data['deduction_categories']) ? $data['deduction_categories'] : null;
        $this->container['employee_expense_categories'] = isset($data['employee_expense_categories']) ? $data['employee_expense_categories'] : null;
        $this->container['employer_liability_categories'] = isset($data['employer_liability_categories']) ? $data['employer_liability_categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets default_accounts
     *
     * @return \Swagger\Client\Model\AuChartOfAccountsLocationAccountsModel
     */
    public function getDefaultAccounts()
    {
        return $this->container['default_accounts'];
    }

    /**
     * Sets default_accounts
     *
     * @param \Swagger\Client\Model\AuChartOfAccountsLocationAccountsModel $default_accounts
     *
     * @return $this
     */
    public function setDefaultAccounts($default_accounts)
    {
        $this->container['default_accounts'] = $default_accounts;

        return $this;
    }

    /**
     * Gets leave_categories
     *
     * @return \Swagger\Client\Model\ChartOfAccountsLocationLeaveCategoryModel[]
     */
    public function getLeaveCategories()
    {
        return $this->container['leave_categories'];
    }

    /**
     * Sets leave_categories
     *
     * @param \Swagger\Client\Model\ChartOfAccountsLocationLeaveCategoryModel[] $leave_categories
     *
     * @return $this
     */
    public function setLeaveCategories($leave_categories)
    {
        $this->container['leave_categories'] = $leave_categories;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets pay_categories
     *
     * @return \Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[]
     */
    public function getPayCategories()
    {
        return $this->container['pay_categories'];
    }

    /**
     * Sets pay_categories
     *
     * @param \Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[] $pay_categories
     *
     * @return $this
     */
    public function setPayCategories($pay_categories)
    {
        $this->container['pay_categories'] = $pay_categories;

        return $this;
    }

    /**
     * Gets deduction_categories
     *
     * @return \Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[]
     */
    public function getDeductionCategories()
    {
        return $this->container['deduction_categories'];
    }

    /**
     * Sets deduction_categories
     *
     * @param \Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[] $deduction_categories
     *
     * @return $this
     */
    public function setDeductionCategories($deduction_categories)
    {
        $this->container['deduction_categories'] = $deduction_categories;

        return $this;
    }

    /**
     * Gets employee_expense_categories
     *
     * @return \Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[]
     */
    public function getEmployeeExpenseCategories()
    {
        return $this->container['employee_expense_categories'];
    }

    /**
     * Sets employee_expense_categories
     *
     * @param \Swagger\Client\Model\ChartOfAccountsLocationCategoryModel[] $employee_expense_categories
     *
     * @return $this
     */
    public function setEmployeeExpenseCategories($employee_expense_categories)
    {
        $this->container['employee_expense_categories'] = $employee_expense_categories;

        return $this;
    }

    /**
     * Gets employer_liability_categories
     *
     * @return \Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[]
     */
    public function getEmployerLiabilityCategories()
    {
        return $this->container['employer_liability_categories'];
    }

    /**
     * Sets employer_liability_categories
     *
     * @param \Swagger\Client\Model\ChartOfAccountsLiabilityLocationCategoryModel[] $employer_liability_categories
     *
     * @return $this
     */
    public function setEmployerLiabilityCategories($employer_liability_categories)
    {
        $this->container['employer_liability_categories'] = $employer_liability_categories;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
