<?php
/**
 * AuManagerRosterDataModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuManagerRosterDataModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuManagerRosterDataModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuManagerRosterDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rostered_shifts' => '\Swagger\Client\Model\AuManagerRosterShiftModel[]',
        'unassigned_shifts' => '\Swagger\Client\Model\AuManagerRosterShiftModel[]',
        'biddable_shifts' => '\Swagger\Client\Model\ManagerBiddableRosterShiftModel[]',
        'unavailability' => '\Swagger\Client\Model\ManagerUnavailabilityModel[]',
        'leave_requests' => '\Swagger\Client\Model\ILeaveBasedRosterShift[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rostered_shifts' => null,
        'unassigned_shifts' => null,
        'biddable_shifts' => null,
        'unavailability' => null,
        'leave_requests' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rostered_shifts' => 'rosteredShifts',
        'unassigned_shifts' => 'unassignedShifts',
        'biddable_shifts' => 'biddableShifts',
        'unavailability' => 'unavailability',
        'leave_requests' => 'leaveRequests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rostered_shifts' => 'setRosteredShifts',
        'unassigned_shifts' => 'setUnassignedShifts',
        'biddable_shifts' => 'setBiddableShifts',
        'unavailability' => 'setUnavailability',
        'leave_requests' => 'setLeaveRequests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rostered_shifts' => 'getRosteredShifts',
        'unassigned_shifts' => 'getUnassignedShifts',
        'biddable_shifts' => 'getBiddableShifts',
        'unavailability' => 'getUnavailability',
        'leave_requests' => 'getLeaveRequests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rostered_shifts'] = isset($data['rostered_shifts']) ? $data['rostered_shifts'] : null;
        $this->container['unassigned_shifts'] = isset($data['unassigned_shifts']) ? $data['unassigned_shifts'] : null;
        $this->container['biddable_shifts'] = isset($data['biddable_shifts']) ? $data['biddable_shifts'] : null;
        $this->container['unavailability'] = isset($data['unavailability']) ? $data['unavailability'] : null;
        $this->container['leave_requests'] = isset($data['leave_requests']) ? $data['leave_requests'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rostered_shifts
     *
     * @return \Swagger\Client\Model\AuManagerRosterShiftModel[]
     */
    public function getRosteredShifts()
    {
        return $this->container['rostered_shifts'];
    }

    /**
     * Sets rostered_shifts
     *
     * @param \Swagger\Client\Model\AuManagerRosterShiftModel[] $rostered_shifts 
     *
     * @return $this
     */
    public function setRosteredShifts($rostered_shifts)
    {
        $this->container['rostered_shifts'] = $rostered_shifts;

        return $this;
    }

    /**
     * Gets unassigned_shifts
     *
     * @return \Swagger\Client\Model\AuManagerRosterShiftModel[]
     */
    public function getUnassignedShifts()
    {
        return $this->container['unassigned_shifts'];
    }

    /**
     * Sets unassigned_shifts
     *
     * @param \Swagger\Client\Model\AuManagerRosterShiftModel[] $unassigned_shifts 
     *
     * @return $this
     */
    public function setUnassignedShifts($unassigned_shifts)
    {
        $this->container['unassigned_shifts'] = $unassigned_shifts;

        return $this;
    }

    /**
     * Gets biddable_shifts
     *
     * @return \Swagger\Client\Model\ManagerBiddableRosterShiftModel[]
     */
    public function getBiddableShifts()
    {
        return $this->container['biddable_shifts'];
    }

    /**
     * Sets biddable_shifts
     *
     * @param \Swagger\Client\Model\ManagerBiddableRosterShiftModel[] $biddable_shifts 
     *
     * @return $this
     */
    public function setBiddableShifts($biddable_shifts)
    {
        $this->container['biddable_shifts'] = $biddable_shifts;

        return $this;
    }

    /**
     * Gets unavailability
     *
     * @return \Swagger\Client\Model\ManagerUnavailabilityModel[]
     */
    public function getUnavailability()
    {
        return $this->container['unavailability'];
    }

    /**
     * Sets unavailability
     *
     * @param \Swagger\Client\Model\ManagerUnavailabilityModel[] $unavailability 
     *
     * @return $this
     */
    public function setUnavailability($unavailability)
    {
        $this->container['unavailability'] = $unavailability;

        return $this;
    }

    /**
     * Gets leave_requests
     *
     * @return \Swagger\Client\Model\ILeaveBasedRosterShift[]
     */
    public function getLeaveRequests()
    {
        return $this->container['leave_requests'];
    }

    /**
     * Sets leave_requests
     *
     * @param \Swagger\Client\Model\ILeaveBasedRosterShift[] $leave_requests 
     *
     * @return $this
     */
    public function setLeaveRequests($leave_requests)
    {
        $this->container['leave_requests'] = $leave_requests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


