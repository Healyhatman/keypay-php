<?php
/**
 * PayRunFinaliseResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayRunFinaliseResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRunFinaliseResult implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRunFinaliseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'journal_export_result' => '\Swagger\Client\Model\JournalExportResult',
        'journal_export_failed_message' => 'string',
        'removed_employees' => 'int[]',
        'notifications' => '\Swagger\Client\Model\PaySlipNotificationResponse',
        'pay_slips_published' => 'bool',
        'publish_preference' => 'string',
        'date_paid' => '\DateTime',
        'export_journals_preference' => 'bool',
        'publish_pay_slips_scheduled_date_time_utc' => '\DateTime',
        'pay_run_lodgement_job_id' => 'string',
        'pension_sync_job_id' => 'string',
        'active_employees' => 'int',
        'publish_pay_slips' => 'string',
        'publish_preference_time_of_day' => 'string',
        'export_journals' => 'string',
        'export_journals_scheduled_date_time_utc' => '\DateTime',
        'lodge_pay_run' => 'string',
        'lodge_pay_run_scheduled_date_time_utc' => '\DateTime',
        'run_report_packs' => 'string',
        'run_report_packs_scheduled_date_time_utc' => '\DateTime',
        'are_report_packs_processed' => 'bool',
        'selected_report_packs' => 'string[]',
        'submit_to_pension_sync' => 'string',
        'submit_to_pension_sync_scheduled_date_time_utc' => '\DateTime',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'journal_export_result' => null,
        'journal_export_failed_message' => null,
        'removed_employees' => 'int32',
        'notifications' => null,
        'pay_slips_published' => null,
        'publish_preference' => null,
        'date_paid' => 'date-time',
        'export_journals_preference' => null,
        'publish_pay_slips_scheduled_date_time_utc' => 'date-time',
        'pay_run_lodgement_job_id' => 'uuid',
        'pension_sync_job_id' => 'uuid',
        'active_employees' => 'int32',
        'publish_pay_slips' => null,
        'publish_preference_time_of_day' => null,
        'export_journals' => null,
        'export_journals_scheduled_date_time_utc' => 'date-time',
        'lodge_pay_run' => null,
        'lodge_pay_run_scheduled_date_time_utc' => 'date-time',
        'run_report_packs' => null,
        'run_report_packs_scheduled_date_time_utc' => 'date-time',
        'are_report_packs_processed' => null,
        'selected_report_packs' => null,
        'submit_to_pension_sync' => null,
        'submit_to_pension_sync_scheduled_date_time_utc' => 'date-time',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_export_result' => 'journalExportResult',
        'journal_export_failed_message' => 'journalExportFailedMessage',
        'removed_employees' => 'removedEmployees',
        'notifications' => 'notifications',
        'pay_slips_published' => 'paySlipsPublished',
        'publish_preference' => 'publishPreference',
        'date_paid' => 'datePaid',
        'export_journals_preference' => 'exportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'publishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'payRunLodgementJobId',
        'pension_sync_job_id' => 'pensionSyncJobId',
        'active_employees' => 'activeEmployees',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_preference_time_of_day' => 'publishPreferenceTimeOfDay',
        'export_journals' => 'exportJournals',
        'export_journals_scheduled_date_time_utc' => 'exportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'lodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'runReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'runReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'areReportPacksProcessed',
        'selected_report_packs' => 'selectedReportPacks',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'submitToPensionSyncScheduledDateTimeUtc',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_export_result' => 'setJournalExportResult',
        'journal_export_failed_message' => 'setJournalExportFailedMessage',
        'removed_employees' => 'setRemovedEmployees',
        'notifications' => 'setNotifications',
        'pay_slips_published' => 'setPaySlipsPublished',
        'publish_preference' => 'setPublishPreference',
        'date_paid' => 'setDatePaid',
        'export_journals_preference' => 'setExportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'setPublishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'setPayRunLodgementJobId',
        'pension_sync_job_id' => 'setPensionSyncJobId',
        'active_employees' => 'setActiveEmployees',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_preference_time_of_day' => 'setPublishPreferenceTimeOfDay',
        'export_journals' => 'setExportJournals',
        'export_journals_scheduled_date_time_utc' => 'setExportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'setLodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'setRunReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'setRunReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'setAreReportPacksProcessed',
        'selected_report_packs' => 'setSelectedReportPacks',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'setSubmitToPensionSyncScheduledDateTimeUtc',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_export_result' => 'getJournalExportResult',
        'journal_export_failed_message' => 'getJournalExportFailedMessage',
        'removed_employees' => 'getRemovedEmployees',
        'notifications' => 'getNotifications',
        'pay_slips_published' => 'getPaySlipsPublished',
        'publish_preference' => 'getPublishPreference',
        'date_paid' => 'getDatePaid',
        'export_journals_preference' => 'getExportJournalsPreference',
        'publish_pay_slips_scheduled_date_time_utc' => 'getPublishPaySlipsScheduledDateTimeUtc',
        'pay_run_lodgement_job_id' => 'getPayRunLodgementJobId',
        'pension_sync_job_id' => 'getPensionSyncJobId',
        'active_employees' => 'getActiveEmployees',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_preference_time_of_day' => 'getPublishPreferenceTimeOfDay',
        'export_journals' => 'getExportJournals',
        'export_journals_scheduled_date_time_utc' => 'getExportJournalsScheduledDateTimeUtc',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_scheduled_date_time_utc' => 'getLodgePayRunScheduledDateTimeUtc',
        'run_report_packs' => 'getRunReportPacks',
        'run_report_packs_scheduled_date_time_utc' => 'getRunReportPacksScheduledDateTimeUtc',
        'are_report_packs_processed' => 'getAreReportPacksProcessed',
        'selected_report_packs' => 'getSelectedReportPacks',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'submit_to_pension_sync_scheduled_date_time_utc' => 'getSubmitToPensionSyncScheduledDateTimeUtc',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const PUBLISH_PREFERENCE_MANUAL = 'Manual';
    public const PUBLISH_PREFERENCE_IMMEDIATE = 'Immediate';
    public const PUBLISH_PREFERENCE_SCHEDULED = 'Scheduled';
    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    public const EXPORT_JOURNALS_MANUAL = 'Manual';
    public const EXPORT_JOURNALS_IMMEDIATE = 'Immediate';
    public const EXPORT_JOURNALS_SCHEDULED = 'Scheduled';
    public const LODGE_PAY_RUN_MANUAL = 'Manual';
    public const LODGE_PAY_RUN_IMMEDIATE = 'Immediate';
    public const LODGE_PAY_RUN_SCHEDULED = 'Scheduled';
    public const RUN_REPORT_PACKS_MANUAL = 'Manual';
    public const RUN_REPORT_PACKS_IMMEDIATE = 'Immediate';
    public const RUN_REPORT_PACKS_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_MANUAL = 'Manual';
    public const SUBMIT_TO_PENSION_SYNC_IMMEDIATE = 'Immediate';
    public const SUBMIT_TO_PENSION_SYNC_SCHEDULED = 'Scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPreferenceAllowableValues()
    {
        return [
            self::PUBLISH_PREFERENCE_MANUAL,
            self::PUBLISH_PREFERENCE_IMMEDIATE,
            self::PUBLISH_PREFERENCE_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_MANUAL,
            self::EXPORT_JOURNALS_IMMEDIATE,
            self::EXPORT_JOURNALS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_MANUAL,
            self::LODGE_PAY_RUN_IMMEDIATE,
            self::LODGE_PAY_RUN_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_MANUAL,
            self::RUN_REPORT_PACKS_IMMEDIATE,
            self::RUN_REPORT_PACKS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['journal_export_result'] = isset($data['journal_export_result']) ? $data['journal_export_result'] : null;
        $this->container['journal_export_failed_message'] = isset($data['journal_export_failed_message']) ? $data['journal_export_failed_message'] : null;
        $this->container['removed_employees'] = isset($data['removed_employees']) ? $data['removed_employees'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['pay_slips_published'] = isset($data['pay_slips_published']) ? $data['pay_slips_published'] : null;
        $this->container['publish_preference'] = isset($data['publish_preference']) ? $data['publish_preference'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['export_journals_preference'] = isset($data['export_journals_preference']) ? $data['export_journals_preference'] : null;
        $this->container['publish_pay_slips_scheduled_date_time_utc'] = isset($data['publish_pay_slips_scheduled_date_time_utc']) ? $data['publish_pay_slips_scheduled_date_time_utc'] : null;
        $this->container['pay_run_lodgement_job_id'] = isset($data['pay_run_lodgement_job_id']) ? $data['pay_run_lodgement_job_id'] : null;
        $this->container['pension_sync_job_id'] = isset($data['pension_sync_job_id']) ? $data['pension_sync_job_id'] : null;
        $this->container['active_employees'] = isset($data['active_employees']) ? $data['active_employees'] : null;
        $this->container['publish_pay_slips'] = isset($data['publish_pay_slips']) ? $data['publish_pay_slips'] : null;
        $this->container['publish_preference_time_of_day'] = isset($data['publish_preference_time_of_day']) ? $data['publish_preference_time_of_day'] : null;
        $this->container['export_journals'] = isset($data['export_journals']) ? $data['export_journals'] : null;
        $this->container['export_journals_scheduled_date_time_utc'] = isset($data['export_journals_scheduled_date_time_utc']) ? $data['export_journals_scheduled_date_time_utc'] : null;
        $this->container['lodge_pay_run'] = isset($data['lodge_pay_run']) ? $data['lodge_pay_run'] : null;
        $this->container['lodge_pay_run_scheduled_date_time_utc'] = isset($data['lodge_pay_run_scheduled_date_time_utc']) ? $data['lodge_pay_run_scheduled_date_time_utc'] : null;
        $this->container['run_report_packs'] = isset($data['run_report_packs']) ? $data['run_report_packs'] : null;
        $this->container['run_report_packs_scheduled_date_time_utc'] = isset($data['run_report_packs_scheduled_date_time_utc']) ? $data['run_report_packs_scheduled_date_time_utc'] : null;
        $this->container['are_report_packs_processed'] = isset($data['are_report_packs_processed']) ? $data['are_report_packs_processed'] : null;
        $this->container['selected_report_packs'] = isset($data['selected_report_packs']) ? $data['selected_report_packs'] : null;
        $this->container['submit_to_pension_sync'] = isset($data['submit_to_pension_sync']) ? $data['submit_to_pension_sync'] : null;
        $this->container['submit_to_pension_sync_scheduled_date_time_utc'] = isset($data['submit_to_pension_sync_scheduled_date_time_utc']) ? $data['submit_to_pension_sync_scheduled_date_time_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPublishPreferenceAllowableValues();
        if (! is_null($this->container['publish_preference']) && ! in_array($this->container['publish_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (! is_null($this->container['publish_pay_slips']) && ! in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_pay_slips', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsAllowableValues();
        if (! is_null($this->container['export_journals']) && ! in_array($this->container['export_journals'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_journals', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (! is_null($this->container['lodge_pay_run']) && ! in_array($this->container['lodge_pay_run'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lodge_pay_run', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (! is_null($this->container['run_report_packs']) && ! in_array($this->container['run_report_packs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'run_report_packs', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (! is_null($this->container['submit_to_pension_sync']) && ! in_array($this->container['submit_to_pension_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'submit_to_pension_sync', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets journal_export_result
     *
     * @return \Swagger\Client\Model\JournalExportResult
     */
    public function getJournalExportResult()
    {
        return $this->container['journal_export_result'];
    }

    /**
     * Sets journal_export_result
     *
     * @param \Swagger\Client\Model\JournalExportResult $journal_export_result
     *
     * @return $this
     */
    public function setJournalExportResult($journal_export_result)
    {
        $this->container['journal_export_result'] = $journal_export_result;

        return $this;
    }

    /**
     * Gets journal_export_failed_message
     *
     * @return string
     */
    public function getJournalExportFailedMessage()
    {
        return $this->container['journal_export_failed_message'];
    }

    /**
     * Sets journal_export_failed_message
     *
     * @param string $journal_export_failed_message
     *
     * @return $this
     */
    public function setJournalExportFailedMessage($journal_export_failed_message)
    {
        $this->container['journal_export_failed_message'] = $journal_export_failed_message;

        return $this;
    }

    /**
     * Gets removed_employees
     *
     * @return int[]
     */
    public function getRemovedEmployees()
    {
        return $this->container['removed_employees'];
    }

    /**
     * Sets removed_employees
     *
     * @param int[] $removed_employees
     *
     * @return $this
     */
    public function setRemovedEmployees($removed_employees)
    {
        $this->container['removed_employees'] = $removed_employees;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \Swagger\Client\Model\PaySlipNotificationResponse
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Swagger\Client\Model\PaySlipNotificationResponse $notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets pay_slips_published
     *
     * @return bool
     */
    public function getPaySlipsPublished()
    {
        return $this->container['pay_slips_published'];
    }

    /**
     * Sets pay_slips_published
     *
     * @param bool $pay_slips_published
     *
     * @return $this
     */
    public function setPaySlipsPublished($pay_slips_published)
    {
        $this->container['pay_slips_published'] = $pay_slips_published;

        return $this;
    }

    /**
     * Gets publish_preference
     *
     * @return string
     */
    public function getPublishPreference()
    {
        return $this->container['publish_preference'];
    }

    /**
     * Sets publish_preference
     *
     * @param string $publish_preference
     *
     * @return $this
     */
    public function setPublishPreference($publish_preference)
    {
        $allowedValues = $this->getPublishPreferenceAllowableValues();
        if (! is_null($publish_preference) && ! in_array($publish_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_preference'] = $publish_preference;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime $date_paid
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets export_journals_preference
     *
     * @return bool
     */
    public function getExportJournalsPreference()
    {
        return $this->container['export_journals_preference'];
    }

    /**
     * Sets export_journals_preference
     *
     * @param bool $export_journals_preference
     *
     * @return $this
     */
    public function setExportJournalsPreference($export_journals_preference)
    {
        $this->container['export_journals_preference'] = $export_journals_preference;

        return $this;
    }

    /**
     * Gets publish_pay_slips_scheduled_date_time_utc
     *
     * @return \DateTime
     */
    public function getPublishPaySlipsScheduledDateTimeUtc()
    {
        return $this->container['publish_pay_slips_scheduled_date_time_utc'];
    }

    /**
     * Sets publish_pay_slips_scheduled_date_time_utc
     *
     * @param \DateTime $publish_pay_slips_scheduled_date_time_utc
     *
     * @return $this
     */
    public function setPublishPaySlipsScheduledDateTimeUtc($publish_pay_slips_scheduled_date_time_utc)
    {
        $this->container['publish_pay_slips_scheduled_date_time_utc'] = $publish_pay_slips_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets pay_run_lodgement_job_id
     *
     * @return string
     */
    public function getPayRunLodgementJobId()
    {
        return $this->container['pay_run_lodgement_job_id'];
    }

    /**
     * Sets pay_run_lodgement_job_id
     *
     * @param string $pay_run_lodgement_job_id
     *
     * @return $this
     */
    public function setPayRunLodgementJobId($pay_run_lodgement_job_id)
    {
        $this->container['pay_run_lodgement_job_id'] = $pay_run_lodgement_job_id;

        return $this;
    }

    /**
     * Gets pension_sync_job_id
     *
     * @return string
     */
    public function getPensionSyncJobId()
    {
        return $this->container['pension_sync_job_id'];
    }

    /**
     * Sets pension_sync_job_id
     *
     * @param string $pension_sync_job_id
     *
     * @return $this
     */
    public function setPensionSyncJobId($pension_sync_job_id)
    {
        $this->container['pension_sync_job_id'] = $pension_sync_job_id;

        return $this;
    }

    /**
     * Gets active_employees
     *
     * @return int
     */
    public function getActiveEmployees()
    {
        return $this->container['active_employees'];
    }

    /**
     * Sets active_employees
     *
     * @param int $active_employees
     *
     * @return $this
     */
    public function setActiveEmployees($active_employees)
    {
        $this->container['active_employees'] = $active_employees;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string $publish_pay_slips
     *
     * @return $this
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (! is_null($publish_pay_slips) && ! in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_pay_slips', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_preference_time_of_day
     *
     * @return string
     */
    public function getPublishPreferenceTimeOfDay()
    {
        return $this->container['publish_preference_time_of_day'];
    }

    /**
     * Sets publish_preference_time_of_day
     *
     * @param string $publish_preference_time_of_day
     *
     * @return $this
     */
    public function setPublishPreferenceTimeOfDay($publish_preference_time_of_day)
    {
        $this->container['publish_preference_time_of_day'] = $publish_preference_time_of_day;

        return $this;
    }

    /**
     * Gets export_journals
     *
     * @return string
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param string $export_journals
     *
     * @return $this
     */
    public function setExportJournals($export_journals)
    {
        $allowedValues = $this->getExportJournalsAllowableValues();
        if (! is_null($export_journals) && ! in_array($export_journals, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_journals', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets export_journals_scheduled_date_time_utc
     *
     * @return \DateTime
     */
    public function getExportJournalsScheduledDateTimeUtc()
    {
        return $this->container['export_journals_scheduled_date_time_utc'];
    }

    /**
     * Sets export_journals_scheduled_date_time_utc
     *
     * @param \DateTime $export_journals_scheduled_date_time_utc
     *
     * @return $this
     */
    public function setExportJournalsScheduledDateTimeUtc($export_journals_scheduled_date_time_utc)
    {
        $this->container['export_journals_scheduled_date_time_utc'] = $export_journals_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return string
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param string $lodge_pay_run
     *
     * @return $this
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (! is_null($lodge_pay_run) && ! in_array($lodge_pay_run, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lodge_pay_run', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_scheduled_date_time_utc
     *
     * @return \DateTime
     */
    public function getLodgePayRunScheduledDateTimeUtc()
    {
        return $this->container['lodge_pay_run_scheduled_date_time_utc'];
    }

    /**
     * Sets lodge_pay_run_scheduled_date_time_utc
     *
     * @param \DateTime $lodge_pay_run_scheduled_date_time_utc
     *
     * @return $this
     */
    public function setLodgePayRunScheduledDateTimeUtc($lodge_pay_run_scheduled_date_time_utc)
    {
        $this->container['lodge_pay_run_scheduled_date_time_utc'] = $lodge_pay_run_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets run_report_packs
     *
     * @return string
     */
    public function getRunReportPacks()
    {
        return $this->container['run_report_packs'];
    }

    /**
     * Sets run_report_packs
     *
     * @param string $run_report_packs
     *
     * @return $this
     */
    public function setRunReportPacks($run_report_packs)
    {
        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (! is_null($run_report_packs) && ! in_array($run_report_packs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'run_report_packs', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs'] = $run_report_packs;

        return $this;
    }

    /**
     * Gets run_report_packs_scheduled_date_time_utc
     *
     * @return \DateTime
     */
    public function getRunReportPacksScheduledDateTimeUtc()
    {
        return $this->container['run_report_packs_scheduled_date_time_utc'];
    }

    /**
     * Sets run_report_packs_scheduled_date_time_utc
     *
     * @param \DateTime $run_report_packs_scheduled_date_time_utc
     *
     * @return $this
     */
    public function setRunReportPacksScheduledDateTimeUtc($run_report_packs_scheduled_date_time_utc)
    {
        $this->container['run_report_packs_scheduled_date_time_utc'] = $run_report_packs_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Gets are_report_packs_processed
     *
     * @return bool
     */
    public function getAreReportPacksProcessed()
    {
        return $this->container['are_report_packs_processed'];
    }

    /**
     * Sets are_report_packs_processed
     *
     * @param bool $are_report_packs_processed
     *
     * @return $this
     */
    public function setAreReportPacksProcessed($are_report_packs_processed)
    {
        $this->container['are_report_packs_processed'] = $are_report_packs_processed;

        return $this;
    }

    /**
     * Gets selected_report_packs
     *
     * @return string[]
     */
    public function getSelectedReportPacks()
    {
        return $this->container['selected_report_packs'];
    }

    /**
     * Sets selected_report_packs
     *
     * @param string[] $selected_report_packs
     *
     * @return $this
     */
    public function setSelectedReportPacks($selected_report_packs)
    {
        $this->container['selected_report_packs'] = $selected_report_packs;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return string
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param string $submit_to_pension_sync
     *
     * @return $this
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (! is_null($submit_to_pension_sync) && ! in_array($submit_to_pension_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'submit_to_pension_sync', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_scheduled_date_time_utc
     *
     * @return \DateTime
     */
    public function getSubmitToPensionSyncScheduledDateTimeUtc()
    {
        return $this->container['submit_to_pension_sync_scheduled_date_time_utc'];
    }

    /**
     * Sets submit_to_pension_sync_scheduled_date_time_utc
     *
     * @param \DateTime $submit_to_pension_sync_scheduled_date_time_utc
     *
     * @return $this
     */
    public function setSubmitToPensionSyncScheduledDateTimeUtc($submit_to_pension_sync_scheduled_date_time_utc)
    {
        $this->container['submit_to_pension_sync_scheduled_date_time_utc'] = $submit_to_pension_sync_scheduled_date_time_utc;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
