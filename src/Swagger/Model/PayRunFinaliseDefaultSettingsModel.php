<?php
/**
 * PayRunFinaliseDefaultSettingsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayRunFinaliseDefaultSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRunFinaliseDefaultSettingsModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRunFinaliseDefaultSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'export_journals' => 'string',
        'export_journals_timeline' => 'string',
        'export_journals_day' => 'int',
        'export_journals_time_of_day' => 'string',
        'lodge_pay_run' => 'string',
        'lodge_pay_run_day' => 'int',
        'lodge_pay_run_timeline' => 'string',
        'lodge_pay_run_time_of_day' => 'string',
        'publish_pay_slips_day' => 'int',
        'publish_pay_slips_timeline' => 'string',
        'publish_pay_slips' => 'string',
        'publish_pay_slips_time_of_day' => 'string',
        'suppress_notifications' => 'bool',
        'submit_to_pension_sync' => 'string',
        'submit_to_pension_sync_timeline' => 'string',
        'submit_to_pension_sync_day' => 'int',
        'submit_to_pension_sync_time_of_day' => 'string',
        'run_report_packs' => 'string',
        'run_report_packs_timeline' => 'string',
        'run_report_packs_day' => 'int',
        'run_report_packs_time_of_day' => 'string',
        'report_packs_to_run' => 'int[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'export_journals' => null,
        'export_journals_timeline' => null,
        'export_journals_day' => 'int32',
        'export_journals_time_of_day' => null,
        'lodge_pay_run' => null,
        'lodge_pay_run_day' => 'int32',
        'lodge_pay_run_timeline' => null,
        'lodge_pay_run_time_of_day' => null,
        'publish_pay_slips_day' => 'int32',
        'publish_pay_slips_timeline' => null,
        'publish_pay_slips' => null,
        'publish_pay_slips_time_of_day' => null,
        'suppress_notifications' => null,
        'submit_to_pension_sync' => null,
        'submit_to_pension_sync_timeline' => null,
        'submit_to_pension_sync_day' => 'int32',
        'submit_to_pension_sync_time_of_day' => null,
        'run_report_packs' => null,
        'run_report_packs_timeline' => null,
        'run_report_packs_day' => 'int32',
        'run_report_packs_time_of_day' => null,
        'report_packs_to_run' => 'int32',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'export_journals' => 'exportJournals',
        'export_journals_timeline' => 'exportJournalsTimeline',
        'export_journals_day' => 'exportJournalsDay',
        'export_journals_time_of_day' => 'exportJournalsTimeOfDay',
        'lodge_pay_run' => 'lodgePayRun',
        'lodge_pay_run_day' => 'lodgePayRunDay',
        'lodge_pay_run_timeline' => 'lodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'lodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'publishPaySlipsDay',
        'publish_pay_slips_timeline' => 'publishPaySlipsTimeline',
        'publish_pay_slips' => 'publishPaySlips',
        'publish_pay_slips_time_of_day' => 'publishPaySlipsTimeOfDay',
        'suppress_notifications' => 'suppressNotifications',
        'submit_to_pension_sync' => 'submitToPensionSync',
        'submit_to_pension_sync_timeline' => 'submitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'submitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'submitToPensionSyncTimeOfDay',
        'run_report_packs' => 'runReportPacks',
        'run_report_packs_timeline' => 'runReportPacksTimeline',
        'run_report_packs_day' => 'runReportPacksDay',
        'run_report_packs_time_of_day' => 'runReportPacksTimeOfDay',
        'report_packs_to_run' => 'reportPacksToRun',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'export_journals' => 'setExportJournals',
        'export_journals_timeline' => 'setExportJournalsTimeline',
        'export_journals_day' => 'setExportJournalsDay',
        'export_journals_time_of_day' => 'setExportJournalsTimeOfDay',
        'lodge_pay_run' => 'setLodgePayRun',
        'lodge_pay_run_day' => 'setLodgePayRunDay',
        'lodge_pay_run_timeline' => 'setLodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'setLodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'setPublishPaySlipsDay',
        'publish_pay_slips_timeline' => 'setPublishPaySlipsTimeline',
        'publish_pay_slips' => 'setPublishPaySlips',
        'publish_pay_slips_time_of_day' => 'setPublishPaySlipsTimeOfDay',
        'suppress_notifications' => 'setSuppressNotifications',
        'submit_to_pension_sync' => 'setSubmitToPensionSync',
        'submit_to_pension_sync_timeline' => 'setSubmitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'setSubmitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'setSubmitToPensionSyncTimeOfDay',
        'run_report_packs' => 'setRunReportPacks',
        'run_report_packs_timeline' => 'setRunReportPacksTimeline',
        'run_report_packs_day' => 'setRunReportPacksDay',
        'run_report_packs_time_of_day' => 'setRunReportPacksTimeOfDay',
        'report_packs_to_run' => 'setReportPacksToRun',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'export_journals' => 'getExportJournals',
        'export_journals_timeline' => 'getExportJournalsTimeline',
        'export_journals_day' => 'getExportJournalsDay',
        'export_journals_time_of_day' => 'getExportJournalsTimeOfDay',
        'lodge_pay_run' => 'getLodgePayRun',
        'lodge_pay_run_day' => 'getLodgePayRunDay',
        'lodge_pay_run_timeline' => 'getLodgePayRunTimeline',
        'lodge_pay_run_time_of_day' => 'getLodgePayRunTimeOfDay',
        'publish_pay_slips_day' => 'getPublishPaySlipsDay',
        'publish_pay_slips_timeline' => 'getPublishPaySlipsTimeline',
        'publish_pay_slips' => 'getPublishPaySlips',
        'publish_pay_slips_time_of_day' => 'getPublishPaySlipsTimeOfDay',
        'suppress_notifications' => 'getSuppressNotifications',
        'submit_to_pension_sync' => 'getSubmitToPensionSync',
        'submit_to_pension_sync_timeline' => 'getSubmitToPensionSyncTimeline',
        'submit_to_pension_sync_day' => 'getSubmitToPensionSyncDay',
        'submit_to_pension_sync_time_of_day' => 'getSubmitToPensionSyncTimeOfDay',
        'run_report_packs' => 'getRunReportPacks',
        'run_report_packs_timeline' => 'getRunReportPacksTimeline',
        'run_report_packs_day' => 'getRunReportPacksDay',
        'run_report_packs_time_of_day' => 'getRunReportPacksTimeOfDay',
        'report_packs_to_run' => 'getReportPacksToRun',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const EXPORT_JOURNALS_MANUAL = 'Manual';
    public const EXPORT_JOURNALS_IMMEDIATE = 'Immediate';
    public const EXPORT_JOURNALS_SCHEDULED = 'Scheduled';
    public const EXPORT_JOURNALS_TIMELINE_BEFORE = 'Before';
    public const EXPORT_JOURNALS_TIMELINE_AFTER = 'After';
    public const EXPORT_JOURNALS_TIMELINE_ON = 'On';
    public const LODGE_PAY_RUN_MANUAL = 'Manual';
    public const LODGE_PAY_RUN_IMMEDIATE = 'Immediate';
    public const LODGE_PAY_RUN_SCHEDULED = 'Scheduled';
    public const LODGE_PAY_RUN_TIMELINE_BEFORE = 'Before';
    public const LODGE_PAY_RUN_TIMELINE_AFTER = 'After';
    public const LODGE_PAY_RUN_TIMELINE_ON = 'On';
    public const PUBLISH_PAY_SLIPS_TIMELINE_BEFORE = 'Before';
    public const PUBLISH_PAY_SLIPS_TIMELINE_AFTER = 'After';
    public const PUBLISH_PAY_SLIPS_TIMELINE_ON = 'On';
    public const PUBLISH_PAY_SLIPS_MANUAL = 'Manual';
    public const PUBLISH_PAY_SLIPS_IMMEDIATE = 'Immediate';
    public const PUBLISH_PAY_SLIPS_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_MANUAL = 'Manual';
    public const SUBMIT_TO_PENSION_SYNC_IMMEDIATE = 'Immediate';
    public const SUBMIT_TO_PENSION_SYNC_SCHEDULED = 'Scheduled';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_BEFORE = 'Before';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_AFTER = 'After';
    public const SUBMIT_TO_PENSION_SYNC_TIMELINE_ON = 'On';
    public const RUN_REPORT_PACKS_MANUAL = 'Manual';
    public const RUN_REPORT_PACKS_IMMEDIATE = 'Immediate';
    public const RUN_REPORT_PACKS_SCHEDULED = 'Scheduled';
    public const RUN_REPORT_PACKS_TIMELINE_BEFORE = 'Before';
    public const RUN_REPORT_PACKS_TIMELINE_AFTER = 'After';
    public const RUN_REPORT_PACKS_TIMELINE_ON = 'On';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_MANUAL,
            self::EXPORT_JOURNALS_IMMEDIATE,
            self::EXPORT_JOURNALS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportJournalsTimelineAllowableValues()
    {
        return [
            self::EXPORT_JOURNALS_TIMELINE_BEFORE,
            self::EXPORT_JOURNALS_TIMELINE_AFTER,
            self::EXPORT_JOURNALS_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_MANUAL,
            self::LODGE_PAY_RUN_IMMEDIATE,
            self::LODGE_PAY_RUN_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLodgePayRunTimelineAllowableValues()
    {
        return [
            self::LODGE_PAY_RUN_TIMELINE_BEFORE,
            self::LODGE_PAY_RUN_TIMELINE_AFTER,
            self::LODGE_PAY_RUN_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsTimelineAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_TIMELINE_BEFORE,
            self::PUBLISH_PAY_SLIPS_TIMELINE_AFTER,
            self::PUBLISH_PAY_SLIPS_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublishPaySlipsAllowableValues()
    {
        return [
            self::PUBLISH_PAY_SLIPS_MANUAL,
            self::PUBLISH_PAY_SLIPS_IMMEDIATE,
            self::PUBLISH_PAY_SLIPS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_MANUAL,
            self::SUBMIT_TO_PENSION_SYNC_IMMEDIATE,
            self::SUBMIT_TO_PENSION_SYNC_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmitToPensionSyncTimelineAllowableValues()
    {
        return [
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_BEFORE,
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_AFTER,
            self::SUBMIT_TO_PENSION_SYNC_TIMELINE_ON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_MANUAL,
            self::RUN_REPORT_PACKS_IMMEDIATE,
            self::RUN_REPORT_PACKS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRunReportPacksTimelineAllowableValues()
    {
        return [
            self::RUN_REPORT_PACKS_TIMELINE_BEFORE,
            self::RUN_REPORT_PACKS_TIMELINE_AFTER,
            self::RUN_REPORT_PACKS_TIMELINE_ON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['export_journals'] = isset($data['export_journals']) ? $data['export_journals'] : null;
        $this->container['export_journals_timeline'] = isset($data['export_journals_timeline']) ? $data['export_journals_timeline'] : null;
        $this->container['export_journals_day'] = isset($data['export_journals_day']) ? $data['export_journals_day'] : null;
        $this->container['export_journals_time_of_day'] = isset($data['export_journals_time_of_day']) ? $data['export_journals_time_of_day'] : null;
        $this->container['lodge_pay_run'] = isset($data['lodge_pay_run']) ? $data['lodge_pay_run'] : null;
        $this->container['lodge_pay_run_day'] = isset($data['lodge_pay_run_day']) ? $data['lodge_pay_run_day'] : null;
        $this->container['lodge_pay_run_timeline'] = isset($data['lodge_pay_run_timeline']) ? $data['lodge_pay_run_timeline'] : null;
        $this->container['lodge_pay_run_time_of_day'] = isset($data['lodge_pay_run_time_of_day']) ? $data['lodge_pay_run_time_of_day'] : null;
        $this->container['publish_pay_slips_day'] = isset($data['publish_pay_slips_day']) ? $data['publish_pay_slips_day'] : null;
        $this->container['publish_pay_slips_timeline'] = isset($data['publish_pay_slips_timeline']) ? $data['publish_pay_slips_timeline'] : null;
        $this->container['publish_pay_slips'] = isset($data['publish_pay_slips']) ? $data['publish_pay_slips'] : null;
        $this->container['publish_pay_slips_time_of_day'] = isset($data['publish_pay_slips_time_of_day']) ? $data['publish_pay_slips_time_of_day'] : null;
        $this->container['suppress_notifications'] = isset($data['suppress_notifications']) ? $data['suppress_notifications'] : null;
        $this->container['submit_to_pension_sync'] = isset($data['submit_to_pension_sync']) ? $data['submit_to_pension_sync'] : null;
        $this->container['submit_to_pension_sync_timeline'] = isset($data['submit_to_pension_sync_timeline']) ? $data['submit_to_pension_sync_timeline'] : null;
        $this->container['submit_to_pension_sync_day'] = isset($data['submit_to_pension_sync_day']) ? $data['submit_to_pension_sync_day'] : null;
        $this->container['submit_to_pension_sync_time_of_day'] = isset($data['submit_to_pension_sync_time_of_day']) ? $data['submit_to_pension_sync_time_of_day'] : null;
        $this->container['run_report_packs'] = isset($data['run_report_packs']) ? $data['run_report_packs'] : null;
        $this->container['run_report_packs_timeline'] = isset($data['run_report_packs_timeline']) ? $data['run_report_packs_timeline'] : null;
        $this->container['run_report_packs_day'] = isset($data['run_report_packs_day']) ? $data['run_report_packs_day'] : null;
        $this->container['run_report_packs_time_of_day'] = isset($data['run_report_packs_time_of_day']) ? $data['run_report_packs_time_of_day'] : null;
        $this->container['report_packs_to_run'] = isset($data['report_packs_to_run']) ? $data['report_packs_to_run'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExportJournalsAllowableValues();
        if (! is_null($this->container['export_journals']) && ! in_array($this->container['export_journals'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_journals', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportJournalsTimelineAllowableValues();
        if (! is_null($this->container['export_journals_timeline']) && ! in_array($this->container['export_journals_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_journals_timeline', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (! is_null($this->container['lodge_pay_run']) && ! in_array($this->container['lodge_pay_run'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lodge_pay_run', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLodgePayRunTimelineAllowableValues();
        if (! is_null($this->container['lodge_pay_run_timeline']) && ! in_array($this->container['lodge_pay_run_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lodge_pay_run_timeline', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsTimelineAllowableValues();
        if (! is_null($this->container['publish_pay_slips_timeline']) && ! in_array($this->container['publish_pay_slips_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_pay_slips_timeline', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (! is_null($this->container['publish_pay_slips']) && ! in_array($this->container['publish_pay_slips'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publish_pay_slips', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (! is_null($this->container['submit_to_pension_sync']) && ! in_array($this->container['submit_to_pension_sync'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'submit_to_pension_sync', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmitToPensionSyncTimelineAllowableValues();
        if (! is_null($this->container['submit_to_pension_sync_timeline']) && ! in_array($this->container['submit_to_pension_sync_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'submit_to_pension_sync_timeline', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (! is_null($this->container['run_report_packs']) && ! in_array($this->container['run_report_packs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'run_report_packs', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRunReportPacksTimelineAllowableValues();
        if (! is_null($this->container['run_report_packs_timeline']) && ! in_array($this->container['run_report_packs_timeline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'run_report_packs_timeline', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets export_journals
     *
     * @return string
     */
    public function getExportJournals()
    {
        return $this->container['export_journals'];
    }

    /**
     * Sets export_journals
     *
     * @param string $export_journals
     *
     * @return $this
     */
    public function setExportJournals($export_journals)
    {
        $allowedValues = $this->getExportJournalsAllowableValues();
        if (! is_null($export_journals) && ! in_array($export_journals, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_journals', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals'] = $export_journals;

        return $this;
    }

    /**
     * Gets export_journals_timeline
     *
     * @return string
     */
    public function getExportJournalsTimeline()
    {
        return $this->container['export_journals_timeline'];
    }

    /**
     * Sets export_journals_timeline
     *
     * @param string $export_journals_timeline
     *
     * @return $this
     */
    public function setExportJournalsTimeline($export_journals_timeline)
    {
        $allowedValues = $this->getExportJournalsTimelineAllowableValues();
        if (! is_null($export_journals_timeline) && ! in_array($export_journals_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_journals_timeline', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_journals_timeline'] = $export_journals_timeline;

        return $this;
    }

    /**
     * Gets export_journals_day
     *
     * @return int
     */
    public function getExportJournalsDay()
    {
        return $this->container['export_journals_day'];
    }

    /**
     * Sets export_journals_day
     *
     * @param int $export_journals_day
     *
     * @return $this
     */
    public function setExportJournalsDay($export_journals_day)
    {
        $this->container['export_journals_day'] = $export_journals_day;

        return $this;
    }

    /**
     * Gets export_journals_time_of_day
     *
     * @return string
     */
    public function getExportJournalsTimeOfDay()
    {
        return $this->container['export_journals_time_of_day'];
    }

    /**
     * Sets export_journals_time_of_day
     *
     * @param string $export_journals_time_of_day
     *
     * @return $this
     */
    public function setExportJournalsTimeOfDay($export_journals_time_of_day)
    {
        $this->container['export_journals_time_of_day'] = $export_journals_time_of_day;

        return $this;
    }

    /**
     * Gets lodge_pay_run
     *
     * @return string
     */
    public function getLodgePayRun()
    {
        return $this->container['lodge_pay_run'];
    }

    /**
     * Sets lodge_pay_run
     *
     * @param string $lodge_pay_run
     *
     * @return $this
     */
    public function setLodgePayRun($lodge_pay_run)
    {
        $allowedValues = $this->getLodgePayRunAllowableValues();
        if (! is_null($lodge_pay_run) && ! in_array($lodge_pay_run, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lodge_pay_run', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run'] = $lodge_pay_run;

        return $this;
    }

    /**
     * Gets lodge_pay_run_day
     *
     * @return int
     */
    public function getLodgePayRunDay()
    {
        return $this->container['lodge_pay_run_day'];
    }

    /**
     * Sets lodge_pay_run_day
     *
     * @param int $lodge_pay_run_day
     *
     * @return $this
     */
    public function setLodgePayRunDay($lodge_pay_run_day)
    {
        $this->container['lodge_pay_run_day'] = $lodge_pay_run_day;

        return $this;
    }

    /**
     * Gets lodge_pay_run_timeline
     *
     * @return string
     */
    public function getLodgePayRunTimeline()
    {
        return $this->container['lodge_pay_run_timeline'];
    }

    /**
     * Sets lodge_pay_run_timeline
     *
     * @param string $lodge_pay_run_timeline
     *
     * @return $this
     */
    public function setLodgePayRunTimeline($lodge_pay_run_timeline)
    {
        $allowedValues = $this->getLodgePayRunTimelineAllowableValues();
        if (! is_null($lodge_pay_run_timeline) && ! in_array($lodge_pay_run_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lodge_pay_run_timeline', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lodge_pay_run_timeline'] = $lodge_pay_run_timeline;

        return $this;
    }

    /**
     * Gets lodge_pay_run_time_of_day
     *
     * @return string
     */
    public function getLodgePayRunTimeOfDay()
    {
        return $this->container['lodge_pay_run_time_of_day'];
    }

    /**
     * Sets lodge_pay_run_time_of_day
     *
     * @param string $lodge_pay_run_time_of_day
     *
     * @return $this
     */
    public function setLodgePayRunTimeOfDay($lodge_pay_run_time_of_day)
    {
        $this->container['lodge_pay_run_time_of_day'] = $lodge_pay_run_time_of_day;

        return $this;
    }

    /**
     * Gets publish_pay_slips_day
     *
     * @return int
     */
    public function getPublishPaySlipsDay()
    {
        return $this->container['publish_pay_slips_day'];
    }

    /**
     * Sets publish_pay_slips_day
     *
     * @param int $publish_pay_slips_day
     *
     * @return $this
     */
    public function setPublishPaySlipsDay($publish_pay_slips_day)
    {
        $this->container['publish_pay_slips_day'] = $publish_pay_slips_day;

        return $this;
    }

    /**
     * Gets publish_pay_slips_timeline
     *
     * @return string
     */
    public function getPublishPaySlipsTimeline()
    {
        return $this->container['publish_pay_slips_timeline'];
    }

    /**
     * Sets publish_pay_slips_timeline
     *
     * @param string $publish_pay_slips_timeline
     *
     * @return $this
     */
    public function setPublishPaySlipsTimeline($publish_pay_slips_timeline)
    {
        $allowedValues = $this->getPublishPaySlipsTimelineAllowableValues();
        if (! is_null($publish_pay_slips_timeline) && ! in_array($publish_pay_slips_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_pay_slips_timeline', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips_timeline'] = $publish_pay_slips_timeline;

        return $this;
    }

    /**
     * Gets publish_pay_slips
     *
     * @return string
     */
    public function getPublishPaySlips()
    {
        return $this->container['publish_pay_slips'];
    }

    /**
     * Sets publish_pay_slips
     *
     * @param string $publish_pay_slips
     *
     * @return $this
     */
    public function setPublishPaySlips($publish_pay_slips)
    {
        $allowedValues = $this->getPublishPaySlipsAllowableValues();
        if (! is_null($publish_pay_slips) && ! in_array($publish_pay_slips, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publish_pay_slips', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publish_pay_slips'] = $publish_pay_slips;

        return $this;
    }

    /**
     * Gets publish_pay_slips_time_of_day
     *
     * @return string
     */
    public function getPublishPaySlipsTimeOfDay()
    {
        return $this->container['publish_pay_slips_time_of_day'];
    }

    /**
     * Sets publish_pay_slips_time_of_day
     *
     * @param string $publish_pay_slips_time_of_day
     *
     * @return $this
     */
    public function setPublishPaySlipsTimeOfDay($publish_pay_slips_time_of_day)
    {
        $this->container['publish_pay_slips_time_of_day'] = $publish_pay_slips_time_of_day;

        return $this;
    }

    /**
     * Gets suppress_notifications
     *
     * @return bool
     */
    public function getSuppressNotifications()
    {
        return $this->container['suppress_notifications'];
    }

    /**
     * Sets suppress_notifications
     *
     * @param bool $suppress_notifications
     *
     * @return $this
     */
    public function setSuppressNotifications($suppress_notifications)
    {
        $this->container['suppress_notifications'] = $suppress_notifications;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync
     *
     * @return string
     */
    public function getSubmitToPensionSync()
    {
        return $this->container['submit_to_pension_sync'];
    }

    /**
     * Sets submit_to_pension_sync
     *
     * @param string $submit_to_pension_sync
     *
     * @return $this
     */
    public function setSubmitToPensionSync($submit_to_pension_sync)
    {
        $allowedValues = $this->getSubmitToPensionSyncAllowableValues();
        if (! is_null($submit_to_pension_sync) && ! in_array($submit_to_pension_sync, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'submit_to_pension_sync', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync'] = $submit_to_pension_sync;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_timeline
     *
     * @return string
     */
    public function getSubmitToPensionSyncTimeline()
    {
        return $this->container['submit_to_pension_sync_timeline'];
    }

    /**
     * Sets submit_to_pension_sync_timeline
     *
     * @param string $submit_to_pension_sync_timeline
     *
     * @return $this
     */
    public function setSubmitToPensionSyncTimeline($submit_to_pension_sync_timeline)
    {
        $allowedValues = $this->getSubmitToPensionSyncTimelineAllowableValues();
        if (! is_null($submit_to_pension_sync_timeline) && ! in_array($submit_to_pension_sync_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'submit_to_pension_sync_timeline', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submit_to_pension_sync_timeline'] = $submit_to_pension_sync_timeline;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_day
     *
     * @return int
     */
    public function getSubmitToPensionSyncDay()
    {
        return $this->container['submit_to_pension_sync_day'];
    }

    /**
     * Sets submit_to_pension_sync_day
     *
     * @param int $submit_to_pension_sync_day
     *
     * @return $this
     */
    public function setSubmitToPensionSyncDay($submit_to_pension_sync_day)
    {
        $this->container['submit_to_pension_sync_day'] = $submit_to_pension_sync_day;

        return $this;
    }

    /**
     * Gets submit_to_pension_sync_time_of_day
     *
     * @return string
     */
    public function getSubmitToPensionSyncTimeOfDay()
    {
        return $this->container['submit_to_pension_sync_time_of_day'];
    }

    /**
     * Sets submit_to_pension_sync_time_of_day
     *
     * @param string $submit_to_pension_sync_time_of_day
     *
     * @return $this
     */
    public function setSubmitToPensionSyncTimeOfDay($submit_to_pension_sync_time_of_day)
    {
        $this->container['submit_to_pension_sync_time_of_day'] = $submit_to_pension_sync_time_of_day;

        return $this;
    }

    /**
     * Gets run_report_packs
     *
     * @return string
     */
    public function getRunReportPacks()
    {
        return $this->container['run_report_packs'];
    }

    /**
     * Sets run_report_packs
     *
     * @param string $run_report_packs
     *
     * @return $this
     */
    public function setRunReportPacks($run_report_packs)
    {
        $allowedValues = $this->getRunReportPacksAllowableValues();
        if (! is_null($run_report_packs) && ! in_array($run_report_packs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'run_report_packs', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs'] = $run_report_packs;

        return $this;
    }

    /**
     * Gets run_report_packs_timeline
     *
     * @return string
     */
    public function getRunReportPacksTimeline()
    {
        return $this->container['run_report_packs_timeline'];
    }

    /**
     * Sets run_report_packs_timeline
     *
     * @param string $run_report_packs_timeline
     *
     * @return $this
     */
    public function setRunReportPacksTimeline($run_report_packs_timeline)
    {
        $allowedValues = $this->getRunReportPacksTimelineAllowableValues();
        if (! is_null($run_report_packs_timeline) && ! in_array($run_report_packs_timeline, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'run_report_packs_timeline', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['run_report_packs_timeline'] = $run_report_packs_timeline;

        return $this;
    }

    /**
     * Gets run_report_packs_day
     *
     * @return int
     */
    public function getRunReportPacksDay()
    {
        return $this->container['run_report_packs_day'];
    }

    /**
     * Sets run_report_packs_day
     *
     * @param int $run_report_packs_day
     *
     * @return $this
     */
    public function setRunReportPacksDay($run_report_packs_day)
    {
        $this->container['run_report_packs_day'] = $run_report_packs_day;

        return $this;
    }

    /**
     * Gets run_report_packs_time_of_day
     *
     * @return string
     */
    public function getRunReportPacksTimeOfDay()
    {
        return $this->container['run_report_packs_time_of_day'];
    }

    /**
     * Sets run_report_packs_time_of_day
     *
     * @param string $run_report_packs_time_of_day
     *
     * @return $this
     */
    public function setRunReportPacksTimeOfDay($run_report_packs_time_of_day)
    {
        $this->container['run_report_packs_time_of_day'] = $run_report_packs_time_of_day;

        return $this;
    }

    /**
     * Gets report_packs_to_run
     *
     * @return int[]
     */
    public function getReportPacksToRun()
    {
        return $this->container['report_packs_to_run'];
    }

    /**
     * Sets report_packs_to_run
     *
     * @param int[] $report_packs_to_run
     *
     * @return $this
     */
    public function setReportPacksToRun($report_packs_to_run)
    {
        $this->container['report_packs_to_run'] = $report_packs_to_run;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
