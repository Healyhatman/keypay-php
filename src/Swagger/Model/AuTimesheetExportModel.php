<?php
/**
 * AuTimesheetExportModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuTimesheetExportModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuTimesheetExportModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuTimesheetExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super' => 'double',
        'payg' => 'double',
        'classification' => 'string',
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'employee_external_id' => 'string',
        'id' => 'int',
        'status' => 'string',
        'location' => 'string',
        'start' => '\DateTime',
        'start_time' => 'string',
        'end' => '\DateTime',
        'end_time' => 'string',
        'actual_start' => '\DateTime',
        'actual_start_time' => 'string',
        'actual_end' => '\DateTime',
        'actual_end_time' => 'string',
        'time_variance' => 'string',
        'formatted_time_variance' => 'string',
        'duration_excluding_breaks' => 'string',
        'duration' => 'string',
        'units' => 'double',
        'unit_type' => 'string',
        'work_type' => 'string',
        'shift_conditions' => 'string',
        'number_of_breaks' => 'int',
        'break_duration' => 'string',
        'comments' => 'string',
        'consolidated_with_timesheet_line_id' => 'int',
        'reviewed_by' => 'string',
        'gross' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double',
        'total_cost' => 'double',
        'total_cost_variance' => 'double',
        'date_created' => '\DateTime',
        'date_reviewed' => '\DateTime',
        'shift_condition_short_codes' => 'string[]',
        'breaks' => '\Swagger\Client\Model\TimesheetBreakModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super' => 'double',
        'payg' => 'double',
        'classification' => null,
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'employee_external_id' => null,
        'id' => 'int32',
        'status' => null,
        'location' => null,
        'start' => 'date-time',
        'start_time' => null,
        'end' => 'date-time',
        'end_time' => null,
        'actual_start' => 'date-time',
        'actual_start_time' => null,
        'actual_end' => 'date-time',
        'actual_end_time' => null,
        'time_variance' => null,
        'formatted_time_variance' => null,
        'duration_excluding_breaks' => null,
        'duration' => null,
        'units' => 'double',
        'unit_type' => null,
        'work_type' => null,
        'shift_conditions' => null,
        'number_of_breaks' => 'int32',
        'break_duration' => null,
        'comments' => null,
        'consolidated_with_timesheet_line_id' => 'int32',
        'reviewed_by' => null,
        'gross' => 'double',
        'net_earnings' => 'double',
        'employer_liabilities' => 'double',
        'total_cost' => 'double',
        'total_cost_variance' => 'double',
        'date_created' => 'date-time',
        'date_reviewed' => 'date-time',
        'shift_condition_short_codes' => null,
        'breaks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super' => 'super',
        'payg' => 'payg',
        'classification' => 'classification',
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'employee_external_id' => 'employeeExternalId',
        'id' => 'id',
        'status' => 'status',
        'location' => 'location',
        'start' => 'start',
        'start_time' => 'startTime',
        'end' => 'end',
        'end_time' => 'endTime',
        'actual_start' => 'actualStart',
        'actual_start_time' => 'actualStartTime',
        'actual_end' => 'actualEnd',
        'actual_end_time' => 'actualEndTime',
        'time_variance' => 'timeVariance',
        'formatted_time_variance' => 'formattedTimeVariance',
        'duration_excluding_breaks' => 'durationExcludingBreaks',
        'duration' => 'duration',
        'units' => 'units',
        'unit_type' => 'unitType',
        'work_type' => 'workType',
        'shift_conditions' => 'shiftConditions',
        'number_of_breaks' => 'numberOfBreaks',
        'break_duration' => 'breakDuration',
        'comments' => 'comments',
        'consolidated_with_timesheet_line_id' => 'consolidatedWithTimesheetLineId',
        'reviewed_by' => 'reviewedBy',
        'gross' => 'gross',
        'net_earnings' => 'netEarnings',
        'employer_liabilities' => 'employerLiabilities',
        'total_cost' => 'totalCost',
        'total_cost_variance' => 'totalCostVariance',
        'date_created' => 'dateCreated',
        'date_reviewed' => 'dateReviewed',
        'shift_condition_short_codes' => 'shiftConditionShortCodes',
        'breaks' => 'breaks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super' => 'setSuper',
        'payg' => 'setPayg',
        'classification' => 'setClassification',
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'employee_external_id' => 'setEmployeeExternalId',
        'id' => 'setId',
        'status' => 'setStatus',
        'location' => 'setLocation',
        'start' => 'setStart',
        'start_time' => 'setStartTime',
        'end' => 'setEnd',
        'end_time' => 'setEndTime',
        'actual_start' => 'setActualStart',
        'actual_start_time' => 'setActualStartTime',
        'actual_end' => 'setActualEnd',
        'actual_end_time' => 'setActualEndTime',
        'time_variance' => 'setTimeVariance',
        'formatted_time_variance' => 'setFormattedTimeVariance',
        'duration_excluding_breaks' => 'setDurationExcludingBreaks',
        'duration' => 'setDuration',
        'units' => 'setUnits',
        'unit_type' => 'setUnitType',
        'work_type' => 'setWorkType',
        'shift_conditions' => 'setShiftConditions',
        'number_of_breaks' => 'setNumberOfBreaks',
        'break_duration' => 'setBreakDuration',
        'comments' => 'setComments',
        'consolidated_with_timesheet_line_id' => 'setConsolidatedWithTimesheetLineId',
        'reviewed_by' => 'setReviewedBy',
        'gross' => 'setGross',
        'net_earnings' => 'setNetEarnings',
        'employer_liabilities' => 'setEmployerLiabilities',
        'total_cost' => 'setTotalCost',
        'total_cost_variance' => 'setTotalCostVariance',
        'date_created' => 'setDateCreated',
        'date_reviewed' => 'setDateReviewed',
        'shift_condition_short_codes' => 'setShiftConditionShortCodes',
        'breaks' => 'setBreaks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super' => 'getSuper',
        'payg' => 'getPayg',
        'classification' => 'getClassification',
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'employee_external_id' => 'getEmployeeExternalId',
        'id' => 'getId',
        'status' => 'getStatus',
        'location' => 'getLocation',
        'start' => 'getStart',
        'start_time' => 'getStartTime',
        'end' => 'getEnd',
        'end_time' => 'getEndTime',
        'actual_start' => 'getActualStart',
        'actual_start_time' => 'getActualStartTime',
        'actual_end' => 'getActualEnd',
        'actual_end_time' => 'getActualEndTime',
        'time_variance' => 'getTimeVariance',
        'formatted_time_variance' => 'getFormattedTimeVariance',
        'duration_excluding_breaks' => 'getDurationExcludingBreaks',
        'duration' => 'getDuration',
        'units' => 'getUnits',
        'unit_type' => 'getUnitType',
        'work_type' => 'getWorkType',
        'shift_conditions' => 'getShiftConditions',
        'number_of_breaks' => 'getNumberOfBreaks',
        'break_duration' => 'getBreakDuration',
        'comments' => 'getComments',
        'consolidated_with_timesheet_line_id' => 'getConsolidatedWithTimesheetLineId',
        'reviewed_by' => 'getReviewedBy',
        'gross' => 'getGross',
        'net_earnings' => 'getNetEarnings',
        'employer_liabilities' => 'getEmployerLiabilities',
        'total_cost' => 'getTotalCost',
        'total_cost_variance' => 'getTotalCostVariance',
        'date_created' => 'getDateCreated',
        'date_reviewed' => 'getDateReviewed',
        'shift_condition_short_codes' => 'getShiftConditionShortCodes',
        'breaks' => 'getBreaks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super'] = isset($data['super']) ? $data['super'] : null;
        $this->container['payg'] = isset($data['payg']) ? $data['payg'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['employee_external_id'] = isset($data['employee_external_id']) ? $data['employee_external_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['actual_start'] = isset($data['actual_start']) ? $data['actual_start'] : null;
        $this->container['actual_start_time'] = isset($data['actual_start_time']) ? $data['actual_start_time'] : null;
        $this->container['actual_end'] = isset($data['actual_end']) ? $data['actual_end'] : null;
        $this->container['actual_end_time'] = isset($data['actual_end_time']) ? $data['actual_end_time'] : null;
        $this->container['time_variance'] = isset($data['time_variance']) ? $data['time_variance'] : null;
        $this->container['formatted_time_variance'] = isset($data['formatted_time_variance']) ? $data['formatted_time_variance'] : null;
        $this->container['duration_excluding_breaks'] = isset($data['duration_excluding_breaks']) ? $data['duration_excluding_breaks'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['work_type'] = isset($data['work_type']) ? $data['work_type'] : null;
        $this->container['shift_conditions'] = isset($data['shift_conditions']) ? $data['shift_conditions'] : null;
        $this->container['number_of_breaks'] = isset($data['number_of_breaks']) ? $data['number_of_breaks'] : null;
        $this->container['break_duration'] = isset($data['break_duration']) ? $data['break_duration'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['consolidated_with_timesheet_line_id'] = isset($data['consolidated_with_timesheet_line_id']) ? $data['consolidated_with_timesheet_line_id'] : null;
        $this->container['reviewed_by'] = isset($data['reviewed_by']) ? $data['reviewed_by'] : null;
        $this->container['gross'] = isset($data['gross']) ? $data['gross'] : null;
        $this->container['net_earnings'] = isset($data['net_earnings']) ? $data['net_earnings'] : null;
        $this->container['employer_liabilities'] = isset($data['employer_liabilities']) ? $data['employer_liabilities'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['total_cost_variance'] = isset($data['total_cost_variance']) ? $data['total_cost_variance'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_reviewed'] = isset($data['date_reviewed']) ? $data['date_reviewed'] : null;
        $this->container['shift_condition_short_codes'] = isset($data['shift_condition_short_codes']) ? $data['shift_condition_short_codes'] : null;
        $this->container['breaks'] = isset($data['breaks']) ? $data['breaks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets super
     *
     * @return double
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param double $super 
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets payg
     *
     * @return double
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param double $payg 
     *
     * @return $this
     */
    public function setPayg($payg)
    {
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string $classification 
     *
     * @return $this
     */
    public function setClassification($classification)
    {
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id 
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name 
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname 
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string $employee_external_id 
     *
     * @return $this
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location 
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start 
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time 
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end 
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time 
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets actual_start
     *
     * @return \DateTime
     */
    public function getActualStart()
    {
        return $this->container['actual_start'];
    }

    /**
     * Sets actual_start
     *
     * @param \DateTime $actual_start 
     *
     * @return $this
     */
    public function setActualStart($actual_start)
    {
        $this->container['actual_start'] = $actual_start;

        return $this;
    }

    /**
     * Gets actual_start_time
     *
     * @return string
     */
    public function getActualStartTime()
    {
        return $this->container['actual_start_time'];
    }

    /**
     * Sets actual_start_time
     *
     * @param string $actual_start_time 
     *
     * @return $this
     */
    public function setActualStartTime($actual_start_time)
    {
        $this->container['actual_start_time'] = $actual_start_time;

        return $this;
    }

    /**
     * Gets actual_end
     *
     * @return \DateTime
     */
    public function getActualEnd()
    {
        return $this->container['actual_end'];
    }

    /**
     * Sets actual_end
     *
     * @param \DateTime $actual_end 
     *
     * @return $this
     */
    public function setActualEnd($actual_end)
    {
        $this->container['actual_end'] = $actual_end;

        return $this;
    }

    /**
     * Gets actual_end_time
     *
     * @return string
     */
    public function getActualEndTime()
    {
        return $this->container['actual_end_time'];
    }

    /**
     * Sets actual_end_time
     *
     * @param string $actual_end_time 
     *
     * @return $this
     */
    public function setActualEndTime($actual_end_time)
    {
        $this->container['actual_end_time'] = $actual_end_time;

        return $this;
    }

    /**
     * Gets time_variance
     *
     * @return string
     */
    public function getTimeVariance()
    {
        return $this->container['time_variance'];
    }

    /**
     * Sets time_variance
     *
     * @param string $time_variance 
     *
     * @return $this
     */
    public function setTimeVariance($time_variance)
    {
        $this->container['time_variance'] = $time_variance;

        return $this;
    }

    /**
     * Gets formatted_time_variance
     *
     * @return string
     */
    public function getFormattedTimeVariance()
    {
        return $this->container['formatted_time_variance'];
    }

    /**
     * Sets formatted_time_variance
     *
     * @param string $formatted_time_variance 
     *
     * @return $this
     */
    public function setFormattedTimeVariance($formatted_time_variance)
    {
        $this->container['formatted_time_variance'] = $formatted_time_variance;

        return $this;
    }

    /**
     * Gets duration_excluding_breaks
     *
     * @return string
     */
    public function getDurationExcludingBreaks()
    {
        return $this->container['duration_excluding_breaks'];
    }

    /**
     * Sets duration_excluding_breaks
     *
     * @param string $duration_excluding_breaks 
     *
     * @return $this
     */
    public function setDurationExcludingBreaks($duration_excluding_breaks)
    {
        $this->container['duration_excluding_breaks'] = $duration_excluding_breaks;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration 
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units 
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type 
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets work_type
     *
     * @return string
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     *
     * @param string $work_type 
     *
     * @return $this
     */
    public function setWorkType($work_type)
    {
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return string
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param string $shift_conditions 
     *
     * @return $this
     */
    public function setShiftConditions($shift_conditions)
    {
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets number_of_breaks
     *
     * @return int
     */
    public function getNumberOfBreaks()
    {
        return $this->container['number_of_breaks'];
    }

    /**
     * Sets number_of_breaks
     *
     * @param int $number_of_breaks 
     *
     * @return $this
     */
    public function setNumberOfBreaks($number_of_breaks)
    {
        $this->container['number_of_breaks'] = $number_of_breaks;

        return $this;
    }

    /**
     * Gets break_duration
     *
     * @return string
     */
    public function getBreakDuration()
    {
        return $this->container['break_duration'];
    }

    /**
     * Sets break_duration
     *
     * @param string $break_duration 
     *
     * @return $this
     */
    public function setBreakDuration($break_duration)
    {
        $this->container['break_duration'] = $break_duration;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments 
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets consolidated_with_timesheet_line_id
     *
     * @return int
     */
    public function getConsolidatedWithTimesheetLineId()
    {
        return $this->container['consolidated_with_timesheet_line_id'];
    }

    /**
     * Sets consolidated_with_timesheet_line_id
     *
     * @param int $consolidated_with_timesheet_line_id 
     *
     * @return $this
     */
    public function setConsolidatedWithTimesheetLineId($consolidated_with_timesheet_line_id)
    {
        $this->container['consolidated_with_timesheet_line_id'] = $consolidated_with_timesheet_line_id;

        return $this;
    }

    /**
     * Gets reviewed_by
     *
     * @return string
     */
    public function getReviewedBy()
    {
        return $this->container['reviewed_by'];
    }

    /**
     * Sets reviewed_by
     *
     * @param string $reviewed_by 
     *
     * @return $this
     */
    public function setReviewedBy($reviewed_by)
    {
        $this->container['reviewed_by'] = $reviewed_by;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return double
     */
    public function getGross()
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param double $gross 
     *
     * @return $this
     */
    public function setGross($gross)
    {
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return double
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param double $net_earnings 
     *
     * @return $this
     */
    public function setNetEarnings($net_earnings)
    {
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets employer_liabilities
     *
     * @return double
     */
    public function getEmployerLiabilities()
    {
        return $this->container['employer_liabilities'];
    }

    /**
     * Sets employer_liabilities
     *
     * @param double $employer_liabilities 
     *
     * @return $this
     */
    public function setEmployerLiabilities($employer_liabilities)
    {
        $this->container['employer_liabilities'] = $employer_liabilities;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost 
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_cost_variance
     *
     * @return double
     */
    public function getTotalCostVariance()
    {
        return $this->container['total_cost_variance'];
    }

    /**
     * Sets total_cost_variance
     *
     * @param double $total_cost_variance 
     *
     * @return $this
     */
    public function setTotalCostVariance($total_cost_variance)
    {
        $this->container['total_cost_variance'] = $total_cost_variance;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created 
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_reviewed
     *
     * @return \DateTime
     */
    public function getDateReviewed()
    {
        return $this->container['date_reviewed'];
    }

    /**
     * Sets date_reviewed
     *
     * @param \DateTime $date_reviewed 
     *
     * @return $this
     */
    public function setDateReviewed($date_reviewed)
    {
        $this->container['date_reviewed'] = $date_reviewed;

        return $this;
    }

    /**
     * Gets shift_condition_short_codes
     *
     * @return string[]
     */
    public function getShiftConditionShortCodes()
    {
        return $this->container['shift_condition_short_codes'];
    }

    /**
     * Sets shift_condition_short_codes
     *
     * @param string[] $shift_condition_short_codes 
     *
     * @return $this
     */
    public function setShiftConditionShortCodes($shift_condition_short_codes)
    {
        $this->container['shift_condition_short_codes'] = $shift_condition_short_codes;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \Swagger\Client\Model\TimesheetBreakModel[]
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \Swagger\Client\Model\TimesheetBreakModel[] $breaks 
     *
     * @return $this
     */
    public function setBreaks($breaks)
    {
        $this->container['breaks'] = $breaks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


