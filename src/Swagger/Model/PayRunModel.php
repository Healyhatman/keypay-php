<?php
/**
 * PayRunModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayRunModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRunModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRunModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'date_finalised' => '\DateTime',
        'pay_schedule_id' => 'int',
        'pay_period_starting' => '\DateTime',
        'pay_period_ending' => '\DateTime',
        'date_paid' => '\DateTime',
        'is_finalised' => 'bool',
        'pay_slips_published' => 'bool',
        'notation' => 'string',
        'external_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'date_finalised' => 'date-time',
        'pay_schedule_id' => 'int32',
        'pay_period_starting' => 'date-time',
        'pay_period_ending' => 'date-time',
        'date_paid' => 'date-time',
        'is_finalised' => null,
        'pay_slips_published' => null,
        'notation' => null,
        'external_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date_finalised' => 'dateFinalised',
        'pay_schedule_id' => 'payScheduleId',
        'pay_period_starting' => 'payPeriodStarting',
        'pay_period_ending' => 'payPeriodEnding',
        'date_paid' => 'datePaid',
        'is_finalised' => 'isFinalised',
        'pay_slips_published' => 'paySlipsPublished',
        'notation' => 'notation',
        'external_id' => 'externalId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date_finalised' => 'setDateFinalised',
        'pay_schedule_id' => 'setPayScheduleId',
        'pay_period_starting' => 'setPayPeriodStarting',
        'pay_period_ending' => 'setPayPeriodEnding',
        'date_paid' => 'setDatePaid',
        'is_finalised' => 'setIsFinalised',
        'pay_slips_published' => 'setPaySlipsPublished',
        'notation' => 'setNotation',
        'external_id' => 'setExternalId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date_finalised' => 'getDateFinalised',
        'pay_schedule_id' => 'getPayScheduleId',
        'pay_period_starting' => 'getPayPeriodStarting',
        'pay_period_ending' => 'getPayPeriodEnding',
        'date_paid' => 'getDatePaid',
        'is_finalised' => 'getIsFinalised',
        'pay_slips_published' => 'getPaySlipsPublished',
        'notation' => 'getNotation',
        'external_id' => 'getExternalId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date_finalised'] = isset($data['date_finalised']) ? $data['date_finalised'] : null;
        $this->container['pay_schedule_id'] = isset($data['pay_schedule_id']) ? $data['pay_schedule_id'] : null;
        $this->container['pay_period_starting'] = isset($data['pay_period_starting']) ? $data['pay_period_starting'] : null;
        $this->container['pay_period_ending'] = isset($data['pay_period_ending']) ? $data['pay_period_ending'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['is_finalised'] = isset($data['is_finalised']) ? $data['is_finalised'] : null;
        $this->container['pay_slips_published'] = isset($data['pay_slips_published']) ? $data['pay_slips_published'] : null;
        $this->container['notation'] = isset($data['notation']) ? $data['notation'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date_finalised
     *
     * @return \DateTime
     */
    public function getDateFinalised()
    {
        return $this->container['date_finalised'];
    }

    /**
     * Sets date_finalised
     *
     * @param \DateTime $date_finalised
     *
     * @return $this
     */
    public function setDateFinalised($date_finalised)
    {
        $this->container['date_finalised'] = $date_finalised;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int $pay_schedule_id
     *
     * @return $this
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets pay_period_starting
     *
     * @return \DateTime
     */
    public function getPayPeriodStarting()
    {
        return $this->container['pay_period_starting'];
    }

    /**
     * Sets pay_period_starting
     *
     * @param \DateTime $pay_period_starting
     *
     * @return $this
     */
    public function setPayPeriodStarting($pay_period_starting)
    {
        $this->container['pay_period_starting'] = $pay_period_starting;

        return $this;
    }

    /**
     * Gets pay_period_ending
     *
     * @return \DateTime
     */
    public function getPayPeriodEnding()
    {
        return $this->container['pay_period_ending'];
    }

    /**
     * Sets pay_period_ending
     *
     * @param \DateTime $pay_period_ending
     *
     * @return $this
     */
    public function setPayPeriodEnding($pay_period_ending)
    {
        $this->container['pay_period_ending'] = $pay_period_ending;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param \DateTime $date_paid
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets is_finalised
     *
     * @return bool
     */
    public function getIsFinalised()
    {
        return $this->container['is_finalised'];
    }

    /**
     * Sets is_finalised
     *
     * @param bool $is_finalised
     *
     * @return $this
     */
    public function setIsFinalised($is_finalised)
    {
        $this->container['is_finalised'] = $is_finalised;

        return $this;
    }

    /**
     * Gets pay_slips_published
     *
     * @return bool
     */
    public function getPaySlipsPublished()
    {
        return $this->container['pay_slips_published'];
    }

    /**
     * Sets pay_slips_published
     *
     * @param bool $pay_slips_published
     *
     * @return $this
     */
    public function setPaySlipsPublished($pay_slips_published)
    {
        $this->container['pay_slips_published'] = $pay_slips_published;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string $notation
     *
     * @return $this
     */
    public function setNotation($notation)
    {
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
