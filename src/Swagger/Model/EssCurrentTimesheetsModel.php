<?php
/**
 * EssCurrentTimesheetsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * EssCurrentTimesheetsModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EssCurrentTimesheetsModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EssCurrentTimesheetsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'period_starting' => '\DateTime',
        'period_ending' => '\DateTime',
        'submitted_count' => 'int',
        'approved_count' => 'int',
        'rejected_count' => 'int',
        'processed_count' => 'int',
        'duration_in_minutes' => 'double',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'period_starting' => 'date-time',
        'period_ending' => 'date-time',
        'submitted_count' => 'int32',
        'approved_count' => 'int32',
        'rejected_count' => 'int32',
        'processed_count' => 'int32',
        'duration_in_minutes' => 'double',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period_starting' => 'periodStarting',
        'period_ending' => 'periodEnding',
        'submitted_count' => 'submittedCount',
        'approved_count' => 'approvedCount',
        'rejected_count' => 'rejectedCount',
        'processed_count' => 'processedCount',
        'duration_in_minutes' => 'durationInMinutes',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period_starting' => 'setPeriodStarting',
        'period_ending' => 'setPeriodEnding',
        'submitted_count' => 'setSubmittedCount',
        'approved_count' => 'setApprovedCount',
        'rejected_count' => 'setRejectedCount',
        'processed_count' => 'setProcessedCount',
        'duration_in_minutes' => 'setDurationInMinutes',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period_starting' => 'getPeriodStarting',
        'period_ending' => 'getPeriodEnding',
        'submitted_count' => 'getSubmittedCount',
        'approved_count' => 'getApprovedCount',
        'rejected_count' => 'getRejectedCount',
        'processed_count' => 'getProcessedCount',
        'duration_in_minutes' => 'getDurationInMinutes',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period_starting'] = isset($data['period_starting']) ? $data['period_starting'] : null;
        $this->container['period_ending'] = isset($data['period_ending']) ? $data['period_ending'] : null;
        $this->container['submitted_count'] = isset($data['submitted_count']) ? $data['submitted_count'] : null;
        $this->container['approved_count'] = isset($data['approved_count']) ? $data['approved_count'] : null;
        $this->container['rejected_count'] = isset($data['rejected_count']) ? $data['rejected_count'] : null;
        $this->container['processed_count'] = isset($data['processed_count']) ? $data['processed_count'] : null;
        $this->container['duration_in_minutes'] = isset($data['duration_in_minutes']) ? $data['duration_in_minutes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets period_starting
     *
     * @return \DateTime
     */
    public function getPeriodStarting()
    {
        return $this->container['period_starting'];
    }

    /**
     * Sets period_starting
     *
     * @param \DateTime $period_starting
     *
     * @return $this
     */
    public function setPeriodStarting($period_starting)
    {
        $this->container['period_starting'] = $period_starting;

        return $this;
    }

    /**
     * Gets period_ending
     *
     * @return \DateTime
     */
    public function getPeriodEnding()
    {
        return $this->container['period_ending'];
    }

    /**
     * Sets period_ending
     *
     * @param \DateTime $period_ending
     *
     * @return $this
     */
    public function setPeriodEnding($period_ending)
    {
        $this->container['period_ending'] = $period_ending;

        return $this;
    }

    /**
     * Gets submitted_count
     *
     * @return int
     */
    public function getSubmittedCount()
    {
        return $this->container['submitted_count'];
    }

    /**
     * Sets submitted_count
     *
     * @param int $submitted_count
     *
     * @return $this
     */
    public function setSubmittedCount($submitted_count)
    {
        $this->container['submitted_count'] = $submitted_count;

        return $this;
    }

    /**
     * Gets approved_count
     *
     * @return int
     */
    public function getApprovedCount()
    {
        return $this->container['approved_count'];
    }

    /**
     * Sets approved_count
     *
     * @param int $approved_count
     *
     * @return $this
     */
    public function setApprovedCount($approved_count)
    {
        $this->container['approved_count'] = $approved_count;

        return $this;
    }

    /**
     * Gets rejected_count
     *
     * @return int
     */
    public function getRejectedCount()
    {
        return $this->container['rejected_count'];
    }

    /**
     * Sets rejected_count
     *
     * @param int $rejected_count
     *
     * @return $this
     */
    public function setRejectedCount($rejected_count)
    {
        $this->container['rejected_count'] = $rejected_count;

        return $this;
    }

    /**
     * Gets processed_count
     *
     * @return int
     */
    public function getProcessedCount()
    {
        return $this->container['processed_count'];
    }

    /**
     * Sets processed_count
     *
     * @param int $processed_count
     *
     * @return $this
     */
    public function setProcessedCount($processed_count)
    {
        $this->container['processed_count'] = $processed_count;

        return $this;
    }

    /**
     * Gets duration_in_minutes
     *
     * @return float
     */
    public function getDurationInMinutes()
    {
        return $this->container['duration_in_minutes'];
    }

    /**
     * Sets duration_in_minutes
     *
     * @param float $duration_in_minutes
     *
     * @return $this
     */
    public function setDurationInMinutes($duration_in_minutes)
    {
        $this->container['duration_in_minutes'] = $duration_in_minutes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
