<?php
/**
 * WhiteLabelBrandingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * WhiteLabelBrandingModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WhiteLabelBrandingModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WhiteLabelBrandingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'logo_url' => 'string',
        'background_image_url' => 'string',
        'background_colour' => 'string',
        'text_colour' => 'string',
        'text_hover_colour' => 'string',
        'text_secondary_colour' => 'string',
        'dark_mode_logo_url' => 'string',
        'dark_mode_background_colour' => 'string',
        'dark_mode_text_colour' => 'string',
        'dark_mode_text_secondary_colour' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'logo_url' => null,
        'background_image_url' => null,
        'background_colour' => null,
        'text_colour' => null,
        'text_hover_colour' => null,
        'text_secondary_colour' => null,
        'dark_mode_logo_url' => null,
        'dark_mode_background_colour' => null,
        'dark_mode_text_colour' => null,
        'dark_mode_text_secondary_colour' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'logo_url' => 'logoUrl',
        'background_image_url' => 'backgroundImageUrl',
        'background_colour' => 'backgroundColour',
        'text_colour' => 'textColour',
        'text_hover_colour' => 'textHoverColour',
        'text_secondary_colour' => 'textSecondaryColour',
        'dark_mode_logo_url' => 'darkModeLogoUrl',
        'dark_mode_background_colour' => 'darkModeBackgroundColour',
        'dark_mode_text_colour' => 'darkModeTextColour',
        'dark_mode_text_secondary_colour' => 'darkModeTextSecondaryColour',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'logo_url' => 'setLogoUrl',
        'background_image_url' => 'setBackgroundImageUrl',
        'background_colour' => 'setBackgroundColour',
        'text_colour' => 'setTextColour',
        'text_hover_colour' => 'setTextHoverColour',
        'text_secondary_colour' => 'setTextSecondaryColour',
        'dark_mode_logo_url' => 'setDarkModeLogoUrl',
        'dark_mode_background_colour' => 'setDarkModeBackgroundColour',
        'dark_mode_text_colour' => 'setDarkModeTextColour',
        'dark_mode_text_secondary_colour' => 'setDarkModeTextSecondaryColour',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'logo_url' => 'getLogoUrl',
        'background_image_url' => 'getBackgroundImageUrl',
        'background_colour' => 'getBackgroundColour',
        'text_colour' => 'getTextColour',
        'text_hover_colour' => 'getTextHoverColour',
        'text_secondary_colour' => 'getTextSecondaryColour',
        'dark_mode_logo_url' => 'getDarkModeLogoUrl',
        'dark_mode_background_colour' => 'getDarkModeBackgroundColour',
        'dark_mode_text_colour' => 'getDarkModeTextColour',
        'dark_mode_text_secondary_colour' => 'getDarkModeTextSecondaryColour',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['background_image_url'] = isset($data['background_image_url']) ? $data['background_image_url'] : null;
        $this->container['background_colour'] = isset($data['background_colour']) ? $data['background_colour'] : null;
        $this->container['text_colour'] = isset($data['text_colour']) ? $data['text_colour'] : null;
        $this->container['text_hover_colour'] = isset($data['text_hover_colour']) ? $data['text_hover_colour'] : null;
        $this->container['text_secondary_colour'] = isset($data['text_secondary_colour']) ? $data['text_secondary_colour'] : null;
        $this->container['dark_mode_logo_url'] = isset($data['dark_mode_logo_url']) ? $data['dark_mode_logo_url'] : null;
        $this->container['dark_mode_background_colour'] = isset($data['dark_mode_background_colour']) ? $data['dark_mode_background_colour'] : null;
        $this->container['dark_mode_text_colour'] = isset($data['dark_mode_text_colour']) ? $data['dark_mode_text_colour'] : null;
        $this->container['dark_mode_text_secondary_colour'] = isset($data['dark_mode_text_secondary_colour']) ? $data['dark_mode_text_secondary_colour'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets background_image_url
     *
     * @return string
     */
    public function getBackgroundImageUrl()
    {
        return $this->container['background_image_url'];
    }

    /**
     * Sets background_image_url
     *
     * @param string $background_image_url
     *
     * @return $this
     */
    public function setBackgroundImageUrl($background_image_url)
    {
        $this->container['background_image_url'] = $background_image_url;

        return $this;
    }

    /**
     * Gets background_colour
     *
     * @return string
     */
    public function getBackgroundColour()
    {
        return $this->container['background_colour'];
    }

    /**
     * Sets background_colour
     *
     * @param string $background_colour
     *
     * @return $this
     */
    public function setBackgroundColour($background_colour)
    {
        $this->container['background_colour'] = $background_colour;

        return $this;
    }

    /**
     * Gets text_colour
     *
     * @return string
     */
    public function getTextColour()
    {
        return $this->container['text_colour'];
    }

    /**
     * Sets text_colour
     *
     * @param string $text_colour
     *
     * @return $this
     */
    public function setTextColour($text_colour)
    {
        $this->container['text_colour'] = $text_colour;

        return $this;
    }

    /**
     * Gets text_hover_colour
     *
     * @return string
     */
    public function getTextHoverColour()
    {
        return $this->container['text_hover_colour'];
    }

    /**
     * Sets text_hover_colour
     *
     * @param string $text_hover_colour
     *
     * @return $this
     */
    public function setTextHoverColour($text_hover_colour)
    {
        $this->container['text_hover_colour'] = $text_hover_colour;

        return $this;
    }

    /**
     * Gets text_secondary_colour
     *
     * @return string
     */
    public function getTextSecondaryColour()
    {
        return $this->container['text_secondary_colour'];
    }

    /**
     * Sets text_secondary_colour
     *
     * @param string $text_secondary_colour
     *
     * @return $this
     */
    public function setTextSecondaryColour($text_secondary_colour)
    {
        $this->container['text_secondary_colour'] = $text_secondary_colour;

        return $this;
    }

    /**
     * Gets dark_mode_logo_url
     *
     * @return string
     */
    public function getDarkModeLogoUrl()
    {
        return $this->container['dark_mode_logo_url'];
    }

    /**
     * Sets dark_mode_logo_url
     *
     * @param string $dark_mode_logo_url
     *
     * @return $this
     */
    public function setDarkModeLogoUrl($dark_mode_logo_url)
    {
        $this->container['dark_mode_logo_url'] = $dark_mode_logo_url;

        return $this;
    }

    /**
     * Gets dark_mode_background_colour
     *
     * @return string
     */
    public function getDarkModeBackgroundColour()
    {
        return $this->container['dark_mode_background_colour'];
    }

    /**
     * Sets dark_mode_background_colour
     *
     * @param string $dark_mode_background_colour
     *
     * @return $this
     */
    public function setDarkModeBackgroundColour($dark_mode_background_colour)
    {
        $this->container['dark_mode_background_colour'] = $dark_mode_background_colour;

        return $this;
    }

    /**
     * Gets dark_mode_text_colour
     *
     * @return string
     */
    public function getDarkModeTextColour()
    {
        return $this->container['dark_mode_text_colour'];
    }

    /**
     * Sets dark_mode_text_colour
     *
     * @param string $dark_mode_text_colour
     *
     * @return $this
     */
    public function setDarkModeTextColour($dark_mode_text_colour)
    {
        $this->container['dark_mode_text_colour'] = $dark_mode_text_colour;

        return $this;
    }

    /**
     * Gets dark_mode_text_secondary_colour
     *
     * @return string
     */
    public function getDarkModeTextSecondaryColour()
    {
        return $this->container['dark_mode_text_secondary_colour'];
    }

    /**
     * Sets dark_mode_text_secondary_colour
     *
     * @param string $dark_mode_text_secondary_colour
     *
     * @return $this
     */
    public function setDarkModeTextSecondaryColour($dark_mode_text_secondary_colour)
    {
        $this->container['dark_mode_text_secondary_colour'] = $dark_mode_text_secondary_colour;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
