<?php
/**
 * AuTimesheetReferenceData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuTimesheetReferenceData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuTimesheetReferenceData implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuTimesheetReferenceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'classifications' => '\Swagger\Client\Model\ClassificationSelectModel[]',
        'work_types' => '\Swagger\Client\Model\AuEssWorkTypeModel[]',
        'shift_conditions' => '\Swagger\Client\Model\AuEssWorkTypeModel[]',
        'locations' => '\Swagger\Client\Model\LocationModel[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'classifications' => null,
        'work_types' => null,
        'shift_conditions' => null,
        'locations' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classifications' => 'classifications',
        'work_types' => 'workTypes',
        'shift_conditions' => 'shiftConditions',
        'locations' => 'locations',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classifications' => 'setClassifications',
        'work_types' => 'setWorkTypes',
        'shift_conditions' => 'setShiftConditions',
        'locations' => 'setLocations',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classifications' => 'getClassifications',
        'work_types' => 'getWorkTypes',
        'shift_conditions' => 'getShiftConditions',
        'locations' => 'getLocations',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['classifications'] = isset($data['classifications']) ? $data['classifications'] : null;
        $this->container['work_types'] = isset($data['work_types']) ? $data['work_types'] : null;
        $this->container['shift_conditions'] = isset($data['shift_conditions']) ? $data['shift_conditions'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets classifications
     *
     * @return \Swagger\Client\Model\ClassificationSelectModel[]
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \Swagger\Client\Model\ClassificationSelectModel[] $classifications
     *
     * @return $this
     */
    public function setClassifications($classifications)
    {
        $this->container['classifications'] = $classifications;

        return $this;
    }

    /**
     * Gets work_types
     *
     * @return \Swagger\Client\Model\AuEssWorkTypeModel[]
     */
    public function getWorkTypes()
    {
        return $this->container['work_types'];
    }

    /**
     * Sets work_types
     *
     * @param \Swagger\Client\Model\AuEssWorkTypeModel[] $work_types
     *
     * @return $this
     */
    public function setWorkTypes($work_types)
    {
        $this->container['work_types'] = $work_types;

        return $this;
    }

    /**
     * Gets shift_conditions
     *
     * @return \Swagger\Client\Model\AuEssWorkTypeModel[]
     */
    public function getShiftConditions()
    {
        return $this->container['shift_conditions'];
    }

    /**
     * Sets shift_conditions
     *
     * @param \Swagger\Client\Model\AuEssWorkTypeModel[] $shift_conditions
     *
     * @return $this
     */
    public function setShiftConditions($shift_conditions)
    {
        $this->container['shift_conditions'] = $shift_conditions;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\LocationModel[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\LocationModel[] $locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
