<?php
/**
 * InvoiceLineItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceLineItemModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLineItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLineItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abn' => 'string',
        'business_number' => 'string',
        'business_id' => 'int',
        'billing_plan' => 'string',
        'description' => 'string',
        'unit_price_including_gst' => 'double',
        'quantity' => 'double',
        'total_including_gst' => 'double',
        'details' => '\Swagger\Client\Model\InvoiceLineItemDetailModel[]',
        'white_label_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abn' => null,
        'business_number' => null,
        'business_id' => 'int32',
        'billing_plan' => null,
        'description' => null,
        'unit_price_including_gst' => 'double',
        'quantity' => 'double',
        'total_including_gst' => 'double',
        'details' => null,
        'white_label_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abn' => 'abn',
        'business_number' => 'businessNumber',
        'business_id' => 'businessId',
        'billing_plan' => 'billingPlan',
        'description' => 'description',
        'unit_price_including_gst' => 'unitPriceIncludingGst',
        'quantity' => 'quantity',
        'total_including_gst' => 'totalIncludingGst',
        'details' => 'details',
        'white_label_name' => 'whiteLabelName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abn' => 'setAbn',
        'business_number' => 'setBusinessNumber',
        'business_id' => 'setBusinessId',
        'billing_plan' => 'setBillingPlan',
        'description' => 'setDescription',
        'unit_price_including_gst' => 'setUnitPriceIncludingGst',
        'quantity' => 'setQuantity',
        'total_including_gst' => 'setTotalIncludingGst',
        'details' => 'setDetails',
        'white_label_name' => 'setWhiteLabelName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abn' => 'getAbn',
        'business_number' => 'getBusinessNumber',
        'business_id' => 'getBusinessId',
        'billing_plan' => 'getBillingPlan',
        'description' => 'getDescription',
        'unit_price_including_gst' => 'getUnitPriceIncludingGst',
        'quantity' => 'getQuantity',
        'total_including_gst' => 'getTotalIncludingGst',
        'details' => 'getDetails',
        'white_label_name' => 'getWhiteLabelName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abn'] = isset($data['abn']) ? $data['abn'] : null;
        $this->container['business_number'] = isset($data['business_number']) ? $data['business_number'] : null;
        $this->container['business_id'] = isset($data['business_id']) ? $data['business_id'] : null;
        $this->container['billing_plan'] = isset($data['billing_plan']) ? $data['billing_plan'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['unit_price_including_gst'] = isset($data['unit_price_including_gst']) ? $data['unit_price_including_gst'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['total_including_gst'] = isset($data['total_including_gst']) ? $data['total_including_gst'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['white_label_name'] = isset($data['white_label_name']) ? $data['white_label_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abn
     *
     * @return string
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string $abn 
     *
     * @return $this
     */
    public function setAbn($abn)
    {
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets business_number
     *
     * @return string
     */
    public function getBusinessNumber()
    {
        return $this->container['business_number'];
    }

    /**
     * Sets business_number
     *
     * @param string $business_number 
     *
     * @return $this
     */
    public function setBusinessNumber($business_number)
    {
        $this->container['business_number'] = $business_number;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return int
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param int $business_id 
     *
     * @return $this
     */
    public function setBusinessId($business_id)
    {
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string $billing_plan 
     *
     * @return $this
     */
    public function setBillingPlan($billing_plan)
    {
        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_price_including_gst
     *
     * @return double
     */
    public function getUnitPriceIncludingGst()
    {
        return $this->container['unit_price_including_gst'];
    }

    /**
     * Sets unit_price_including_gst
     *
     * @param double $unit_price_including_gst 
     *
     * @return $this
     */
    public function setUnitPriceIncludingGst($unit_price_including_gst)
    {
        $this->container['unit_price_including_gst'] = $unit_price_including_gst;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity 
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_including_gst
     *
     * @return double
     */
    public function getTotalIncludingGst()
    {
        return $this->container['total_including_gst'];
    }

    /**
     * Sets total_including_gst
     *
     * @param double $total_including_gst 
     *
     * @return $this
     */
    public function setTotalIncludingGst($total_including_gst)
    {
        $this->container['total_including_gst'] = $total_including_gst;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\InvoiceLineItemDetailModel[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\InvoiceLineItemDetailModel[] $details 
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets white_label_name
     *
     * @return string
     */
    public function getWhiteLabelName()
    {
        return $this->container['white_label_name'];
    }

    /**
     * Sets white_label_name
     *
     * @param string $white_label_name 
     *
     * @return $this
     */
    public function setWhiteLabelName($white_label_name)
    {
        $this->container['white_label_name'] = $white_label_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


