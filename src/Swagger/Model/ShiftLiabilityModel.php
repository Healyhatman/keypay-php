<?php
/**
 * ShiftLiabilityModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * ShiftLiabilityModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShiftLiabilityModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShiftLiabilityModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'liability_category_name' => 'string',
        'liability_category_id' => 'int',
        'include_in_shift_cost' => 'bool',
        'amount' => 'double',
        'option' => 'string',
        'cost' => 'double',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'liability_category_name' => null,
        'liability_category_id' => 'int32',
        'include_in_shift_cost' => null,
        'amount' => 'double',
        'option' => null,
        'cost' => 'double',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'liability_category_name' => 'liabilityCategoryName',
        'liability_category_id' => 'liabilityCategoryId',
        'include_in_shift_cost' => 'includeInShiftCost',
        'amount' => 'amount',
        'option' => 'option',
        'cost' => 'cost',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'liability_category_name' => 'setLiabilityCategoryName',
        'liability_category_id' => 'setLiabilityCategoryId',
        'include_in_shift_cost' => 'setIncludeInShiftCost',
        'amount' => 'setAmount',
        'option' => 'setOption',
        'cost' => 'setCost',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'liability_category_name' => 'getLiabilityCategoryName',
        'liability_category_id' => 'getLiabilityCategoryId',
        'include_in_shift_cost' => 'getIncludeInShiftCost',
        'amount' => 'getAmount',
        'option' => 'getOption',
        'cost' => 'getCost',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const OPTION_FIXED = 'Fixed';
    public const OPTION_PER_HOUR_WORKED = 'PerHourWorked';
    public const OPTION_PERCENTAGE_OF_SHIFT_COST = 'PercentageOfShiftCost';
    public const OPTION_PER_SHIFT_UNIT = 'PerShiftUnit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOptionAllowableValues()
    {
        return [
            self::OPTION_FIXED,
            self::OPTION_PER_HOUR_WORKED,
            self::OPTION_PERCENTAGE_OF_SHIFT_COST,
            self::OPTION_PER_SHIFT_UNIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['liability_category_name'] = isset($data['liability_category_name']) ? $data['liability_category_name'] : null;
        $this->container['liability_category_id'] = isset($data['liability_category_id']) ? $data['liability_category_id'] : null;
        $this->container['include_in_shift_cost'] = isset($data['include_in_shift_cost']) ? $data['include_in_shift_cost'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['option'] = isset($data['option']) ? $data['option'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOptionAllowableValues();
        if (! is_null($this->container['option']) && ! in_array($this->container['option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets liability_category_name
     *
     * @return string
     */
    public function getLiabilityCategoryName()
    {
        return $this->container['liability_category_name'];
    }

    /**
     * Sets liability_category_name
     *
     * @param string $liability_category_name
     *
     * @return $this
     */
    public function setLiabilityCategoryName($liability_category_name)
    {
        $this->container['liability_category_name'] = $liability_category_name;

        return $this;
    }

    /**
     * Gets liability_category_id
     *
     * @return int
     */
    public function getLiabilityCategoryId()
    {
        return $this->container['liability_category_id'];
    }

    /**
     * Sets liability_category_id
     *
     * @param int $liability_category_id
     *
     * @return $this
     */
    public function setLiabilityCategoryId($liability_category_id)
    {
        $this->container['liability_category_id'] = $liability_category_id;

        return $this;
    }

    /**
     * Gets include_in_shift_cost
     *
     * @return bool
     */
    public function getIncludeInShiftCost()
    {
        return $this->container['include_in_shift_cost'];
    }

    /**
     * Sets include_in_shift_cost
     *
     * @param bool $include_in_shift_cost
     *
     * @return $this
     */
    public function setIncludeInShiftCost($include_in_shift_cost)
    {
        $this->container['include_in_shift_cost'] = $include_in_shift_cost;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets option
     *
     * @return string
     */
    public function getOption()
    {
        return $this->container['option'];
    }

    /**
     * Sets option
     *
     * @param string $option
     *
     * @return $this
     */
    public function setOption($option)
    {
        $allowedValues = $this->getOptionAllowableValues();
        if (! is_null($option) && ! in_array($option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['option'] = $option;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
