<?php
/**
 * LeaveRequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * LeaveRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeaveRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auBusinessHoursLeaveRequestListLeaveRequests
     *
     * List Leave Requests
     *
     * @param  int $business_id business_id (required)
     * @param  string $filter_status  (optional)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  int $filter_leave_category_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  string $filter_group_by  (optional)
     * @param  bool $filter_restrict_overlapping_leave  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel[]
     */
    public function auBusinessHoursLeaveRequestListLeaveRequests($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null)
    {
        list($response) = $this->auBusinessHoursLeaveRequestListLeaveRequestsWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave);

        return $response;
    }

    /**
     * Operation auBusinessHoursLeaveRequestListLeaveRequestsWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  int $business_id (required)
     * @param  string $filter_status  (optional)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  int $filter_leave_category_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  string $filter_group_by  (optional)
     * @param  bool $filter_restrict_overlapping_leave  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auBusinessHoursLeaveRequestListLeaveRequestsWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel[]';
        $request = $this->auBusinessHoursLeaveRequestListLeaveRequestsRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auBusinessHoursLeaveRequestListLeaveRequestsAsync
     *
     * List Leave Requests
     *
     * @param  int $business_id (required)
     * @param  string $filter_status  (optional)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  int $filter_leave_category_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  string $filter_group_by  (optional)
     * @param  bool $filter_restrict_overlapping_leave  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auBusinessHoursLeaveRequestListLeaveRequestsAsync($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null)
    {
        return $this->auBusinessHoursLeaveRequestListLeaveRequestsAsyncWithHttpInfo($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auBusinessHoursLeaveRequestListLeaveRequestsAsyncWithHttpInfo
     *
     * List Leave Requests
     *
     * @param  int $business_id (required)
     * @param  string $filter_status  (optional)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  int $filter_leave_category_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  string $filter_group_by  (optional)
     * @param  bool $filter_restrict_overlapping_leave  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auBusinessHoursLeaveRequestListLeaveRequestsAsyncWithHttpInfo($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel[]';
        $request = $this->auBusinessHoursLeaveRequestListLeaveRequestsRequest($business_id, $filter_status, $filter_from_date, $filter_to_date, $filter_leave_category_id, $filter_location_id, $filter_employee_id, $filter_group_by, $filter_restrict_overlapping_leave);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auBusinessHoursLeaveRequestListLeaveRequests'
     *
     * @param  int $business_id (required)
     * @param  string $filter_status  (optional)
     * @param  \DateTime $filter_from_date  (optional)
     * @param  \DateTime $filter_to_date  (optional)
     * @param  int $filter_leave_category_id  (optional)
     * @param  int $filter_location_id  (optional)
     * @param  int $filter_employee_id  (optional)
     * @param  string $filter_group_by  (optional)
     * @param  bool $filter_restrict_overlapping_leave  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auBusinessHoursLeaveRequestListLeaveRequestsRequest($business_id, $filter_status = null, $filter_from_date = null, $filter_to_date = null, $filter_leave_category_id = null, $filter_location_id = null, $filter_employee_id = null, $filter_group_by = null, $filter_restrict_overlapping_leave = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auBusinessHoursLeaveRequestListLeaveRequests'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_status !== null) {
            $queryParams['filter.status'] = ObjectSerializer::toQueryValue($filter_status);
        }
        // query params
        if ($filter_from_date !== null) {
            $queryParams['filter.fromDate'] = ObjectSerializer::toQueryValue($filter_from_date);
        }
        // query params
        if ($filter_to_date !== null) {
            $queryParams['filter.toDate'] = ObjectSerializer::toQueryValue($filter_to_date);
        }
        // query params
        if ($filter_leave_category_id !== null) {
            $queryParams['filter.leaveCategoryId'] = ObjectSerializer::toQueryValue($filter_leave_category_id);
        }
        // query params
        if ($filter_location_id !== null) {
            $queryParams['filter.locationId'] = ObjectSerializer::toQueryValue($filter_location_id);
        }
        // query params
        if ($filter_employee_id !== null) {
            $queryParams['filter.employeeId'] = ObjectSerializer::toQueryValue($filter_employee_id);
        }
        // query params
        if ($filter_group_by !== null) {
            $queryParams['filter.groupBy'] = ObjectSerializer::toQueryValue($filter_group_by);
        }
        // query params
        if ($filter_restrict_overlapping_leave !== null) {
            $queryParams['filter.restrictOverlappingLeave'] = ObjectSerializer::toQueryValue($filter_restrict_overlapping_leave);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestApprove
     *
     * Approve Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel
     */
    public function auHoursLeaveRequestApprove($employee_id, $leave_request_id, $business_id)
    {
        list($response) = $this->auHoursLeaveRequestApproveWithHttpInfo($employee_id, $leave_request_id, $business_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestApproveWithHttpInfo
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestApproveWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestApproveAsync
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestApproveAsync($employee_id, $leave_request_id, $business_id)
    {
        return $this->auHoursLeaveRequestApproveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestApproveAsyncWithHttpInfo
     *
     * Approve Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestApproveAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestApprove'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestApproveRequest($employee_id, $leave_request_id, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestApprove'
            );
        }
        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling auHoursLeaveRequestApprove'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestApprove'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/{leaveRequestId}/approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestDecline
     *
     * Decline Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  \Swagger\Client\Model\DeclineLeaveRequest $decline decline (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel
     */
    public function auHoursLeaveRequestDecline($employee_id, $leave_request_id, $decline, $business_id)
    {
        list($response) = $this->auHoursLeaveRequestDeclineWithHttpInfo($employee_id, $leave_request_id, $decline, $business_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestDeclineWithHttpInfo
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\DeclineLeaveRequest $decline (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestDeclineWithHttpInfo($employee_id, $leave_request_id, $decline, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestDeclineRequest($employee_id, $leave_request_id, $decline, $business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestDeclineAsync
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\DeclineLeaveRequest $decline (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestDeclineAsync($employee_id, $leave_request_id, $decline, $business_id)
    {
        return $this->auHoursLeaveRequestDeclineAsyncWithHttpInfo($employee_id, $leave_request_id, $decline, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestDeclineAsyncWithHttpInfo
     *
     * Decline Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\DeclineLeaveRequest $decline (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestDeclineAsyncWithHttpInfo($employee_id, $leave_request_id, $decline, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestDeclineRequest($employee_id, $leave_request_id, $decline, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestDecline'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\DeclineLeaveRequest $decline (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestDeclineRequest($employee_id, $leave_request_id, $decline, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestDecline'
            );
        }
        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling auHoursLeaveRequestDecline'
            );
        }
        // verify the required parameter 'decline' is set
        if ($decline === null || (is_array($decline) && count($decline) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $decline when calling auHoursLeaveRequestDecline'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestDecline'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/{leaveRequestId}/decline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($decline)) {
            $_tempBody = $decline;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestDelete
     *
     * Delete Leave Request
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel
     */
    public function auHoursLeaveRequestDelete($employee_id, $leave_request_id, $business_id)
    {
        list($response) = $this->auHoursLeaveRequestDeleteWithHttpInfo($employee_id, $leave_request_id, $business_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestDeleteWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestDeleteWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestDeleteAsync
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestDeleteAsync($employee_id, $leave_request_id, $business_id)
    {
        return $this->auHoursLeaveRequestDeleteAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestDeleteAsyncWithHttpInfo
     *
     * Delete Leave Request
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestDeleteAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestDelete'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestDeleteRequest($employee_id, $leave_request_id, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestDelete'
            );
        }
        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling auHoursLeaveRequestDelete'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestDelete'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestEstimate
     *
     * Estimate Leave Hours
     *
     * @param  int $business_id business_id (required)
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $employee_id employee_id (required)
     * @param  int $leave_category_id leave_category_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveEstimateModel
     */
    public function auHoursLeaveRequestEstimate($business_id, $from_date, $to_date, $employee_id, $leave_category_id = '0')
    {
        list($response) = $this->auHoursLeaveRequestEstimateWithHttpInfo($business_id, $from_date, $to_date, $employee_id, $leave_category_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestEstimateWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  int $business_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  int $leave_category_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveEstimateModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestEstimateWithHttpInfo($business_id, $from_date, $to_date, $employee_id, $leave_category_id = '0')
    {
        $returnType = '\Swagger\Client\Model\HourLeaveEstimateModel';
        $request = $this->auHoursLeaveRequestEstimateRequest($business_id, $from_date, $to_date, $employee_id, $leave_category_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveEstimateModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestEstimateAsync
     *
     * Estimate Leave Hours
     *
     * @param  int $business_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  int $leave_category_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestEstimateAsync($business_id, $from_date, $to_date, $employee_id, $leave_category_id = '0')
    {
        return $this->auHoursLeaveRequestEstimateAsyncWithHttpInfo($business_id, $from_date, $to_date, $employee_id, $leave_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestEstimateAsyncWithHttpInfo
     *
     * Estimate Leave Hours
     *
     * @param  int $business_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  int $leave_category_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestEstimateAsyncWithHttpInfo($business_id, $from_date, $to_date, $employee_id, $leave_category_id = '0')
    {
        $returnType = '\Swagger\Client\Model\HourLeaveEstimateModel';
        $request = $this->auHoursLeaveRequestEstimateRequest($business_id, $from_date, $to_date, $employee_id, $leave_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestEstimate'
     *
     * @param  int $business_id (required)
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $employee_id (required)
     * @param  int $leave_category_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestEstimateRequest($business_id, $from_date, $to_date, $employee_id, $leave_category_id = '0')
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestEstimate'
            );
        }
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling auHoursLeaveRequestEstimate'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling auHoursLeaveRequestEstimate'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestEstimate'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/estimate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($leave_category_id !== null) {
            $queryParams['leaveCategoryId'] = ObjectSerializer::toQueryValue($leave_category_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestGet
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id employee_id (required)
     * @param  int $leave_request_id leave_request_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel
     */
    public function auHoursLeaveRequestGet($employee_id, $leave_request_id, $business_id)
    {
        list($response) = $this->auHoursLeaveRequestGetWithHttpInfo($employee_id, $leave_request_id, $business_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestGetWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestGetWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestGetAsync
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestGetAsync($employee_id, $leave_request_id, $business_id)
    {
        return $this->auHoursLeaveRequestGetAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestGetAsyncWithHttpInfo
     *
     * Get Leave Request by ID
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestGetAsyncWithHttpInfo($employee_id, $leave_request_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestGet'
     *
     * @param  int $employee_id (required)
     * @param  int $leave_request_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestGetRequest($employee_id, $leave_request_id, $business_id)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestGet'
            );
        }
        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling auHoursLeaveRequestGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestGetLeaveRequests
     *
     * Get Leave Requests for Employee
     *
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel[]
     */
    public function auHoursLeaveRequestGetLeaveRequests($business_id, $employee_id)
    {
        list($response) = $this->auHoursLeaveRequestGetLeaveRequestsWithHttpInfo($business_id, $employee_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestGetLeaveRequestsWithHttpInfo
     *
     * Get Leave Requests for Employee
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestGetLeaveRequestsWithHttpInfo($business_id, $employee_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel[]';
        $request = $this->auHoursLeaveRequestGetLeaveRequestsRequest($business_id, $employee_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestGetLeaveRequestsAsync
     *
     * Get Leave Requests for Employee
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestGetLeaveRequestsAsync($business_id, $employee_id)
    {
        return $this->auHoursLeaveRequestGetLeaveRequestsAsyncWithHttpInfo($business_id, $employee_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestGetLeaveRequestsAsyncWithHttpInfo
     *
     * Get Leave Requests for Employee
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestGetLeaveRequestsAsyncWithHttpInfo($business_id, $employee_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel[]';
        $request = $this->auHoursLeaveRequestGetLeaveRequestsRequest($business_id, $employee_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestGetLeaveRequests'
     *
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestGetLeaveRequestsRequest($business_id, $employee_id)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestGetLeaveRequests'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestGetLeaveRequests'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestPost
     *
     * Create Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HourLeaveRequestResponseModel
     */
    public function auHoursLeaveRequestPost($model, $business_id, $employee_id)
    {
        list($response) = $this->auHoursLeaveRequestPostWithHttpInfo($model, $business_id, $employee_id);

        return $response;
    }

    /**
     * Operation auHoursLeaveRequestPostWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HourLeaveRequestResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestPostWithHttpInfo($model, $business_id, $employee_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestPostRequest($model, $business_id, $employee_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HourLeaveRequestResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestPostAsync
     *
     * Create Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPostAsync($model, $business_id, $employee_id)
    {
        return $this->auHoursLeaveRequestPostAsyncWithHttpInfo($model, $business_id, $employee_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestPostAsyncWithHttpInfo
     *
     * Create Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPostAsyncWithHttpInfo($model, $business_id, $employee_id)
    {
        $returnType = '\Swagger\Client\Model\HourLeaveRequestResponseModel';
        $request = $this->auHoursLeaveRequestPostRequest($model, $business_id, $employee_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestPost'
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestPostRequest($model, $business_id, $employee_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auHoursLeaveRequestPost'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestPost'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestPost'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestPut
     *
     * Update Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auHoursLeaveRequestPut($model, $business_id, $employee_id)
    {
        $this->auHoursLeaveRequestPutWithHttpInfo($model, $business_id, $employee_id);
    }

    /**
     * Operation auHoursLeaveRequestPutWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestPutWithHttpInfo($model, $business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->auHoursLeaveRequestPutRequest($model, $business_id, $employee_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestPutAsync
     *
     * Update Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPutAsync($model, $business_id, $employee_id)
    {
        return $this->auHoursLeaveRequestPutAsyncWithHttpInfo($model, $business_id, $employee_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestPutAsyncWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPutAsyncWithHttpInfo($model, $business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->auHoursLeaveRequestPutRequest($model, $business_id, $employee_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestPut'
     *
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestPutRequest($model, $business_id, $employee_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auHoursLeaveRequestPut'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestPut'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestPut'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id leave_request_id (required)
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model model (required)
     * @param  string $business_id business_id (required)
     * @param  string $employee_id employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId($leave_request_id, $model, $business_id, $employee_id)
    {
        $this->auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdWithHttpInfo($leave_request_id, $model, $business_id, $employee_id);
    }

    /**
     * Operation auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdWithHttpInfo($leave_request_id, $model, $business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdRequest($leave_request_id, $model, $business_id, $employee_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdAsync
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdAsync($leave_request_id, $model, $business_id, $employee_id)
    {
        return $this->auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdAsyncWithHttpInfo($leave_request_id, $model, $business_id, $employee_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdAsyncWithHttpInfo
     *
     * Update Leave Request
     *
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdAsyncWithHttpInfo($leave_request_id, $model, $business_id, $employee_id)
    {
        $returnType = '';
        $request = $this->auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdRequest($leave_request_id, $model, $business_id, $employee_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId'
     *
     * @param  int $leave_request_id (required)
     * @param  \Swagger\Client\Model\HourLeaveRequestModel $model (required)
     * @param  string $business_id (required)
     * @param  string $employee_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestIdRequest($leave_request_id, $model, $business_id, $employee_id)
    {
        // verify the required parameter 'leave_request_id' is set
        if ($leave_request_id === null || (is_array($leave_request_id) && count($leave_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leave_request_id when calling auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling auHoursLeaveRequestPutApiV2BusinessByBusinessIdEmployeeByEmployeeIdLeaverequestByLeaveRequestId'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/employee/{employeeId}/leaverequest/{leaveRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($leave_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'leaveRequestId' . '}',
                ObjectSerializer::toPathValue($leave_request_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
