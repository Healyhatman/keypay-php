<?php
/**
 * OtherApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * OtherApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OtherApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auPayRunDetailsGet
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuPayRunDetailsModel
     */
    public function auPayRunDetailsGet($pay_run_id, $business_id)
    {
        list($response) = $this->auPayRunDetailsGetWithHttpInfo($pay_run_id, $business_id);
        return $response;
    }

    /**
     * Operation auPayRunDetailsGetWithHttpInfo
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuPayRunDetailsModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auPayRunDetailsGetWithHttpInfo($pay_run_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuPayRunDetailsModel';
        $request = $this->auPayRunDetailsGetRequest($pay_run_id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuPayRunDetailsModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auPayRunDetailsGetAsync
     *
     * 
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDetailsGetAsync($pay_run_id, $business_id)
    {
        return $this->auPayRunDetailsGetAsyncWithHttpInfo($pay_run_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auPayRunDetailsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auPayRunDetailsGetAsyncWithHttpInfo($pay_run_id, $business_id)
    {
        $returnType = '\Swagger\Client\Model\AuPayRunDetailsModel';
        $request = $this->auPayRunDetailsGetRequest($pay_run_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auPayRunDetailsGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auPayRunDetailsGetRequest($pay_run_id, $business_id)
    {
        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling auPayRunDetailsGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auPayRunDetailsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/payrun/{payRunId}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pay_run_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payRunId' . '}',
                ObjectSerializer::toPathValue($pay_run_id),
                $resourcePath
            );
        }
        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsPaySlipGet
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id business_id (required)
     * @param  int $model_pay_run_id  (optional)
     * @param  int $model_employee_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportsPaySlipGet($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null)
    {
        $this->reportsPaySlipGetWithHttpInfo($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id);
    }

    /**
     * Operation reportsPaySlipGetWithHttpInfo
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id  (optional)
     * @param  int $model_employee_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsPaySlipGetWithHttpInfo($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null)
    {
        $returnType = '';
        $request = $this->reportsPaySlipGetRequest($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportsPaySlipGetAsync
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id  (optional)
     * @param  int $model_employee_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaySlipGetAsync($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null)
    {
        return $this->reportsPaySlipGetAsyncWithHttpInfo($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsPaySlipGetAsyncWithHttpInfo
     *
     * Get Pay Slips by Finalised Pay Run Id
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id  (optional)
     * @param  int $model_employee_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaySlipGetAsyncWithHttpInfo($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null)
    {
        $returnType = '';
        $request = $this->reportsPaySlipGetRequest($business_id, $model_pay_run_id, $model_employee_id, $model_location_id, $model_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsPaySlipGet'
     *
     * @param  string $business_id (required)
     * @param  int $model_pay_run_id  (optional)
     * @param  int $model_employee_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsPaySlipGetRequest($business_id, $model_pay_run_id = null, $model_employee_id = null, $model_location_id = null, $model_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsPaySlipGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/payslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($model_pay_run_id !== null) {
            $queryParams['model.payRunId'] = ObjectSerializer::toQueryValue($model_pay_run_id);
        }
        // query params
        if ($model_employee_id !== null) {
            $queryParams['model.employeeId'] = ObjectSerializer::toQueryValue($model_employee_id);
        }
        // query params
        if ($model_location_id !== null) {
            $queryParams['model.locationId'] = ObjectSerializer::toQueryValue($model_location_id);
        }
        // query params
        if ($model_employing_entity_id !== null) {
            $queryParams['model.employingEntityId'] = ObjectSerializer::toQueryValue($model_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsPaymentFileGet
     *
     * Get Payment Files by Finalised Pay Run Id
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  int $payment_file_id payment_file_id (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportsPaymentFileGet($pay_run_id, $payment_file_id, $business_id)
    {
        $this->reportsPaymentFileGetWithHttpInfo($pay_run_id, $payment_file_id, $business_id);
    }

    /**
     * Operation reportsPaymentFileGetWithHttpInfo
     *
     * Get Payment Files by Finalised Pay Run Id
     *
     * @param  int $pay_run_id (required)
     * @param  int $payment_file_id (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsPaymentFileGetWithHttpInfo($pay_run_id, $payment_file_id, $business_id)
    {
        $returnType = '';
        $request = $this->reportsPaymentFileGetRequest($pay_run_id, $payment_file_id, $business_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reportsPaymentFileGetAsync
     *
     * Get Payment Files by Finalised Pay Run Id
     *
     * @param  int $pay_run_id (required)
     * @param  int $payment_file_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaymentFileGetAsync($pay_run_id, $payment_file_id, $business_id)
    {
        return $this->reportsPaymentFileGetAsyncWithHttpInfo($pay_run_id, $payment_file_id, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsPaymentFileGetAsyncWithHttpInfo
     *
     * Get Payment Files by Finalised Pay Run Id
     *
     * @param  int $pay_run_id (required)
     * @param  int $payment_file_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaymentFileGetAsyncWithHttpInfo($pay_run_id, $payment_file_id, $business_id)
    {
        $returnType = '';
        $request = $this->reportsPaymentFileGetRequest($pay_run_id, $payment_file_id, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsPaymentFileGet'
     *
     * @param  int $pay_run_id (required)
     * @param  int $payment_file_id (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsPaymentFileGetRequest($pay_run_id, $payment_file_id, $business_id)
    {
        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling reportsPaymentFileGet'
            );
        }
        // verify the required parameter 'payment_file_id' is set
        if ($payment_file_id === null || (is_array($payment_file_id) && count($payment_file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_file_id when calling reportsPaymentFileGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsPaymentFileGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/paymentfile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pay_run_id !== null) {
            $queryParams['payRunId'] = ObjectSerializer::toQueryValue($pay_run_id);
        }
        // query params
        if ($payment_file_id !== null) {
            $queryParams['paymentFileId'] = ObjectSerializer::toQueryValue($payment_file_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsShiftSwappingGet
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_from_employee_id  (optional)
     * @param  int $request_to_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShiftSwappingReportExportModel[]
     */
    public function reportsShiftSwappingGet($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->reportsShiftSwappingGetWithHttpInfo($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);
        return $response;
    }

    /**
     * Operation reportsShiftSwappingGetWithHttpInfo
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id  (optional)
     * @param  int $request_to_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShiftSwappingReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsShiftSwappingGetWithHttpInfo($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\ShiftSwappingReportExportModel[]';
        $request = $this->reportsShiftSwappingGetRequest($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShiftSwappingReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsShiftSwappingGetAsync
     *
     * 
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id  (optional)
     * @param  int $request_to_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsShiftSwappingGetAsync($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->reportsShiftSwappingGetAsyncWithHttpInfo($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsShiftSwappingGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id  (optional)
     * @param  int $request_to_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsShiftSwappingGetAsyncWithHttpInfo($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\ShiftSwappingReportExportModel[]';
        $request = $this->reportsShiftSwappingGetRequest($business_id, $request_from_employee_id, $request_to_employee_id, $request_include_costs, $request_statuses, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsShiftSwappingGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_from_employee_id  (optional)
     * @param  int $request_to_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsShiftSwappingGetRequest($business_id, $request_from_employee_id = null, $request_to_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsShiftSwappingGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/shiftswapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_from_employee_id !== null) {
            $queryParams['request.fromEmployeeId'] = ObjectSerializer::toQueryValue($request_from_employee_id);
        }
        // query params
        if ($request_to_employee_id !== null) {
            $queryParams['request.toEmployeeId'] = ObjectSerializer::toQueryValue($request_to_employee_id);
        }
        // query params
        if ($request_include_costs !== null) {
            $queryParams['request.includeCosts'] = ObjectSerializer::toQueryValue($request_include_costs);
        }
        // query params
        if (is_array($request_statuses)) {
            $queryParams['request.statuses'] = $request_statuses;
        } else
        if ($request_statuses !== null) {
            $queryParams['request.statuses'] = ObjectSerializer::toQueryValue($request_statuses);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsTasksReportGet
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_pay_run_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  string $request_status  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TasksReportExportModel[]
     */
    public function reportsTasksReportGet($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null)
    {
        list($response) = $this->reportsTasksReportGetWithHttpInfo($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status);
        return $response;
    }

    /**
     * Operation reportsTasksReportGetWithHttpInfo
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_pay_run_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  string $request_status  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TasksReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsTasksReportGetWithHttpInfo($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null)
    {
        $returnType = '\Swagger\Client\Model\TasksReportExportModel[]';
        $request = $this->reportsTasksReportGetRequest($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TasksReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsTasksReportGetAsync
     *
     * 
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_pay_run_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  string $request_status  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsTasksReportGetAsync($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null)
    {
        return $this->reportsTasksReportGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsTasksReportGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_pay_run_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  string $request_status  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsTasksReportGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null)
    {
        $returnType = '\Swagger\Client\Model\TasksReportExportModel[]';
        $request = $this->reportsTasksReportGetRequest($business_id, $request_employee_id, $request_pay_run_id, $request_from_date, $request_to_date, $request_pay_schedule_id, $request_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsTasksReportGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_pay_run_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  string $request_status  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsTasksReportGetRequest($business_id, $request_employee_id = null, $request_pay_run_id = null, $request_from_date = null, $request_to_date = null, $request_pay_schedule_id = null, $request_status = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsTasksReportGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_pay_run_id !== null) {
            $queryParams['request.payRunId'] = ObjectSerializer::toQueryValue($request_pay_run_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_status !== null) {
            $queryParams['request.status'] = ObjectSerializer::toQueryValue($request_status);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
