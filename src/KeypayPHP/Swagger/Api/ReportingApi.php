<?php
/**
 * ReportingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auReportsCostingGet
     *
     * Costing Report
     *
     * @param  string $business_id business_id (required)
     * @param  bool $request_show_zero_pay_categories  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuCostingReportApiModel[]
     */
    public function auReportsCostingGet($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsCostingGetWithHttpInfo($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsCostingGetWithHttpInfo
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuCostingReportApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsCostingGetWithHttpInfo($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuCostingReportApiModel[]';
        $request = $this->auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuCostingReportApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsCostingGetAsync
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsCostingGetAsync($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsCostingGetAsyncWithHttpInfo($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsCostingGetAsyncWithHttpInfo
     *
     * Costing Report
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsCostingGetAsyncWithHttpInfo($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuCostingReportApiModel[]';
        $request = $this->auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsCostingGet'
     *
     * @param  string $business_id (required)
     * @param  bool $request_show_zero_pay_categories  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsCostingGetRequest($business_id, $request_show_zero_pay_categories = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsCostingGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/costing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_show_zero_pay_categories !== null) {
            $queryParams['request.showZeroPayCategories'] = ObjectSerializer::toQueryValue($request_show_zero_pay_categories);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsDetailedActivityGet
     *
     * Detailed Activity Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuDetailedActivityReportExportModel[]
     */
    public function auReportsDetailedActivityGet($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsDetailedActivityGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsDetailedActivityGetWithHttpInfo
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuDetailedActivityReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsDetailedActivityGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuDetailedActivityReportExportModel[]';
        $request = $this->auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuDetailedActivityReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsDetailedActivityGetAsync
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsDetailedActivityGetAsync($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsDetailedActivityGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsDetailedActivityGetAsyncWithHttpInfo
     *
     * Detailed Activity Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsDetailedActivityGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuDetailedActivityReportExportModel[]';
        $request = $this->auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsDetailedActivityGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsDetailedActivityGetRequest($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsDetailedActivityGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/detailedactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGet
     *
     * Employee Details Report
     *
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmployeeDetailsReportField[]
     */
    public function auReportsEmployeeDetailsFieldsGet($business_id)
    {
        list($response) = $this->auReportsEmployeeDetailsFieldsGetWithHttpInfo($business_id);

        return $response;
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmployeeDetailsReportField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsEmployeeDetailsFieldsGetWithHttpInfo($business_id)
    {
        $returnType = '\Swagger\Client\Model\EmployeeDetailsReportField[]';
        $request = $this->auReportsEmployeeDetailsFieldsGetRequest($business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmployeeDetailsReportField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetAsync
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeeDetailsFieldsGetAsync($business_id)
    {
        return $this->auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo($business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeeDetailsFieldsGetAsyncWithHttpInfo($business_id)
    {
        $returnType = '\Swagger\Client\Model\EmployeeDetailsReportField[]';
        $request = $this->auReportsEmployeeDetailsFieldsGetRequest($business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsEmployeeDetailsFieldsGet'
     *
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsEmployeeDetailsFieldsGetRequest($business_id)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsEmployeeDetailsFieldsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGet
     *
     * Employee Payment History Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuPaymentHistoryModel[]
     */
    public function auReportsEmployeePaymentHistoryGet($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsEmployeePaymentHistoryGetWithHttpInfo($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetWithHttpInfo
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuPaymentHistoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsEmployeePaymentHistoryGetWithHttpInfo($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPaymentHistoryModel[]';
        $request = $this->auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuPaymentHistoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetAsync
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeePaymentHistoryGetAsync($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo
     *
     * Employee Payment History Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsEmployeePaymentHistoryGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPaymentHistoryModel[]';
        $request = $this->auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsEmployeePaymentHistoryGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsEmployeePaymentHistoryGetRequest($business_id, $request_employee_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsEmployeePaymentHistoryGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/paymenthistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsGrossToNetGet
     *
     * Gross To Net Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int[] $request_pay_category_ids  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuGrossToNetResponseModel[]
     */
    public function auReportsGrossToNetGet($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsGrossToNetGetWithHttpInfo($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsGrossToNetGetWithHttpInfo
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int[] $request_pay_category_ids  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuGrossToNetResponseModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsGrossToNetGetWithHttpInfo($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuGrossToNetResponseModel[]';
        $request = $this->auReportsGrossToNetGetRequest($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuGrossToNetResponseModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsGrossToNetGetAsync
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int[] $request_pay_category_ids  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsGrossToNetGetAsync($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsGrossToNetGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsGrossToNetGetAsyncWithHttpInfo
     *
     * Gross To Net Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int[] $request_pay_category_ids  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsGrossToNetGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuGrossToNetResponseModel[]';
        $request = $this->auReportsGrossToNetGetRequest($business_id, $request_employee_id, $request_pay_category_ids, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsGrossToNetGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int[] $request_pay_category_ids  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsGrossToNetGetRequest($business_id, $request_employee_id = null, $request_pay_category_ids = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsGrossToNetGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/grosstonet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if (is_array($request_pay_category_ids)) {
            $queryParams['request.payCategoryIds'] = $request_pay_category_ids;
        } elseif ($request_pay_category_ids !== null) {
            $queryParams['request.payCategoryIds'] = ObjectSerializer::toQueryValue($request_pay_category_ids);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveBalancesGet
     *
     * Leave Balances Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  string $request_group_by  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuLeaveBalancesExportModel[]
     */
    public function auReportsLeaveBalancesGet($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null)
    {
        list($response) = $this->auReportsLeaveBalancesGetWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date);

        return $response;
    }

    /**
     * Operation auReportsLeaveBalancesGetWithHttpInfo
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  string $request_group_by  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuLeaveBalancesExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveBalancesGetWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null)
    {
        $returnType = '\Swagger\Client\Model\AuLeaveBalancesExportModel[]';
        $request = $this->auReportsLeaveBalancesGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuLeaveBalancesExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveBalancesGetAsync
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  string $request_group_by  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveBalancesGetAsync($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null)
    {
        return $this->auReportsLeaveBalancesGetAsyncWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveBalancesGetAsyncWithHttpInfo
     *
     * Leave Balances Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  string $request_group_by  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveBalancesGetAsyncWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null)
    {
        $returnType = '\Swagger\Client\Model\AuLeaveBalancesExportModel[]';
        $request = $this->auReportsLeaveBalancesGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_group_by, $request_employing_entity_id, $request_as_at_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveBalancesGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  string $request_group_by  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsLeaveBalancesGetRequest($business_id, $request_location_id = null, $request_leave_type_id = null, $request_group_by = null, $request_employing_entity_id = null, $request_as_at_date = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveBalancesGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/leavebalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_leave_type_id !== null) {
            $queryParams['request.leaveTypeId'] = ObjectSerializer::toQueryValue($request_leave_type_id);
        }
        // query params
        if ($request_group_by !== null) {
            $queryParams['request.groupBy'] = ObjectSerializer::toQueryValue($request_group_by);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }
        // query params
        if ($request_as_at_date !== null) {
            $queryParams['request.asAtDate'] = ObjectSerializer::toQueryValue($request_as_at_date);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveHistoryReportGet
     *
     * Leave History Report
     *
     * @param  string $business_id business_id (required)
     * @param  \DateTime $model_from_date  (optional)
     * @param  \DateTime $model_to_date  (optional)
     * @param  int $model_pay_schedule_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  string[] $model_employee_id  (optional)
     * @param  int $model_leave_category_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LeaveHistoryReportGroupModel[]
     */
    public function auReportsLeaveHistoryReportGet($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null)
    {
        list($response) = $this->auReportsLeaveHistoryReportGetWithHttpInfo($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsLeaveHistoryReportGetWithHttpInfo
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date  (optional)
     * @param  \DateTime $model_to_date  (optional)
     * @param  int $model_pay_schedule_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  string[] $model_employee_id  (optional)
     * @param  int $model_leave_category_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LeaveHistoryReportGroupModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveHistoryReportGetWithHttpInfo($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\LeaveHistoryReportGroupModel[]';
        $request = $this->auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LeaveHistoryReportGroupModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveHistoryReportGetAsync
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date  (optional)
     * @param  \DateTime $model_to_date  (optional)
     * @param  int $model_pay_schedule_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  string[] $model_employee_id  (optional)
     * @param  int $model_leave_category_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveHistoryReportGetAsync($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null)
    {
        return $this->auReportsLeaveHistoryReportGetAsyncWithHttpInfo($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveHistoryReportGetAsyncWithHttpInfo
     *
     * Leave History Report
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date  (optional)
     * @param  \DateTime $model_to_date  (optional)
     * @param  int $model_pay_schedule_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  string[] $model_employee_id  (optional)
     * @param  int $model_leave_category_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveHistoryReportGetAsyncWithHttpInfo($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\LeaveHistoryReportGroupModel[]';
        $request = $this->auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date, $model_to_date, $model_pay_schedule_id, $model_location_id, $model_employee_id, $model_leave_category_id, $model_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveHistoryReportGet'
     *
     * @param  string $business_id (required)
     * @param  \DateTime $model_from_date  (optional)
     * @param  \DateTime $model_to_date  (optional)
     * @param  int $model_pay_schedule_id  (optional)
     * @param  int $model_location_id  (optional)
     * @param  string[] $model_employee_id  (optional)
     * @param  int $model_leave_category_id  (optional)
     * @param  int $model_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsLeaveHistoryReportGetRequest($business_id, $model_from_date = null, $model_to_date = null, $model_pay_schedule_id = null, $model_location_id = null, $model_employee_id = null, $model_leave_category_id = null, $model_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveHistoryReportGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/leavehistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($model_from_date !== null) {
            $queryParams['model.fromDate'] = ObjectSerializer::toQueryValue($model_from_date);
        }
        // query params
        if ($model_to_date !== null) {
            $queryParams['model.toDate'] = ObjectSerializer::toQueryValue($model_to_date);
        }
        // query params
        if ($model_pay_schedule_id !== null) {
            $queryParams['model.payScheduleId'] = ObjectSerializer::toQueryValue($model_pay_schedule_id);
        }
        // query params
        if ($model_location_id !== null) {
            $queryParams['model.locationId'] = ObjectSerializer::toQueryValue($model_location_id);
        }
        // query params
        if (is_array($model_employee_id)) {
            $queryParams['model.employeeId'] = $model_employee_id;
        } elseif ($model_employee_id !== null) {
            $queryParams['model.employeeId'] = ObjectSerializer::toQueryValue($model_employee_id);
        }
        // query params
        if ($model_leave_category_id !== null) {
            $queryParams['model.leaveCategoryId'] = ObjectSerializer::toQueryValue($model_leave_category_id);
        }
        // query params
        if ($model_employing_entity_id !== null) {
            $queryParams['model.employingEntityId'] = ObjectSerializer::toQueryValue($model_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsLeaveLiabilityGet
     *
     * Leave Liability Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  bool $request_include_approved_leave  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuLeaveLiabilityExportModel[]
     */
    public function auReportsLeaveLiabilityGet($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsLeaveLiabilityGetWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsLeaveLiabilityGetWithHttpInfo
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  bool $request_include_approved_leave  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuLeaveLiabilityExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsLeaveLiabilityGetWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuLeaveLiabilityExportModel[]';
        $request = $this->auReportsLeaveLiabilityGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuLeaveLiabilityExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsLeaveLiabilityGetAsync
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  bool $request_include_approved_leave  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveLiabilityGetAsync($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null)
    {
        return $this->auReportsLeaveLiabilityGetAsyncWithHttpInfo($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsLeaveLiabilityGetAsyncWithHttpInfo
     *
     * Leave Liability Report
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  bool $request_include_approved_leave  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsLeaveLiabilityGetAsyncWithHttpInfo($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuLeaveLiabilityExportModel[]';
        $request = $this->auReportsLeaveLiabilityGetRequest($business_id, $request_location_id, $request_leave_type_id, $request_include_approved_leave, $request_as_at_date, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsLeaveLiabilityGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_location_id  (optional)
     * @param  int $request_leave_type_id  (optional)
     * @param  bool $request_include_approved_leave  (optional)
     * @param  \DateTime $request_as_at_date  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsLeaveLiabilityGetRequest($business_id, $request_location_id = null, $request_leave_type_id = null, $request_include_approved_leave = null, $request_as_at_date = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsLeaveLiabilityGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/leaveliability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_leave_type_id !== null) {
            $queryParams['request.leaveTypeId'] = ObjectSerializer::toQueryValue($request_leave_type_id);
        }
        // query params
        if ($request_include_approved_leave !== null) {
            $queryParams['request.includeApprovedLeave'] = ObjectSerializer::toQueryValue($request_include_approved_leave);
        }
        // query params
        if ($request_as_at_date !== null) {
            $queryParams['request.asAtDate'] = ObjectSerializer::toQueryValue($request_as_at_date);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGet
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  int $request_financial_year_ending  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuOrdinaryTimeEarningsApiModel[]
     */
    public function auReportsOrdinaryTimeEarningsGet($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null)
    {
        list($response) = $this->auReportsOrdinaryTimeEarningsGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending);

        return $response;
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetWithHttpInfo
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  int $request_financial_year_ending  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuOrdinaryTimeEarningsApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsOrdinaryTimeEarningsGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null)
    {
        $returnType = '\Swagger\Client\Model\AuOrdinaryTimeEarningsApiModel[]';
        $request = $this->auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuOrdinaryTimeEarningsApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetAsync
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  int $request_financial_year_ending  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsOrdinaryTimeEarningsGetAsync($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null)
    {
        return $this->auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo
     *
     * Ordinary Time Earnings Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  int $request_financial_year_ending  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsOrdinaryTimeEarningsGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null)
    {
        $returnType = '\Swagger\Client\Model\AuOrdinaryTimeEarningsApiModel[]';
        $request = $this->auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id, $request_employing_entity_id, $request_financial_year_ending);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsOrdinaryTimeEarningsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     * @param  int $request_financial_year_ending  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsOrdinaryTimeEarningsGetRequest($business_id, $request_pay_schedule_id = null, $request_employing_entity_id = null, $request_financial_year_ending = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsOrdinaryTimeEarningsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/ordinarytimeearnings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }
        // query params
        if ($request_financial_year_ending !== null) {
            $queryParams['request.financialYearEnding'] = ObjectSerializer::toQueryValue($request_financial_year_ending);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayCategoriesGet
     *
     * Pay Categories Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_group_by_earnings_location  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuPayCategoriesModel[]
     */
    public function auReportsPayCategoriesGet($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsPayCategoriesGetWithHttpInfo($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsPayCategoriesGetWithHttpInfo
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_group_by_earnings_location  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuPayCategoriesModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayCategoriesGetWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPayCategoriesModel[]';
        $request = $this->auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuPayCategoriesModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsPayCategoriesGetAsync
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_group_by_earnings_location  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayCategoriesGetAsync($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsPayCategoriesGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayCategoriesGetAsyncWithHttpInfo
     *
     * Pay Categories Report
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_group_by_earnings_location  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayCategoriesGetAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPayCategoriesModel[]';
        $request = $this->auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id, $request_employee_id, $request_group_by_earnings_location, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayCategoriesGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_group_by_earnings_location  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsPayCategoriesGetRequest($business_id, $request_pay_schedule_id = null, $request_employee_id = null, $request_group_by_earnings_location = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayCategoriesGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/paycategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_group_by_earnings_location !== null) {
            $queryParams['request.groupByEarningsLocation'] = ObjectSerializer::toQueryValue($request_group_by_earnings_location);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayRunActivityGet
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $business_id business_id (required)
     * @param  int $pay_schedule_id pay_schedule_id (optional, default to 0)
     * @param  int $location_id location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ActivityReportExportModel[]
     */
    public function auReportsPayRunActivityGet($from_date, $to_date, $business_id, $pay_schedule_id = '0', $location_id = '0')
    {
        list($response) = $this->auReportsPayRunActivityGetWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id, $location_id);

        return $response;
    }

    /**
     * Operation auReportsPayRunActivityGetWithHttpInfo
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ActivityReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayRunActivityGetWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id = '0', $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\ActivityReportExportModel[]';
        $request = $this->auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id, $location_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ActivityReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsPayRunActivityGetAsync
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunActivityGetAsync($from_date, $to_date, $business_id, $pay_schedule_id = '0', $location_id = '0')
    {
        return $this->auReportsPayRunActivityGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayRunActivityGetAsyncWithHttpInfo
     *
     * Pay Run Activity Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunActivityGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $pay_schedule_id = '0', $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\ActivityReportExportModel[]';
        $request = $this->auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayRunActivityGet'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $pay_schedule_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsPayRunActivityGetRequest($from_date, $to_date, $business_id, $pay_schedule_id = '0', $location_id = '0')
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling auReportsPayRunActivityGet'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling auReportsPayRunActivityGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayRunActivityGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/payrunactivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($pay_schedule_id !== null) {
            $queryParams['payScheduleId'] = ObjectSerializer::toQueryValue($pay_schedule_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayRunInclusionsGet
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_status  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuPayRunInclusionExportModel[]
     */
    public function auReportsPayRunInclusionsGet($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsPayRunInclusionsGetWithHttpInfo($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsPayRunInclusionsGetWithHttpInfo
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_status  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuPayRunInclusionExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayRunInclusionsGetWithHttpInfo($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPayRunInclusionExportModel[]';
        $request = $this->auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuPayRunInclusionExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsPayRunInclusionsGetAsync
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_status  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunInclusionsGetAsync($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsPayRunInclusionsGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayRunInclusionsGetAsyncWithHttpInfo
     *
     * Pay Run Inclusions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_status  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayRunInclusionsGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuPayRunInclusionExportModel[]';
        $request = $this->auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id, $request_status, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayRunInclusionsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_status  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsPayRunInclusionsGetRequest($business_id, $request_employee_id = null, $request_status = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayRunInclusionsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/payruninclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_status !== null) {
            $queryParams['request.status'] = ObjectSerializer::toQueryValue($request_status);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPaygGet
     *
     * PAYG Report
     *
     * @param  string $business_id business_id (required)
     * @param  string $request_state  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaygReportExportModel[]
     */
    public function auReportsPaygGet($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsPaygGetWithHttpInfo($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsPaygGetWithHttpInfo
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaygReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPaygGetWithHttpInfo($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaygReportExportModel[]';
        $request = $this->auReportsPaygGetRequest($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaygReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsPaygGetAsync
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPaygGetAsync($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsPaygGetAsyncWithHttpInfo($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPaygGetAsyncWithHttpInfo
     *
     * PAYG Report
     *
     * @param  string $business_id (required)
     * @param  string $request_state  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPaygGetAsyncWithHttpInfo($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\PaygReportExportModel[]';
        $request = $this->auReportsPaygGetRequest($business_id, $request_state, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPaygGet'
     *
     * @param  string $business_id (required)
     * @param  string $request_state  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsPaygGetRequest($business_id, $request_state = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPaygGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/payg';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_state !== null) {
            $queryParams['request.state'] = ObjectSerializer::toQueryValue($request_state);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsPayrollTaxGet
     *
     * Payroll Tax Report
     *
     * @param  string $business_id business_id (required)
     * @param  string $request_group_by  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PayrollTaxReportExportModel[]
     */
    public function auReportsPayrollTaxGet($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsPayrollTaxGetWithHttpInfo($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsPayrollTaxGetWithHttpInfo
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PayrollTaxReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsPayrollTaxGetWithHttpInfo($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\PayrollTaxReportExportModel[]';
        $request = $this->auReportsPayrollTaxGetRequest($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PayrollTaxReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsPayrollTaxGetAsync
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayrollTaxGetAsync($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsPayrollTaxGetAsyncWithHttpInfo($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsPayrollTaxGetAsyncWithHttpInfo
     *
     * Payroll Tax Report
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsPayrollTaxGetAsyncWithHttpInfo($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\PayrollTaxReportExportModel[]';
        $request = $this->auReportsPayrollTaxGetRequest($business_id, $request_group_by, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsPayrollTaxGet'
     *
     * @param  string $business_id (required)
     * @param  string $request_group_by  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsPayrollTaxGetRequest($business_id, $request_group_by = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsPayrollTaxGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/payrolltax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_group_by !== null) {
            $queryParams['request.groupBy'] = ObjectSerializer::toQueryValue($request_group_by);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGet
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employment_type_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_timesheet_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_roster_location_id  (optional)
     * @param  int $request_timesheet_location_id  (optional)
     * @param  string[] $request_roster_statuses  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuRosterTimesheetComparisonReportExportModel[]
     */
    public function auReportsRosterTimesheetComparisonGet($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsRosterTimesheetComparisonGetWithHttpInfo($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetWithHttpInfo
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_timesheet_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_roster_location_id  (optional)
     * @param  int $request_timesheet_location_id  (optional)
     * @param  string[] $request_roster_statuses  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuRosterTimesheetComparisonReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsRosterTimesheetComparisonGetWithHttpInfo($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuRosterTimesheetComparisonReportExportModel[]';
        $request = $this->auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuRosterTimesheetComparisonReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetAsync
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_timesheet_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_roster_location_id  (optional)
     * @param  int $request_timesheet_location_id  (optional)
     * @param  string[] $request_roster_statuses  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsRosterTimesheetComparisonGetAsync($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo
     *
     * Roster vs Timesheet Comparison Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_timesheet_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_roster_location_id  (optional)
     * @param  int $request_timesheet_location_id  (optional)
     * @param  string[] $request_roster_statuses  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsRosterTimesheetComparisonGetAsyncWithHttpInfo($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuRosterTimesheetComparisonReportExportModel[]';
        $request = $this->auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id, $request_employee_id, $request_include_costs, $request_timesheet_statuses, $request_work_type_id, $request_roster_location_id, $request_timesheet_location_id, $request_roster_statuses, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsRosterTimesheetComparisonGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employment_type_id  (optional)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_timesheet_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_roster_location_id  (optional)
     * @param  int $request_timesheet_location_id  (optional)
     * @param  string[] $request_roster_statuses  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsRosterTimesheetComparisonGetRequest($business_id, $request_employment_type_id = null, $request_employee_id = null, $request_include_costs = null, $request_timesheet_statuses = null, $request_work_type_id = null, $request_roster_location_id = null, $request_timesheet_location_id = null, $request_roster_statuses = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsRosterTimesheetComparisonGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/rostertimesheetcomparison';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employment_type_id !== null) {
            $queryParams['request.employmentTypeId'] = ObjectSerializer::toQueryValue($request_employment_type_id);
        }
        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_include_costs !== null) {
            $queryParams['request.includeCosts'] = ObjectSerializer::toQueryValue($request_include_costs);
        }
        // query params
        if (is_array($request_timesheet_statuses)) {
            $queryParams['request.timesheetStatuses'] = $request_timesheet_statuses;
        } elseif ($request_timesheet_statuses !== null) {
            $queryParams['request.timesheetStatuses'] = ObjectSerializer::toQueryValue($request_timesheet_statuses);
        }
        // query params
        if ($request_work_type_id !== null) {
            $queryParams['request.workTypeId'] = ObjectSerializer::toQueryValue($request_work_type_id);
        }
        // query params
        if ($request_roster_location_id !== null) {
            $queryParams['request.rosterLocationId'] = ObjectSerializer::toQueryValue($request_roster_location_id);
        }
        // query params
        if ($request_timesheet_location_id !== null) {
            $queryParams['request.timesheetLocationId'] = ObjectSerializer::toQueryValue($request_timesheet_location_id);
        }
        // query params
        if (is_array($request_roster_statuses)) {
            $queryParams['request.rosterStatuses'] = $request_roster_statuses;
        } elseif ($request_roster_statuses !== null) {
            $queryParams['request.rosterStatuses'] = ObjectSerializer::toQueryValue($request_roster_statuses);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsSuperContributionsByEmployee
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuperAccrualExportModel[]
     */
    public function auReportsSuperContributionsByEmployee($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsSuperContributionsByEmployeeWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeWithHttpInfo
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuperAccrualExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsSuperContributionsByEmployeeWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\SuperAccrualExportModel[]';
        $request = $this->auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuperAccrualExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeAsync
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsByEmployeeAsync($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsSuperContributionsByEmployeeAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsSuperContributionsByEmployeeAsyncWithHttpInfo
     *
     * Super Contribution Report (By Employee)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsByEmployeeAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\SuperAccrualExportModel[]';
        $request = $this->auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsSuperContributionsByEmployee'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsSuperContributionsByEmployeeRequest($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsSuperContributionsByEmployee'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/supercontributions/byemployee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsSuperContributionsBySuperFund
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SuperContributionsReportExportModel[]
     */
    public function auReportsSuperContributionsBySuperFund($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsSuperContributionsBySuperFundWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundWithHttpInfo
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SuperContributionsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsSuperContributionsBySuperFundWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\SuperContributionsReportExportModel[]';
        $request = $this->auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SuperContributionsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundAsync
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsBySuperFundAsync($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsSuperContributionsBySuperFundAsyncWithHttpInfo($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsSuperContributionsBySuperFundAsyncWithHttpInfo
     *
     * Super Contribution Report (By Super Fund)
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsSuperContributionsBySuperFundAsyncWithHttpInfo($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\SuperContributionsReportExportModel[]';
        $request = $this->auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsSuperContributionsBySuperFund'
     *
     * @param  string $business_id (required)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsSuperContributionsBySuperFundRequest($business_id, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsSuperContributionsBySuperFund'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/supercontributions/bysuperfund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auReportsTimesheetGet
     *
     * Timesheet Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuTimesheetExportModel[]
     */
    public function auReportsTimesheetGet($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->auReportsTimesheetGetWithHttpInfo($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation auReportsTimesheetGetWithHttpInfo
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuTimesheetExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function auReportsTimesheetGetWithHttpInfo($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuTimesheetExportModel[]';
        $request = $this->auReportsTimesheetGetRequest($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AuTimesheetExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation auReportsTimesheetGetAsync
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsTimesheetGetAsync($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->auReportsTimesheetGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auReportsTimesheetGetAsyncWithHttpInfo
     *
     * Timesheet Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auReportsTimesheetGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\AuTimesheetExportModel[]';
        $request = $this->auReportsTimesheetGetRequest($business_id, $request_employee_id, $request_include_costs, $request_statuses, $request_work_type_id, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auReportsTimesheetGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  bool $request_include_costs  (optional)
     * @param  string[] $request_statuses  (optional)
     * @param  int $request_work_type_id  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auReportsTimesheetGetRequest($business_id, $request_employee_id = null, $request_include_costs = null, $request_statuses = null, $request_work_type_id = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling auReportsTimesheetGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/timesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_include_costs !== null) {
            $queryParams['request.includeCosts'] = ObjectSerializer::toQueryValue($request_include_costs);
        }
        // query params
        if (is_array($request_statuses)) {
            $queryParams['request.statuses'] = $request_statuses;
        } elseif ($request_statuses !== null) {
            $queryParams['request.statuses'] = ObjectSerializer::toQueryValue($request_statuses);
        }
        // query params
        if ($request_work_type_id !== null) {
            $queryParams['request.workTypeId'] = ObjectSerializer::toQueryValue($request_work_type_id);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsBirthdayGet
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date from_date (required)
     * @param  \DateTime $to_date to_date (required)
     * @param  string $business_id business_id (required)
     * @param  int $location_id location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BirthdayReportExportModel[]
     */
    public function reportsBirthdayGet($from_date, $to_date, $business_id, $location_id = '0')
    {
        list($response) = $this->reportsBirthdayGetWithHttpInfo($from_date, $to_date, $business_id, $location_id);

        return $response;
    }

    /**
     * Operation reportsBirthdayGetWithHttpInfo
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BirthdayReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsBirthdayGetWithHttpInfo($from_date, $to_date, $business_id, $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\BirthdayReportExportModel[]';
        $request = $this->reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BirthdayReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsBirthdayGetAsync
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBirthdayGetAsync($from_date, $to_date, $business_id, $location_id = '0')
    {
        return $this->reportsBirthdayGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsBirthdayGetAsyncWithHttpInfo
     *
     * Birthday Report
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBirthdayGetAsyncWithHttpInfo($from_date, $to_date, $business_id, $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\BirthdayReportExportModel[]';
        $request = $this->reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsBirthdayGet'
     *
     * @param  \DateTime $from_date (required)
     * @param  \DateTime $to_date (required)
     * @param  string $business_id (required)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsBirthdayGetRequest($from_date, $to_date, $business_id, $location_id = '0')
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling reportsBirthdayGet'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling reportsBirthdayGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsBirthdayGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/birthday';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsDeductionsGet
     *
     * Deductions Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_deduction_category_id  (optional)
     * @param  bool $request_disable_rollup_reporting  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DeductionsReportExportModel[]
     */
    public function reportsDeductionsGet($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->reportsDeductionsGetWithHttpInfo($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation reportsDeductionsGetWithHttpInfo
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_deduction_category_id  (optional)
     * @param  bool $request_disable_rollup_reporting  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DeductionsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsDeductionsGetWithHttpInfo($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\DeductionsReportExportModel[]';
        $request = $this->reportsDeductionsGetRequest($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DeductionsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsDeductionsGetAsync
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_deduction_category_id  (optional)
     * @param  bool $request_disable_rollup_reporting  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDeductionsGetAsync($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->reportsDeductionsGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsDeductionsGetAsyncWithHttpInfo
     *
     * Deductions Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_deduction_category_id  (optional)
     * @param  bool $request_disable_rollup_reporting  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDeductionsGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\DeductionsReportExportModel[]';
        $request = $this->reportsDeductionsGetRequest($business_id, $request_employee_id, $request_deduction_category_id, $request_disable_rollup_reporting, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsDeductionsGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  int $request_deduction_category_id  (optional)
     * @param  bool $request_disable_rollup_reporting  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsDeductionsGetRequest($business_id, $request_employee_id = null, $request_deduction_category_id = null, $request_disable_rollup_reporting = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsDeductionsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/deductions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_deduction_category_id !== null) {
            $queryParams['request.deductionCategoryId'] = ObjectSerializer::toQueryValue($request_deduction_category_id);
        }
        // query params
        if ($request_disable_rollup_reporting !== null) {
            $queryParams['request.disableRollupReporting'] = ObjectSerializer::toQueryValue($request_disable_rollup_reporting);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsDocumentAcknowledgementsGet
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $document_id document_id (optional)
     * @param  int[] $employee_ids employee_ids (optional)
     * @param  int $document_status document_status (optional, default to 0)
     * @param  int $employing_entity_id employing_entity_id (optional, default to 0)
     * @param  int $location_id location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentAcknowledgementsReportExportModel[]
     */
    public function reportsDocumentAcknowledgementsGet($business_id, $document_id = null, $employee_ids = null, $document_status = '0', $employing_entity_id = '0', $location_id = '0')
    {
        list($response) = $this->reportsDocumentAcknowledgementsGetWithHttpInfo($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id);

        return $response;
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetWithHttpInfo
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentAcknowledgementsReportExportModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsDocumentAcknowledgementsGetWithHttpInfo($business_id, $document_id = null, $employee_ids = null, $document_status = '0', $employing_entity_id = '0', $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\DocumentAcknowledgementsReportExportModel[]';
        $request = $this->reportsDocumentAcknowledgementsGetRequest($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentAcknowledgementsReportExportModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetAsync
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDocumentAcknowledgementsGetAsync($business_id, $document_id = null, $employee_ids = null, $document_status = '0', $employing_entity_id = '0', $location_id = '0')
    {
        return $this->reportsDocumentAcknowledgementsGetAsyncWithHttpInfo($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsDocumentAcknowledgementsGetAsyncWithHttpInfo
     *
     * Document Acknowledgements Report
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsDocumentAcknowledgementsGetAsyncWithHttpInfo($business_id, $document_id = null, $employee_ids = null, $document_status = '0', $employing_entity_id = '0', $location_id = '0')
    {
        $returnType = '\Swagger\Client\Model\DocumentAcknowledgementsReportExportModel[]';
        $request = $this->reportsDocumentAcknowledgementsGetRequest($business_id, $document_id, $employee_ids, $document_status, $employing_entity_id, $location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsDocumentAcknowledgementsGet'
     *
     * @param  string $business_id (required)
     * @param  int $document_id (optional)
     * @param  int[] $employee_ids (optional)
     * @param  int $document_status (optional, default to 0)
     * @param  int $employing_entity_id (optional, default to 0)
     * @param  int $location_id (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsDocumentAcknowledgementsGetRequest($business_id, $document_id = null, $employee_ids = null, $document_status = '0', $employing_entity_id = '0', $location_id = '0')
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsDocumentAcknowledgementsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/documentAcknowledgements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_id !== null) {
            $queryParams['documentId'] = ObjectSerializer::toQueryValue($document_id);
        }
        // query params
        if (is_array($employee_ids)) {
            $queryParams['employeeIds'] = $employee_ids;
        } elseif ($employee_ids !== null) {
            $queryParams['employeeIds'] = ObjectSerializer::toQueryValue($employee_ids);
        }
        // query params
        if ($document_status !== null) {
            $queryParams['documentStatus'] = ObjectSerializer::toQueryValue($document_status);
        }
        // query params
        if ($employing_entity_id !== null) {
            $queryParams['employingEntityId'] = ObjectSerializer::toQueryValue($employing_entity_id);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeAuditGet
     *
     * Employee Audit Report
     *
     * @param  string $business_id business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_section  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmployeeDetailsAuditReportApiModel[]
     */
    public function reportsEmployeeAuditGet($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        list($response) = $this->reportsEmployeeAuditGetWithHttpInfo($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $response;
    }

    /**
     * Operation reportsEmployeeAuditGetWithHttpInfo
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_section  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmployeeDetailsAuditReportApiModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeAuditGetWithHttpInfo($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\EmployeeDetailsAuditReportApiModel[]';
        $request = $this->reportsEmployeeAuditGetRequest($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmployeeDetailsAuditReportApiModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeAuditGetAsync
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_section  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeAuditGetAsync($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        return $this->reportsEmployeeAuditGetAsyncWithHttpInfo($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeAuditGetAsyncWithHttpInfo
     *
     * Employee Audit Report
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_section  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeAuditGetAsyncWithHttpInfo($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        $returnType = '\Swagger\Client\Model\EmployeeDetailsAuditReportApiModel[]';
        $request = $this->reportsEmployeeAuditGetRequest($business_id, $request_employee_id, $request_section, $request_pay_schedule_id, $request_from_date, $request_to_date, $request_location_id, $request_employing_entity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeAuditGet'
     *
     * @param  string $business_id (required)
     * @param  int $request_employee_id  (optional)
     * @param  string $request_section  (optional)
     * @param  int $request_pay_schedule_id  (optional)
     * @param  \DateTime $request_from_date  (optional)
     * @param  \DateTime $request_to_date  (optional)
     * @param  int $request_location_id  (optional)
     * @param  int $request_employing_entity_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEmployeeAuditGetRequest($business_id, $request_employee_id = null, $request_section = null, $request_pay_schedule_id = null, $request_from_date = null, $request_to_date = null, $request_location_id = null, $request_employing_entity_id = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeAuditGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/employeeaudit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_employee_id !== null) {
            $queryParams['request.employeeId'] = ObjectSerializer::toQueryValue($request_employee_id);
        }
        // query params
        if ($request_section !== null) {
            $queryParams['request.section'] = ObjectSerializer::toQueryValue($request_section);
        }
        // query params
        if ($request_pay_schedule_id !== null) {
            $queryParams['request.payScheduleId'] = ObjectSerializer::toQueryValue($request_pay_schedule_id);
        }
        // query params
        if ($request_from_date !== null) {
            $queryParams['request.fromDate'] = ObjectSerializer::toQueryValue($request_from_date);
        }
        // query params
        if ($request_to_date !== null) {
            $queryParams['request.toDate'] = ObjectSerializer::toQueryValue($request_to_date);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_employing_entity_id !== null) {
            $queryParams['request.employingEntityId'] = ObjectSerializer::toQueryValue($request_employing_entity_id);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeDetailsGet
     *
     * Employee Details Report
     *
     * @param  string $business_id business_id (required)
     * @param  string[] $selected_columns selected_columns (optional)
     * @param  int $location_id location_id (optional, default to 0)
     * @param  int $employing_entity_id employing_entity_id (optional)
     * @param  bool $include_active include_active (optional, default to true)
     * @param  bool $include_inactive include_inactive (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function reportsEmployeeDetailsGet($business_id, $selected_columns = null, $location_id = '0', $employing_entity_id = null, $include_active = 'true', $include_inactive = 'true')
    {
        list($response) = $this->reportsEmployeeDetailsGetWithHttpInfo($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive);

        return $response;
    }

    /**
     * Operation reportsEmployeeDetailsGetWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeDetailsGetWithHttpInfo($business_id, $selected_columns = null, $location_id = '0', $employing_entity_id = null, $include_active = 'true', $include_inactive = 'true')
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsGetRequest($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeDetailsGetAsync
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsGetAsync($business_id, $selected_columns = null, $location_id = '0', $employing_entity_id = null, $include_active = 'true', $include_inactive = 'true')
    {
        return $this->reportsEmployeeDetailsGetAsyncWithHttpInfo($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeDetailsGetAsyncWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsGetAsyncWithHttpInfo($business_id, $selected_columns = null, $location_id = '0', $employing_entity_id = null, $include_active = 'true', $include_inactive = 'true')
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsGetRequest($business_id, $selected_columns, $location_id, $employing_entity_id, $include_active, $include_inactive);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeDetailsGet'
     *
     * @param  string $business_id (required)
     * @param  string[] $selected_columns (optional)
     * @param  int $location_id (optional, default to 0)
     * @param  int $employing_entity_id (optional)
     * @param  bool $include_active (optional, default to true)
     * @param  bool $include_inactive (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEmployeeDetailsGetRequest($business_id, $selected_columns = null, $location_id = '0', $employing_entity_id = null, $include_active = 'true', $include_inactive = 'true')
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeDetailsGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($selected_columns)) {
            $queryParams['selectedColumns'] = $selected_columns;
        } elseif ($selected_columns !== null) {
            $queryParams['selectedColumns'] = ObjectSerializer::toQueryValue($selected_columns);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['locationId'] = ObjectSerializer::toQueryValue($location_id);
        }
        // query params
        if ($employing_entity_id !== null) {
            $queryParams['employingEntityId'] = ObjectSerializer::toQueryValue($employing_entity_id);
        }
        // query params
        if ($include_active !== null) {
            $queryParams['includeActive'] = ObjectSerializer::toQueryValue($include_active);
        }
        // query params
        if ($include_inactive !== null) {
            $queryParams['includeInactive'] = ObjectSerializer::toQueryValue($include_inactive);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmployeeDetailsPost
     *
     * Employee Details Report
     *
     * @param  \Swagger\Client\Model\EmployeeDetailsReportRequestModel $model model (required)
     * @param  string $business_id business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function reportsEmployeeDetailsPost($model, $business_id)
    {
        list($response) = $this->reportsEmployeeDetailsPostWithHttpInfo($model, $business_id);

        return $response;
    }

    /**
     * Operation reportsEmployeeDetailsPostWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  \Swagger\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmployeeDetailsPostWithHttpInfo($model, $business_id)
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsPostRequest($model, $business_id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsEmployeeDetailsPostAsync
     *
     * Employee Details Report
     *
     * @param  \Swagger\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsPostAsync($model, $business_id)
    {
        return $this->reportsEmployeeDetailsPostAsyncWithHttpInfo($model, $business_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmployeeDetailsPostAsyncWithHttpInfo
     *
     * Employee Details Report
     *
     * @param  \Swagger\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmployeeDetailsPostAsyncWithHttpInfo($model, $business_id)
    {
        $returnType = 'object[]';
        $request = $this->reportsEmployeeDetailsPostRequest($model, $business_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmployeeDetailsPost'
     *
     * @param  \Swagger\Client\Model\EmployeeDetailsReportRequestModel $model (required)
     * @param  string $business_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEmployeeDetailsPostRequest($model, $business_id)
    {
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling reportsEmployeeDetailsPost'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsEmployeeDetailsPost'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/employeedetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsJournalGet
     *
     * Journal Report
     *
     * @param  int $pay_run_id pay_run_id (required)
     * @param  string $business_id business_id (required)
     * @param  string $journal_view journal_view (optional, default to 0)
     * @param  string $journal_service journal_service (optional, default to 9)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reportsJournalGet($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9')
    {
        $this->reportsJournalGetWithHttpInfo($pay_run_id, $business_id, $journal_view, $journal_service);
    }

    /**
     * Operation reportsJournalGetWithHttpInfo
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to 0)
     * @param  string $journal_service (optional, default to 9)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsJournalGetWithHttpInfo($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9')
    {
        $returnType = '';
        $request = $this->reportsJournalGetRequest($pay_run_id, $business_id, $journal_view, $journal_service);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reportsJournalGetAsync
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to 0)
     * @param  string $journal_service (optional, default to 9)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsJournalGetAsync($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9')
    {
        return $this->reportsJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, $journal_view, $journal_service)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsJournalGetAsyncWithHttpInfo
     *
     * Journal Report
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to 0)
     * @param  string $journal_service (optional, default to 9)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsJournalGetAsyncWithHttpInfo($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9')
    {
        $returnType = '';
        $request = $this->reportsJournalGetRequest($pay_run_id, $business_id, $journal_view, $journal_service);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsJournalGet'
     *
     * @param  int $pay_run_id (required)
     * @param  string $business_id (required)
     * @param  string $journal_view (optional, default to 0)
     * @param  string $journal_service (optional, default to 9)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsJournalGetRequest($pay_run_id, $business_id, $journal_view = '0', $journal_service = '9')
    {
        // verify the required parameter 'pay_run_id' is set
        if ($pay_run_id === null || (is_array($pay_run_id) && count($pay_run_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_run_id when calling reportsJournalGet'
            );
        }
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling reportsJournalGet'
            );
        }

        $resourcePath = '/api/v2/business/{businessId}/report/journal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pay_run_id !== null) {
            $queryParams['payRunId'] = ObjectSerializer::toQueryValue($pay_run_id);
        }
        // query params
        if ($journal_view !== null) {
            $queryParams['journalView'] = ObjectSerializer::toQueryValue($journal_view);
        }
        // query params
        if ($journal_service !== null) {
            $queryParams['journalService'] = ObjectSerializer::toQueryValue($journal_service);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'businessId' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['apiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
