<?php
/**
 * PayRunWarningDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayRunWarningDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayRunWarningDto implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayRunWarningDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warning_type' => 'string',
        'employee_id' => 'int',
        'warning' => 'string',
        'employee_name' => 'string',
        'pay_run_total_id' => 'int',
        'meta_data' => 'object',
        'meta_data_json' => 'string',
        'employee_external_id' => 'string',
        'formatted_warning_message' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warning_type' => null,
        'employee_id' => 'int32',
        'warning' => null,
        'employee_name' => null,
        'pay_run_total_id' => 'int32',
        'meta_data' => null,
        'meta_data_json' => null,
        'employee_external_id' => null,
        'formatted_warning_message' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warning_type' => 'warningType',
        'employee_id' => 'employeeId',
        'warning' => 'warning',
        'employee_name' => 'employeeName',
        'pay_run_total_id' => 'payRunTotalId',
        'meta_data' => 'metaData',
        'meta_data_json' => 'metaDataJson',
        'employee_external_id' => 'employeeExternalId',
        'formatted_warning_message' => 'formattedWarningMessage',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warning_type' => 'setWarningType',
        'employee_id' => 'setEmployeeId',
        'warning' => 'setWarning',
        'employee_name' => 'setEmployeeName',
        'pay_run_total_id' => 'setPayRunTotalId',
        'meta_data' => 'setMetaData',
        'meta_data_json' => 'setMetaDataJson',
        'employee_external_id' => 'setEmployeeExternalId',
        'formatted_warning_message' => 'setFormattedWarningMessage',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warning_type' => 'getWarningType',
        'employee_id' => 'getEmployeeId',
        'warning' => 'getWarning',
        'employee_name' => 'getEmployeeName',
        'pay_run_total_id' => 'getPayRunTotalId',
        'meta_data' => 'getMetaData',
        'meta_data_json' => 'getMetaDataJson',
        'employee_external_id' => 'getEmployeeExternalId',
        'formatted_warning_message' => 'getFormattedWarningMessage',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const WARNING_TYPE_PAYMENT_FILE = 'PaymentFile';
    public const WARNING_TYPE_MORE_LEAVE_THAN_ACCRUED = 'MoreLeaveThanAccrued';
    public const WARNING_TYPE_UNPAID_EARNINGS = 'UnpaidEarnings';
    public const WARNING_TYPE_BIRTHDAY = 'Birthday';
    public const WARNING_TYPE_ANNIVERSARY = 'Anniversary';
    public const WARNING_TYPE_NEGATIVE_EARNINGS = 'NegativeEarnings';
    public const WARNING_TYPE_PREVIOUSLY_TERMINATED = 'PreviouslyTerminated';
    public const WARNING_TYPE_TERMINATED_WITH_EXPENSE_REIMBURSEMENTS = 'TerminatedWithExpenseReimbursements';
    public const WARNING_TYPE_EXPIRED_QUALIFICATION = 'ExpiredQualification';
    public const WARNING_TYPE_DUPLICATE_EARNINGS_LINES = 'DuplicateEarningsLines';
    public const WARNING_TYPE_TAX_CODE_MISSING = 'TaxCodeMissing';
    public const WARNING_TYPE_BPAY = 'Bpay';
    public const WARNING_TYPE_LEAVE_YEAR_CAP_REACHED = 'LeaveYearCapReached';
    public const WARNING_TYPE_AUTO_ENROLMENT_CHANGES = 'AutoEnrolmentChanges';
    public const WARNING_TYPE_EMPLOYEE_PENSION_CONTRIBUTION_REFUND = 'EmployeePensionContributionRefund';
    public const WARNING_TYPE_PENSION_SCHEME_REQUIRES_AUTHORIZATION = 'PensionSchemeRequiresAuthorization';
    public const WARNING_TYPE_UK_TAX_CODE_UPDATE = 'UkTaxCodeUpdate';
    public const WARNING_TYPE_UK_TAX_CODE_UPDATE_ERROR = 'UkTaxCodeUpdateError';
    public const WARNING_TYPE_NINO_UNKNOWN = 'NINOUnknown';
    public const WARNING_TYPE_PRO_RATA_EARNINGS = 'ProRataEarnings';
    public const WARNING_TYPE_HMRC_LATE_REASON_WARNING = 'HmrcLateReasonWarning';
    public const WARNING_TYPE_BELOW_MINIMUM_WAGE = 'BelowMinimumWage';
    public const WARNING_TYPE_EXPIRED_SPECIAL_TAX_RATE = 'ExpiredSpecialTaxRate';
    public const WARNING_TYPE_EXPIRED_STUDENT_LOAN_RATE = 'ExpiredStudentLoanRate';
    public const WARNING_TYPE_PENDING_LEAVE_REQUEST = 'PendingLeaveRequest';
    public const WARNING_TYPE_LEAVE_REQUEST_BEYOND_PAY_PERIOD = 'LeaveRequestBeyondPayPeriod';
    public const WARNING_TYPE_PRECEDING_LEAVE_REQUEST = 'PrecedingLeaveRequest';
    public const WARNING_TYPE_INCOMPLETE_PAY_RUN_TASKS = 'IncompletePayRunTasks';
    public const WARNING_TYPE_PENDING_EXPENSE_REQUESTS = 'PendingExpenseRequests';
    public const WARNING_TYPE_PAY_DAY_FILING = 'PayDayFiling';
    public const WARNING_TYPE_PAY_DAY_FILING_AMENDMENT = 'PayDayFilingAmendment';
    public const WARNING_TYPE_EMPLOYEE_INFORMATION = 'EmployeeInformation';
    public const WARNING_TYPE_IRD_SETTINGS = 'IrdSettings';
    public const WARNING_TYPE_AUTO_UPDATED_NI_CATEGORY = 'AutoUpdatedNICategory';
    public const WARNING_TYPE_UK_STUDENT_LOAN_UPDATE = 'UkStudentLoanUpdate';
    public const WARNING_TYPE_PENSION_PROVIDER_DOES_NOT_ALLOW_OVERSEAS_ADDRESS = 'PensionProviderDoesNotAllowOverseasAddress';
    public const WARNING_TYPE_MISSING_LEAVE_YEAR_ENTITLEMENT = 'MissingLeaveYearEntitlement';
    public const WARNING_TYPE_LEAVE_REQUEST_UNIT_TYPE_MISMATCH = 'LeaveRequestUnitTypeMismatch';
    public const WARNING_TYPE_EXPIRED_NRIC = 'ExpiredNric';
    public const WARNING_TYPE_EXCESS_OVERTIME = 'ExcessOvertime';
    public const WARNING_TYPE_FOREIGN_EMPLOYEE = 'ForeignEmployee';
    public const WARNING_TYPE_EXCESS_DEDUCTIONS = 'ExcessDeductions';
    public const WARNING_TYPE_TERMINATED_FOREIGN_EMPLOYEE = 'TerminatedForeignEmployee';
    public const WARNING_TYPE_STATUTORY_PAYMENT_APPLIED = 'StatutoryPaymentApplied';
    public const WARNING_TYPE_STATUTORY_PAYMENT_APPLIED_PREVIOUS = 'StatutoryPaymentAppliedPrevious';
    public const WARNING_TYPE_NATIONAL_INSURANCE_VALIDATIONS = 'NationalInsuranceValidations';
    public const WARNING_TYPE_MIXED_OFFSETS = 'MixedOffsets';
    public const WARNING_TYPE_PENDING_SAP_PAYMENT = 'PendingSapPayment';
    public const WARNING_TYPE_SCHEDULED_UPDATE_APPLIED = 'ScheduledUpdateApplied';
    public const WARNING_TYPE_PENSION_SETTINGS_UPDATED = 'PensionSettingsUpdated';
    public const WARNING_TYPE_TAX_RELIEF_THRESHOLD_EXCEEDED = 'TaxReliefThresholdExceeded';
    public const WARNING_TYPE_UK_NOT_NOTICE_UPDATE = 'UkNotNoticeUpdate';
    public const WARNING_TYPE_EARNINGS_AUTOMATICALLY_ADJUSTED = 'EarningsAutomaticallyAdjusted';
    public const WARNING_TYPE_EARNINGS_REQUIRE_ADJUSTMENT = 'EarningsRequireAdjustment';
    public const WARNING_TYPE_UK_TAX_CODE_P9_UPDATE = 'UkTaxCodeP9Update';
    public const WARNING_TYPE_HRDF_EMPLOYEE_WARNING = 'HrdfEmployeeWarning';
    public const WARNING_TYPE_NEW_PAYROLLED_BENEFITS = 'NewPayrolledBenefits';
    public const WARNING_TYPE_SUBMIT_TERMINATED_EMPLOYEE_TO_HMRC = 'SubmitTerminatedEmployeeToHmrc';
    public const WARNING_TYPE_SUPER_RECONCILIATION_PREVIOUS_PAY_RUN = 'SuperReconciliationPreviousPayRun';
    public const WARNING_TYPE_SUPER_RECONCILIATION_THIS_PAY_RUN = 'SuperReconciliationThisPayRun';
    public const WARNING_TYPE_MORE_THAN28_DAYS_WITHOUT_TFN_QUOTED = 'MoreThan28DaysWithoutTfnQuoted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarningTypeAllowableValues()
    {
        return [
            self::WARNING_TYPE_PAYMENT_FILE,
            self::WARNING_TYPE_MORE_LEAVE_THAN_ACCRUED,
            self::WARNING_TYPE_UNPAID_EARNINGS,
            self::WARNING_TYPE_BIRTHDAY,
            self::WARNING_TYPE_ANNIVERSARY,
            self::WARNING_TYPE_NEGATIVE_EARNINGS,
            self::WARNING_TYPE_PREVIOUSLY_TERMINATED,
            self::WARNING_TYPE_TERMINATED_WITH_EXPENSE_REIMBURSEMENTS,
            self::WARNING_TYPE_EXPIRED_QUALIFICATION,
            self::WARNING_TYPE_DUPLICATE_EARNINGS_LINES,
            self::WARNING_TYPE_TAX_CODE_MISSING,
            self::WARNING_TYPE_BPAY,
            self::WARNING_TYPE_LEAVE_YEAR_CAP_REACHED,
            self::WARNING_TYPE_AUTO_ENROLMENT_CHANGES,
            self::WARNING_TYPE_EMPLOYEE_PENSION_CONTRIBUTION_REFUND,
            self::WARNING_TYPE_PENSION_SCHEME_REQUIRES_AUTHORIZATION,
            self::WARNING_TYPE_UK_TAX_CODE_UPDATE,
            self::WARNING_TYPE_UK_TAX_CODE_UPDATE_ERROR,
            self::WARNING_TYPE_NINO_UNKNOWN,
            self::WARNING_TYPE_PRO_RATA_EARNINGS,
            self::WARNING_TYPE_HMRC_LATE_REASON_WARNING,
            self::WARNING_TYPE_BELOW_MINIMUM_WAGE,
            self::WARNING_TYPE_EXPIRED_SPECIAL_TAX_RATE,
            self::WARNING_TYPE_EXPIRED_STUDENT_LOAN_RATE,
            self::WARNING_TYPE_PENDING_LEAVE_REQUEST,
            self::WARNING_TYPE_LEAVE_REQUEST_BEYOND_PAY_PERIOD,
            self::WARNING_TYPE_PRECEDING_LEAVE_REQUEST,
            self::WARNING_TYPE_INCOMPLETE_PAY_RUN_TASKS,
            self::WARNING_TYPE_PENDING_EXPENSE_REQUESTS,
            self::WARNING_TYPE_PAY_DAY_FILING,
            self::WARNING_TYPE_PAY_DAY_FILING_AMENDMENT,
            self::WARNING_TYPE_EMPLOYEE_INFORMATION,
            self::WARNING_TYPE_IRD_SETTINGS,
            self::WARNING_TYPE_AUTO_UPDATED_NI_CATEGORY,
            self::WARNING_TYPE_UK_STUDENT_LOAN_UPDATE,
            self::WARNING_TYPE_PENSION_PROVIDER_DOES_NOT_ALLOW_OVERSEAS_ADDRESS,
            self::WARNING_TYPE_MISSING_LEAVE_YEAR_ENTITLEMENT,
            self::WARNING_TYPE_LEAVE_REQUEST_UNIT_TYPE_MISMATCH,
            self::WARNING_TYPE_EXPIRED_NRIC,
            self::WARNING_TYPE_EXCESS_OVERTIME,
            self::WARNING_TYPE_FOREIGN_EMPLOYEE,
            self::WARNING_TYPE_EXCESS_DEDUCTIONS,
            self::WARNING_TYPE_TERMINATED_FOREIGN_EMPLOYEE,
            self::WARNING_TYPE_STATUTORY_PAYMENT_APPLIED,
            self::WARNING_TYPE_STATUTORY_PAYMENT_APPLIED_PREVIOUS,
            self::WARNING_TYPE_NATIONAL_INSURANCE_VALIDATIONS,
            self::WARNING_TYPE_MIXED_OFFSETS,
            self::WARNING_TYPE_PENDING_SAP_PAYMENT,
            self::WARNING_TYPE_SCHEDULED_UPDATE_APPLIED,
            self::WARNING_TYPE_PENSION_SETTINGS_UPDATED,
            self::WARNING_TYPE_TAX_RELIEF_THRESHOLD_EXCEEDED,
            self::WARNING_TYPE_UK_NOT_NOTICE_UPDATE,
            self::WARNING_TYPE_EARNINGS_AUTOMATICALLY_ADJUSTED,
            self::WARNING_TYPE_EARNINGS_REQUIRE_ADJUSTMENT,
            self::WARNING_TYPE_UK_TAX_CODE_P9_UPDATE,
            self::WARNING_TYPE_HRDF_EMPLOYEE_WARNING,
            self::WARNING_TYPE_NEW_PAYROLLED_BENEFITS,
            self::WARNING_TYPE_SUBMIT_TERMINATED_EMPLOYEE_TO_HMRC,
            self::WARNING_TYPE_SUPER_RECONCILIATION_PREVIOUS_PAY_RUN,
            self::WARNING_TYPE_SUPER_RECONCILIATION_THIS_PAY_RUN,
            self::WARNING_TYPE_MORE_THAN28_DAYS_WITHOUT_TFN_QUOTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warning_type'] = isset($data['warning_type']) ? $data['warning_type'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['warning'] = isset($data['warning']) ? $data['warning'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['pay_run_total_id'] = isset($data['pay_run_total_id']) ? $data['pay_run_total_id'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['meta_data_json'] = isset($data['meta_data_json']) ? $data['meta_data_json'] : null;
        $this->container['employee_external_id'] = isset($data['employee_external_id']) ? $data['employee_external_id'] : null;
        $this->container['formatted_warning_message'] = isset($data['formatted_warning_message']) ? $data['formatted_warning_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWarningTypeAllowableValues();
        if (! is_null($this->container['warning_type']) && ! in_array($this->container['warning_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'warning_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets warning_type
     *
     * @return string
     */
    public function getWarningType()
    {
        return $this->container['warning_type'];
    }

    /**
     * Sets warning_type
     *
     * @param string $warning_type
     *
     * @return $this
     */
    public function setWarningType($warning_type)
    {
        $allowedValues = $this->getWarningTypeAllowableValues();
        if (! is_null($warning_type) && ! in_array($warning_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'warning_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warning_type'] = $warning_type;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets warning
     *
     * @return string
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     *
     * @param string $warning
     *
     * @return $this
     */
    public function setWarning($warning)
    {
        $this->container['warning'] = $warning;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets pay_run_total_id
     *
     * @return int
     */
    public function getPayRunTotalId()
    {
        return $this->container['pay_run_total_id'];
    }

    /**
     * Sets pay_run_total_id
     *
     * @param int $pay_run_total_id
     *
     * @return $this
     */
    public function setPayRunTotalId($pay_run_total_id)
    {
        $this->container['pay_run_total_id'] = $pay_run_total_id;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return object
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param object $meta_data
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets meta_data_json
     *
     * @return string
     */
    public function getMetaDataJson()
    {
        return $this->container['meta_data_json'];
    }

    /**
     * Sets meta_data_json
     *
     * @param string $meta_data_json
     *
     * @return $this
     */
    public function setMetaDataJson($meta_data_json)
    {
        $this->container['meta_data_json'] = $meta_data_json;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string $employee_external_id
     *
     * @return $this
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Gets formatted_warning_message
     *
     * @return string
     */
    public function getFormattedWarningMessage()
    {
        return $this->container['formatted_warning_message'];
    }

    /**
     * Sets formatted_warning_message
     *
     * @param string $formatted_warning_message
     *
     * @return $this
     */
    public function setFormattedWarningMessage($formatted_warning_message)
    {
        $this->container['formatted_warning_message'] = $formatted_warning_message;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
