<?php
/**
 * SaveLeaveAccrualModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * SaveLeaveAccrualModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaveLeaveAccrualModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SaveLeaveAccrualModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accrual_type' => 'string',
        'notes' => 'string',
        'amount' => 'double',
        'leave_category_id' => 'int',
        'apply_leave_loading' => 'bool',
        'adjust_earnings' => 'bool',
        'external_reference_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accrual_type' => null,
        'notes' => null,
        'amount' => 'double',
        'leave_category_id' => 'int32',
        'apply_leave_loading' => null,
        'adjust_earnings' => null,
        'external_reference_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accrual_type' => 'accrualType',
        'notes' => 'notes',
        'amount' => 'amount',
        'leave_category_id' => 'leaveCategoryId',
        'apply_leave_loading' => 'applyLeaveLoading',
        'adjust_earnings' => 'adjustEarnings',
        'external_reference_id' => 'externalReferenceId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accrual_type' => 'setAccrualType',
        'notes' => 'setNotes',
        'amount' => 'setAmount',
        'leave_category_id' => 'setLeaveCategoryId',
        'apply_leave_loading' => 'setApplyLeaveLoading',
        'adjust_earnings' => 'setAdjustEarnings',
        'external_reference_id' => 'setExternalReferenceId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accrual_type' => 'getAccrualType',
        'notes' => 'getNotes',
        'amount' => 'getAmount',
        'leave_category_id' => 'getLeaveCategoryId',
        'apply_leave_loading' => 'getApplyLeaveLoading',
        'adjust_earnings' => 'getAdjustEarnings',
        'external_reference_id' => 'getExternalReferenceId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const ACCRUAL_TYPE_LEAVE_ACCRUED = 'LeaveAccrued';
    public const ACCRUAL_TYPE_LEAVE_TAKEN = 'LeaveTaken';
    public const ACCRUAL_TYPE_LEAVE_ADJUSTMENT = 'LeaveAdjustment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccrualTypeAllowableValues()
    {
        return [
            self::ACCRUAL_TYPE_LEAVE_ACCRUED,
            self::ACCRUAL_TYPE_LEAVE_TAKEN,
            self::ACCRUAL_TYPE_LEAVE_ADJUSTMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accrual_type'] = isset($data['accrual_type']) ? $data['accrual_type'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['leave_category_id'] = isset($data['leave_category_id']) ? $data['leave_category_id'] : null;
        $this->container['apply_leave_loading'] = isset($data['apply_leave_loading']) ? $data['apply_leave_loading'] : null;
        $this->container['adjust_earnings'] = isset($data['adjust_earnings']) ? $data['adjust_earnings'] : null;
        $this->container['external_reference_id'] = isset($data['external_reference_id']) ? $data['external_reference_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (! is_null($this->container['accrual_type']) && ! in_array($this->container['accrual_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accrual_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets accrual_type
     *
     * @return string
     */
    public function getAccrualType()
    {
        return $this->container['accrual_type'];
    }

    /**
     * Sets accrual_type
     *
     * @param string $accrual_type
     *
     * @return $this
     */
    public function setAccrualType($accrual_type)
    {
        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (! is_null($accrual_type) && ! in_array($accrual_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accrual_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accrual_type'] = $accrual_type;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets leave_category_id
     *
     * @return int
     */
    public function getLeaveCategoryId()
    {
        return $this->container['leave_category_id'];
    }

    /**
     * Sets leave_category_id
     *
     * @param int $leave_category_id
     *
     * @return $this
     */
    public function setLeaveCategoryId($leave_category_id)
    {
        $this->container['leave_category_id'] = $leave_category_id;

        return $this;
    }

    /**
     * Gets apply_leave_loading
     *
     * @return bool
     */
    public function getApplyLeaveLoading()
    {
        return $this->container['apply_leave_loading'];
    }

    /**
     * Sets apply_leave_loading
     *
     * @param bool $apply_leave_loading
     *
     * @return $this
     */
    public function setApplyLeaveLoading($apply_leave_loading)
    {
        $this->container['apply_leave_loading'] = $apply_leave_loading;

        return $this;
    }

    /**
     * Gets adjust_earnings
     *
     * @return bool
     */
    public function getAdjustEarnings()
    {
        return $this->container['adjust_earnings'];
    }

    /**
     * Sets adjust_earnings
     *
     * @param bool $adjust_earnings
     *
     * @return $this
     */
    public function setAdjustEarnings($adjust_earnings)
    {
        $this->container['adjust_earnings'] = $adjust_earnings;

        return $this;
    }

    /**
     * Gets external_reference_id
     *
     * @return string
     */
    public function getExternalReferenceId()
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id
     *
     * @param string $external_reference_id
     *
     * @return $this
     */
    public function setExternalReferenceId($external_reference_id)
    {
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
