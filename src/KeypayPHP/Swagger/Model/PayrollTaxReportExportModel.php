<?php
/**
 * PayrollTaxReportExportModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayrollTaxReportExportModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayrollTaxReportExportModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayrollTaxReportExportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee_id' => 'int',
        'first_name' => 'string',
        'surname' => 'string',
        'external_id' => 'string',
        'location' => 'string',
        'type' => 'string',
        'state' => 'string',
        'amount' => 'double',
        'employee_payroll_tax_exempt' => 'bool',
        'pay_category_payroll_tax_exempt' => 'bool',
        'termination_payment' => 'bool',
        'allowance' => 'bool',
        'etp' => 'bool',
        'genuine_redundancy' => 'bool',
        'lump_sum_d' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee_id' => 'int32',
        'first_name' => null,
        'surname' => null,
        'external_id' => null,
        'location' => null,
        'type' => null,
        'state' => null,
        'amount' => 'double',
        'employee_payroll_tax_exempt' => null,
        'pay_category_payroll_tax_exempt' => null,
        'termination_payment' => null,
        'allowance' => null,
        'etp' => null,
        'genuine_redundancy' => null,
        'lump_sum_d' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'surname' => 'surname',
        'external_id' => 'externalId',
        'location' => 'location',
        'type' => 'type',
        'state' => 'state',
        'amount' => 'amount',
        'employee_payroll_tax_exempt' => 'employeePayrollTaxExempt',
        'pay_category_payroll_tax_exempt' => 'payCategoryPayrollTaxExempt',
        'termination_payment' => 'terminationPayment',
        'allowance' => 'allowance',
        'etp' => 'etp',
        'genuine_redundancy' => 'genuineRedundancy',
        'lump_sum_d' => 'lumpSumD',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'surname' => 'setSurname',
        'external_id' => 'setExternalId',
        'location' => 'setLocation',
        'type' => 'setType',
        'state' => 'setState',
        'amount' => 'setAmount',
        'employee_payroll_tax_exempt' => 'setEmployeePayrollTaxExempt',
        'pay_category_payroll_tax_exempt' => 'setPayCategoryPayrollTaxExempt',
        'termination_payment' => 'setTerminationPayment',
        'allowance' => 'setAllowance',
        'etp' => 'setEtp',
        'genuine_redundancy' => 'setGenuineRedundancy',
        'lump_sum_d' => 'setLumpSumD',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'surname' => 'getSurname',
        'external_id' => 'getExternalId',
        'location' => 'getLocation',
        'type' => 'getType',
        'state' => 'getState',
        'amount' => 'getAmount',
        'employee_payroll_tax_exempt' => 'getEmployeePayrollTaxExempt',
        'pay_category_payroll_tax_exempt' => 'getPayCategoryPayrollTaxExempt',
        'termination_payment' => 'getTerminationPayment',
        'allowance' => 'getAllowance',
        'etp' => 'getEtp',
        'genuine_redundancy' => 'getGenuineRedundancy',
        'lump_sum_d' => 'getLumpSumD',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['employee_payroll_tax_exempt'] = isset($data['employee_payroll_tax_exempt']) ? $data['employee_payroll_tax_exempt'] : null;
        $this->container['pay_category_payroll_tax_exempt'] = isset($data['pay_category_payroll_tax_exempt']) ? $data['pay_category_payroll_tax_exempt'] : null;
        $this->container['termination_payment'] = isset($data['termination_payment']) ? $data['termination_payment'] : null;
        $this->container['allowance'] = isset($data['allowance']) ? $data['allowance'] : null;
        $this->container['etp'] = isset($data['etp']) ? $data['etp'] : null;
        $this->container['genuine_redundancy'] = isset($data['genuine_redundancy']) ? $data['genuine_redundancy'] : null;
        $this->container['lump_sum_d'] = isset($data['lump_sum_d']) ? $data['lump_sum_d'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets employee_payroll_tax_exempt
     *
     * @return bool
     */
    public function getEmployeePayrollTaxExempt()
    {
        return $this->container['employee_payroll_tax_exempt'];
    }

    /**
     * Sets employee_payroll_tax_exempt
     *
     * @param bool $employee_payroll_tax_exempt
     *
     * @return $this
     */
    public function setEmployeePayrollTaxExempt($employee_payroll_tax_exempt)
    {
        $this->container['employee_payroll_tax_exempt'] = $employee_payroll_tax_exempt;

        return $this;
    }

    /**
     * Gets pay_category_payroll_tax_exempt
     *
     * @return bool
     */
    public function getPayCategoryPayrollTaxExempt()
    {
        return $this->container['pay_category_payroll_tax_exempt'];
    }

    /**
     * Sets pay_category_payroll_tax_exempt
     *
     * @param bool $pay_category_payroll_tax_exempt
     *
     * @return $this
     */
    public function setPayCategoryPayrollTaxExempt($pay_category_payroll_tax_exempt)
    {
        $this->container['pay_category_payroll_tax_exempt'] = $pay_category_payroll_tax_exempt;

        return $this;
    }

    /**
     * Gets termination_payment
     *
     * @return bool
     */
    public function getTerminationPayment()
    {
        return $this->container['termination_payment'];
    }

    /**
     * Sets termination_payment
     *
     * @param bool $termination_payment
     *
     * @return $this
     */
    public function setTerminationPayment($termination_payment)
    {
        $this->container['termination_payment'] = $termination_payment;

        return $this;
    }

    /**
     * Gets allowance
     *
     * @return bool
     */
    public function getAllowance()
    {
        return $this->container['allowance'];
    }

    /**
     * Sets allowance
     *
     * @param bool $allowance
     *
     * @return $this
     */
    public function setAllowance($allowance)
    {
        $this->container['allowance'] = $allowance;

        return $this;
    }

    /**
     * Gets etp
     *
     * @return bool
     */
    public function getEtp()
    {
        return $this->container['etp'];
    }

    /**
     * Sets etp
     *
     * @param bool $etp
     *
     * @return $this
     */
    public function setEtp($etp)
    {
        $this->container['etp'] = $etp;

        return $this;
    }

    /**
     * Gets genuine_redundancy
     *
     * @return bool
     */
    public function getGenuineRedundancy()
    {
        return $this->container['genuine_redundancy'];
    }

    /**
     * Sets genuine_redundancy
     *
     * @param bool $genuine_redundancy
     *
     * @return $this
     */
    public function setGenuineRedundancy($genuine_redundancy)
    {
        $this->container['genuine_redundancy'] = $genuine_redundancy;

        return $this;
    }

    /**
     * Gets lump_sum_d
     *
     * @return bool
     */
    public function getLumpSumD()
    {
        return $this->container['lump_sum_d'];
    }

    /**
     * Sets lump_sum_d
     *
     * @param bool $lump_sum_d
     *
     * @return $this
     */
    public function setLumpSumD($lump_sum_d)
    {
        $this->container['lump_sum_d'] = $lump_sum_d;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
