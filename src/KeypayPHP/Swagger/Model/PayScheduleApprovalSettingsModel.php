<?php
/**
 * PayScheduleApprovalSettingsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayScheduleApprovalSettingsModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayScheduleApprovalSettingsModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayScheduleApprovalSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'require_approval' => 'bool',
        'reminder_day' => 'int',
        'notification_template' => 'string',
        'notification_subject' => 'string',
        'reminder_template' => 'string',
        'reminder_subject' => 'string',
        'send_reminder' => 'bool',
        'approvers_to_notify' => 'string[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'require_approval' => null,
        'reminder_day' => 'int32',
        'notification_template' => null,
        'notification_subject' => null,
        'reminder_template' => null,
        'reminder_subject' => null,
        'send_reminder' => null,
        'approvers_to_notify' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'require_approval' => 'requireApproval',
        'reminder_day' => 'reminderDay',
        'notification_template' => 'notificationTemplate',
        'notification_subject' => 'notificationSubject',
        'reminder_template' => 'reminderTemplate',
        'reminder_subject' => 'reminderSubject',
        'send_reminder' => 'sendReminder',
        'approvers_to_notify' => 'approversToNotify',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'require_approval' => 'setRequireApproval',
        'reminder_day' => 'setReminderDay',
        'notification_template' => 'setNotificationTemplate',
        'notification_subject' => 'setNotificationSubject',
        'reminder_template' => 'setReminderTemplate',
        'reminder_subject' => 'setReminderSubject',
        'send_reminder' => 'setSendReminder',
        'approvers_to_notify' => 'setApproversToNotify',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'require_approval' => 'getRequireApproval',
        'reminder_day' => 'getReminderDay',
        'notification_template' => 'getNotificationTemplate',
        'notification_subject' => 'getNotificationSubject',
        'reminder_template' => 'getReminderTemplate',
        'reminder_subject' => 'getReminderSubject',
        'send_reminder' => 'getSendReminder',
        'approvers_to_notify' => 'getApproversToNotify',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['require_approval'] = isset($data['require_approval']) ? $data['require_approval'] : null;
        $this->container['reminder_day'] = isset($data['reminder_day']) ? $data['reminder_day'] : null;
        $this->container['notification_template'] = isset($data['notification_template']) ? $data['notification_template'] : null;
        $this->container['notification_subject'] = isset($data['notification_subject']) ? $data['notification_subject'] : null;
        $this->container['reminder_template'] = isset($data['reminder_template']) ? $data['reminder_template'] : null;
        $this->container['reminder_subject'] = isset($data['reminder_subject']) ? $data['reminder_subject'] : null;
        $this->container['send_reminder'] = isset($data['send_reminder']) ? $data['send_reminder'] : null;
        $this->container['approvers_to_notify'] = isset($data['approvers_to_notify']) ? $data['approvers_to_notify'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets require_approval
     *
     * @return bool
     */
    public function getRequireApproval()
    {
        return $this->container['require_approval'];
    }

    /**
     * Sets require_approval
     *
     * @param bool $require_approval
     *
     * @return $this
     */
    public function setRequireApproval($require_approval)
    {
        $this->container['require_approval'] = $require_approval;

        return $this;
    }

    /**
     * Gets reminder_day
     *
     * @return int
     */
    public function getReminderDay()
    {
        return $this->container['reminder_day'];
    }

    /**
     * Sets reminder_day
     *
     * @param int $reminder_day
     *
     * @return $this
     */
    public function setReminderDay($reminder_day)
    {
        $this->container['reminder_day'] = $reminder_day;

        return $this;
    }

    /**
     * Gets notification_template
     *
     * @return string
     */
    public function getNotificationTemplate()
    {
        return $this->container['notification_template'];
    }

    /**
     * Sets notification_template
     *
     * @param string $notification_template
     *
     * @return $this
     */
    public function setNotificationTemplate($notification_template)
    {
        $this->container['notification_template'] = $notification_template;

        return $this;
    }

    /**
     * Gets notification_subject
     *
     * @return string
     */
    public function getNotificationSubject()
    {
        return $this->container['notification_subject'];
    }

    /**
     * Sets notification_subject
     *
     * @param string $notification_subject
     *
     * @return $this
     */
    public function setNotificationSubject($notification_subject)
    {
        $this->container['notification_subject'] = $notification_subject;

        return $this;
    }

    /**
     * Gets reminder_template
     *
     * @return string
     */
    public function getReminderTemplate()
    {
        return $this->container['reminder_template'];
    }

    /**
     * Sets reminder_template
     *
     * @param string $reminder_template
     *
     * @return $this
     */
    public function setReminderTemplate($reminder_template)
    {
        $this->container['reminder_template'] = $reminder_template;

        return $this;
    }

    /**
     * Gets reminder_subject
     *
     * @return string
     */
    public function getReminderSubject()
    {
        return $this->container['reminder_subject'];
    }

    /**
     * Sets reminder_subject
     *
     * @param string $reminder_subject
     *
     * @return $this
     */
    public function setReminderSubject($reminder_subject)
    {
        $this->container['reminder_subject'] = $reminder_subject;

        return $this;
    }

    /**
     * Gets send_reminder
     *
     * @return bool
     */
    public function getSendReminder()
    {
        return $this->container['send_reminder'];
    }

    /**
     * Sets send_reminder
     *
     * @param bool $send_reminder
     *
     * @return $this
     */
    public function setSendReminder($send_reminder)
    {
        $this->container['send_reminder'] = $send_reminder;

        return $this;
    }

    /**
     * Gets approvers_to_notify
     *
     * @return string[]
     */
    public function getApproversToNotify()
    {
        return $this->container['approvers_to_notify'];
    }

    /**
     * Sets approvers_to_notify
     *
     * @param string[] $approvers_to_notify
     *
     * @return $this
     */
    public function setApproversToNotify($approvers_to_notify)
    {
        $this->container['approvers_to_notify'] = $approvers_to_notify;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
