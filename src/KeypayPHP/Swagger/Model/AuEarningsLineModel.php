<?php
/**
 * AuEarningsLineModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuEarningsLineModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuEarningsLineModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuEarningsLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'super' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'payg' => 'double',
        'pay_category_id' => 'string',
        'pay_category_name' => 'string',
        'units' => 'double',
        'notes' => 'string',
        'rate' => 'double',
        'earnings' => 'double',
        'lump_sum_number_of_pay_periods' => 'double',
        'lump_sum_calculation_method' => 'string',
        'timesheet_line_id' => 'int',
        'timesheet_line_external_id' => 'string',
        'id' => 'int',
        'external_id' => 'string',
        'location_id' => 'string',
        'location_name' => 'string',
        'employee_id' => 'string',
        'employee_name' => 'string',
        'employee_external_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'super' => 'double',
        'sfss' => 'double',
        'help' => 'double',
        'payg' => 'double',
        'pay_category_id' => null,
        'pay_category_name' => null,
        'units' => 'double',
        'notes' => null,
        'rate' => 'double',
        'earnings' => 'double',
        'lump_sum_number_of_pay_periods' => 'double',
        'lump_sum_calculation_method' => null,
        'timesheet_line_id' => 'int32',
        'timesheet_line_external_id' => null,
        'id' => 'int32',
        'external_id' => null,
        'location_id' => null,
        'location_name' => null,
        'employee_id' => null,
        'employee_name' => null,
        'employee_external_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'super' => 'super',
        'sfss' => 'sfss',
        'help' => 'help',
        'payg' => 'payg',
        'pay_category_id' => 'payCategoryId',
        'pay_category_name' => 'payCategoryName',
        'units' => 'units',
        'notes' => 'notes',
        'rate' => 'rate',
        'earnings' => 'earnings',
        'lump_sum_number_of_pay_periods' => 'lumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'lumpSumCalculationMethod',
        'timesheet_line_id' => 'timesheetLineId',
        'timesheet_line_external_id' => 'timesheetLineExternalId',
        'id' => 'id',
        'external_id' => 'externalId',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'employee_external_id' => 'employeeExternalId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'super' => 'setSuper',
        'sfss' => 'setSfss',
        'help' => 'setHelp',
        'payg' => 'setPayg',
        'pay_category_id' => 'setPayCategoryId',
        'pay_category_name' => 'setPayCategoryName',
        'units' => 'setUnits',
        'notes' => 'setNotes',
        'rate' => 'setRate',
        'earnings' => 'setEarnings',
        'lump_sum_number_of_pay_periods' => 'setLumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'setLumpSumCalculationMethod',
        'timesheet_line_id' => 'setTimesheetLineId',
        'timesheet_line_external_id' => 'setTimesheetLineExternalId',
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'employee_external_id' => 'setEmployeeExternalId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'super' => 'getSuper',
        'sfss' => 'getSfss',
        'help' => 'getHelp',
        'payg' => 'getPayg',
        'pay_category_id' => 'getPayCategoryId',
        'pay_category_name' => 'getPayCategoryName',
        'units' => 'getUnits',
        'notes' => 'getNotes',
        'rate' => 'getRate',
        'earnings' => 'getEarnings',
        'lump_sum_number_of_pay_periods' => 'getLumpSumNumberOfPayPeriods',
        'lump_sum_calculation_method' => 'getLumpSumCalculationMethod',
        'timesheet_line_id' => 'getTimesheetLineId',
        'timesheet_line_external_id' => 'getTimesheetLineExternalId',
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'employee_external_id' => 'getEmployeeExternalId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const LUMP_SUM_CALCULATION_METHOD_NOT_APPLICABLE = 'NotApplicable';
    public const LUMP_SUM_CALCULATION_METHOD_A = 'A';
    public const LUMP_SUM_CALCULATION_METHOD_B2 = 'B2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLumpSumCalculationMethodAllowableValues()
    {
        return [
            self::LUMP_SUM_CALCULATION_METHOD_NOT_APPLICABLE,
            self::LUMP_SUM_CALCULATION_METHOD_A,
            self::LUMP_SUM_CALCULATION_METHOD_B2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['super'] = isset($data['super']) ? $data['super'] : null;
        $this->container['sfss'] = isset($data['sfss']) ? $data['sfss'] : null;
        $this->container['help'] = isset($data['help']) ? $data['help'] : null;
        $this->container['payg'] = isset($data['payg']) ? $data['payg'] : null;
        $this->container['pay_category_id'] = isset($data['pay_category_id']) ? $data['pay_category_id'] : null;
        $this->container['pay_category_name'] = isset($data['pay_category_name']) ? $data['pay_category_name'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['earnings'] = isset($data['earnings']) ? $data['earnings'] : null;
        $this->container['lump_sum_number_of_pay_periods'] = isset($data['lump_sum_number_of_pay_periods']) ? $data['lump_sum_number_of_pay_periods'] : null;
        $this->container['lump_sum_calculation_method'] = isset($data['lump_sum_calculation_method']) ? $data['lump_sum_calculation_method'] : null;
        $this->container['timesheet_line_id'] = isset($data['timesheet_line_id']) ? $data['timesheet_line_id'] : null;
        $this->container['timesheet_line_external_id'] = isset($data['timesheet_line_external_id']) ? $data['timesheet_line_external_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['employee_external_id'] = isset($data['employee_external_id']) ? $data['employee_external_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLumpSumCalculationMethodAllowableValues();
        if (! is_null($this->container['lump_sum_calculation_method']) && ! in_array($this->container['lump_sum_calculation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lump_sum_calculation_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets super
     *
     * @return float
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param float $super
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets sfss
     *
     * @return float
     */
    public function getSfss()
    {
        return $this->container['sfss'];
    }

    /**
     * Sets sfss
     *
     * @param float $sfss
     *
     * @return $this
     */
    public function setSfss($sfss)
    {
        $this->container['sfss'] = $sfss;

        return $this;
    }

    /**
     * Gets help
     *
     * @return float
     */
    public function getHelp()
    {
        return $this->container['help'];
    }

    /**
     * Sets help
     *
     * @param float $help
     *
     * @return $this
     */
    public function setHelp($help)
    {
        $this->container['help'] = $help;

        return $this;
    }

    /**
     * Gets payg
     *
     * @return float
     */
    public function getPayg()
    {
        return $this->container['payg'];
    }

    /**
     * Sets payg
     *
     * @param float $payg
     *
     * @return $this
     */
    public function setPayg($payg)
    {
        $this->container['payg'] = $payg;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return string
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param string $pay_category_id
     *
     * @return $this
     */
    public function setPayCategoryId($pay_category_id)
    {
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets pay_category_name
     *
     * @return string
     */
    public function getPayCategoryName()
    {
        return $this->container['pay_category_name'];
    }

    /**
     * Sets pay_category_name
     *
     * @param string $pay_category_name
     *
     * @return $this
     */
    public function setPayCategoryName($pay_category_name)
    {
        $this->container['pay_category_name'] = $pay_category_name;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float $units
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float $rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return float
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param float $earnings
     *
     * @return $this
     */
    public function setEarnings($earnings)
    {
        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets lump_sum_number_of_pay_periods
     *
     * @return float
     */
    public function getLumpSumNumberOfPayPeriods()
    {
        return $this->container['lump_sum_number_of_pay_periods'];
    }

    /**
     * Sets lump_sum_number_of_pay_periods
     *
     * @param float $lump_sum_number_of_pay_periods
     *
     * @return $this
     */
    public function setLumpSumNumberOfPayPeriods($lump_sum_number_of_pay_periods)
    {
        $this->container['lump_sum_number_of_pay_periods'] = $lump_sum_number_of_pay_periods;

        return $this;
    }

    /**
     * Gets lump_sum_calculation_method
     *
     * @return string
     */
    public function getLumpSumCalculationMethod()
    {
        return $this->container['lump_sum_calculation_method'];
    }

    /**
     * Sets lump_sum_calculation_method
     *
     * @param string $lump_sum_calculation_method
     *
     * @return $this
     */
    public function setLumpSumCalculationMethod($lump_sum_calculation_method)
    {
        $allowedValues = $this->getLumpSumCalculationMethodAllowableValues();
        if (! is_null($lump_sum_calculation_method) && ! in_array($lump_sum_calculation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lump_sum_calculation_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lump_sum_calculation_method'] = $lump_sum_calculation_method;

        return $this;
    }

    /**
     * Gets timesheet_line_id
     *
     * @return int
     */
    public function getTimesheetLineId()
    {
        return $this->container['timesheet_line_id'];
    }

    /**
     * Sets timesheet_line_id
     *
     * @param int $timesheet_line_id
     *
     * @return $this
     */
    public function setTimesheetLineId($timesheet_line_id)
    {
        $this->container['timesheet_line_id'] = $timesheet_line_id;

        return $this;
    }

    /**
     * Gets timesheet_line_external_id
     *
     * @return string
     */
    public function getTimesheetLineExternalId()
    {
        return $this->container['timesheet_line_external_id'];
    }

    /**
     * Sets timesheet_line_external_id
     *
     * @param string $timesheet_line_external_id
     *
     * @return $this
     */
    public function setTimesheetLineExternalId($timesheet_line_external_id)
    {
        $this->container['timesheet_line_external_id'] = $timesheet_line_external_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets employee_external_id
     *
     * @return string
     */
    public function getEmployeeExternalId()
    {
        return $this->container['employee_external_id'];
    }

    /**
     * Sets employee_external_id
     *
     * @param string $employee_external_id
     *
     * @return $this
     */
    public function setEmployeeExternalId($employee_external_id)
    {
        $this->container['employee_external_id'] = $employee_external_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
