<?php
/**
 * AuPayRunGrandTotalModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuPayRunGrandTotalModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuPayRunGrandTotalModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuPayRunGrandTotalModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'payg_withholding_amount' => 'double',
        'number_of_employees' => 'int',
        'total_hours' => 'double',
        'taxable_earnings' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'post_tax_deduction_amount' => 'double',
        'employer_contribution' => 'double',
        'employee_expenses_total' => 'double',
        'employer_liabilities_total' => 'double',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sfss_amount' => 'double',
        'help_amount' => 'double',
        'super_contribution' => 'double',
        'payg_withholding_amount' => 'double',
        'number_of_employees' => 'int32',
        'total_hours' => 'double',
        'taxable_earnings' => 'double',
        'gross_earnings' => 'double',
        'net_earnings' => 'double',
        'pre_tax_deduction_amount' => 'double',
        'post_tax_deduction_amount' => 'double',
        'employer_contribution' => 'double',
        'employee_expenses_total' => 'double',
        'employer_liabilities_total' => 'double',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sfss_amount' => 'sfssAmount',
        'help_amount' => 'helpAmount',
        'super_contribution' => 'superContribution',
        'payg_withholding_amount' => 'paygWithholdingAmount',
        'number_of_employees' => 'numberOfEmployees',
        'total_hours' => 'totalHours',
        'taxable_earnings' => 'taxableEarnings',
        'gross_earnings' => 'grossEarnings',
        'net_earnings' => 'netEarnings',
        'pre_tax_deduction_amount' => 'preTaxDeductionAmount',
        'post_tax_deduction_amount' => 'postTaxDeductionAmount',
        'employer_contribution' => 'employerContribution',
        'employee_expenses_total' => 'employeeExpensesTotal',
        'employer_liabilities_total' => 'employerLiabilitiesTotal',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sfss_amount' => 'setSfssAmount',
        'help_amount' => 'setHelpAmount',
        'super_contribution' => 'setSuperContribution',
        'payg_withholding_amount' => 'setPaygWithholdingAmount',
        'number_of_employees' => 'setNumberOfEmployees',
        'total_hours' => 'setTotalHours',
        'taxable_earnings' => 'setTaxableEarnings',
        'gross_earnings' => 'setGrossEarnings',
        'net_earnings' => 'setNetEarnings',
        'pre_tax_deduction_amount' => 'setPreTaxDeductionAmount',
        'post_tax_deduction_amount' => 'setPostTaxDeductionAmount',
        'employer_contribution' => 'setEmployerContribution',
        'employee_expenses_total' => 'setEmployeeExpensesTotal',
        'employer_liabilities_total' => 'setEmployerLiabilitiesTotal',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sfss_amount' => 'getSfssAmount',
        'help_amount' => 'getHelpAmount',
        'super_contribution' => 'getSuperContribution',
        'payg_withholding_amount' => 'getPaygWithholdingAmount',
        'number_of_employees' => 'getNumberOfEmployees',
        'total_hours' => 'getTotalHours',
        'taxable_earnings' => 'getTaxableEarnings',
        'gross_earnings' => 'getGrossEarnings',
        'net_earnings' => 'getNetEarnings',
        'pre_tax_deduction_amount' => 'getPreTaxDeductionAmount',
        'post_tax_deduction_amount' => 'getPostTaxDeductionAmount',
        'employer_contribution' => 'getEmployerContribution',
        'employee_expenses_total' => 'getEmployeeExpensesTotal',
        'employer_liabilities_total' => 'getEmployerLiabilitiesTotal',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sfss_amount'] = isset($data['sfss_amount']) ? $data['sfss_amount'] : null;
        $this->container['help_amount'] = isset($data['help_amount']) ? $data['help_amount'] : null;
        $this->container['super_contribution'] = isset($data['super_contribution']) ? $data['super_contribution'] : null;
        $this->container['payg_withholding_amount'] = isset($data['payg_withholding_amount']) ? $data['payg_withholding_amount'] : null;
        $this->container['number_of_employees'] = isset($data['number_of_employees']) ? $data['number_of_employees'] : null;
        $this->container['total_hours'] = isset($data['total_hours']) ? $data['total_hours'] : null;
        $this->container['taxable_earnings'] = isset($data['taxable_earnings']) ? $data['taxable_earnings'] : null;
        $this->container['gross_earnings'] = isset($data['gross_earnings']) ? $data['gross_earnings'] : null;
        $this->container['net_earnings'] = isset($data['net_earnings']) ? $data['net_earnings'] : null;
        $this->container['pre_tax_deduction_amount'] = isset($data['pre_tax_deduction_amount']) ? $data['pre_tax_deduction_amount'] : null;
        $this->container['post_tax_deduction_amount'] = isset($data['post_tax_deduction_amount']) ? $data['post_tax_deduction_amount'] : null;
        $this->container['employer_contribution'] = isset($data['employer_contribution']) ? $data['employer_contribution'] : null;
        $this->container['employee_expenses_total'] = isset($data['employee_expenses_total']) ? $data['employee_expenses_total'] : null;
        $this->container['employer_liabilities_total'] = isset($data['employer_liabilities_total']) ? $data['employer_liabilities_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets sfss_amount
     *
     * @return float
     */
    public function getSfssAmount()
    {
        return $this->container['sfss_amount'];
    }

    /**
     * Sets sfss_amount
     *
     * @param float $sfss_amount
     *
     * @return $this
     */
    public function setSfssAmount($sfss_amount)
    {
        $this->container['sfss_amount'] = $sfss_amount;

        return $this;
    }

    /**
     * Gets help_amount
     *
     * @return float
     */
    public function getHelpAmount()
    {
        return $this->container['help_amount'];
    }

    /**
     * Sets help_amount
     *
     * @param float $help_amount
     *
     * @return $this
     */
    public function setHelpAmount($help_amount)
    {
        $this->container['help_amount'] = $help_amount;

        return $this;
    }

    /**
     * Gets super_contribution
     *
     * @return float
     */
    public function getSuperContribution()
    {
        return $this->container['super_contribution'];
    }

    /**
     * Sets super_contribution
     *
     * @param float $super_contribution
     *
     * @return $this
     */
    public function setSuperContribution($super_contribution)
    {
        $this->container['super_contribution'] = $super_contribution;

        return $this;
    }

    /**
     * Gets payg_withholding_amount
     *
     * @return float
     */
    public function getPaygWithholdingAmount()
    {
        return $this->container['payg_withholding_amount'];
    }

    /**
     * Sets payg_withholding_amount
     *
     * @param float $payg_withholding_amount
     *
     * @return $this
     */
    public function setPaygWithholdingAmount($payg_withholding_amount)
    {
        $this->container['payg_withholding_amount'] = $payg_withholding_amount;

        return $this;
    }

    /**
     * Gets number_of_employees
     *
     * @return int
     */
    public function getNumberOfEmployees()
    {
        return $this->container['number_of_employees'];
    }

    /**
     * Sets number_of_employees
     *
     * @param int $number_of_employees
     *
     * @return $this
     */
    public function setNumberOfEmployees($number_of_employees)
    {
        $this->container['number_of_employees'] = $number_of_employees;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float $total_hours
     *
     * @return $this
     */
    public function setTotalHours($total_hours)
    {
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets taxable_earnings
     *
     * @return float
     */
    public function getTaxableEarnings()
    {
        return $this->container['taxable_earnings'];
    }

    /**
     * Sets taxable_earnings
     *
     * @param float $taxable_earnings
     *
     * @return $this
     */
    public function setTaxableEarnings($taxable_earnings)
    {
        $this->container['taxable_earnings'] = $taxable_earnings;

        return $this;
    }

    /**
     * Gets gross_earnings
     *
     * @return float
     */
    public function getGrossEarnings()
    {
        return $this->container['gross_earnings'];
    }

    /**
     * Sets gross_earnings
     *
     * @param float $gross_earnings
     *
     * @return $this
     */
    public function setGrossEarnings($gross_earnings)
    {
        $this->container['gross_earnings'] = $gross_earnings;

        return $this;
    }

    /**
     * Gets net_earnings
     *
     * @return float
     */
    public function getNetEarnings()
    {
        return $this->container['net_earnings'];
    }

    /**
     * Sets net_earnings
     *
     * @param float $net_earnings
     *
     * @return $this
     */
    public function setNetEarnings($net_earnings)
    {
        $this->container['net_earnings'] = $net_earnings;

        return $this;
    }

    /**
     * Gets pre_tax_deduction_amount
     *
     * @return float
     */
    public function getPreTaxDeductionAmount()
    {
        return $this->container['pre_tax_deduction_amount'];
    }

    /**
     * Sets pre_tax_deduction_amount
     *
     * @param float $pre_tax_deduction_amount
     *
     * @return $this
     */
    public function setPreTaxDeductionAmount($pre_tax_deduction_amount)
    {
        $this->container['pre_tax_deduction_amount'] = $pre_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets post_tax_deduction_amount
     *
     * @return float
     */
    public function getPostTaxDeductionAmount()
    {
        return $this->container['post_tax_deduction_amount'];
    }

    /**
     * Sets post_tax_deduction_amount
     *
     * @param float $post_tax_deduction_amount
     *
     * @return $this
     */
    public function setPostTaxDeductionAmount($post_tax_deduction_amount)
    {
        $this->container['post_tax_deduction_amount'] = $post_tax_deduction_amount;

        return $this;
    }

    /**
     * Gets employer_contribution
     *
     * @return float
     */
    public function getEmployerContribution()
    {
        return $this->container['employer_contribution'];
    }

    /**
     * Sets employer_contribution
     *
     * @param float $employer_contribution
     *
     * @return $this
     */
    public function setEmployerContribution($employer_contribution)
    {
        $this->container['employer_contribution'] = $employer_contribution;

        return $this;
    }

    /**
     * Gets employee_expenses_total
     *
     * @return float
     */
    public function getEmployeeExpensesTotal()
    {
        return $this->container['employee_expenses_total'];
    }

    /**
     * Sets employee_expenses_total
     *
     * @param float $employee_expenses_total
     *
     * @return $this
     */
    public function setEmployeeExpensesTotal($employee_expenses_total)
    {
        $this->container['employee_expenses_total'] = $employee_expenses_total;

        return $this;
    }

    /**
     * Gets employer_liabilities_total
     *
     * @return float
     */
    public function getEmployerLiabilitiesTotal()
    {
        return $this->container['employer_liabilities_total'];
    }

    /**
     * Sets employer_liabilities_total
     *
     * @param float $employer_liabilities_total
     *
     * @return $this
     */
    public function setEmployerLiabilitiesTotal($employer_liabilities_total)
    {
        $this->container['employer_liabilities_total'] = $employer_liabilities_total;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
