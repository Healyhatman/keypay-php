<?php
/**
 * AuEmployeePayRateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * AuEmployeePayRateModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuEmployeePayRateModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuEmployeePayRateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_super_rate_override' => 'bool',
        'super_rate' => 'double',
        'pay_category_id' => 'int',
        'pay_category_name' => 'string',
        'is_primary_pay_category' => 'bool',
        'accrues_leave' => 'bool',
        'rate_unit' => 'string',
        'rate' => 'double',
        'calculated_rate' => 'double',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_super_rate_override' => null,
        'super_rate' => 'double',
        'pay_category_id' => 'int32',
        'pay_category_name' => null,
        'is_primary_pay_category' => null,
        'accrues_leave' => null,
        'rate_unit' => null,
        'rate' => 'double',
        'calculated_rate' => 'double',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_super_rate_override' => 'hasSuperRateOverride',
        'super_rate' => 'superRate',
        'pay_category_id' => 'payCategoryId',
        'pay_category_name' => 'payCategoryName',
        'is_primary_pay_category' => 'isPrimaryPayCategory',
        'accrues_leave' => 'accruesLeave',
        'rate_unit' => 'rateUnit',
        'rate' => 'rate',
        'calculated_rate' => 'calculatedRate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_super_rate_override' => 'setHasSuperRateOverride',
        'super_rate' => 'setSuperRate',
        'pay_category_id' => 'setPayCategoryId',
        'pay_category_name' => 'setPayCategoryName',
        'is_primary_pay_category' => 'setIsPrimaryPayCategory',
        'accrues_leave' => 'setAccruesLeave',
        'rate_unit' => 'setRateUnit',
        'rate' => 'setRate',
        'calculated_rate' => 'setCalculatedRate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_super_rate_override' => 'getHasSuperRateOverride',
        'super_rate' => 'getSuperRate',
        'pay_category_id' => 'getPayCategoryId',
        'pay_category_name' => 'getPayCategoryName',
        'is_primary_pay_category' => 'getIsPrimaryPayCategory',
        'accrues_leave' => 'getAccruesLeave',
        'rate_unit' => 'getRateUnit',
        'rate' => 'getRate',
        'calculated_rate' => 'getCalculatedRate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_super_rate_override'] = isset($data['has_super_rate_override']) ? $data['has_super_rate_override'] : null;
        $this->container['super_rate'] = isset($data['super_rate']) ? $data['super_rate'] : null;
        $this->container['pay_category_id'] = isset($data['pay_category_id']) ? $data['pay_category_id'] : null;
        $this->container['pay_category_name'] = isset($data['pay_category_name']) ? $data['pay_category_name'] : null;
        $this->container['is_primary_pay_category'] = isset($data['is_primary_pay_category']) ? $data['is_primary_pay_category'] : null;
        $this->container['accrues_leave'] = isset($data['accrues_leave']) ? $data['accrues_leave'] : null;
        $this->container['rate_unit'] = isset($data['rate_unit']) ? $data['rate_unit'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['calculated_rate'] = isset($data['calculated_rate']) ? $data['calculated_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets has_super_rate_override
     *
     * @return bool
     */
    public function getHasSuperRateOverride()
    {
        return $this->container['has_super_rate_override'];
    }

    /**
     * Sets has_super_rate_override
     *
     * @param bool $has_super_rate_override
     *
     * @return $this
     */
    public function setHasSuperRateOverride($has_super_rate_override)
    {
        $this->container['has_super_rate_override'] = $has_super_rate_override;

        return $this;
    }

    /**
     * Gets super_rate
     *
     * @return float
     */
    public function getSuperRate()
    {
        return $this->container['super_rate'];
    }

    /**
     * Sets super_rate
     *
     * @param float $super_rate
     *
     * @return $this
     */
    public function setSuperRate($super_rate)
    {
        $this->container['super_rate'] = $super_rate;

        return $this;
    }

    /**
     * Gets pay_category_id
     *
     * @return int
     */
    public function getPayCategoryId()
    {
        return $this->container['pay_category_id'];
    }

    /**
     * Sets pay_category_id
     *
     * @param int $pay_category_id
     *
     * @return $this
     */
    public function setPayCategoryId($pay_category_id)
    {
        $this->container['pay_category_id'] = $pay_category_id;

        return $this;
    }

    /**
     * Gets pay_category_name
     *
     * @return string
     */
    public function getPayCategoryName()
    {
        return $this->container['pay_category_name'];
    }

    /**
     * Sets pay_category_name
     *
     * @param string $pay_category_name
     *
     * @return $this
     */
    public function setPayCategoryName($pay_category_name)
    {
        $this->container['pay_category_name'] = $pay_category_name;

        return $this;
    }

    /**
     * Gets is_primary_pay_category
     *
     * @return bool
     */
    public function getIsPrimaryPayCategory()
    {
        return $this->container['is_primary_pay_category'];
    }

    /**
     * Sets is_primary_pay_category
     *
     * @param bool $is_primary_pay_category
     *
     * @return $this
     */
    public function setIsPrimaryPayCategory($is_primary_pay_category)
    {
        $this->container['is_primary_pay_category'] = $is_primary_pay_category;

        return $this;
    }

    /**
     * Gets accrues_leave
     *
     * @return bool
     */
    public function getAccruesLeave()
    {
        return $this->container['accrues_leave'];
    }

    /**
     * Sets accrues_leave
     *
     * @param bool $accrues_leave
     *
     * @return $this
     */
    public function setAccruesLeave($accrues_leave)
    {
        $this->container['accrues_leave'] = $accrues_leave;

        return $this;
    }

    /**
     * Gets rate_unit
     *
     * @return string
     */
    public function getRateUnit()
    {
        return $this->container['rate_unit'];
    }

    /**
     * Sets rate_unit
     *
     * @param string $rate_unit
     *
     * @return $this
     */
    public function setRateUnit($rate_unit)
    {
        $this->container['rate_unit'] = $rate_unit;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float $rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets calculated_rate
     *
     * @return float
     */
    public function getCalculatedRate()
    {
        return $this->container['calculated_rate'];
    }

    /**
     * Sets calculated_rate
     *
     * @param float $calculated_rate
     *
     * @return $this
     */
    public function setCalculatedRate($calculated_rate)
    {
        $this->container['calculated_rate'] = $calculated_rate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
