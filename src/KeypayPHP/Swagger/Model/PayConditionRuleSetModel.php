<?php
/**
 * PayConditionRuleSetModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: AU
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * PayConditionRuleSetModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayConditionRuleSetModel implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayConditionRuleSetModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'period_type' => 'string',
        'day_of_week_ending' => 'int',
        'day_of_month_ending' => 'int',
        'period_ending' => '\DateTime',
        'shift_consolidation_option' => 'string',
        'shift_consolidation_threshold' => 'string',
        'rules_json' => 'string',
        'disabled_rules' => 'string[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'description' => null,
        'period_type' => null,
        'day_of_week_ending' => 'int32',
        'day_of_month_ending' => 'int32',
        'period_ending' => 'date-time',
        'shift_consolidation_option' => null,
        'shift_consolidation_threshold' => null,
        'rules_json' => null,
        'disabled_rules' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'period_type' => 'periodType',
        'day_of_week_ending' => 'dayOfWeekEnding',
        'day_of_month_ending' => 'dayOfMonthEnding',
        'period_ending' => 'periodEnding',
        'shift_consolidation_option' => 'shiftConsolidationOption',
        'shift_consolidation_threshold' => 'shiftConsolidationThreshold',
        'rules_json' => 'rulesJson',
        'disabled_rules' => 'disabledRules',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'period_type' => 'setPeriodType',
        'day_of_week_ending' => 'setDayOfWeekEnding',
        'day_of_month_ending' => 'setDayOfMonthEnding',
        'period_ending' => 'setPeriodEnding',
        'shift_consolidation_option' => 'setShiftConsolidationOption',
        'shift_consolidation_threshold' => 'setShiftConsolidationThreshold',
        'rules_json' => 'setRulesJson',
        'disabled_rules' => 'setDisabledRules',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'period_type' => 'getPeriodType',
        'day_of_week_ending' => 'getDayOfWeekEnding',
        'day_of_month_ending' => 'getDayOfMonthEnding',
        'period_ending' => 'getPeriodEnding',
        'shift_consolidation_option' => 'getShiftConsolidationOption',
        'shift_consolidation_threshold' => 'getShiftConsolidationThreshold',
        'rules_json' => 'getRulesJson',
        'disabled_rules' => 'getDisabledRules',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const PERIOD_TYPE_WEEKLY = 'Weekly';
    public const PERIOD_TYPE_FORTNIGHTLY = 'Fortnightly';
    public const PERIOD_TYPE_MONTHLY = 'Monthly';
    public const PERIOD_TYPE_CALENDAR_MONTH = 'CalendarMonth';
    public const PERIOD_TYPE_FOUR_WEEKLY = 'FourWeekly';
    public const PERIOD_TYPE_SIX_WEEKLY = 'SixWeekly';
    public const PERIOD_TYPE_THREE_WEEKLY = 'ThreeWeekly';
    public const PERIOD_TYPE_EIGHT_WEEKLY = 'EightWeekly';
    public const SHIFT_CONSOLIDATION_OPTION_NONE = 'None';
    public const SHIFT_CONSOLIDATION_OPTION_DURATION = 'Duration';
    public const SHIFT_CONSOLIDATION_OPTION_SAME_DAY = 'SameDay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodTypeAllowableValues()
    {
        return [
            self::PERIOD_TYPE_WEEKLY,
            self::PERIOD_TYPE_FORTNIGHTLY,
            self::PERIOD_TYPE_MONTHLY,
            self::PERIOD_TYPE_CALENDAR_MONTH,
            self::PERIOD_TYPE_FOUR_WEEKLY,
            self::PERIOD_TYPE_SIX_WEEKLY,
            self::PERIOD_TYPE_THREE_WEEKLY,
            self::PERIOD_TYPE_EIGHT_WEEKLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShiftConsolidationOptionAllowableValues()
    {
        return [
            self::SHIFT_CONSOLIDATION_OPTION_NONE,
            self::SHIFT_CONSOLIDATION_OPTION_DURATION,
            self::SHIFT_CONSOLIDATION_OPTION_SAME_DAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['period_type'] = isset($data['period_type']) ? $data['period_type'] : null;
        $this->container['day_of_week_ending'] = isset($data['day_of_week_ending']) ? $data['day_of_week_ending'] : null;
        $this->container['day_of_month_ending'] = isset($data['day_of_month_ending']) ? $data['day_of_month_ending'] : null;
        $this->container['period_ending'] = isset($data['period_ending']) ? $data['period_ending'] : null;
        $this->container['shift_consolidation_option'] = isset($data['shift_consolidation_option']) ? $data['shift_consolidation_option'] : null;
        $this->container['shift_consolidation_threshold'] = isset($data['shift_consolidation_threshold']) ? $data['shift_consolidation_threshold'] : null;
        $this->container['rules_json'] = isset($data['rules_json']) ? $data['rules_json'] : null;
        $this->container['disabled_rules'] = isset($data['disabled_rules']) ? $data['disabled_rules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (! is_null($this->container['period_type']) && ! in_array($this->container['period_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'period_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShiftConsolidationOptionAllowableValues();
        if (! is_null($this->container['shift_consolidation_option']) && ! in_array($this->container['shift_consolidation_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shift_consolidation_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets period_type
     *
     * @return string
     */
    public function getPeriodType()
    {
        return $this->container['period_type'];
    }

    /**
     * Sets period_type
     *
     * @param string $period_type
     *
     * @return $this
     */
    public function setPeriodType($period_type)
    {
        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (! is_null($period_type) && ! in_array($period_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'period_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period_type'] = $period_type;

        return $this;
    }

    /**
     * Gets day_of_week_ending
     *
     * @return int
     */
    public function getDayOfWeekEnding()
    {
        return $this->container['day_of_week_ending'];
    }

    /**
     * Sets day_of_week_ending
     *
     * @param int $day_of_week_ending
     *
     * @return $this
     */
    public function setDayOfWeekEnding($day_of_week_ending)
    {
        $this->container['day_of_week_ending'] = $day_of_week_ending;

        return $this;
    }

    /**
     * Gets day_of_month_ending
     *
     * @return int
     */
    public function getDayOfMonthEnding()
    {
        return $this->container['day_of_month_ending'];
    }

    /**
     * Sets day_of_month_ending
     *
     * @param int $day_of_month_ending
     *
     * @return $this
     */
    public function setDayOfMonthEnding($day_of_month_ending)
    {
        $this->container['day_of_month_ending'] = $day_of_month_ending;

        return $this;
    }

    /**
     * Gets period_ending
     *
     * @return \DateTime
     */
    public function getPeriodEnding()
    {
        return $this->container['period_ending'];
    }

    /**
     * Sets period_ending
     *
     * @param \DateTime $period_ending
     *
     * @return $this
     */
    public function setPeriodEnding($period_ending)
    {
        $this->container['period_ending'] = $period_ending;

        return $this;
    }

    /**
     * Gets shift_consolidation_option
     *
     * @return string
     */
    public function getShiftConsolidationOption()
    {
        return $this->container['shift_consolidation_option'];
    }

    /**
     * Sets shift_consolidation_option
     *
     * @param string $shift_consolidation_option
     *
     * @return $this
     */
    public function setShiftConsolidationOption($shift_consolidation_option)
    {
        $allowedValues = $this->getShiftConsolidationOptionAllowableValues();
        if (! is_null($shift_consolidation_option) && ! in_array($shift_consolidation_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shift_consolidation_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shift_consolidation_option'] = $shift_consolidation_option;

        return $this;
    }

    /**
     * Gets shift_consolidation_threshold
     *
     * @return string
     */
    public function getShiftConsolidationThreshold()
    {
        return $this->container['shift_consolidation_threshold'];
    }

    /**
     * Sets shift_consolidation_threshold
     *
     * @param string $shift_consolidation_threshold
     *
     * @return $this
     */
    public function setShiftConsolidationThreshold($shift_consolidation_threshold)
    {
        $this->container['shift_consolidation_threshold'] = $shift_consolidation_threshold;

        return $this;
    }

    /**
     * Gets rules_json
     *
     * @return string
     */
    public function getRulesJson()
    {
        return $this->container['rules_json'];
    }

    /**
     * Sets rules_json
     *
     * @param string $rules_json
     *
     * @return $this
     */
    public function setRulesJson($rules_json)
    {
        $this->container['rules_json'] = $rules_json;

        return $this;
    }

    /**
     * Gets disabled_rules
     *
     * @return string[]
     */
    public function getDisabledRules()
    {
        return $this->container['disabled_rules'];
    }

    /**
     * Sets disabled_rules
     *
     * @param string[] $disabled_rules
     *
     * @return $this
     */
    public function setDisabledRules($disabled_rules)
    {
        $this->container['disabled_rules'] = $disabled_rules;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
